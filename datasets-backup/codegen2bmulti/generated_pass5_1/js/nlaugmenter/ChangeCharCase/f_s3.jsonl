{"task_id": "JavaScript/0", "prompt": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const thresholdSquared = threshold * threshold\n  const thresholdSquared2 = thresholdSquared * thresholdSquared\n  const thresholdSquared3 = thresholdSquared2 * thresholdSquared2\n  const thresholdSquared4 = thresholdSquared3 * thresholdSquared2\n  const thresholdSquared5 = thresholdSquared4 * thresholdSquared2\n  const thresholdSquared6 = thresholdSquared5 * thresholdSquared2\n  const thresholdSquared7 = thresholdSquared6 * thresholdSquared2\n  const thresholdSquared8 = thresholdSquared7 * thresholdSquared2\n  const thresholdSquared9 = thresholdSquared8 * thresholdSquared2\n  const thresholdSquared10 = thresholdSquared9 * thresholdSquared2\n  const thresholdSquared11 = thresholdSquared10 * thresholdSquared2\n  const thresholdSquared12 = thresholdSquared11 * thresholdSquared2\n  const thresholdSquared13 = thresholdSquared12 * thresholdSquared2\n  const thresholdSquared14 = thresholdSquared13 * thresholdSquared2\n  const thresholdSquared15 = thresholdSquared14 * thresholdSquared2\n  const thresholdSquared16 = thresholdSquared15 * thresholdSquared2\n  const thresholdSquared17 = thresholdSquared16 * thresholdSquared2\n  const thresholdSquared18 = thresholdSquared17 * thresholdSquared2\n  const thresholdSquared19 = thresholdSquared18 * thresholdSquared2\n  const thresholdSquared20 = thresholdSquared19 * thresholdSquared2\n  const thresholdSquared21 = thresholdSquared20 * thresholdSquared2\n  const thresholdSquared22 = thresholdSquared21 * thresholdSquared2\n  const thresholdSquared23 = thresholdSquared22 * thresholdSquared2\n  const thresholdSquared24 = thresholdSquared23 * thresholdSquared2\n  const thresholdSquared25 = thresholdSquared24 * thresholdSquared2\n  const thresholdSquared26 = thresholdSquared25 * thresholdSquared2\n  const thresholdSquared27 = thresholdSquared26 * thresholdSquared2\n  const thresholdSquared28 = thresholdSquared27 * thresholdSquared2\n  const thresholdSquared29 = thresholdSquared28 * thresholdSquared2\n  const thresholdSquared30 = thresholdSquared29 * thresholdSquared2\n  const thresholdSquared31 = thresholdSquared30 * thresholdSquared2\n  const thresholdSquared32 = thresholdSquared31 * thresholdSquared2\n  const thresholdSquared33 = thresholdSquared32 * thresholdSquared2\n  const thresholdSquared34 = thresholdSquared33 * thresholdSquared2\n  const thresholdSquared35 = thresholdSquared34 * thresholdSquared2\n  const thresholdSquared36 = thresholdSquared35 * thresholdSquared2\n  const thresholdSquared37 = thresholdSquared36 * thresholdSquared2\n  const thresholdSquared38 = thresholdSquared37 * thresholdSquared2\n  const thresholdSquared39 = thresholdSquared38 * thresholdSquared2\n  const thresholdSquared40 = thresholdSquared39 * thresholdSquared2\n  const thresholdSquared41 = thresholdSquared40 * thresholdSquared2\n  const thresholdSquared42 = thresholdSquared41 * thresholdSquared2\n  const thresholdSquared43 = thresholdSquared42 * thresholdSquared2\n  const thresholdSquared44 = thresholdSquared43 * thresholdSquared2\n  const thresholdSquared45 = thresholdSquared44 * thresholdSquared2\n  const thresholdSquared46 = thresholdSquared45 * thresholdSquared2\n  const thresholdSquared47 = thresholdSquared46 * thresholdSquared2\n  const thresholdSquared48 = thresholdSquared47 * thresholdSquared2\n  const thresholdSquared49 = thresholdSquared48 * thresholdSquared2\n  const thresholdSquared50 = thresholdSquared49 * thresholdSquared2\n  const thresholdSquared51 = thresholdSquared50 * thresholdSquared2\n  const thresholdSquared52 = thresholdSquared51 * thresholdSquared2\n  const thresholdSquared53 = thresholdSquared52 * thresholdSquared2\n  const thresholdSquared54 = thresholdSquared53 * thresholdSquared2\n  const thresholdSquared55 = thresholdSquared54 * thresholdSquared2\n  const thresholdSquared56 = thresholdSquared55 * thresholdSquared2\n  const thresholdSquared57 = thresholdSquared56 * thresholdSquared2\n  const thresholdSquared58 = thresholdSquared57 * thresholdSquared2\n  const thresholdSquared59 = thresholdSquared58 * thresholdSquared2\n  const thresholdSquared60 = thresholdSquared59 * thresholdSquared2\n  const thresholdSquared61 = thresholdSquared60 * thresholdSquared2\n  const thresholdSquared62 = thresholdSquared61 * thresholdSquared2\n  const thresholdSquared63 = thresholdSquared62 * thresholdSquared2\n  const thresholdSquared64 = thresholdSquared63 * thresholdSquared2\n  const thresholdSquared65 = thresholdSquared64 * thresholdSquared2\n  const thresholdSquared66 = thresholdSquared65 * thresholdSquared2\n  const thresholdSquared67 = thresholdSquared66 * thresholdSquared2\n  const thresholdSquared68 = thresholdSquared67 * thresholdSquared2\n  const thresholdSquared69 = thresholdSquared68 * thresholdSquared2\n  const thresholdSquared70 = thresholdSquared69 * thresholdSquared2\n  const thresholdSquared71 = thresholdSquared70 * thresholdSquared2\n  const thresholdSquared72 = thresholdSquared71 * thresholdSquared2\n  const thresholdSquared73 = thresholdSquared72 * thresholdSquared2\n  const thresholdSquared74 = thresholdSquared73 * thresholdSquared2\n  const thresholdSquared75 = thresholdSquared74 * thresholdSquared2\n  const thresholdSquared76 = thresholdSquared75 * thresholdSquared2\n  const thresholdSquared77 = thresholdSquared76 * thresholdSquared2\n  const thresholdSquared78 = thresholdSquared77 * thresholdSquared2\n  const thresholdSquared79 = thresholdSquared78 * thresholdSquared2\n  const thresholdSquared80 = thresholdSquared79 * thresholdSquared2\n  const thresholdSquared81 = thresholdSquared80 * thresholdSquared2\n  const thresholdSquared82 = thresholdSquared81 * thresholdSquared2\n  const thresholdSquared83 = thresholdSquared82 * thresholdSquared2\n  const thresholdSquared84 = thresholdSquared83 * thresholdSquared2\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_groups = [];\n  let paren_group = '';\n  let open_paren = 0;\n  let close_paren = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length < 2) {\n    return string;\n  }\n  const prefix = string.substring(0, 1);\n  const suffix = string.substring(string.length - 1, string.length);\n  const reversed = suffix.split('').reverse().join('');\n  return prefix + reversed + suffix;\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* test iF the string is a pal", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i = 0;\n  while (i < n) {\n    pile.push(i);\n    nextLevel = [];\n    while (i < n) {\n      nextLevel.push(i);\n      i++;\n    }\n    pile = pile.concat(nextLevel);\n  }\n  return pile;\n};\n\nconst test = () => {\n  console.log(makeAPile(3));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/[,\\s]+/);\n  return words;\n}\n\n// test\nconst test = wordsString(\"Hi, my name is John\");\nconsole.log(test);\n\n// test\nconst test2 = wordsString(\"One, two, three, four, five, six\");\nconsole.log(test2);\n\n// test\nconst test3 = wordsString(\"Hi, my name is John, one, two, three, four, five, six\");\nconsole.log(test3);\n\n// test\nconst test4 = wordsString(\"One, two, three, four, five, six, seven, eight, nine, ten\");\nconsole.log(test4);\n\n// test\nconst test5 = wordsString(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen\");\nconsole.log(test5);\n\n// test\nconst test6 = wordsString(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seven, fifty eight, fifty nine, sixty, sixty one, sixty two, sixty three, sixty four, sixty five, sixty six, sixty seven, sixty eight, sixty nine, seventy, seventy one, seventy two, seventy three, seventy four, seventy five, seventy six, seventy seven, seventy eight, seventy nine, eighty, eighty one, eighty two, eighty three, eighty four, eighty five, eighty six, eighty seven, eighty eight, eighty nine, ninety, ninety one, ninety two, ninety three, ninety four, ninety five, ninety six, ninety seven, ninety eight, ninety nine\");\nconsole.log(test6);\n\n// test\nconst test7 = wordsString(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seven, fifty eight, fifty nine, sixty, sixty one, sixty two, sixty three, sixty four, sixty five, sixty six, sixty seven, sixty eight, sixty nine, seventy, seventy one, seventy two, seventy three, seventy four, seventy five, seventy six, seventy seven, seventy eight, seventy nine, eighty, eighty one, eighty two, eighty three, eighty four, eighty five, eighty six, eighty seven, eighty eight, eighty nine, ninety, ninety one, ninety two, ninety three, ninety four, ninety five, ninety six, ninety seven, ninety eight, ninety nine\");\nconsole.log(test7);\n\n// test\nconst test8 = wordsString(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seven, fifty eight, fifty nine, sixty, sixty one, sixty two, sixty three, sixty four, sixty five, sixty six, sixty seven, sixty eight, sixty nine, seventy, seventy one, seventy two, seventy three, seventy four, seventy five, seventy six, seventy seven, seventy eight, seventy nine, eighty, eighty one, eighty two, eighty three, eighty four, eighty five, eighty six, eighty seven, eighty eight, eighty nine, ninety, ninety one, ninety two, ninety three, ninety four, ninety five, ninety six, ninety seven, ninety eight, ninety nine\");\nconsole.log(test8);\n\n// test\nconst test9 = wordsString(\"One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twenty one, twenty two, twenty three, twenty four, twenty five, twenty six, twenty seven, twenty eight, twenty nine, thirty, thirty one, thirty two, thirty three, thirty four, thirty five, thirty six, thirty seven, thirty eight, thirty nine, forty, forty one, forty two, forty three, forty four, forty five, forty six, forty seven, forty eight, forty nine, fifty, fifty one, fifty two, fifty three, fifty four, fifty five, fifty six, fifty seven, fifty eight, fifty nine, sixty, sixty one, sixty two, sixty three, sixty four, sixty five, sixty six, sixty seven, sixty eight, sixty nine, seventy, seventy one, seventy two, seventy three, seventy four, seventy five, seventy six, seventy seven, seventy eight, seventy nine, eighty, eighty one, eighty two, eighty three, eighty four, eighty five, eighty six, eighty seven, eighty eight, eighty nine, ninety, ninety one, ninety two, ninety three, ninety four, ninety five, ninety six, ninety seven, ninety eight, ninety nine\");\nconsole.log(test9);\n\n// test\nconst test10 = wordsString(\"One, two, three, four,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return x + y\n}\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {\n//   if (x > y) {\n//     return -1\n//   }\n//   return x + y\n// }\n\n// const chooseNum = (x, y) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg2 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg3 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg4 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg5 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg6 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg7 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg8 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg9 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg10 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg11 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg12 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg13 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg14 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg15 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg16 = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = 0; i < m; i++) {\n    sum += Math.floor(n / Math.pow(10, i));\n  }\n  return sum;\n};\n\nconst roundedAvg17 = (n, m) => {\n  if (n < m) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let currentDigit = x[i];\n    let isUnique = true;\n    for (let j = 0; j < result.length; j++) {\n      if (result[j] === currentDigit) {\n        isUnique = false;\n        break;\n      }\n    }\n    if (isUnique) {\n      result.push(currentDigit);\n    }\n  }\n  return result;\n};\n\nconst getDigit = (x) => {\n  return x % 10;\n};\n\nconst getDigitCount = (x) => {\n  return x.length;\n};\n\nconst getDigitSum = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum2 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum3 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum4 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum5 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum6 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum7 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum8 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum9 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum10 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum11 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum12 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum13 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum14 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum15 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum16 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum17 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum18 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum19 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum20 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum21 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum22 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum23 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum24 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum25 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum26 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum27 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum28 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum29 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum30 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum31 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum32 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum33 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum34 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum35 = (x) => {\n  return x.reduce((a, b) => a + b, 0);\n};\n\nconst getDigitSum36 = (x)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength6 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength7 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength8 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let digit = arr[i];\n    if (digit === 0) {\n      continue;\n    }\n    let index = Math.floor(digit / 10);\n    if (index < 1 || index > 9) {\n      continue;\n    }\n    result.push(digit);\n  }\n  return result;\n};\n\nconst byLength9 = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    const f = (n) => {\n      const f = (n) => {\n        const f = (n) => {\n          const f = (n) => {\n            const f = (n) => {\n              const f = (n) => {\n                const f = (n) => {\n                  const f = (n) => {\n                    const f = (n) => {\n                      const f = (n) => {\n                        const f = (n) => {\n                          const f = (n) => {\n                            const f = (n) => {\n                              const f = (n) => {\n                                const f = (n) => {\n                                  const f = (n) => {\n                                    const f = (n) => {\n                                      const f = (n) => {\n                                        const f = (n) => {\n                                          const f = (n) => {\n                                            const f = (n) => {\n                                              const f = (n) => {\n                                                const f = (n) => {\n                                                  const f = (n) => {\n                                                    const f = (n) => {\n                                                      const f = (n) => {\n                                                        const f = (n) => {\n                                                          const f = (n) => {\n                                                            const f = (n) => {\n                                                              const f = (n) => {\n                                                               const f = (n) => {\n                                                                const f = (n) => {\n                                                                }\n                                                               }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                                            }\n                                ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const [even, odd] = [...Array(n).keys()].map((i) => {\n    return i % 2 === 0? even : odd;\n  });\n  return [...even,...odd];\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nconst countNums20 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/109", "prompt": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2], ..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2],..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrLen = arr.length;\n  if (arrLen === 0) {\n    return false;\n  }\n  const arrMin = arr[0];\n  const arrMax = arr[arrLen - 1];\n  const arrMid = arr[Math.floor(arrLen / 2)];\n  const arrMidIndex = arr.indexOf(arrMid);\n  if (arrMidIndex === -1) {\n    return false;\n  }\n  const arrMinIndex = arr.indexOf(arrMin);\n  if (arrMinIndex === -1) {\n    return false;\n  }\n  const arrMaxIndex = arr.indexOf(arrMax);\n  if (arrMaxIndex === -1) {\n    return false;\n  }\n  if (arrMidIndex > arrMinIndex && arrMidIndex < arrMaxIndex) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n};\n\nconst stringToNumber = (str) => {\n  let result = 0;\n  for (let i = 0; i < str.length; i++) {\n    result += str[i] * Math.pow(2, i);\n  }\n  return result;\n};\n\nconst numberToString = (num) => {\n  let result = '';\n  for (let i = 0; i < num.length; i++) {\n    result += String.fromCharCode(num[i]);\n  }\n  return result;\n};\n\nconst binaryToNumber = (bin) => {\n  let result = 0;\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? 1 : 0;\n  }\n  return result;\n};\n\nconst numberToBinary = (num) => {\n  let result = '';\n  for (let i = 0; i < num.length; i++) {\n    result += (num[i] === 1)? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToString = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += String.fromCharCode(bin[i]);\n  }\n  return result;\n};\n\nconst stringToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += (str[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst stringToNumberAndBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += (str[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst numberToStringAndBinary = (num) => {\n  let result = '';\n  for (let i = 0; i < num.length; i++) {\n    result += (num[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToStringAndNumber = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndString = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToStringAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndStringAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndStringAndNumber = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToStringAndNumberAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToStringAndNumberAndString = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToStringAndNumberAndStringAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndStringAndNumberAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndStringAndNumberAndString = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n    result += (bin[i] === '1')? '1' : '0';\n  }\n  return result;\n};\n\nconst binaryToNumberAndStringAndNumberAndStringAndBinary = (bin) => {\n  let result = '';\n  for (let i = 0; i < bin.length; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/110", "prompt": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return \"NO\";\n  }\n  const res = [];\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i]!== lst2[i]) {\n      res.push(lst1[i]);\n      res.push(lst2[i]);\n    }\n  }\n  return res.join('');\n};\n\nconst test = () => {\n  const lst1 = [1, 2, 3, 4];\n  const lst2 = [1, 5, 3, 4];\n  console.log(exchange(lst1, lst2));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let count = 0;\n  let letter;\n  let i;\n  for (i = 0; i < letters.length; i++) {\n    letter = letters[i];\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n    count++;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete(s.substr(1), c);\n  const result2 = reverseDelete(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete2 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete2(s.substr(1), c);\n  const result2 = reverseDelete2(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete3 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete3(s.substr(1), c);\n  const result2 = reverseDelete3(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete4 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete4(s.substr(1), c);\n  const result2 = reverseDelete4(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete5 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete5(s.substr(1), c);\n  const result2 = reverseDelete5(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete6 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete6(s.substr(1), c);\n  const result2 = reverseDelete6(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete7 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete7(s.substr(1), c);\n  const result2 = reverseDelete7(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete8 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete8(s.substr(1), c);\n  const result2 = reverseDelete8(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete9 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete9(s.substr(1), c);\n  const result2 = reverseDelete9(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete10 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete10(s.substr(1), c);\n  const result2 = reverseDelete10(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete11 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete11(s.substr(1), c);\n  const result2 = reverseDelete11(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete12 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete12(s.substr(1), c);\n  const result2 = reverseDelete12(s.substr(0, s.length - 1), c);\n\n  return [result[0] + result2[1], result2[0] === c];\n};\n\nconst reverseDelete13 = (s, c) => {\n  if (s.length === 0) {\n    return [c, false];\n  }\n\n  const result = reverseDelete13(s.substr(1), c);\n  const result2 = reverseDelete13(s.substr(0, s.length - 1), c", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++;\n    }\n  }\n  return [...new Array(count).keys()].map((key) => {\n    return `the number of odd elements ${count}n the str${count}ng ${key} of the ${count}nput.`;\n  });\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (nums.length === 0) {\n    return 0;\n  }\n  let minSum = nums[0];\n  let minIndex = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      continue;\n    }\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  // grid is a 2D array\n  // capacity is a number\n  // return the number of filled buckets\n  //\n  // Time: O(n^2)\n  // Space: O(n)\n  //\n  // 1. sort the grid\n  // 2. for each row, find the first empty bucket\n  // 3. for each bucket, find the first empty bucket\n  // 4. for each bucket, find the first empty bucket\n  // 5. for each bucket, find the first empty bucket\n  // 6. for each bucket, find the first empty bucket\n  // 7. for each bucket, find the first empty bucket\n  // 8. for each bucket, find the first empty bucket\n  // 9. for each bucket, find the first empty bucket\n  // 10. for each bucket, find the first empty bucket\n  // 11. for each bucket, find the first empty bucket\n  // 12. for each bucket, find the first empty bucket\n  // 13. for each bucket, find the first empty bucket\n  // 14. for each bucket, find the first empty bucket\n  // 15. for each bucket, find the first empty bucket\n  // 16. for each bucket, find the first empty bucket\n  // 17. for each bucket, find the first empty bucket\n  // 18. for each bucket, find the first empty bucket\n  // 19. for each bucket, find the first empty bucket\n  // 20. for each bucket, find the first empty bucket\n  // 21. for each bucket, find the first empty bucket\n  // 22. for each bucket, find the first empty bucket\n  // 23. for each bucket, find the first empty bucket\n  // 24. for each bucket, find the first empty bucket\n  // 25. for each bucket, find the first empty bucket\n  // 26. for each bucket, find the first empty bucket\n  // 27. for each bucket, find the first empty bucket\n  // 28. for each bucket, find the first empty bucket\n  // 29. for each bucket, find the first empty bucket\n  // 30. for each bucket, find the first empty bucket\n  // 31. for each bucket, find the first empty bucket\n  // 32. for each bucket, find the first empty bucket\n  // 33. for each bucket, find the first empty bucket\n  // 34. for each bucket, find the first empty bucket\n  // 35. for each bucket, find the first empty bucket\n  // 36. for each bucket, find the first empty bucket\n  // 37. for each bucket, find the first empty bucket\n  // 38. for each bucket, find the first empty bucket\n  // 39. for each bucket, find the first empty bucket\n  // 40. for each bucket, find the first empty bucket\n  // 41. for each bucket, find the first empty bucket\n  // 42. for each bucket, find the first empty bucket\n  // 43. for each bucket, find the first empty bucket\n  // 44. for each bucket, find the first empty bucket\n  // 45. for each bucket, find the first empty bucket\n  // 46. for each bucket, find the first empty bucket\n  // 47. for each bucket, find the first empty bucket\n  // 48. for each bucket, find the first empty bucket\n  // 49. for each bucket, find the first empty bucket\n  // 50. for each bucket, find the first empty bucket\n  // 51. for each bucket, find the first empty bucket\n  // 52. for each bucket, find the first empty bucket\n  // 53. for each bucket, find the first empty bucket\n  // 54. for each bucket, find the first empty bucket\n  // 55. for each bucket, find the first empty bucket\n  // 56. for each bucket, find the first empty bucket\n  // 57. for each bucket, find the first empty bucket\n  // 58. for each bucket, find the first empty bucket\n  // 59. for each bucket, find the first empty bucket\n  // 60. for each bucket, find the first empty bucket\n  // 61. for each bucket, find the first empty bucket\n  // 62. for each bucket, find the first empty bucket\n  // 63. for each bucket, find the first empty bucket\n  // 64. for each bucket, find the first empty bucket\n  // 65. for each bucket, find the first empty bucket\n  // 66. for each bucket, find the first empty bucket\n  // 67. for each bucket, find the first empty bucket\n  // 68. for each bucket, find the first empty bucket\n  // 69. for each bucket, find the first empty bucket\n  // 70. for each bucket, find the first empty bucket\n  // 71. for each bucket, find the first empty bucket\n  // 72. for each bucket, find the first empty bucket\n  // 73. for each bucket, find the first empty bucket\n  // 74. for each bucket, find the first empty bucket\n  // 75. for each bucket, find the first empty bucket\n  // 76. for each bucket, find the first empty bucket\n  // 77. for each bucket, find the first empty bucket\n  // 78. for each bucket, find the first empty bucket\n  // 79", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let temp = arr.slice(0);\n  let sorted = arr.slice(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < temp.length) {\n    while (j < temp.length && temp[j] < temp[i]) {\n      j++;\n    }\n    if (j < temp.length) {\n      temp[i] = temp[j];\n      temp[j] = arr[i];\n      i++;\n      j++;\n    } else {\n      sorted[k] = arr[i];\n      k++;\n      i++;\n    }\n  }\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(/[\\s\\n]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length >= n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = selectWords;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const wordLength = word.length;\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceIndex2 = 0;\n  let minDistanceIndex3 = 0;\n  let minDistanceIndex4 = 0;\n  let minDistanceIndex5 = 0;\n  let minDistanceIndex6 = 0;\n  let minDistanceIndex7 = 0;\n  let minDistanceIndex8 = 0;\n  let minDistanceIndex9 = 0;\n  let minDistanceIndex10 = 0;\n  let minDistanceIndex11 = 0;\n  let minDistanceIndex12 = 0;\n  let minDistanceIndex13 = 0;\n  let minDistanceIndex14 = 0;\n  let minDistanceIndex15 = 0;\n  let minDistanceIndex16 = 0;\n  let minDistanceIndex17 = 0;\n  let minDistanceIndex18 = 0;\n  let minDistanceIndex19 = 0;\n  let minDistanceIndex20 = 0;\n  let minDistanceIndex21 = 0;\n  let minDistanceIndex22 = 0;\n  let minDistanceIndex23 = 0;\n  let minDistanceIndex24 = 0;\n  let minDistanceIndex25 = 0;\n  let minDistanceIndex26 = 0;\n  let minDistanceIndex27 = 0;\n  let minDistanceIndex28 = 0;\n  let minDistanceIndex29 = 0;\n  let minDistanceIndex30 = 0;\n  let minDistanceIndex31 = 0;\n  let minDistanceIndex32 = 0;\n  let minDistanceIndex33 = 0;\n  let minDistanceIndex34 = 0;\n  let minDistanceIndex35 = 0;\n  let minDistanceIndex36 = 0;\n  let minDistanceIndex37 = 0;\n  let minDistanceIndex38 = 0;\n  let minDistanceIndex39 = 0;\n  let minDistanceIndex40 = 0;\n  let minDistanceIndex41 = 0;\n  let minDistanceIndex42 = 0;\n  let minDistanceIndex43 = 0;\n  let minDistanceIndex44 = 0;\n  let minDistanceIndex45 = 0;\n  let minDistanceIndex46 = 0;\n  let minDistanceIndex47 = 0;\n  let minDistanceIndex48 = 0;\n  let minDistanceIndex49 = 0;\n  let minDistanceIndex50 = 0;\n  let minDistanceIndex51 = 0;\n  let minDistanceIndex52 = 0;\n  let minDistanceIndex53 = 0;\n  let minDistanceIndex54 = 0;\n  let minDistanceIndex55 = 0;\n  let minDistanceIndex56 = 0;\n  let minDistanceIndex57 = 0;\n  let minDistanceIndex58 = 0;\n  let minDistanceIndex59 = 0;\n  let minDistanceIndex60 = 0;\n  let minDistanceIndex61 = 0;\n  let minDistanceIndex62 = 0;\n  let minDistanceIndex63 = 0;\n  let minDistanceIndex64 = 0;\n  let minDistanceIndex65 = 0;\n  let minDistanceIndex66 = 0;\n  let minDistanceIndex67 = 0;\n  let minDistanceIndex68 = 0;\n  let minDistanceIndex69 = 0;\n  let minDistanceIndex70 = 0;\n  let minDistanceIndex71 = 0;\n  let minDistanceIndex72 = 0;\n  let minDistanceIndex73 = 0;\n  let minDistanceIndex74 = 0;\n  let minDistanceIndex75 = 0;\n  let minDistanceIndex76 = 0;\n  let minDistanceIndex77 = 0;\n  let minDistanceIndex78 = 0;\n  let minDistanceIndex79 = 0;\n  let minDistanceIndex80 = 0;\n  let minDistanceIndex81 = 0;\n  let minDistanceIndex82 = 0;\n  let minDistanceIndex83 = 0;\n  let minDistanceIndex84 = 0;\n  let minDistanceIndex85 = 0;\n  let minDistanceIndex86 = 0;\n  let minDistanceIndex87 = 0;\n  let minDistanceIndex88 = 0;\n  let minDistanceIndex89 = 0;\n  let minDistanceIndex90 = 0;\n  let minDistanceIndex91 = 0;\n  let minDistanceIndex92 = 0;\n  let minDistanceIndex93 = 0;\n  let minDistanceIndex94 = 0;\n  let minDistanceIndex95 = 0;\n  let minDistanceIndex96 = 0;\n  let minDistanceIndex97 = 0;\n  let minDistanceIndex98 = 0;\n  let minDistanceIndex99 = 0;\n  let minDistanceIndex100 = 0;\n  let minDistanceIndex101 = 0;\n  let minDistanceIndex102 = 0;\n  let minDistanceIndex103 = 0;\n  let minDistanceIndex104 = 0;\n  let minDistanceIndex105 = 0;\n  let minDistanceIndex106 = 0;\n  let minDistanceIndex107 = 0;\n  let minDistanceIndex108 = 0;\n  let minDistanceIndex109 = 0;\n  let minDistanceIndex110 = 0;\n  let minDistanceIndex111 = 0;\n  let minDistanceIndex112 = 0;\n  let minDistanceIndex113 = 0;\n  let minDistanceIndex114 = 0;\n  let minDistanceIndex115 = 0;\n  let minDistanceIndex116 = 0;\n  let minDistanceIndex117 = 0;\n  let minDistanceIndex118 = 0;\n  let minDistanceIndex119 = 0;\n  let minDistanceIndex120 = 0;\n  let minDistanceIndex121 = 0;\n  let minDistanceIndex122 = 0;\n  let minDistanceIndex123 = 0;\n  let minDistanceIndex124 = 0;\n  let minDistanceIndex125 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length;\n  if (len < 2) {\n    return 'No';\n  }\n  const last = lst[len - 1];\n  const first = lst[0];\n  if (last === '(' && first === ')') {\n    return 'Yes';\n  }\n  if (last === ')' && first === '(') {\n    return 'No';\n  }\n  return 'No';\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let maxLen = 0;\n  let maxStr = '';\n  for (let str of strings) {\n    if (str.length > maxLen) {\n      maxLen = str.length;\n      maxStr = str;\n    }\n  }\n  return maxStr;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLen = arr.length\n  if (arrLen < k) {\n    return []\n  }\n  const max = arr[0]\n  for (let i = 1; i < k; i++) {\n    max = Math.max(max, arr[i])\n  }\n  const result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i] === max? i : -1)\n  }\n  return result\n}\n\nmodule.exports = maximum\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = [];\n  let current = n;\n  while (current > 1) {\n    oddCollatz.push(current);\n    current = current / 2;\n  }\n  return oddCollatz;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  if (dateArray.length!== 3) {\n    return false;\n  }\n  const day = parseInt(dateArray[2], 10);\n  const month = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[0], 10);\n  const dayOfMonth = day;\n  const monthOfYear = month;\n  const yearOfMonth = year;\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (dayOfMonth < 1 || dayOfMonth > 31) {\n    return false;\n  }\n  if (monthOfYear < 1 || monthOfYear > 12) {\n    return false;\n  }\n  if (dayOfMonth > day) {\n    return false;\n  }\n  if (monthOfYear > month) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n  }\n  if (monthOfYear > monthOfYear) {\n    return false;\n  }\n  if (dayOfMonth > dayOfMonth) {\n    return false;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1, ... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let curr = \"\";\n  let prev = \"\";\n  let currIndex = 0;\n  let prevIndex = 0;\n  let currLength = 0;\n  let prevLength = 0;\n  let prevChar = \"\";\n  let currChar = \"\";\n  let prevCharIndex = 0;\n  let currCharIndex = 0;\n  let prevCharLength = 0;\n  let currCharLength = 0;\n  let prevCharChar = \"\";\n  let currCharChar = \"\";\n  let prevCharCharIndex = 0;\n  let currCharCharIndex = 0;\n  let prevCharCharLength = 0;\n  let currCharCharLength = 0;\n  let prevCharCharChar = \"\";\n  let currCharCharChar = \"\";\n  let prevCharCharCharIndex = 0;\n  let currCharCharCharIndex = 0;\n  let prevCharCharCharLength = 0;\n  let currCharCharCharLength = 0;\n  let prevCharCharCharChar = \"\";\n  let currCharCharCharChar = \"\";\n  let prevCharCharCharCharIndex = 0;\n  let currCharCharCharCharIndex = 0;\n  let prevCharCharCharCharLength = 0;\n  let currCharCharCharCharLength = 0;\n  let prevCharCharCharCharChar = \"\";\n  let currCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharIndex = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let currCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharLength = 0;\n  let prevCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let currCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharCharChar = \"\";\n  let prevCharCharCharCharCharCharCharCharChar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n\n  let prev = lst[0];\n  let i = 1;\n  while (i < lst.length) {\n    if (lst[i] < prev) {\n      return false;\n    }\n    prev = lst[i];\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval1.end < interval2.start) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  let start = Math.max(interval1.start, interval2.start)\n  let end = Math.min(interval1.end, interval2.end)\n  let length = end - start\n  if (length % 2 === 0) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n\n  return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2) return []\n  const len = grid.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = new Array(len)\n    for (let j = 0; j < len; j++) {\n      d[i][j] = Infinity\n    }\n  }\n  d[0][0] = 0\n  for (let i = 1; i < len; i++) {\n    d[i][0] = Infinity\n  }\n  for (let j = 1; j < len; j++) {\n    d[0][j] = Infinity\n  }\n  for (let i = 1; i < len; i++) {\n    for (let j = 1; j < len; j++) {\n      const v = grid[i][j]\n      if (d[i - 1][j] < d[i][j - 1] + v) {\n        d[i][j] = d[i - 1][j] + v\n      }\n    }\n  }\n  const ans = []\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      if (d[i][j] === k) ans.push(i)\n    }\n  }\n  return ans\n}\n\nmodule.exports = minPath\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === b) return a;\n  if (a < b) return greatestCommonDivisor(b, a);\n  if (a % b === 0) return b;\n  return greatestCommonDivisor(a, b % a);\n};\n\n/*\n  # greatestCommonDivisorOfTwoIntegers\n  # returns the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisorOfTwoIntegers(3, 5)\n  1\n  >>> greatestCommonDivisorOfTwoIntegers(25, 15)\n  5\n  */\nconst greatestCommonDivisorOfTwoIntegers = (a, b) => {\n  return greatestCommonDivisor(a, b);\n};\n\n/*\n  # greatestCommonDivisorOfThreeIntegers\n  # returns the greatest common divisor of three integers a, b, and c\n  >>> greatestCommonDivisorOfThreeIntegers(3, 5, 15)\n  5\n  */\nconst greatestCommonDivisorOfThreeIntegers = (a, b, c) => {\n  return greatestCommonDivisor(a, b, c);\n};\n\n/*\n  # greatestCommonDivisorOfFourIntegers\n  # returns the greatest common divisor of four integers a, b, c, and d\n  >>> greatestCommonDivisorOfFourIntegers(3, 5, 15, 25)\n  5\n  */\nconst greatestCommonDivisorOfFourIntegers = (a, b, c, d) => {\n  return greatestCommonDivisor(a, b, c, d);\n};\n\n/*\n  # greatestCommonDivisorOfFiveIntegers\n  # returns the greatest common divisor of five integers a, b, c, d, and e\n  >>> greatestCommonDivisorOfFiveIntegers(3, 5, 15, 25, 35)\n  5\n  */\nconst greatestCommonDivisorOfFiveIntegers = (a, b, c, d, e) => {\n  return greatestCommonDivisor(a, b, c, d, e);\n};\n\n/*\n  # greatestCommonDivisorOfSixIntegers\n  # returns the greatest common divisor of six integers a, b, c, d, e, and f\n  >>> greatestCommonDivisorOfSixIntegers(3, 5, 15, 25, 35, 45)\n  5\n  */\nconst greatestCommonDivisorOfSixIntegers = (a, b, c, d, e, f) => {\n  return greatestCommonDivisor(a, b, c, d, e, f);\n};\n\n/*\n  # greatestCommonDivisorOfSevenIntegers\n  # returns the greatest common divisor of seven integers a, b, c, d, e, f, and g\n  >>> greatestCommonDivisorOfSevenIntegers(3, 5, 15, 25, 35, 45, 55)\n  5\n  */\nconst greatestCommonDivisorOfSevenIntegers = (a, b, c, d, e, f, g) => {\n  return greatestCommonDivisor(a, b, c, d, e, f, g);\n};\n\n/*\n  # greatestCommonDivisorOfEightIntegers\n  # returns the greatest common divisor of eight integers a, b, c, d, e, f, g, and h\n  >>> greatestCommonDivisorOfEightIntegers(3, 5, 15, 25, 35, 45, 55, 65)\n  5\n  */\nconst greatestCommonDivisorOfEightIntegers = (a, b, c, d, e, f, g, h) => {\n  return greatestCommonDivisor(a, b, c, d, e, f, g, h);\n};\n\n/*\n  # greatestCommonDivisorOfNineIntegers\n  # returns the greatest common divisor of nine integers a, b, c, d, e, f, g, h, and i\n  >>> greatestCommonDivisorOfNineIntegers(3, 5, 15, 25, 35, 45, 55, 65, 75)\n  5\n  */\nconst greatestCommonDivisorOfNineIntegers = (a, b, c, d, e, f, g, h, i) => {\n  return greatestCommonDivisor(a, b, c, d, e, f, g, h, i);\n};\n\n/*\n  # greatestCommonDivisorOfTenIntegers\n  # returns the greatest common divisor of ten integers a, b, c, d, e, f, g, h, i, and j\n  >>> greatestCommonDivisorOfTenIntegers(3, 5, 15, 25, 35, 45, 55, 65, 75, 85)\n  5\n  */\nconst greatestCommonDivisorOfTenIntegers = (a, b, c, d, e, f, g, h, i, j) => {\n  return greatestCommonDivisor(a, b, c, d, e, f, g, h, i, j);\n};\n\n/*\n  # greatestCommonDivisorOfElevenIntegers\n  # returns the greatest common divisor of eleven integers a, b, c, d, e, f, g, h, i, and j\n  >>> greatestCommonDivisorOfElevenIntegers(3, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95)\n  5\n  */\nconst greatestCommonDivisorOfElevenIntegers = (a, b, c, d, e, f, g, h, i, j, k) => {\n  return greatestCommonDivisor(a, b, c, d, e, f, g, h, i, j, k);\n};\n\n/*\n  # greatestCommonDivisorOfTwelveIntegers\n  # returns the greatest common divisor of twelve integers a, b, c, d, e, f, g, h, i, and j\n  >>> greatestCommonDivisorOfTwelveIntegers(3, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105)\n  5\n  */\nconst greatestCommonDivisorOfTwelveIntegers = (a, b, c, d, e, f, g, h, i, j, k, l)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const result = [];\n  const prev = 1;\n  for (let i = 2; i <= n; i++) {\n    result.push(prev + (i / 2));\n    prev = result[i - 1];\n  }\n  return result;\n};\n\nconst test = () => {\n  const result = tri(3);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits2 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits3 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits4 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits5 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits6 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits7 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits8 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits9 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits10 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits11 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits12 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits13 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits14 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits15 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits16 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits17 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits18 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits19 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits20 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits21 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits22 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits23 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits24 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\nconst digits25 = (n) => {\n  if (n < 1) return 0\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  let isNested = false;\n  let squareBrackets = 0;\n  let squareBracket = 0;\n  let squareBracketCount = 0;\n  let squareBracketCount2 = 0;\n  let squareBracketCount3 = 0;\n  let squareBracketCount4 = 0;\n  let squareBracketCount5 = 0;\n  let squareBracketCount6 = 0;\n  let squareBracketCount7 = 0;\n  let squareBracketCount8 = 0;\n  let squareBracketCount9 = 0;\n  let squareBracketCount10 = 0;\n  let squareBracketCount11 = 0;\n  let squareBracketCount12 = 0;\n  let squareBracketCount13 = 0;\n  let squareBracketCount14 = 0;\n  let squareBracketCount15 = 0;\n  let squareBracketCount16 = 0;\n  let squareBracketCount17 = 0;\n  let squareBracketCount18 = 0;\n  let squareBracketCount19 = 0;\n  let squareBracketCount20 = 0;\n  let squareBracketCount21 = 0;\n  let squareBracketCount22 = 0;\n  let squareBracketCount23 = 0;\n  let squareBracketCount24 = 0;\n  let squareBracketCount25 = 0;\n  let squareBracketCount26 = 0;\n  let squareBracketCount27 = 0;\n  let squareBracketCount28 = 0;\n  let squareBracketCount29 = 0;\n  let squareBracketCount30 = 0;\n  let squareBracketCount31 = 0;\n  let squareBracketCount32 = 0;\n  let squareBracketCount33 = 0;\n  let squareBracketCount34 = 0;\n  let squareBracketCount35 = 0;\n  let squareBracketCount36 = 0;\n  let squareBracketCount37 = 0;\n  let squareBracketCount38 = 0;\n  let squareBracketCount39 = 0;\n  let squareBracketCount40 = 0;\n  let squareBracketCount41 = 0;\n  let squareBracketCount42 = 0;\n  let squareBracketCount43 = 0;\n  let squareBracketCount44 = 0;\n  let squareBracketCount45 = 0;\n  let squareBracketCount46 = 0;\n  let squareBracketCount47 = 0;\n  let squareBracketCount48 = 0;\n  let squareBracketCount49 = 0;\n  let squareBracketCount50 = 0;\n  let squareBracketCount51 = 0;\n  let squareBracketCount52 = 0;\n  let squareBracketCount53 = 0;\n  let squareBracketCount54 = 0;\n  let squareBracketCount55 = 0;\n  let squareBracketCount56 = 0;\n  let squareBracketCount57 = 0;\n  let squareBracketCount58 = 0;\n  let squareBracketCount59 = 0;\n  let squareBracketCount60 = 0;\n  let squareBracketCount61 = 0;\n  let squareBracketCount62 = 0;\n  let squareBracketCount63 = 0;\n  let squareBracketCount64 = 0;\n  let squareBracketCount65 = 0;\n  let squareBracketCount66 = 0;\n  let squareBracketCount67 = 0;\n  let squareBracketCount68 = 0;\n  let squareBracketCount69 = 0;\n  let squareBracketCount70 = 0;\n  let squareBracketCount71 = 0;\n  let squareBracketCount72 = 0;\n  let squareBracketCount73 = 0;\n  let squareBracketCount74 = 0;\n  let squareBracketCount75 = 0;\n  let squareBracketCount76 = 0;\n  let squareBracketCount77 = 0;\n  let squareBracketCount78 = 0;\n  let squareBracketCount79 = 0;\n  let squareBracketCount80 = 0;\n  let squareBracketCount81 = 0;\n  let squareBracketCount82 = 0;\n  let squareBracketCount83 = 0;\n  let squareBracketCount84 = 0;\n  let squareBracketCount85 = 0;\n  let squareBracketCount86 = 0;\n  let squareBracketCount87 = 0;\n  let squareBracketCount88 = 0;\n  let squareBracketCount89 = 0;\n  let squareBracketCount90 = 0;\n  let squareBracketCount91 = 0;\n  let squareBracketCount92 = 0;\n  let squareBracketCount93 = 0;\n  let squareBracketCount94 = 0;\n  let squareBracketCount95 = 0;\n  let squareBracketCount96 = 0;\n  let squareBracketCount97 = 0;\n  let squareBracketCount98 = 0;\n  let squareBracketCount99 = 0;\n  let squareBracketCount100 = 0;\n  let squareBracketCount101 = 0;\n  let squareBracketCount102 = 0;\n  let squareBracketCount103 = 0;\n  let squareBracketCount104 = 0;\n  let squareBracketCount105 = 0;\n  let squareBracketCount106 = 0;\n  let squareBracketCount107 = 0;\n  let squareBracketCount108 = 0;\n  let squareBracketCount109 = 0;\n  let squareBracketCount110 = 0;\n  let squareBracketCount111 = 0;\n  let squareBracketCount112 = 0;\n  let squareBracketCount113 = 0;\n  let squareBracketCount114 = 0;\n  let squareBracketCount115 = 0;\n  let squareBracketCount116 = 0;\n  let squareBracketCount117 = 0;\n  let squareBracketCount118 = 0;\n  let squareBracketCount119 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n}\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n\n  const lastChar = txt[txt.length - 1];\n  const isLetter = /[a-zA-Z]/.test(lastChar);\n\n  return isLetter;\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let arrLen = arr.length;\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n\n  const max = lst[0];\n  const min = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n\n  return (max, min);\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n  if (a == null || b == null) {\n    return null;\n  }\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    return a.localeCompare(b);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\") {\n    return a - b;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\") {\n    return parseFloat(a) - b;\n  }\n  if (typeof a == \"number\" && typeof b == \"string\") {\n    return parseFloat(b) - a;\n  }\n  return null;\n};\n\nconst compareTwo = (a, b) => {\n  if (a == null || b == null) {\n    return null;\n  }\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    return a.localeCompare(b);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\") {\n    return a - b;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\") {\n    return parseFloat(a) - b;\n  }\n  if (typeof a == \"number\" && typeof b == \"string\") {\n    return parseFloat(b) - a;\n  }\n  return null;\n};\n\nconst compareThree = (a, b, c) => {\n  if (a == null || b == null || c == null) {\n    return null;\n  }\n  if (typeof a == \"string\" && typeof b == \"string\" && typeof c == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(c);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"number\") {\n    return a - b - c;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"number\") {\n    return parseFloat(a) - b - c;\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"string\") {\n    return parseFloat(b) - a - c;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(c);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"string\") {\n    return parseFloat(b) - a - c;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(c);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"string\") {\n    return parseFloat(b) - a - c;\n  }\n  return null;\n};\n\nconst compareFour = (a, b, c, d) => {\n  if (a == null || b == null || c == null || d == null) {\n    return null;\n  }\n  if (typeof a == \"string\" && typeof b == \"string\" && typeof c == \"string\" && typeof d == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(d) - d.localeCompare(c);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"number\" && typeof d == \"number\") {\n    return a - b - c - d;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"number\" && typeof d == \"number\") {\n    return a.localeCompare(b) - c - d;\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"number\" && typeof d == \"string\") {\n    return a - b - c - d;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"number\" && typeof d == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(d) - d.localeCompare(c);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"string\" && typeof d == \"string\") {\n    return a - b - c - d;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"string\" && typeof d == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(d) - d.localeCompare(c);\n  }\n  if (typeof a == \"number\" && typeof b == \"number\" && typeof c == \"string\" && typeof d == \"string\") {\n    return a - b - c - d;\n  }\n  if (typeof a == \"string\" && typeof b == \"number\" && typeof c == \"string\" && typeof d == \"string\") {\n    return a.localeCompare(b) - c.localeCompare(d) - d.localeCompare(c);\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isEqualToSumOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isEqualToSumEvenOrOdd = (n) => {\n  return isEqualToSumEven(n) || isEqualToSumOdd(n);\n};\n\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  return isEqualToSumEvenOrOdd(n) || isEqualToSumEvenOrOdd(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumEvenOrOddOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEven(n) || isEqualToSumEvenOrOddOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n) || isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEven(n);\n};\n\nconst isEqualToSumEvenOrOddOrEvenOrOddOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEvenOrEven = (n) => {\n  return isEqualToSumEvenOrOddOrEvenOrO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive_2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive_3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive_4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive_5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive_6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst factorial_recursive_7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\n/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/14", "prompt": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = '';\n  let currentString = '';\n  let currentIndex = 0;\n\n  while (currentIndex < string.length) {\n    currentPrefix = currentPrefix + string[currentIndex];\n    currentString = string.substring(currentIndex + 1);\n    if (currentString.length === 0) {\n      prefixes.push(currentPrefix);\n      currentPrefix = '';\n    }\n    currentIndex = currentIndex + 1;\n  }\n  return prefixes;\n};\n\n/**\n  * returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  * @param {string} string\n  * @returns {string}\n  */\nconst longestPrefix = (string) => {\n  let longestPrefix = '';\n  let currentPrefix = '';\n  let currentString = '';\n  let currentIndex = 0;\n\n  while (currentIndex < string.length) {\n    currentPrefix = currentPrefix + string[currentIndex];\n    currentString = string.substring(currentIndex + 1);\n    if (currentString.length === 0) {\n      if (currentPrefix.length > longestPrefix.length) {\n        longestPrefix = currentPrefix;\n      }\n      currentPrefix = '';\n    }\n    currentIndex = currentIndex + 1;\n  }\n  return longestPrefix;\n};\n\nmodule.exports = {\n  allPrefixes,\n  longestPrefix\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/[ ]{2,}/g, '_');\n  return result;\n};\n\nconst getFileName = (filePath) => {\n  return filePath.split('/').pop().split('.').shift();\n};\n\nconst getFileExtension = (filePath) => {\n  return filePath.split('.').pop();\n};\n\nconst getFilePath = (fileName) => {\n  return `${__dirname}passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_check = file_name.toLowerCase();\n  const file_name_check_length = file_name_check.length;\n  const file_name_check_characters = file_name_check.match(/[a-z0-9]+/gi);\n  const file_name_check_dot_character = file_name_check.match(/\\./gi);\n  const file_name_check_dot_length = file_name_check_dot_character.length;\n  const file_name_check_dot_characters = file_name_check_dot_character.match(/\\./gi);\n  const file_name_check_dot_dot_length = file_name_check_dot_characters.length;\n  const file_name_check_dot_dot_characters = file_name_check_dot_characters.match(/\\./gi);\n  const file_name_check_dot_dot_dot_length = file_name_check_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_characters.length;\n  const file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length = file_name", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares21 = (l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n  if (x === \"0\") {\n    return \"0\";\n  }\n  if (x === \"1\") {\n    return \"1\";\n  }\n  if (x === \"2\") {\n    return \"2\";\n  }\n  if (x === \"3\") {\n    return \"3\";\n  }\n  if (x === \"4\") {\n    return \"4\";\n  }\n  if (x === \"5\") {\n    return \"5\";\n  }\n  if (x === \"6\") {\n    return \"6\";\n  }\n  if (x === \"7\") {\n    return \"7\";\n  }\n  if (x === \"8\") {\n    return \"8\";\n  }\n  if (x === \"9\") {\n    return \"9\";\n  }\n  if (x === \"10\") {\n    return \"10\";\n  }\n  if (x === \"11\") {\n    return \"11\";\n  }\n  if (x === \"12\") {\n    return \"12\";\n  }\n  if (x === \"13\") {\n    return \"13\";\n  }\n  if (x === \"14\") {\n    return \"14\";\n  }\n  if (x === \"15\") {\n    return \"15\";\n  }\n  if (x === \"16\") {\n    return \"16\";\n  }\n  if (x === \"17\") {\n    return \"17\";\n  }\n  if (x === \"18\") {\n    return \"18\";\n  }\n  if (x === \"19\") {\n    return \"19\";\n  }\n  if (x === \"20\") {\n    return \"20\";\n  }\n  if (x === \"21\") {\n    return \"21\";\n  }\n  if (x === \"22\") {\n    return \"22\";\n  }\n  if (x === \"23\") {\n    return \"23\";\n  }\n  if (x === \"24\") {\n    return \"24\";\n  }\n  if (x === \"25\") {\n    return \"25\";\n  }\n  if (x === \"26\") {\n    return \"26\";\n  }\n  if (x === \"27\") {\n    return \"27\";\n  }\n  if (x === \"28\") {\n    return \"28\";\n  }\n  if (x === \"29\") {\n    return \"29\";\n  }\n  if (x === \"30\") {\n    return \"30\";\n  }\n  if (x === \"31\") {\n    return \"31\";\n  }\n  if (x === \"32\") {\n    return \"32\";\n  }\n  if (x === \"33\") {\n    return \"33\";\n  }\n  if (x === \"34\") {\n    return \"34\";\n  }\n  if (x === \"35\") {\n    return \"35\";\n  }\n  if (x === \"36\") {\n    return \"36\";\n  }\n  if (x === \"37\") {\n    return \"37\";\n  }\n  if (x === \"38\") {\n    return \"38\";\n  }\n  if (x === \"39\") {\n    return \"39\";\n  }\n  if (x === \"40\") {\n    return \"40\";\n  }\n  if (x === \"41\") {\n    return \"41\";\n  }\n  if (x === \"42\") {\n    return \"42\";\n  }\n  if (x === \"43\") {\n    return \"43\";\n  }\n  if (x === \"44\") {\n    return \"44\";\n  }\n  if (x === \"45\") {\n    return \"45\";\n  }\n  if (x === \"46\") {\n    return \"46\";\n  }\n  if (x === \"47\") {\n    return \"47\";\n  }\n  if (x === \"48\") {\n    return \"48\";\n  }\n  if (x === \"49\") {\n    return \"49\";\n  }\n  if (x === \"50\") {\n    return \"50\";\n  }\n  if (x === \"51\") {\n    return \"51\";\n  }\n  if (x === \"52\") {\n    return \"52\";\n  }\n  if (x === \"53\") {\n    return \"53\";\n  }\n  if (x === \"54\") {\n    return \"54\";\n  }\n  if (x === \"55\") {\n    return \"55\";\n  }\n  if (x === \"56\") {\n    return \"56\";\n  }\n  if (x === \"57\") {\n    return \"57\";\n  }\n  if (x === \"58\") {\n    return \"58\";\n  }\n  if (x === \"59\") {\n    return \"59\";\n  }\n  if (x === \"60\") {\n    return \"60\";\n  }\n  if (x === \"61\") {\n    return \"61\";\n  }\n  if (x === \"62\") {\n    return \"62\";\n  }\n  if (x === \"63\") {\n    return \"63\";\n  }\n  if (x === \"64\") {\n    return \"64\";\n  }\n  if (x === \"65\") {\n    return \"65\";\n  }\n  if (x === \"66\") {\n    return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints2 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints3 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints4 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints5 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints6 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints7 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints8 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints9 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints10 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints11 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints12 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints13 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints14 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints15 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints16 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints17 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints18 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints19 = (nums) => {\n  if (nums.length === 0) {\n    return [];\n  }\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num, index) => nums[index]);\n};\n\nconst orderByPoints20 = (nums) => {\n  if (nums.length === 0) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.filter(num => num > 10 && num < 100);\n  return result.length;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of all \n  the numbers in the array.\n  For example:\n  specialSum([15, -73, 14, -15]) => -2\n  specialSum([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialSum = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((sum, num) => sum + num, 0);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the product of all \n  the numbers in the array.\n  For example:\n  specialProduct([15, -73, 14, -15]) => -2\n  specialProduct([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialProduct = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((sum, num) => sum * num, 1);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the average of all \n  the numbers in the array.\n  For example:\n  specialAverage([15, -73, 14, -15]) => -2\n  specialAverage([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialAverage = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((sum, num) => sum + num, 0) / nums.length;\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the median of all \n  the numbers in the array.\n  For example:\n  specialMedian([15, -73, 14, -15]) => -2\n  specialMedian([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMedian = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.sort((a, b) => a - b).length % 2? arr[(arr.length / 2) - 1] : arr[(arr.length / 2)];\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all \n  the numbers in the array.\n  For example:\n  specialMode([15, -73, 14, -15]) => -2\n  specialMode([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMode = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((arr, num) => arr.includes(num)? arr : arr.concat(num), []);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all \n  the numbers in the array.\n  For example:\n  specialMode([15, -73, 14, -15]) => -2\n  specialMode([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMode = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((arr, num) => arr.includes(num)? arr : arr.concat(num), []);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all \n  the numbers in the array.\n  For example:\n  specialMode([15, -73, 14, -15]) => -2\n  specialMode([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMode = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((arr, num) => arr.includes(num)? arr : arr.concat(num), []);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all \n  the numbers in the array.\n  For example:\n  specialMode([15, -73, 14, -15]) => -2\n  specialMode([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMode = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((arr, num) => arr.includes(num)? arr : arr.concat(num), []);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all \n  the numbers in the array.\n  For example:\n  specialMode([15, -73, 14, -15]) => -2\n  specialMode([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst specialMode = (nums) => {\n  const arr = nums.map(num => parseInt(num, 10));\n  const result = arr.reduce((arr, num) => arr.includes(num)? arr : arr.concat(num), []);\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the mode of all \n  the numbers in the array.\n  For example:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const result = 0;\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 3 * n) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = []\n  let planet1Name = planet1.toUpperCase()\n  let planet2Name = planet2.toUpperCase()\n  let planet1NameLength = planet1Name.length\n  let planet2NameLength = planet2Name.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = [];\n  let list = lst;\n  let len = list.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && list[j] < list[j + 1]) {\n      j++;\n    }\n    sortedList.push(list.slice(i, j));\n    i = j;\n  }\n  return sortedList;\n};\n\nconst sortedList = (lst) => {\n  let sortedList = [];\n  let list = lst;\n  let len = list.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && list[j] < list[j + 1]) {\n      j++;\n    }\n    sortedList.push(list.slice(i, j));\n    i = j;\n  }\n  return sortedList;\n};\n\nconst list_sort = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList;\n};\n\nconst list_sort_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.reverse();\n};\n\nconst list_sort_reverse_by_length = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return a.length - b.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(lst);\n  return sortedList.sort((a, b) => {\n    return b.length - a.length;\n  });\n};\n\nconst list_sort_reverse_by_length_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = sortedListSum(l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\nexport default stringSequence\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  } else if (n === 1) {\n    return y;\n  } else {\n    return xOrY(n - 1, x, y);\n  }\n};\n\nconst main = () => {\n  console.log(xOrY(3, 7, 34));\n  console.log(xOrY(3, 15, 8));\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n// TEST\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\nconsole.log(doubleTheDifference([]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < game.length && j < guess.length) {\n    if (game[i] === guess[j]) {\n      result++;\n      i++;\n      j++;\n    } else if (game[i] < guess[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let extension_name_length = 0;\n  let extension_name_index = 0;\n  let extension_name_index_length = 0;\n  let extension_name_index_index = 0;\n  let extension_name_index_index_length = 0;\n  let extension_name_index_index_index = 0;\n  let extension_name_index_index_index_length = 0;\n  let extension_name_index_index_index_index = 0;\n  let extension_name_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n  if (a.length!= b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!= b[i]) return false;\n  }\n  return true;\n};\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = [\n    '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX', 'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII', 'XXXVIII', 'XXXIX', 'XL', 'XLI', 'XLV', 'XLVI', 'L', 'LI', 'LV', 'LVI', 'LI', 'LII', 'LIII', 'LIV', 'LV', 'LX', 'LXI', 'LXII', 'LXIII', 'LXIV', 'LXV', 'LXVI', 'LXVII', 'LXVIII', 'LXIX', 'LXX', 'LXXI', 'LXXII', 'LXXIII', 'LXXIV', 'LXXV', 'LXXVI', 'LXXVII', 'LXXVIII', 'LXXIX', 'LXXX', 'LXXXI', 'LXXXII', 'LXXXIII', 'LXXXIV', 'LXXXV', 'LXXXVI', 'LXXXVII', 'LXXXVIII', 'LXXXIX', 'XC', 'XCI', 'XCII', 'XCIII', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CXX', 'CXXI', 'CXXII', 'CXXIII', 'CXXIV', 'CXXV', 'CXXVI', 'CXXVII', 'CXXVIII', 'CXXIX', 'CXXX', 'CXXXI', 'CXXXII', 'CXXXIII', 'CXXXIV', 'CXXXV', 'CXXXVI', 'CXXXVII', 'CXXXVIII', 'CXXXIX', 'CXL', 'CXLI', 'CXLII', 'CXLIII', 'CXLIV', 'CXLV', 'CXLVI', 'CXLVII', 'CXLVIII', 'CXLIX', 'CL', 'CLI', 'CLII', 'CLIII', 'CLIV', 'CLV', 'CLVI', 'CLVII', 'CLVIII', 'CLIX', 'CLXX', 'CLXXI', 'CLXXII', 'CLXXIII', 'CLXXIV', 'CLXXV', 'CLXXVI', 'CLXXVII', 'CLXXVIII', 'CLXXIX', 'CLXXX', 'CLXXXI', 'CLXXXII', 'CLXXXIII', 'CLXXXIV', 'CLXXXV', 'CLXXXVI', 'CLXXXVII', 'CLXXXVIII', 'CLXXXIX', 'XC', 'XCI', 'XCII', 'XCIII', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CXX', 'CXXI', 'CXXII', 'CXXIII', 'CXXIV', 'CXXV', 'CXXVI', 'CXXVII', 'CXXVIII', 'CXXIX', 'CXXX', 'CXXXI', 'CXXXII', 'CXXXIII', 'CXXXIV', 'CXXXV', 'CXXXVI', 'CXXXVII', 'CXXXVIII', 'CXXXIX', 'XC', 'XCI', 'XCII', 'XCIII', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CXX', 'CXXI', 'CXXII', 'CXXIII', 'CXXIV', 'CXXV', 'CXXVI', 'CXXVII', 'CXXVIII', 'CXXIX', 'CXXX', 'CXXXI', 'CXXXII', 'CXXXIII', 'CXXXIV', 'CXXXV', 'CXXXVI', 'CXXXVII', 'CXXXVIII', 'CXXXIX', 'XC', 'XCI', 'XCII', 'XCIII', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CXX', 'CXXI', 'CXXII', 'CXXIII', 'CXXIV', 'CXXV', 'CXXVI', 'CXXVII', 'CXXVIII', 'CXXIX', 'CXXX', 'CXXXI', 'CXXXII', 'CXXXIII', 'CXXXIV', 'CXXXV', 'CXXXVI', 'CXXXVII', 'CXXXVIII', 'CXXXIX', 'XC', 'XCI', 'XCII', 'XCIII', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CXX', 'CXXI', 'CXXII', 'CXXIII', 'CXXIV', 'CXXV', 'CXXVI', 'CXXVII', 'CXXVIII', 'CXXIX', 'CXXX', 'CXXXI', 'CXXXII', 'CXXXIII', 'CXXXIV', 'CXXXV', 'CXXXVI', 'CXXXVII', 'CXXXVIII', 'CXXXIX', 'XC', 'XCI', 'XCII', 'XCIII', 'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CXX', 'CXXI', 'CXXII', 'CXXIII', 'CXXIV', 'C", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c);\n};\n\nconst isRightAngleTriangle2 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle3 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle4 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle5 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle6 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle7 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle8 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle9 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle10 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle11 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle12 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle13 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle14 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle15 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle16 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle17 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle18 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle19 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle20 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle21 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle22 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle23 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle24 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle25 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle26 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle27 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle28 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle29 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle30 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle31 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle32 = (a, b, c) => {\n  return (a + b + c) === 2 * (a + b + c);\n};\n\nconst isRightAngleTriangle33 = (a, b,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/158", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMin = (words) => {\n  let min = words[0];\n  let minIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < min.length) {\n      min = words[i];\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMedian = (words) => {\n  let median = words[0];\n  let medianIndex = 0;\n  let count = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > median.length) {\n      median = words[i];\n      medianIndex = i;\n    }\n    if (words[i].length < median.length) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    return median;\n  } else {\n    return words[medianIndex];\n  }\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMedian(words) {\n  let median = words[0];\n  let medianIndex = 0;\n  let count = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > median.length) {\n      median = words[i];\n      medianIndex = i;\n    }\n    if (words[i].length < median.length) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    return median;\n  } else {\n    return words[medianIndex];\n  }\n};\n\n/*\n  WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMedian(words) {\n  let median = words[0];\n  let medianIndex = 0;\n  let count = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > median.length) {\n      median = words[i];\n      medianIndex = i;\n    }\n    if (words[i].length < median.length) {\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    return median;\n  }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > 1000 || number < 0 || need > 1000 || need < 0 || remaining > 1000 || remaining < 0) {\n    return \"Invalid input\";\n  }\n\n  let result = [];\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < number) {\n    if (need <= remaining) {\n      total += need;\n      count++;\n      remaining -= need;\n      i++;\n    } else {\n      total += remaining;\n      count++;\n      break;\n    }\n  }\n  result.push(total);\n  result.push(count);\n  return result;\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!== char.toUpperCase() && char!== char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === '#') {\n      result += s[i];\n      i++;\n      while (s[i]!== '@') {\n        result += s[i];\n        i++;\n      }\n      result += s[i];\n      i++;\n    } else if (s[i] === '@') {\n      result += s[i];\n      i++;\n      while (s[i]!== 'C') {\n        result += s[i];\n        i++;\n      }\n      result += s[i];\n      i++;\n    } else {\n      result += s[i];\n      i++;\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  console.log(solve(\"1234\"));\n  console.log(solve(\"ab\"));\n  console.log(solve(\"#a@C\"));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string, return its sha1 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha1('Hello world') == '2a5e4c5d8a0b9b9f8a6e6b5b1a9c3c5f8f9e'\n  */\nconst stringToSha1 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string, return its sha256 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string, return its sha512 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string, return its sha384 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha384('Hello world') == '38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b'\n  */\nconst stringToSha384 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('sha384');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/**\n  Given a string, return its sha3 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToSha3('Hello world') == 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n  */\nconst stringToSha3 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const hash = crypto.createHash('sha3');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512,\n  stringToSha384,\n  stringToSha3,\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return generateIntegers(b, a);\n  }\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_array = [];\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_array = note.split('|');\n    const note_length = note_array.length;\n    const note_array_array = [];\n    for (let j = 0; j < note_length; j++) {\n      const note_array_element = note_array[j];\n      const note_array_element_array = note_array_element.split('o');\n      const note_array_element_array_length = note_array_element_array.length;\n      const note_array_element_array_array = [];\n      for (let k = 0; k < note_array_element_array_length; k++) {\n        const note_array_element_array_element = note_array_element_array[k];\n        const note_array_element_array_element_array = note_array_element_array_element.split('o');\n        const note_array_element_array_element_array_length = note_array_element_array_element_array.length;\n        const note_array_element_array_element_array_array = [];\n        for (let l = 0; l < note_array_element_array_element_array_length; l++) {\n          const note_array_element_array_element_array_element = note_array_element_array_element_array[l];\n          const note_array_element_array_element_array_element_array = note_array_element_array_element_array_element.split('o');\n          const note_array_element_array_element_array_element_array_length = note_array_element_array_element_array_element_array.length;\n          const note_array_element_array_element_array_element_array_array = [];\n          for (let m = 0; m < note_array_element_array_element_array_element_array_length; m++) {\n            const note_array_element_array_element_array_element_array_element = note_array_element_array_element_array_element_array[m];\n            const note_array_element_array_element_array_element_array_element_array = note_array_element_array_element_array_element_array_element.split('o');\n            const note_array_element_array_element_array_element_array_element_array_length = note_array_element_array_element_array_element_array_element_array.length;\n            const note_array_element_array_element_array_element_array_element_array_array = [];\n            for (let n = 0; n < note_array_element_array_element_array_element_array_element_array_length; n++) {\n              const note_array_element_array_element_array_element_array_element_array_element = note_array_element_array_element_array_element_array_element_array[n];\n              const note_array_element_array_element_array_element_array_element_array_element_array = note_array_element_array_element_array_element_array_element_array_element.split('o');\n              const note_array_element_array_element_array_element_array_element_array_element_array_length = note_array_element_array_element_array_element_array_element_array_element_array.length;\n              const note_array_element_array_element_array_element_array_element_array_element_array_array = [];\n              for (let o = 0; o < note_array_element_array_element_array_element_array_element_array_length; o++) {\n                const note_array_element_array_element_array_element_array_element_array_element_array_element = note_array_element_array_element_array_element_array_element_array_element_array[o];\n                const note_array_element_array_element_array_element_array_element_array_element_array_element_array = note_array_element_array_element_array_element_array_element_array_element_array_element.split('o');\n                const note_array_element_array_element_array_element_array_element_array_element_array_element_array_length = note_array_element_array_element_array_element_array_element_array_element_array_element_array.length;\n                const note_array_element_array_element_array_element_array_element_array_element_array_element_array_array = [];\n                for (let p = 0; p < note_array_element_array_element_array_element_array_element_array_element_array_length; p++) {\n                  const note_array_element_array_element_array_element_array_element_array_element_array_element = note_array_element_array_element_array_element_array_element_array_element_array_element_array[p];\n                  const note_array_element_array_element_array_element_array_element_array_element_array_element_array = note_array_element_array_element_array_element_array_element_array_element_array_element_array_element.split('o');\n                  const note_array_element_array_element_array_element_array_element_array_element_array_element_array_array", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  let len = substring.length\n  while (index < len) {\n    if (string.indexOf(substring, index)!== -1) {\n      count++\n      index = index + len\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe', 'sIX', 'sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sortedNumbers = numbersArr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\n/*\n  input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArr = numbers.split('');\n  const sorted", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = Math.floor(number);\n  const decimalsString = decimals.toString();\n  const decimalsLength = decimalsString.length;\n  const decimalsLeft = decimalsLength - 1;\n  const decimalsRight = decimalsLength - 1;\n  const decimalsStringLeft = decimalsString.substring(0, decimalsLeft);\n  const decimalsStringRight = decimalsString.substring(decimalsRight);\n  const decimalsStringLeftRight = decimalsStringLeft + decimalsStringRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRightRight = decimalsStringLeftRight.substring(decimalsStringLeftRightLength - 1);\n  const decimalsStringLeftRight = decimalsStringLeftRightLeft + decimalsStringLeftRightRight;\n  const decimalsStringLeftRightLength = decimalsStringLeftRight.length;\n  const decimalsStringLeftRightLeft = decimalsStringLeftRight.substring(0, decimalsStringLeftRightLength - 1);\n  const decim", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/20", "prompt": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\nconst findClosestElements2 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\nconst findClosestElements3 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\nconst findClosestElements4 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\nconst findClosestElements5 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\nconst findClosestElements6 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\nconst findClosestElements7 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      result.push(min);\n      min = numbers[i];\n    }\n    if (numbers[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = numbers.reduce((max, number) => {\n    return Math.max(max, number);\n  }, 0);\n  const min = numbers.reduce((min, number) => {\n    return Math.min(min, number);\n  }, 0);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number * scale + min;\n  });\n};\n\n/**\n  * Given a list of numbers, apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const max = numbers.reduce((max, number) => {\n    return Math.max(max, number);\n  }, 0);\n  const min = numbers.reduce((min, number) => {\n    return Math.min(min, number);\n  }, 0);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number * scale + min;\n  });\n};\n\nexport default rescaleToUnit;\nexport { rescaleToUnit2 };\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => typeof value === 'object');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for null\n  >>> filterNulls(['a', 3.14, 5])\n  [null, null, null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for undefined\n  >>> filterUndefineds(['a', 3.14, 5])\n  [undefined, undefined, undefined]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [undefined, undefined, undefined]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => typeof value === 'undefined');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  [function(a: any, b: any, c: any) {}, function(a: any, b: any, c: any) {}, function(a: any, b: any, c: any) {}]\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [function(a: any, b: any, c: any) {}, function(a: any, b: any, c: any) {}, function(a: any, b: any, c: any) {}]\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => typeof value === 'function');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for nulls\n  >>> filterNulls(['a', 3.14, 5])\n  [null, null, null]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNulls = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for undefineds\n  >>> filterUndefineds(['a', 3.14, 5])\n  [undefined, undefined, undefined]\n  >>> filterUndefineds([1, 2, 3, 'abc', {}, []])\n  [undefined, undefined, undefined]\n  */\nconst filterUndefineds = (values) => {\n  return values.filter((value) => typeof value === 'undefined');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false, true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/*\n  filteR GiVEn list of anY pythoN values onLY for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}]\n  */\nconst filterObject", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === '') {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * @function strcmp\n  * @param {string} str1\n  * @param {string} str2\n  * @returns {number}\n  * @description Compare two strings\n  * @returN 0 if str1 == str2\n  * @returN 1 if str1 > str2\n  * @returN -1 if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN NaN if str1 > str2\n  * @returN NaN if str1 < str2\n  * @returN NaN if str1 == str2\n  * @returN Na", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return factors;\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/26", "prompt": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < numbers.length) {\n    if (j < k) {\n      result.push(numbers[k]);\n      k++;\n    } else {\n      result.push(numbers", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/27", "prompt": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  Converts a string to a camelCase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toCamelCase = (string) => {\n  return string.replace(/(?:^|[-_])(\\w)/g, (match, character) => {\n    return character.toUpperCase();\n  });\n};\n\n/**\n  Converts a string to a dash-separated string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toDashSeparated = (string) => {\n  return string.replace(/[A-Z]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  Converts a string to a lowercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  Converts a string to a snake_case string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toSnakeCase = (string) => {\n  return string.replace(/[A-Z]/g, (ch) => {\n    return ch.toLowerCase();\n  });\n};\n\n/**\n  Converts a string to a snake_case string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a titleCase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  Converts a string to a titleCase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toTitleCase2 = (string) => {\n  return string.replace(/[a-z]/g, (ch) => {\n    return ch.toUpperCase();\n  });\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase2 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase3 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase4 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase5 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase6 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase7 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase8 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase9 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase10 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase11 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase12 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a uppercase string.\n  @param {String} string The string to convert.\n  @returns {String} The converted string.\n  */\nconst toUpperCase13 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  Converts a string to a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, cur) => acc + cur, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn([], 'a')\n  []\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn2 = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn3 = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn4 = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn5 = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn6 = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns {Array}\n  * @description\n  * filterByPrefixAn INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefixAn(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixAn7 = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.map(s => s.startsWith(prefix)? s : null);\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * @param {Array} strings\n  * @param {string} prefix\n  * @returns", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/3", "prompt": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, op) => acc + op.amount, 0);\n  return balance < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/30", "prompt": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getSum([-1, 2, -4, 5, 6])\n  7\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst getSum = (l) => {\n  let ret = 0;\n  for (let i = 0; i < l.length; i++) {\n    ret += l[i];\n  }\n  return ret;\n};\n\n/*\n  >>> getMax([-1, 2, -4, 5, 6])\n  6\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMax = (l) => {\n  let ret = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > ret) {\n      ret = l[i];\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getMin([-1, 2, -4, 5, 6])\n  -4\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMin = (l) => {\n  let ret = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < ret) {\n      ret = l[i];\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -3\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian = (l) => {\n  let ret = l[0];\n  let len = l.length;\n  let mid = len / 2;\n  for (let i = 1; i < mid; i++) {\n    if (l[i] > ret) {\n      ret = l[i];\n    }\n  }\n  if (len % 2 === 0) {\n    return (ret + l[mid]) / 2;\n  } else {\n    return ret;\n  }\n};\n\n/*\n  >>> getMode([-1, 2, -4, 5, 6])\n  -1\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst getMode = (l) => {\n  let ret = l[0];\n  let len = l.length;\n  let mode = 0;\n  let mode_count = 0;\n  for (let i = 1; i < len; i++) {\n    if (l[i] === ret) {\n      mode_count++;\n    }\n  }\n  if (mode_count > 1) {\n    return -1;\n  } else {\n    for (let i = 1; i < len; i++) {\n      if (l[i] === ret) {\n        mode = i;\n      }\n    }\n    return mode;\n  }\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getSum,\n  getMax,\n  getMin,\n  getMedian,\n  getMode\n};\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime9 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime10 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime11 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime12 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime13 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime14 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime15 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime16 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const x = xs[0];\n  const y = xs[1];\n  const z = xs[2];\n  const w = xs[3];\n  const x2 = x * x;\n  const x3 = x2 * x;\n  const x4 = x3 * x;\n  const x5 = x4 * x;\n  const x6 = x5 * x;\n  const x7 = x6 * x;\n  const x8 = x7 * x;\n  const x9 = x8 * x;\n  const x10 = x9 * x;\n  const x11 = x10 * x;\n  const x12 = x11 * x;\n  const x13 = x12 * x;\n  const x14 = x13 * x;\n  const x15 = x14 * x;\n  const x16 = x15 * x;\n  const x17 = x16 * x;\n  const x18 = x17 * x;\n  const x19 = x18 * x;\n  const x20 = x19 * x;\n  const x21 = x20 * x;\n  const x22 = x21 * x;\n  const x23 = x22 * x;\n  const x24 = x23 * x;\n  const x25 = x24 * x;\n  const x26 = x25 * x;\n  const x27 = x26 * x;\n  const x28 = x27 * x;\n  const x29 = x28 * x;\n  const x30 = x29 * x;\n  const x31 = x30 * x;\n  const x32 = x31 * x;\n  const x33 = x32 * x;\n  const x34 = x33 * x;\n  const x35 = x34 * x;\n  const x36 = x35 * x;\n  const x37 = x36 * x;\n  const x38 = x37 * x;\n  const x39 = x38 * x;\n  const x40 = x39 * x;\n  const x41 = x40 * x;\n  const x42 = x41 * x;\n  const x43 = x42 * x;\n  const x44 = x43 * x;\n  const x45 = x44 * x;\n  const x46 = x45 * x;\n  const x47 = x46 * x;\n  const x48 = x47 * x;\n  const x49 = x48 * x;\n  const x50 = x49 * x;\n  const x51 = x50 * x;\n  const x52 = x51 * x;\n  const x53 = x52 * x;\n  const x54 = x53 * x;\n  const x55 = x54 * x;\n  const x56 = x55 * x;\n  const x57 = x56 * x;\n  const x58 = x57 * x;\n  const x59 = x58 * x;\n  const x60 = x59 * x;\n  const x61 = x60 * x;\n  const x62 = x61 * x;\n  const x63 = x62 * x;\n  const x64 = x63 * x;\n  const x65 = x64 * x;\n  const x66 = x65 * x;\n  const x67 = x66 * x;\n  const x68 = x67 * x;\n  const x69 = x68 * x;\n  const x70 = x69 * x;\n  const x71 = x70 * x;\n  const x72 = x71 * x;\n  const x73 = x72 * x;\n  const x74 = x73 * x;\n  const x75 = x74 * x;\n  const x76 = x75 * x;\n  const x77 = x76 * x;\n  const x78 = x77 * x;\n  const x79 = x78 * x;\n  const x80 = x79 * x;\n  const x81 = x80 * x;\n  const x82 = x81 * x;\n  const x83 = x82 * x;\n  const x84 = x83 * x;\n  const x85 = x84 * x;\n  const x86 = x85 * x;\n  const x87 = x86 * x;\n  const x88 = x87 * x;\n  const x89 = x88 * x;\n  const x90 = x89 * x;\n  const x91 = x90 * x;\n  const x92 = x91 * x;\n  const x93 = x92 * x;\n  const x94 = x93 * x;\n  const x95 = x94 * x;\n  const x96 = x95 * x;\n  const x97 = x96 * x;\n  const x98 = x97 * x;\n  const x99 = x98 * x;\n  const x100 = x99 * x;\n  const x101 = x100 * x;\n  const x102 = x101 * x;\n  const x103 = x102 * x;\n  const x104 = x103 * x;\n  const x105 = x104 * x;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const result = [];\n  const divisor = 3;\n  let i = 0;\n  while (i < l.length) {\n    const divisor = 3;\n    while (divisor < l.length) {\n      const divisor = 3;\n      while (divisor < l.length) {\n        const divisor = 3;\n        while (divisor < l.length) {\n          const divisor = 3;\n          while (divisor < l.length) {\n            const divisor = 3;\n            while (divisor < l.length) {\n              const divisor = 3;\n              while (divisor < l.length) {\n                const divisor = 3;\n                while (divisor < l.length) {\n                  const divisor = 3;\n                  while (divisor < l.length) {\n                    const divisor = 3;\n                    while (divisor < l.length) {\n                      const divisor = 3;\n                      while (divisor < l.length) {\n                        const divisor = 3;\n                        while (divisor < l.length) {\n                          const divisor = 3;\n                          while (divisor < l.length) {\n                            const divisor = 3;\n                            while (divisor < l.length) {\n                              const divisor = 3;\n                              while (divisor < l.length) {\n                                const divisor = 3;\n                                while (divisor < l.length) {\n                                  const divisor = 3;\n                                  while (divisor < l.length) {\n                                    const divisor = 3;\n                                    while (divisor < l.length) {\n                                      const divisor = 3;\n                                      while (divisor < l.length) {\n                                        const divisor = 3;\n                                        while (divisor < l.length) {\n                                          const divisor = 3;\n                                          while (divisor < l.length) {\n                                            const divisor = 3;\n                                            while (divisor < l.length) {\n                                              const divisor = 3;\n                                              while (divisor < l.length) {\n                                                const divisor = 3;\n                                                while (divisor < l.length) {\n                                                  const divisor = 3;\n                                                  while (divisor < l.length) {\n                                                    const divisor = 3;\n                                                    while (divisor < l.length) {\n                                                      const divisor = 3;\n                                                      while (divisor < l.length) {\n                                                        const divisor = 3;\n                                                        while (divisor < l.length) {\n                                                          const divisor = 3;\n                                                          while (divisor < l.length) {\n                                                            const divisor = 3;\n                                                            while (divisor < l.length) {\n                                                              const divisor = 3;\n                                                              while (divisor < l.length) {\n                                                                const divisor = 3;\n                                                                while (divisor < l.length) {\n                                                                  const divisor = 3;\n                                                                  while (divisor < l.length) {\n                                                                    const divisor = 3;\n                                                                    while (divisor < l.length) {\n                                                                      const divisor = 3;\n                                                                      while (divisor < l.length) {\n                                                                        const divisor = 3;\n                                                                        while (divisor < l.length) {\n                                                                          const divisor = 3;\n                                                                          while (divisor < l.length) {\n                                                                            const divisor = 3;\n                                                                            while (divisor < l.length) {\n                                                                              const divisor = 3;\n                                                                              while (divisor < l.length) {\n                                                                                const divisor = 3;\n                                                                                while (divisor < l.length) {\n                                                                                  const divisor = 3;\n                                                                                  while (divisor < l.length) {\n                                                                                    const divisor = 3;\n                                                                                    while (divisor < l.length) {\n                                                                                      const divisor = 3;\n                                                                                      while (divisor < l.length) {\n                                                                                        const divisor = 3;\n                                                                                        while (divisor < l.length) {\n                                                                                          const divisor = 3;\n                                                                                          while (divisor < l.length) {\n                                                                                            const divisor = 3;\n                                                                                            while (divisor < l.length) {\n                                                                                            \tconst divisor = 3;\n                                                                                            \twhile (divisor < l.length) {\n                                                                                                const divisor = 3;\n                                                                                                while (divisor < l.length) {\n                                                                                                \tconst divisor = 3;\n                                                                                                \twhile (divisor < l.length) {\n                                                                                                    const divisor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let res = [];\n  while (i < len) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i]);\n    }\n    i++;\n  }\n  return res;\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  let i = 0;\n  let len", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement2 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement3 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement4 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement5 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement6 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement7 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement8 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement9 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement10 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement11 = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 15 === 0 || i % 5 === 0 || i % 3 === 0) {\n      console.log(`${i}`);\n    } else {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(50);\nfizzBuzz(78);\nfizzBuzz(79);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/37", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evens = [];\n  let odds = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      evens.push(l[i]);\n    } else {\n      odds.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEven = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvens = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOddEvens([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvens([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvens2 = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOddEvens2([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvens2([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvens3 = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOddEvens3([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvens3([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvens4 = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOddEvens4([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvens4([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvens5 = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odds];\n};\n\n/*\n  >>> sortOddEvens5([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOddEvens5([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOddEvens6 = (l) => {\n  let odds = [];\n  let evens = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      odds.push(l[i]);\n    } else {\n      evens.push(l[i]);\n    }\n  }\n  return [...evens,...odd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkES as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkES as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkES as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkES as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkES as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkES as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = [1, 1];\n  for (let i = 2; i < n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n - 1];\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absolutDeviation = mean(abs(numbers - mean));\n  return absolutDeviation;\n};\n\n/*\n  For a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if (l.length < 3) {\n    return false;\n  }\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n  const nCars = n;\n  const nCarsPerLine = nCars / 2;\n  const nCarsPerLinePerLine = nCarsPerLine / 2;\n  const nCarsPerLinePerLinePerLine = nCarsPerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLine / 2;\n  const nCarsPerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLinePerLine = nCarsPerLinePerLinePerLinePerLinePer", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList2 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList3 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList4 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList5 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList6 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList7 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList8 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList9 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList10 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList11 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList12 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList13 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList14 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList15 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList16 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList17 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList18 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList19 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList20 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList21 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList22 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList23 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1;\n  }\n  return l;\n};\n\nconst incrList24 = (l) => {\n  let i = 0;\n  while (i < l.length) {\n    l[i] = l[i] + 1;\n    i += 1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nmodule.exports = {\n  pairsSumToZero,\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    let digit = x % base\n    result = digit + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\nconst isPalindrome = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return str === reversed\n}\n\nconst isPalindrome2 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str\n}\n\nconst isPalindrome3 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome4 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome5 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome6 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome7 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome8 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome9 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome10 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome11 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome12 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome13 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome14 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome15 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome16 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome17 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome18 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome19 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome20 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome21 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome22 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome23 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome24 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome25 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome26 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome27 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join('')\n}\n\nconst isPalindrome28 = (str) => {\n  let reversed = str.split('').reverse().join('')\n  return reversed === str.split('').reverse().join", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return h * (a + h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return h * (a + h) /", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  if (n === 4) return 1;\n  if (n === 5) return 0;\n  if (n === 6) return 2;\n  if (n === 7) return 3;\n  if (n === 8) return 4;\n  if (n === 9) return 5;\n  if (n === 10) return 6;\n  if (n === 11) return 7;\n  if (n === 12) return 8;\n  if (n === 13) return 9;\n  if (n === 14) return 10;\n  if (n === 15) return 11;\n  if (n === 16) return 12;\n  if (n === 17) return 13;\n  if (n === 18) return 14;\n  if (n === 19) return 15;\n  if (n === 20) return 16;\n  if (n === 21) return 17;\n  if (n === 22) return 18;\n  if (n === 23) return 19;\n  if (n === 24) return 20;\n  if (n === 25) return 21;\n  if (n === 26) return 22;\n  if (n === 27) return 23;\n  if (n === 28) return 24;\n  if (n === 29) return 25;\n  if (n === 30) return 26;\n  if (n === 31) return 27;\n  if (n === 32) return 28;\n  if (n === 33) return 29;\n  if (n === 34) return 30;\n  if (n === 35) return 31;\n  if (n === 36) return 32;\n  if (n === 37) return 33;\n  if (n === 38) return 34;\n  if (n === 39) return 35;\n  if (n === 40) return 36;\n  if (n === 41) return 37;\n  if (n === 42) return 38;\n  if (n === 43) return 39;\n  if (n === 44) return 40;\n  if (n === 45) return 41;\n  if (n === 46) return 42;\n  if (n === 47) return 43;\n  if (n === 48) return 44;\n  if (n === 49) return 45;\n  if (n === 50) return 46;\n  if (n === 51) return 47;\n  if (n === 52) return 48;\n  if (n === 53) return 49;\n  if (n === 54) return 50;\n  if (n === 55) return 51;\n  if (n === 56) return 52;\n  if (n === 57) return 53;\n  if (n === 58) return 54;\n  if (n === 59) return 55;\n  if (n === 60) return 56;\n  if (n === 61) return 57;\n  if (n === 62) return 58;\n  if (n === 63) return 59;\n  if (n === 64) return 60;\n  if (n === 65) return 61;\n  if (n === 66) return 62;\n  if (n === 67) return 63;\n  if (n === 68) return 64;\n  if (n === 69) return 65;\n  if (n === 70) return 66;\n  if (n === 71) return 67;\n  if (n === 72) return 68;\n  if (n === 73) return 69;\n  if (n === 74) return 70;\n  if (n === 75) return 71;\n  if (n === 76) return 72;\n  if (n === 77) return 73;\n  if (n === 78) return 74;\n  if (n === 79) return 75;\n  if (n === 80) return 76;\n  if (n === 81) return 77;\n  if (n === 82) return 78;\n  if (n === 83) return 79;\n  if (n === 84) return 80;\n  if (n === 85) return 81;\n  if (n === 86) return 82;\n  if (n === 87) return 83;\n  if (n === 88) return 84;\n  if (n === 89) return 85;\n  if (n === 90) return 86;\n  if (n === 91) return 87;\n  if (n === 92) return 88;\n  if (n === 93) return 89;\n  if (n === 94) return 90;\n  if (n === 95) return 91;\n  if (n === 96) return 92;\n  if (n === 97) return 93;\n  if (n === 98) return 94;\n  if (n === 99) return 95;\n  if (n === 100) return 96;\n  if (n === 101) return 97;\n  if (n === 102) return 98;\n  if (n === 103) return 99;\n  if (n === 104) return 100;\n  if (n === 105) return 101;\n  if (n === 106) return 102;\n  if (n === 107) return 103;\n  if (n === 108) return 104;\n  if (n === 109) return 105;\n  if (n === 110) return 106;\n  if (n === 111) return 107;\n  if (n === 112) return 108;\n  if (n === 113) return 109;\n  if (n === 114) return 110;\n  if (n === 115) return 111;\n  if (n === 116) return 112;\n  if (n === 117) return 113;\n  if (n === 118) return 114;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/47", "prompt": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n === 0) {\n    return NaN;\n  }\n  let m = Math.floor(n / 2);\n  let i = 0;\n  let j = n - 1;\n  while (i < j) {\n    let k = Math.floor((i + j) / 2);\n    if (l[k] < l[j]) {\n      i = k + 1;\n    } else {\n      j = k;\n    }\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let str = text.split('');\n  let len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) return 1\n  let m = 0\n  while (n > 0) {\n    m = m + (n % p)\n    n = Math.floor(n / p)\n  }\n  return m\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const intersperseList = [];\n  let currentIndex = 0;\n  let currentDelimeter = delimeter;\n  for (let i = 0; i < numbers.length; i++) {\n    if (currentDelimeter === delimeter) {\n      intersperseList.push(numbers[i]);\n      currentDelimeter = delimeter;\n    } else {\n      intersperseList.push(numbers[i], currentDelimeter);\n      currentDelimeter = delimeter;\n    }\n  }\n  return intersperseList;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHArCOdeaT(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  belowThreshold,\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  #### Subtract two NUmBErs x and y\n  >>> sub(2, 3)\n  1\n  >>> sub(5, 7)\n  -2\n  */\nconst sub = (x, y) => {\n  return x - y;\n};\n\n/*\n  #### Multiply two NUmBErs x and y\n  >>> mul(2, 3)\n  6\n  >>> mul(5, 7)\n  21\n  */\nconst mul = (x, y) => {\n  return x * y;\n};\n\n/*\n  #### Divide two NUmBErs x and y\n  >>> div(2, 3)\n  1\n  >>> div(5, 7)\n  2\n  */\nconst div = (x, y) => {\n  return x / y;\n};\n\n/*\n  #### Modulo two NUmBErs x and y\n  >>> mod(2, 3)\n  1\n  >>> mod(5, 7)\n  2\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  #### Power two NUmBErs x and y\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  343\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  #### Exponent two NUmBErs x and y\n  >>> exp(2, 3)\n  8\n  >>> exp(5, 7)\n  343\n  */\nconst exp = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  #### Log two NUmBErs x and y\n  >>> log(2, 3)\n  0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021\n  >>> log(5, 7)\n  1.6094379124341003\n  */\nconst log = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*\n  #### Log10 two NUmBErs x and y\n  >>> log10(2, 3)\n  0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021\n  >>> log10(5, 7)\n  1.6094379124341003\n  */\nconst log10 = (x, y) => {\n  return Math.log10(x) / Math.log10(y);\n};\n\n/*\n  #### Sqrt two NUmBErs x and y\n  >>> sqrt(2, 3)\n  1.414213562373095\n  >>> sqrt(5, 7)\n  3.1622776601683795\n  */\nconst sqrt = (x, y) => {\n  return Math.sqrt(x) / Math.sqrt(y);\n};\n\n/*\n  #### Round two NUmBErs x and y\n  >>> round(2, 3)\n  2\n  >>> round(5, 7)\n  5\n  */\nconst round = (x, y) => {\n  return Math.round(x) / Math.round(y);\n};\n\n/*\n  #### Ceil two NUmBErs x and y\n  >>> ceil(2, 3)\n  2\n  >>> ceil(5, 7)\n  6\n  */\nconst ceil = (x, y) => {\n  return Math.ceil(x) / Math.ceil(y);\n};\n\n/*\n  #### Floor two NUmBErs x and y\n  >>> floor(2, 3)\n  1\n  >>> floor(5, 7)\n  4\n  */\nconst floor = (x, y) => {\n  return Math.floor(x) / Math.floor(y);\n};\n\n/*\n  #### Abs two NUmBErs x and y\n  >>> abs(2, 3)\n  2\n  >>> abs(5, 7)\n  7\n  */\nconst abs = (x, y) => {\n  return Math.abs(x) / Math.abs(y);\n};\n\n/*\n  #### Pow two NUmBErs x and y\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  343\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  #### Exponent two NUmBErs x and y\n  >>> exp(2, 3)\n  8\n  >>> exp(5, 7)\n  343\n  */\nconst exp = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  #### Log two NUmBErs x and y\n  >>> log(2, 3)\n  0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021\n  >>> log(5, 7)\n  1.6094379124341003\n  */\nconst log = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*\n  #### Log10 two NUmBErs x and y\n  >>> log10(2, 3)\n  0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021\n  >>> log10(5, 7)\n  1.6094379124341003\n  */\nconst log10 = (x, y) => {\n  return Math.log10(x) / Math.log10(y);\n};\n\n/*\n  #### Sqrt two NUmBErs x and y\n  >>> sqrt(2, 3)\n  1.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars13 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars14 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sameChars15 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\nconsole.log(fib(10))\nconsole.log(fib(1))\nconsole.log(fib(8))\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length < 2) {\n    return false;\n  }\n  const openingBracket = brackets.substr(0, 1);\n  const closingBracket = brackets.substr(brackets.length - 1, 1);\n  return openingBracket === closingBracket;\n};\n\nconst isBracketing = (brackets) => {\n  return correctBracketing(brackets);\n};\n\nconst isBracketingOrNot = (brackets) => {\n  return correctBracketing(brackets) || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets);\n};\n\nconst isBracketingOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0;\n};\n\nconst isBracketingOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNotOrNot = (brackets) => {\n  return brackets.length === 0 || correctBracketing(brackets) || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets.length === 0 || brackets", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n\n  let last = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false;\n    }\n    last = l[i];\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) {\n    return [];\n  }\n  const l1Unique = new Set(l1);\n  const l2Unique = new Set(l2);\n  const commonElem = l1Unique.intersection(l2Unique);\n  return commonElem.sort();\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) return 0;\n  if (n % 2 === 0) return 2;\n  if (n % 3 === 0) return 3;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 7;\n  if (n % 11 === 0) return 11;\n  if (n % 13 === 0) return 13;\n  if (n % 17 === 0) return 17;\n  if (n % 19 === 0) return 19;\n  if (n % 23 === 0) return 23;\n  if (n % 29 === 0) return 29;\n  if (n % 31 === 0) return 31;\n  if (n % 37 === 0) return 37;\n  if (n % 41 === 0) return 41;\n  if (n % 43 === 0) return 43;\n  if (n % 47 === 0) return 47;\n  if (n % 53 === 0) return 53;\n  if (n % 59 === 0) return 59;\n  if (n % 61 === 0) return 61;\n  if (n % 67 === 0) return 67;\n  if (n % 71 === 0) return 71;\n  if (n % 73 === 0) return 73;\n  if (n % 79 === 0) return 79;\n  if (n % 83 === 0) return 83;\n  if (n % 89 === 0) return 89;\n  if (n % 97 === 0) return 97;\n  if (n % 101 === 0) return 101;\n  if (n % 103 === 0) return 103;\n  if (n % 107 === 0) return 107;\n  if (n % 109 === 0) return 109;\n  if (n % 113 === 0) return 113;\n  if (n % 127 === 0) return 127;\n  if (n % 131 === 0) return 131;\n  if (n % 137 === 0) return 137;\n  if (n % 139 === 0) return 139;\n  if (n % 149 === 0) return 149;\n  if (n % 151 === 0) return 151;\n  if (n % 157 === 0) return 157;\n  if (n % 163 === 0) return 163;\n  if (n % 167 === 0) return 167;\n  if (n % 173 === 0) return 173;\n  if (n % 179 === 0) return 179;\n  if (n % 181 === 0) return 181;\n  if (n % 191 === 0) return 191;\n  if (n % 193 === 0) return 193;\n  if (n % 197 === 0) return 197;\n  if (n % 199 === 0) return 199;\n  if (n % 211 === 0) return 211;\n  if (n % 223 === 0) return 223;\n  if (n % 227 === 0) return 227;\n  if (n % 229 === 0) return 229;\n  if (n % 233 === 0) return 233;\n  if (n % 239 === 0) return 239;\n  if (n % 241 === 0) return 241;\n  if (n % 251 === 0) return 251;\n  if (n % 257 === 0) return 257;\n  if (n % 263 === 0) return 263;\n  if (n % 269 === 0) return 269;\n  if (n % 271 === 0) return 271;\n  if (n % 277 === 0) return 277;\n  if (n % 281 === 0) return 281;\n  if (n % 283 === 0) return 283;\n  if (n % 293 === 0) return 293;\n  if (n % 307 === 0) return 307;\n  if (n % 311 === 0) return 311;\n  if (n % 313 === 0) return 313;\n  if (n % 317 === 0) return 317;\n  if (n % 331 === 0) return 331;\n  if (n % 337 === 0) return 337;\n  if (n % 347 === 0) return 347;\n  if (n % 349 === 0) return 349;\n  if (n % 353 === 0) return 353;\n  if (n % 359 === 0) return 359;\n  if (n % 367 === 0) return 367;\n  if (n % 373 === 0) return 373;\n  if (n % 379 === 0) return 379;\n  if (n % 383 === 0) return 383;\n  if (n % 389 === 0) return 389;\n  if (n % 397 === 0) return 397;\n  if (n % 401 === 0) return 401;\n  if (n % 409 === 0) return 409;\n  if (n % 419 === 0) return 419;\n  if (n % 421 === 0) return 421;\n  if (n % 431 === 0) return 431;\n  if (n % 433 === 0) return 433;\n  if (n % 439 === 0) return 439;\n  if (n % 443 === 0) return 443;\n  if (n % 449 === 0) return 449;\n  if (n % 457 === 0) return 457;\n  if (n % 461 === 0) return 461;\n  if (n % 463 === 0) return 463;\n  if (n % 467 === 0) return 467;\n  if (n % 479 === 0) return 479;\n  if (n % 487 === 0) return 487;\n  if (n % 491 === 0) return 491;\n  if (n % 499 === 0) return 499;\n  if (n % 503 === 0) return 503;\n  if (n % 509 === 0) return 509;\n  if (n % 521 === 0) return 521;\n  if (n % 523 === 0) return 523;\n  if (n % 541 === 0) return 541;\n  if (n % 547 === 0) return 547;\n  if (n % 557 === 0) return 557;\n  if (n % 563 === 0) return 563;\n  if (n % 569 === 0) return 569;\n  if (n % 571 === 0) return 571;\n  if (n % 577 === 0) return 577;\n  if (n % 587 === 0) return 587;\n  if (n % 593 === 0) return 593;\n  if (n % 599", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/6", "prompt": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let nested_parens = [];\n  let current_paren_level = 0;\n  let current_paren_index = 0;\n  let current_paren_string = '';\n  let current_paren_string_length = 0;\n  let current_paren_string_index = 0;\n  let current_paren_string_length_index = 0;\n  let current_paren_string_length_length = 0;\n  let current_paren_string_length_length_index = 0;\n  let current_paren_string_length_length_length = 0;\n  let current_paren_string_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_index = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = 0;\n  let current_paren_string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  return sumToN(n - 1) + n;\n};\n\nexport default sumToN;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets[0];\n  const closingBracket = brackets[brackets.length - 1];\n  return openingBracket === closingBracket;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumber(\"1\")\n  * true\n  * isValidNumber(\"1.2\")\n  * true\n  * isValidNumber(\"1.2.3\")\n  * false\n  */\nconst isValidNumber = (number) => {\n  return number.match(/^[0-9]+$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumber(\"1\")\n  * true\n  * isValidNumber(\"1.2\")\n  * true\n  * isValidNumber(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommas = (number) => {\n  return number.match(/^[0-9]+\\.[0-9]+$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumberWithCommas(\"1.2\")\n  * true\n  * isValidNumberWithCommas(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommasAndDecimals = (number) => {\n  return number.match(/^[0-9]+\\.[0-9]+\\.[0-9]+$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumberWithCommasAndDecimals(\"1.2\")\n  * true\n  * isValidNumberWithCommasAndDecimals(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommasAndDecimalsAndExponent = (number) => {\n  return number.match(/^[0-9]+\\.[0-9]+\\.[0-9]+e[+-]?[0-9]+$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumberWithCommasAndDecimalsAndExponent(\"1.2\")\n  * true\n  * isValidNumberWithCommasAndDecimalsAndExponent(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommasAndDecimalsAndExponentAndSuffix = (number) => {\n  return number.match(/^[0-9]+\\.[0-9]+\\.[0-9]+e[+-]?[0-9]+[kMGTPEZY]?$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumberWithCommasAndDecimalsAndExponentAndSuffix(\"1.2\")\n  * true\n  * isValidNumberWithCommasAndDecimalsAndExponentAndSuffix(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommasAndDecimalsAndExponentAndSuffixAndSuffix = (number) => {\n  return number.match(/^[0-9]+\\.[0-9]+\\.[0-9]+e[+-]?[0-9]+[kMGTPEZY]?[kMGTPEZY]?$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumberWithCommasAndDecimalsAndExponentAndSuffixAndSuffix(\"1.2\")\n  * true\n  * isValidNumberWithCommasAndDecimalsAndExponentAndSuffixAndSuffix(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommasAndDecimalsAndExponentAndSuffixAndSuffixAndSuffix = (number) => {\n  return number.match(/^[0-9]+\\.[0-9]+\\.[0-9]+e[+-]?[0-9]+[kMGTPEZY]?[kMGTPEZY]?[kMGTPEZY]?$/)!== null;\n};\n\n/**\n  * Checks if a given string is a valid number.\n  *\n  * @param {string} number The string to check.\n  * @return {boolean} True if the string is a valid number.\n  * @example\n  * isValidNumberWithCommasAndDecimalsAndExponentAndSuffixAndSuffixAndSuffix(\"1.2\")\n  * true\n  * isValidNumberWithCommasAndDecimalsAndExponentAndSuffixAndSuffixAndSuffix(\"1.2.3\")\n  * false\n  */\nconst isValidNumberWithCommasAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1] / xs[i];\n  }\n  return d;\n};\n\n/* xs RepreSEnT CoeffiCients Of a po", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib = (n) => {\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const n = shift % 26;\n  const r = shift & 0x3;\n  const t = (x << r) | (x >>> (26 - r));\n  return (t << n) | (t >>> (26 - n));\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str - the string to convert\n  * @returns {number} the number\n  */\nconst stringToNumber = (str) => {\n  if (str.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    sum = sum * 10 + str.charCodeAt(i);\n  }\n  return sum;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num - the number to convert\n  * @returns {string} the string\n  */\nconst numberToString = (num) => {\n  const s = num.toString(10);\n  return s.length === 1? \"0\" + s : s;\n};\n\n/**\n  * Convert a number to a hex string.\n  * @param {number} num - the number to convert\n  * @returns {string} the hex string\n  */\nconst numberToHexString = (num) => {\n  const s = num.toString(16);\n  return s.length === 1? \"0\" + s : s;\n};\n\n/**\n  * Convert a hex string to a number.\n  * @param {string} hex - the hex string to convert\n  * @returns {number} the number\n  */\nconst hexStringToNumber = (hex) => {\n  return parseInt(hex, 16);\n};\n\n/**\n  * Convert a number to a binary string.\n  * @param {number} num - the number to convert\n  * @returns {string} the binary string\n  */\nconst numberToBinaryString = (num) => {\n  const s = num.toString(2);\n  return s.length === 1? \"0\" + s : s;\n};\n\n/**\n  * Convert a binary string to a number.\n  * @param {string} bin - the binary string to convert\n  * @returns {number} the number\n  */\nconst binaryStringToNumber = (bin) => {\n  return parseInt(bin, 2);\n};\n\n/**\n  * Convert a number to a byte string.\n  * @param {number} num - the number to convert\n  * @returns {string} the byte string\n  */\nconst numberToByteString = (num) => {\n  const s = num.toString(2);\n  return s.length === 1? \"0\" + s : s;\n};\n\n/**\n  * Convert a byte string to a number.\n  * @param {string} bin - the byte string to convert\n  * @returns {number} the number\n  */\nconst byteStringToNumber = (bin) => {\n  return parseInt(bin, 2);\n};\n\n/**\n  * Convert a byte string to a hex string.\n  * @param {string} bin - the byte string to convert\n  * @returns {string} the hex string\n  */\nconst byteStringToHexString = (bin) => {\n  return bin.length === 1? \"0\" + bin : bin;\n};\n\n/**\n  * Convert a hex string to a byte string.\n  * @param {string} hex - the hex string to convert\n  * @returns {string} the byte string\n  */\nconst hexStringToByteString = (hex) => {\n  return hex.length === 1? \"0\" + hex : hex;\n};\n\n/**\n  * Convert a byte string to a binary string.\n  * @param {string} bin - the byte string to convert\n  * @returns {string} the binary string\n  */\nconst byteStringToBinaryString = (bin) => {\n  return bin.length === 1? \"0\" + bin : bin;\n};\n\n/**\n  * Convert a binary string to a byte string.\n  * @param {string} bin - the binary string to convert\n  * @returns {string} the byte string\n  */\nconst binaryStringToByteString = (bin) => {\n  return bin.length === 1? \"0\" + bin : bin;\n};\n\n/**\n  * Convert a byte string to a number.\n  * @param {string} bin - the byte string to convert\n  * @returns {number} the number\n  */\nconst byteStringToNumber = (bin) => {\n  return parseInt(bin, 2);\n};\n\n/**\n  * Convert a number to a byte string.\n  * @param {number} num - the number to convert\n  * @returns {string} the byte string\n  */\nconst numberToByteString = (num) => {\n  const s = num.toString(2);\n  return s.length === 1? \"0\" + s : s;\n};\n\n/**\n  * Convert a byte string to a hex string.\n  * @param {string} bin - the byte string to convert\n  * @returns {string} the hex string\n  */\nconst byteStringToHexString = (bin) => {\n  return bin.length === 1? \"0\" + bin : bin;\n};\n\n/**\n  * Convert a hex string to a byte string.\n  * @param {string} hex - the hex string to convert\n  * @returns {string} the byte string\n  */\nconst hexStringToByteString = (hex) => {\n  return hex.length === 1? \"0\" + hex : hex;\n};\n\n/**\n  * Convert a byte string to a binary string.\n  * @param {string} bin - the byte string to convert\n  * @returns {string} the binary string\n  */\nconst byteStringToBinaryString = (bin) => {\n  return bin.length === 1? \"0\" + bin : bin;\n};\n\n/**\n  *", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n//TAsk\n/*\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAracterS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let aa = 0;\n  let bb = 0;\n  let cc = 0;\n  let dd = 0;\n  let ee = 0;\n  let ff = 0;\n  let gg = 0;\n  let hh = 0;\n  let ii = 0;\n  let jj = 0;\n  let kk = 0;\n  let ll = 0;\n  let mm = 0;\n  let nn = 0;\n  let oo = 0;\n  let pp = 0;\n  let qq = 0;\n  let rr = 0;\n  let ss = 0;\n  let tt = 0;\n  let uu = 0;\n  let vv = 0;\n  let ww = 0;\n  let xx = 0;\n  let yy = 0;\n  let zz = 0;\n  let aaa = 0;\n  let bbb = 0;\n  let ccc = 0;\n  let ddd = 0;\n  let eee = 0;\n  let fff = 0;\n  let ggg = 0;\n  let hhh = 0;\n  let iii = 0;\n  let jjj = 0;\n  let kkk = 0;\n  let lll = 0;\n  let mmm = 0;\n  let nnn = 0;\n  let ooo = 0;\n  let ppp = 0;\n  let qqq = 0;\n  let rrr = 0;\n  let sss = 0;\n  let ttt = 0;\n  let uuu = 0;\n  let vvv = 0;\n  let wwww = 0;\n  let xxx = 0;\n  let yyy = 0;\n  let zzz = 0;\n  let aaaa = 0;\n  let bbbb = 0;\n  let cccc = 0;\n  let dddd = 0;\n  let eeee = 0;\n  let ffff = 0;\n  let gggg = 0;\n  let hhhh = 0;\n  let iiiii = 0;\n  let jjjj = 0;\n  let kkkk = 0;\n  let llll = 0;\n  let mmmm = 0;\n  let nnnn = 0;\n  let oooo = 0;\n  let pppp = 0;\n  let qqqq = 0;\n  let rrrr = 0;\n  let ssss = 0;\n  let tttt = 0;\n  let uuuu = 0;\n  let vvvv = 0;\n  let wwwww = 0;\n  let xxxx = 0;\n  let yyyy = 0;\n  let zzzz = 0;\n  let aaaa = 0;\n  let bbbb = 0;\n  let cccc = 0;\n  let dddd = 0;\n  let eeee = 0;\n  let ffff = 0;\n  let gggg = 0;\n  let hhhh = 0;\n  let iiiii = 0;\n  let jjjj = 0;\n  let kkkk = 0;\n  let llll = 0;\n  let mmmm = 0;\n  let nnnn = 0;\n  let oooo = 0;\n  let pppp = 0;\n  let qqqq = 0;\n  let rrrr = 0;\n  let ssss = 0;\n  let tttt = 0;\n  let uuuu = 0;\n  let vvvv = 0;\n  let wwwww = 0;\n  let xxxx = 0;\n  let yyyy = 0;\n  let zzzz = 0;\n  let aaaa = 0;\n  let bbbb = 0;\n  let cccc = 0;\n  let dddd = 0;\n  let eeee = 0;\n  let ffff = 0;\n  let gggg = 0;\n  let hhhh = 0;\n  let iiiii = 0;\n  let jjjj = 0;\n  let kkkk = 0;\n  let llll = 0;\n  let mmmm = 0;\n  let nnnn = 0;\n  let oooo = 0;\n  let pppp = 0;\n  let qqqq = 0;\n  let rrrr = 0;\n  let ssss = 0;\n  let tttt = 0;\n  let uuuu = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let res = [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  res.push(min);\n  res.push(minIndex);\n  return res;\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (lst.length === 0) {\n    return -1;\n  }\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nexport default search;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/*\n  filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  return", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) return [];\n  const lst2 = lst.slice();\n  const lst3 = [];\n  let i = 0;\n  while (i < lst.length) {\n    const j = lst.indexOf(lst[i]);\n    if (j === -1) {\n      lst3.push(lst[i]);\n      i++;\n    } else {\n      lst2.splice(j, 1);\n      lst2.splice(i, 0, lst[i]);\n      i++;\n    }\n  }\n  return lst2.concat(lst3);\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  let area = 0;\n  let s1 = a + b + c;\n  let s2 = a * b * c;\n  if (s1 > s2) {\n    area = s1;\n  } else {\n    area = s2;\n  }\n  return area;\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return true;\n  if (q.length === 1) return w <= q[0];\n  if (q.length === 2) return w <= q[0] + q[1];\n  if (q.length === 3) return w <= q[0] + q[1] + q[2];\n  if (q.length === 4) return w <= q[0] + q[1] + q[2] + q[3];\n  if (q.length === 5) return w <= q[0] + q[1] + q[2] + q[3] + q[4];\n  if (q.length === 6) return w <= q[0] + q[1] + q[2] + q[3] + q[4] + q[5];\n  if (q.length === 7) return w <= q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6];\n  if (q.length === 8) return w <= q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7];\n  if (q.length === 9) return w <= q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8];\n  return false;\n}\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return [];\n  }\n  if (lst1.length === 1 && lst2.length === 1) {\n    return [lst1[0]];\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Index = 0;\n  const lst2Index = 0;\n  let lst1Index2 = 0;\n  let lst2Index2 = 0;\n  let lst1Index3 = 0;\n  let lst2Index3 = 0;\n  let lst1Index4 = 0;\n  let lst2Index4 = 0;\n  let lst1Index5 = 0;\n  let lst2Index5 = 0;\n  let lst1Index6 = 0;\n  let lst2Index6 = 0;\n  let lst1Index7 = 0;\n  let lst2Index7 = 0;\n  let lst1Index8 = 0;\n  let lst2Index8 = 0;\n  let lst1Index9 = 0;\n  let lst2Index9 = 0;\n  let lst1Index10 = 0;\n  let lst2Index10 = 0;\n  let lst1Index11 = 0;\n  let lst2Index11 = 0;\n  let lst1Index12 = 0;\n  let lst2Index12 = 0;\n  let lst1Index13 = 0;\n  let lst2Index13 = 0;\n  let lst1Index14 = 0;\n  let lst2Index14 = 0;\n  let lst1Index15 = 0;\n  let lst2Index15 = 0;\n  let lst1Index16 = 0;\n  let lst2Index16 = 0;\n  let lst1Index17 = 0;\n  let lst2Index17 = 0;\n  let lst1Index18 = 0;\n  let lst2Index18 = 0;\n  let lst1Index19 = 0;\n  let lst2Index19 = 0;\n  let lst1Index20 = 0;\n  let lst2Index20 = 0;\n  let lst1Index21 = 0;\n  let lst2Index21 = 0;\n  let lst1Index22 = 0;\n  let lst2Index22 = 0;\n  let lst1Index23 = 0;\n  let lst2Index23 = 0;\n  let lst1Index24 = 0;\n  let lst2Index24 = 0;\n  let lst1Index25 = 0;\n  let lst2Index25 = 0;\n  let lst1Index26 = 0;\n  let lst2Index26 = 0;\n  let lst1Index27 = 0;\n  let lst2Index27 = 0;\n  let lst1Index28 = 0;\n  let lst2Index28 = 0;\n  let lst1Index29 = 0;\n  let lst2Index29 = 0;\n  let lst1Index30 = 0;\n  let lst2Index30 = 0;\n  let lst1Index31 = 0;\n  let lst2Index31 = 0;\n  let lst1Index32 = 0;\n  let lst2Index32 = 0;\n  let lst1Index33 = 0;\n  let lst2Index33 = 0;\n  let lst1Index34 = 0;\n  let lst2Index34 = 0;\n  let lst1Index35 = 0;\n  let lst2Index35 = 0;\n  let lst1Index36 = 0;\n  let lst2Index36 = 0;\n  let lst1Index37 = 0;\n  let lst2Index37 = 0;\n  let lst1Index38 = 0;\n  let lst2Index38 = 0;\n  let lst1Index39 = 0;\n  let lst2Index39 = 0;\n  let lst1Index40 = 0;\n  let lst2Index40 = 0;\n  let lst1Index41 = 0;\n  let lst2Index41 = 0;\n  let lst1Index42 = 0;\n  let lst2Index42 = 0;\n  let lst1Index43 = 0;\n  let lst2Index43 = 0;\n  let lst1Index44 = 0;\n  let lst2Index44 = 0;\n  let lst1Index45 = 0;\n  let lst2Index45 = 0;\n  let lst1Index46 = 0;\n  let lst2Index46 = 0;\n  let lst1Index47 = 0;\n  let lst2Index47 = 0;\n  let lst1Index48 = 0;\n  let lst2Index48 = 0;\n  let lst1Index49 = 0;\n  let lst2Index49 = 0;\n  let lst1Index50 = 0;\n  let lst2Index50 = 0;\n  let lst1Index51 = 0;\n  let lst2Index51 = 0;\n  let lst1Index52 = 0;\n  let lst2Index52 = 0;\n  let lst1Index53 = 0;\n  let lst2Index53 = 0;\n  let lst1Index54 = 0;\n  let lst2Index54 = 0;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 5 === 0) {\n    return false;\n  }\n  if (a % 7 === 0) {\n    return false;\n  }\n  if (a % 11 === 0) {\n    return false;\n  }\n  if (a % 13 === 0) {\n    return false;\n  }\n  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return false;\n  }\n  if (a % 23 === 0) {\n    return false;\n  }\n  if (a % 29 === 0) {\n    return false;\n  }\n  if (a % 31 === 0) {\n    return false;\n  }\n  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 === 0) {\n    return false;\n  }\n  if (a % 47 === 0) {\n    return false;\n  }\n  if (a % 53 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return false;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 67 === 0) {\n    return false;\n  }\n  if (a % 71 === 0) {\n    return false;\n  }\n  if (a % 73 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return false;\n  }\n  if (a % 83 === 0) {\n    return false;\n  }\n  if (a % 89 === 0) {\n    return false;\n  }\n  if (a % 97 === 0) {\n    return false;\n  }\n  if (a % 101 === 0) {\n    return false;\n  }\n  if (a % 103 === 0) {\n    return false;\n  }\n  if (a % 107 === 0) {\n    return false;\n  }\n  if (a % 109 === 0) {\n    return false;\n  }\n  if (a % 113 === 0) {\n    return false;\n  }\n  if (a % 127 === 0) {\n    return false;\n  }\n  if (a % 131 === 0) {\n    return false;\n  }\n  if (a % 137 === 0) {\n    return false;\n  }\n  if (a % 139 === 0) {\n    return false;\n  }\n  if (a % 149 === 0) {\n    return false;\n  }\n  if (a % 151 === 0) {\n    return false;\n  }\n  if (a % 157 === 0) {\n    return false;\n  }\n  if (a % 163 === 0) {\n    return false;\n  }\n  if (a % 167 === 0) {\n    return false;\n  }\n  if (a % 173 === 0) {\n    return false;\n  }\n  if (a % 179 === 0) {\n    return false;\n  }\n  if (a % 181 === 0) {\n    return false;\n  }\n  if (a % 191 === 0) {\n    return false;\n  }\n  if (a % 193 === 0) {\n    return false;\n  }\n  if (a % 197 === 0) {\n    return false;\n  }\n  if (a % 199 === 0) {\n    return false;\n  }\n  if (a % 211 === 0) {\n    return false;\n  }\n  if (a % 223 === 0) {\n    return false;\n  }\n  if (a % 227 === 0) {\n    return false;\n  }\n  if (a % 229 === 0) {\n    return false;\n  }\n  if (a % 233 === 0) {\n    return false;\n  }\n  if (a % 239 === 0) {\n    return false;\n  }\n  if (a % 241 === 0) {\n    return false;\n  }\n  if (a % 251 === 0) {\n    return false;\n  }\n  if (a % 257 === 0) {\n    return false;\n  }\n  if (a % 263 === 0) {\n    return false;\n  }\n  if (a % 269 === 0) {\n    return false;\n  }\n  if (a % 271 === 0) {\n    return false;\n  }\n  if (a % 277 === 0) {\n    return false;\n  }\n  if (a % 281 === 0) {\n    return false;\n  }\n  if (a % 283 === 0) {\n    return false;\n  }\n  if (a % 293 === 0) {\n    return false;\n  }\n  if (a % 307 === 0) {\n    return false;\n  }\n  if (a % 311 === 0) {\n    return false;\n  }\n  if (a % 313 === 0) {\n    return false;\n  }\n  if (a % 317 === 0) {\n    return false;\n  }\n  if (a % 331 === 0) {\n    return false;\n  }\n  if (a % 337 === 0) {\n    return false;\n  }\n  if (a % 347 === 0) {\n    return false;\n  }\n  if (a % 349 === 0) {\n    return false;\n  }\n  if (a % 353 === 0) {\n    return false;\n  }\n  if (a % 359 === 0) {\n    return false;\n  }\n  if (a % 367 === 0) {\n    return false;\n  }\n  if (a % 373 === 0) {\n    return false;\n  }\n  if (a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0;\n};\n\nconst isprime = (a) => {\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst ispalindrome = (a) => {\n  return a === a.split('').reverse().join('');\n};\n\nconst ispalindrome2 = (a) => {\n  return a.split('').reverse().join('') === a;\n};\n\nconst ispalindrome3 = (a) => {\n  return a.split('').reverse().join('') === a.split('').reverse().join('');\n};\n\nconst ispalindrome4 = (a) => {\n  return a.split('').reverse().join('') === a.split('').join('');\n};\n\nconst ispalindrome5 = (a) => {\n  return a.split('').join('') === a.split('').reverse().join('');\n};\n\nconst ispalindrome6 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome7 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome8 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome9 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome10 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome11 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome12 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome13 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome14 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome15 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome16 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst ispalindrome17 = (a) => {\n  return a.split('').join('') === a.split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').join('').split('').reverse().join('');\n};\n\nconst is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numAsHex = num.toString(16);\n  let numAsHexLength = numAsHex.length;\n  let numAsHexWithoutLeadingZeros = numAsHex.substring(0, numAsHexLength - 1);\n  let numAsHexWithoutLeadingZerosLength = numAsHexWithoutLeadingZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZeros = numAsHexWithoutLeadingZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.substring(1);\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosLength = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros.length;\n  let numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZeros = numAsHexWithoutLeadingZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZerosWithoutZ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryLength = decimal.toString().length;\n  let binaryValue = decimal.toString();\n  let binaryIndex = 0;\n  let binaryChar = \"\";\n\n  for (let i = 0; i < binaryLength; i++) {\n    binaryIndex = binaryValue.indexOf(\"1\");\n    binaryChar = binaryValue.substring(binaryIndex, binaryIndex + 1);\n    binary += binaryChar;\n    binaryValue = binaryValue.substring(binaryIndex + 1, binaryIndex + 2);\n  }\n  return binary;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct10 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct11 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct12 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct13 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct14 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct15 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct16 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct17 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct18 = (numbers, int) => {\n  let sum = 0\n  let prod = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int\n    prod *= numbers[i]\n  }\n  return [sum, prod]\n}\n\nconst sumProduct19 = (numbers, int) => {\n  let sum = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let str = s;\n  let len = str.length;\n  for (let i = 0; i < len; i++) {\n    let c = str[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      count++;\n    }\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' ||", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = '';\n  let grade = 0;\n  let i = 0;\n  let len = grades.length;\n  let gradeArray = [];\n  let gradeArrayLen = 0;\n  let gradeArrayIndex = 0;\n  let gradeArrayIndexLen = 0;\n\n  while (i < len) {\n    grade = grades[i];\n    if (grade > 3.7) {\n      gradeArray.push('A+');\n      gradeArrayLen++;\n    } else if (grade > 3.3) {\n      gradeArray.push('A');\n      gradeArrayLen++;\n    } else if (grade > 3.0) {\n      gradeArray.push('B+');\n      gradeArrayLen++;\n    } else if (grade > 2.7) {\n      gradeArray.push('B');\n      gradeArrayLen++;\n    } else if (grade > 2.3) {\n      gradeArray.push('B-');\n      gradeArrayLen++;\n    } else if (grade > 2.0) {\n      gradeArray.push('C+');\n      gradeArrayLen++;\n    } else if (grade > 1.7) {\n      gradeArray.push('C');\n      gradeArrayLen++;\n    } else if (grade > 1.3) {\n      gradeArray.push('C-');\n      gradeArrayLen++;\n    } else if (grade > 1.0) {\n      gradeArray.push('D+');\n      gradeArrayLen++;\n    } else if (grade > 0.7) {\n      gradeArray.push('D');\n      gradeArrayLen++;\n    } else if (grade > 0.0) {\n      gradeArray.push('D-');\n      gradeArrayLen++;\n    } else {\n      gradeArray.push('e');\n      gradeArrayLen++;\n    }\n    i++;\n  }\n\n  // if (gradeArrayLen > 0) {\n  //   letterGrade = gradeArray[0];\n  // }\n\n  return gradeArray;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let isPrime = true;\n  while (i < string.length) {\n    if (string[i] === '0') {\n      isPrime = false;\n      break;\n    }\n    if (string[i] === '1') {\n      isPrime = true;\n      i++;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst endsOneEnds = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst startsOneEnds2 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst endsOneEnds2 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst startsOneEnds3 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst endsOneEnds3 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst startsOneEnds4 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst endsOneEnds4 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst startsOneEnds5 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst endsOneEnds5 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst startsOneEnds6 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst endsOneEnds6 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or eND wiTh 1.\n  */\nCoNst startsOneEnds7 = (n) => {\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    result += Math.pow(10, n - i);\n  }\n  return result;\n};\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTART Or", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(10, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add2 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add2(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add3 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add3(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add4 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add4(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add5 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add5(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add6 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add6(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add7 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add7(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add8 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add8(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add9 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add9(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add10 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add10(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add11 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add11(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add12 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add12(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add13 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add13(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add14 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add14(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add15 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add15(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add16 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add16(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add17 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add17(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add18 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add18(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add19 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0] + add19(lst.slice(1))\n}\n\n/*\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add20 = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst[0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let str = s.toLowerCase();\n  let arr = str.split('');\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2) ...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getCol = (lst, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[y];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === y) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getCols = (lst, y) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[y];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === y) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows2 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows3 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows4 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows5 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows6 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst[x];\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length === x) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst getRows7 = (lst, x) => {\n  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst[0];\n  if (lst.length === 2) return lst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return [];\n  }\n  if (array.length === 1) {\n    return array;\n  }\n  let sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedArray;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt2 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt3 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst encrypt4 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt4 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst encrypt5 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n    if (j < 0) {\n      result += s.charAt(i);\n    } else {\n      result += key.charAt(j) + key.charAt(j + 1);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt5 = (s) => {\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let result = '';\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    j = key.indexOf(s.charAt(i));\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  result.push(max);\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst.length == 0) {\n    return null;\n  }\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let i = 0\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++\n    } else {\n      break\n    }\n  }\n  return i === S.length\n}\n\nconst main = () => {\n  console.log(isBored(\"Hello world\"))\n  console.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\n}\n\nmain()\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  creatE A fUnction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_count = 0;\n  let max_prime_index_count = 0;\n  let max_prime_count_count = 0;\n  let max_prime_count_count_count = 0;\n  let max_prime_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let max_prime_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let len = keys.length;\n  let i = 0;\n  let key;\n  let isCase = true;\n  while (i < len) {\n    key = keys[i];\n    if (dict[key]!== key) {\n      isCase = false;\n      break;\n    }\n    i++;\n  }\n  return isCase;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === Infinity) return [1,2,3,5,7,11,13,17,19];\n  if (n < 0) return [];\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a * b;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countVowelConsonantCount9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] ===", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/99", "prompt": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let result = parseInt(value);\n  if (isNaN(result)) {\n    return 0;\n  }\n  let diff = Math.abs(result - Math.round(result));\n  let minDiff = Math.abs(result - Math.round(result));\n  let maxDiff = Math.abs(result + Math.round(result));\n  if (diff <= minDiff) {\n    return result;\n  }\n  if (diff >= maxDiff) {\n    return result;\n  }\n  return Math.round(result);\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
