{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer near to each other than \n   given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const minDistance = sortedNumbers[0] - threshold;\n  return sortedNumbers.some(number => number - minDistance < 0);\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer than given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements10 = (numbers,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore dismiss any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument containing multiple groups group of nested parentheses parenthesis. Your goal is to \n   separate freestanding those group into separate strings string and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested nest within each other \n   Ignore dismiss any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_parens = 0;\n  let open_parens_count = 0;\n  let last_open_paren = 0;\n  let last_close_paren = 0;\n  let current_open_paren = 0;\n  let current_close_paren = 0;\n  let current_string = '';\n  let current_string_count = 0;\n  let current_string_open_parens = 0;\n  let current_string_close_parens = 0;\n  let current_string_open_parens_count = 0;\n  let current_string_close_parens_count = 0;\n  let current_string_open_parens_count_count = 0;\n  let current_string_close_parens_count_count = 0;\n  let current_string_open_parens_count_count_count = 0;\n  let current_string_close_parens_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_close_parens_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_string_open_parens_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const postfix = palindrome.split('').reverse().join('');\n  const prefix = palindrome.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const postfix = palindrome.split('').reverse().join('');\n  const prefix = palindrome.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const postfix = palindrome.split('').reverse().join('');\n  const prefix = palindrome.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const postfix = palindrome.split('').reverse().join('');\n  const prefix = palindrome.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const postfix = palindrome.split('').reverse().join('');\n  const prefix = palindrome.split('').reverse().join('');\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins with a supplied supply string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest retentive postfix of supplied provide string that is a palindrome. \n   - Append to the end goal of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.split('').reverse().join('');\n  const postfix = palindrome.split('').reverse().join(''", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make take a pile of n levels floor of stones. \n   The first inaugural level has n stones rock. \n   The number of stones gem in the next level is: \n       - the next odd leftover number if n is odd. \n       - the next adjacent even tied number if n is even. \n   Return the number of stones in each level floor in a list, where element chemical element at index exponent \n   i represents the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n  let i = 0\n  while (n > 0) {\n    result.push(n)\n    n = n - 1\n    i++\n  }\n  return result\n}\n\nmodule.exports = makeAPile\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words word separated by commas comma or spaces. Your task undertaking is \n   to split the string chain into words and return an array of the words parole.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words;\n}\n\nmodule.exports = wordsString;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even integer number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive convinced numbers x and y and returns return the \n   biggest even integer number issue that is in the range [x, y] inclusive. If \n   there's no such number phone number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  return Math.ceil(Math.max(x, y))\n}\n\nmodule.exports = {\n  chooseNum\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task is to compute calculate the \n   average of the integers from n through m (including include n and m). \n   Round the answer to the nearest approximate integer and convert that to binary. \n   If n is greater bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  return sum / (m - n + 1)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements that hasn't any even tied digit. \n\n   Note: Returned list should be sorted screen in increasing order ordering. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let count = 0;\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      count++;\n    } else {\n      result.push(digit);\n      count = 0;\n    }\n  }\n  if (count > 0) {\n    result.push(...x.slice(x.length - count));\n  }\n  return result;\n};\n\nconst test = () => {\n  let x = uniqueDigits([15, 33, 1422, 1]);\n  console.log(x);\n};\n\nif (module === require.main) {\n  test();\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse the resulting leave array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName4 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName5 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName6 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName7 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName8 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [arr[0]];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName9 = (arr) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes choose n as a parameter, \n   and returns return a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers number from 1 to i otherwise. \n   i starts originate from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes choose n as a parameter, \n   and returns return a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers number from 1 to i otherwise. \n   i starts originate from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f(i - 1));\n    } else {\n      result.push(i * (f(i - 1) + f(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f2 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f2(i - 1));\n    } else {\n      result.push(i * (f2(i - 1) + f2(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f3 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f3(i - 1));\n    } else {\n      result.push(i * (f3(i - 1) + f3(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f4 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f4(i - 1));\n    } else {\n      result.push(i * (f4(i - 1) + f4(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f5 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f5(i - 1));\n    } else {\n      result.push(i * (f5(i - 1) + f5(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f6 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f6(i - 1));\n    } else {\n      result.push(i * (f6(i - 1) + f6(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f7 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f7(i - 1));\n    } else {\n      result.push(i * (f7(i - 1) + f7(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f8 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f8(i - 1));\n    } else {\n      result.push(i * (f8(i - 1) + f8(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f9 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f9(i - 1));\n    } else {\n      result.push(i * (f9(i - 1) + f9(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f10 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f10(i - 1));\n    } else {\n      result.push(i * (f10(i - 1) + f10(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f11 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f11(i - 1));\n    } else {\n      result.push(i * (f11(i - 1) + f11(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f12 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f12(i - 1));\n    } else {\n      result.push(i * (f12(i - 1) + f12(i - 2)));\n    }\n  }\n  return result;\n};\n\nconst f13 = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i * f13(i - 1));\n    } else {\n      result.push(i * (f13(i - 1) + f13(i - 2)));\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let evenPalindrome = []\n  let oddPalindrome = []\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let oddPalindromeLength = 0\n  let evenPalindromeIndex = 0\n  let oddPalindromeIndex = 0\n  let evenPalindromeLength = 0\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0. \n   If a number phone number is negative, then its first inaugural signed sign digit will be negative: \n   e.g. for example -123 has signed bless digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which takes choose an array of integers and returns reappearance \n   the number of elements which has a sum union of digits > 0. \n   If a number phone number is negative, then its first inaugural signed sign digit will be negative: \n   e.g. for example -123 has signed bless digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get have an array sorted in non - decreasing order ordering by performing \n   the following adopt operation on the given array: \n       You are allowed to perform do right shift operation any number phone number of times prison term. \n  \n   One right shift operation means think of shifting careen all elements of the array by one \n   position placement in the right correct direction. The last element component of the array will be moved to \n   the starting start position stead in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation mathematical process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered rate. Your task is to determine specify if \n   it is possible to get have an array sorted in non - decreasing order ordering by performing \n   the following adopt operation on the given array: \n       You are allowed to perform do right shift operation any number phone number of times prison term. \n  \n   One right shift operation means think of shifting careen all elements of the array by one \n   position placement in the right correct direction. The last element component of the array will be moved to \n   the starting start position stead in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted array by performing the above operation mathematical process \n   then return true else return false. \n   If the given array is empty then return true. \n\n   Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      arr[i] = arr[i] - 1;\n      arr[j] = arr[j] + 1;\n    } else {\n      arr[i] = arr[i] + 1;\n      arr[j] = arr[j] - 1;\n    }\n    i++;\n    j--;\n  }\n  return arr.length === 0;\n};\n\nmodule.exports = moveOneBall;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consisting consist only of 1s and 0s. \n   Perform do binary XOR on these inputs and return result resultant role also as a string chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n        result += '0';\n      } else {\n        result += '1';\n      }\n    } else {\n      if (b[i] === '1') {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === '1') {\n      if (b[i] === '1') {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines determine whether it is possible to perform do an exchange of elements \n   between them to make induce lst1 a list of only even numbers. \n   There is no limit on the number of exchanged commute elements between lst1 and lst2.\n   If it is possible to exchange elements element between the lst1 and lst2 to make have \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a function routine that takes two lists list of numbers, \n   and determines determine whether it is possible to perform do an exchange of elements \n   between them to make induce lst1 a list of only even numbers. \n   There is no limit on the number of exchanged commute elements between lst1 and lst2.\n   If it is possible to exchange elements element between the lst1 and lst2 to make have \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n    }\n  }\n  if (even === lst1.length) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space outer space separated lowercase small letter letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding correspond count. \n   If several letters letter have the same occurrence happening, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]] += 1;\n    }\n  }\n  return histogram;\n};\n\nconst test = 'a b c';\nconsole.log(histogram(test));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings string section s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string drawstring is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We are given two strings string section s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\n   then check if the result resultant role string is palindrome. \n   A string drawstring is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing hold the result string and true genuine / false fake for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice(index + 1, index + 2);\n      result = result.slice(0, index).concat(temp).concat(result.slice(index + 2));\n      index += 2;\n    } else if (result[index]!== c[0]) {\n      isPalindrome = false;\n      break;\n    }\n    index++;\n  }\n  return [result, isPalindrome];\n};\n\nconst reverseDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let index = 0;\n  let isPalindrome = true;\n  let temp = '';\n  while (index < result.length) {\n    if (result[index] === c[0]) {\n      temp = result.slice", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of odd elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists consist of only digits, return a list.\n   Each element component i of the output should be \" the number issue of odd elements element in the \n   string i of the input stimulation. \" where all the i's should be replaced by the number \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let num = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        num++;\n      }\n    }\n    res.push(`the number of odd elements ${num}n the str${str}n the ${i}nput.`);\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find line up the minimum sum kernel of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((a, b) => a + b, 0);\n  const subArr = nums.filter((num) => nums.indexOf(num) > 0);\n  return subArr.reduce((a, b) => a + b, 0);\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row represents present a single well, \n   and each 1 in a row quarrel represents a single unmarried unit of water water system. \n   Each well has a corresponding bucket that can be used to extract water water system from it, \n   and all buckets bucket have the same capacity.\n   Your task undertaking is to use practice the buckets to empty the wells. \n   Output output signal the number phone number of times clock time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row represents present a single well, \n   and each 1 in a row quarrel represents a single unmarried unit of water water system. \n   Each well has a corresponding bucket that can be used to extract water water system from it, \n   and all buckets bucket have the same capacity.\n   Your task undertaking is to use practice the buckets to empty the wells. \n   Output output signal the number phone number of times clock time you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(j);\n      }\n    }\n  }\n  let maxFill = 0;\n  for (let i = 0; i < buckets.length; i++) {\n    let bucket = buckets[i];\n    let bucketCapacity = capacity;\n    while (bucketCapacity > 0) {\n      let bucketFill = 0;\n      for (let j = 0; j < grid.length; j++) {\n        if (grid[j][bucket] === 1) {\n          bucketFill++;\n        }\n      }\n      if (bucketFill > maxFill) {\n        maxFill = bucketFill;\n      }\n      bucketCapacity--;\n    }\n  }\n  return maxFill;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number numeral of ones in their binary representation theatrical performance in ascending order ordering. \n   For similar number issue of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according to \n   number numeral of ones in their binary representation theatrical performance in ascending order ordering. \n   For similar number issue of ones one, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = arr.slice(0);\n  sortedArr.sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sortedArr;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number numeral n, you have been tasked to implement follow through \n   a function that returns come back a list of all words from string chain s that contain exactly precisely \n   n consonants consonant, in order these words appear look in the string bowed stringed instrument s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume bear the input stimulation string contains control only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  let len = s.length;\n  let word = \"\";\n  while (index < len) {\n    if (s[index] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += s[index];\n    }\n    index++;\n  }\n  words.push(word);\n  return words.filter(word => {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (word[i] === \" \") {\n        count++;\n      }\n    }\n    return count === n;\n  });\n};\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4));\nconsole.log(selectWords(\"Mary had a little lamb\", 3));\nconsole.log(selectWords(\"simple white space\", 2));\nconsole.log(selectWords(\"Hello world\", 4));\nconsole.log(selectWords(\"Uncle sam\", 3));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find line up the closest vowel that stands digest between \n   two consonants from the right proper side of the word (case sheath sensitive). \n  \n   Vowels vowel in the beginning and ending conclusion doesn't count reckon. Return render empty string bowed stringed instrument if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given contribute string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to find line up the closest vowel that stands digest between \n   two consonants from the right proper side of the word (case sheath sensitive). \n  \n   Vowels vowel in the beginning and ending conclusion doesn't count reckon. Return render empty string bowed stringed instrument if you didn't \n   find any vowel met the above condition. \n\n   You may assume bear that the given contribute string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let vowelsLen = vowels.length;\n  let wordLen = word.length;\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let vowel = '';\n  let vowelLen = 0;\n  let vowelIndex = 0;\n  let vowelIndex2 = 0;\n  let vowelIndex3 = 0;\n  let vowelIndex4 = 0;\n  let vowelIndex5 = 0;\n  let vowelIndex6 = 0;\n  let vowelIndex7 = 0;\n  let vowelIndex8 = 0;\n  let vowelIndex9 = 0;\n  let vowelIndex10 = 0;\n  let vowelIndex11 = 0;\n  let vowelIndex12 = 0;\n  let vowelIndex13 = 0;\n  let vowelIndex14 = 0;\n  let vowelIndex15 = 0;\n  let vowelIndex16 = 0;\n  let vowelIndex17 = 0;\n  let vowelIndex18 = 0;\n  let vowelIndex19 = 0;\n  let vowelIndex20 = 0;\n  let vowelIndex21 = 0;\n  let vowelIndex22 = 0;\n  let vowelIndex23 = 0;\n  let vowelIndex24 = 0;\n  let vowelIndex25 = 0;\n  let vowelIndex26 = 0;\n  let vowelIndex27 = 0;\n  let vowelIndex28 = 0;\n  let vowelIndex29 = 0;\n  let vowelIndex30 = 0;\n  let vowelIndex31 = 0;\n  let vowelIndex32 = 0;\n  let vowelIndex33 = 0;\n  let vowelIndex34 = 0;\n  let vowelIndex35 = 0;\n  let vowelIndex36 = 0;\n  let vowelIndex37 = 0;\n  let vowelIndex38 = 0;\n  let vowelIndex39 = 0;\n  let vowelIndex40 = 0;\n  let vowelIndex41 = 0;\n  let vowelIndex42 = 0;\n  let vowelIndex43 = 0;\n  let vowelIndex44 = 0;\n  let vowelIndex45 = 0;\n  let vowelIndex46 = 0;\n  let vowelIndex47 = 0;\n  let vowelIndex48 = 0;\n  let vowelIndex49 = 0;\n  let vowelIndex50 = 0;\n  let vowelIndex51 = 0;\n  let vowelIndex52 = 0;\n  let vowelIndex53 = 0;\n  let vowelIndex54 = 0;\n  let vowelIndex55 = 0;\n  let vowelIndex56 = 0;\n  let vowelIndex57 = 0;\n  let vowelIndex58 = 0;\n  let vowelIndex59 = 0;\n  let vowelIndex60 = 0;\n  let vowelIndex61 = 0;\n  let vowelIndex62 = 0;\n  let vowelIndex63 = 0;\n  let vowelIndex64 = 0;\n  let vowelIndex65 = 0;\n  let vowelIndex66 = 0;\n  let vowelIndex67 = 0;\n  let vowelIndex68 = 0;\n  let vowelIndex69 = 0;\n  let vowelIndex70 = 0;\n  let vowelIndex71 = 0;\n  let vowelIndex72 = 0;\n  let vowelIndex73 = 0;\n  let vowelIndex74 = 0;\n  let vowelIndex75 = 0;\n  let vowelIndex76 = 0;\n  let vowelIndex77 = 0;\n  let vowelIndex78 = 0;\n  let vowelIndex79 = 0;\n  let vowelIndex80 = 0;\n  let vowelIndex81 = 0;\n  let vowelIndex82 = 0;\n  let vowelIndex83 = 0;\n  let vowelIndex84 = 0;\n  let vowelIndex85 = 0;\n  let vowelIndex86 = 0;\n  let vowelIndex87 = 0;\n  let vowelIndex88 = 0;\n  let vowelIndex89 = 0;\n  let vowelIndex90 = 0;\n  let vowelIndex91 = 0;\n  let vowelIndex92 = 0;\n  let vowelIndex93 = 0;\n  let vowelIndex94 = 0;\n  let vowelIndex95 = 0;\n  let vowelIndex96 = 0;\n  let vowelIndex97 = 0;\n  let vowelIndex98 = 0;\n  let vowelIndex99 = 0;\n  let vowelIndex100 = 0;\n  let vowelIndex101 = 0;\n  let vowelIndex102 = 0;\n  let vowelIndex103 = 0;\n  let vowelIndex104 = 0;\n  let vowelIndex105 = 0;\n  let vowelIndex106 = 0;\n  let vowelIndex107 = 0;\n  let vowelIndex108 = 0;\n  let vowelIndex109 = 0;\n  let vowelIndex110 = 0;\n  let vowelIndex111 = 0;\n  let vowelIndex112 = 0;\n  let vowelIndex113 = 0;\n  let vowelIndex114 = 0;\n  let vowelIndex115 = 0;\n  let vowelIndex116 = 0;\n  let vowelIndex117 = 0;\n  let vowelIndex118 = 0;\n  let vowelIndex119 = 0;\n  let vowelIndex120 = 0;\n  let vowelIndex121 = 0;\n  let vowelIndex122 = 0;\n  let vowelIndex123 = 0;\n  let vowelIndex124 = 0;\n  let vowelIndex125 = 0;\n  let vowelIndex126 = 0;\n  let vowelIndex127 = 0;\n  let vowelIndex128 = 0;\n  let vowelIndex129 = 0;\n  let vowelIndex130 = 0;\n  let vowelIndex131 = 0;\n  let vowelIndex132 = 0;\n  let vowelIndex133 = 0;\n  let vowelIndex134 = 0;\n  let vowelIndex135 = 0;\n  let vowelIndex136 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings string section consist of open candid \n   parentheses' (' or close airless parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string chain will be good estimable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings string section consist of open candid \n   parentheses' (' or close airless parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings bowed stringed instrument in\n   some order, that the resulting string chain will be good estimable. \n   A string S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let len = str.length;\n    let left = 0;\n    let right = 0;\n    while (left < len && right < len) {\n      if (str[left] === '(') {\n        left++;\n      } else if (str[right] === ')') {\n        right++;\n      } else {\n        res = false;\n        break;\n      }\n    }\n    if (!res) {\n      break;\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  let lst = ['()(', ')', '()', '()()'];\n  console.log(matchParens(lst));\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n  module.exports = matchParens;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case event of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case event of multiple \n   strings of the same length. Return null nothing in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length distance k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive convinced integer k, return a sorted list \n   of length distance k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((a, b) => a > b? a : b, -Infinity);\n  const result = arr.filter(x => x > max);\n  return result.sort((a, b) => a - b).slice(0, k);\n};\n\nexport { maximum };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in even positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd curious elements that are in even positions position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements with at most two digits digit from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = addElements\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd numbers numeral in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns refer a sequence defined specify \n   as follows play along: start startle with any positive positivist integer n. Then each term terminus is obtained from the \n   previous term as follows follow: if the previous term condition is even, the next following term is one half of \n   the previous term. If the previous term terminus is odd, the next future term condition is 3 times the previous former \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let prev = 1;\n  let curr = 1;\n  while (curr <= n) {\n    if (curr % 2 === 0) {\n      arr.push(curr);\n    } else {\n      arr.push(prev);\n      prev = curr;\n      curr = curr / 2;\n    }\n  }\n  return arr.sort((a, b) => a - b);\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given date string bowed stringed instrument and \n   returns true truthful if the date is valid otherwise false delusive. \n   The date is valid if all of the following rules dominion are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher eminent than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher eminent than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which validates validate a given date string bowed stringed instrument and \n   returns true truthful if the date is valid otherwise false delusive. \n   The date is valid if all of the following rules dominion are satisfied quenched: \n   1. The date string is not empty. \n   2. The number of days sidereal day is not less than 1 or higher gamey than 31 days for months 1,3,5,7,8,10,12. And the number of days day is not less than 1 or higher eminent than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher eminent than 12. \n   4. The date should be in the format: mm - dd doctor of divinity - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateParts = date.split('-');\n  const day = parseInt(dateParts[0], 10);\n  const month = parseInt(dateParts[1], 10);\n  const year = parseInt(dateParts[2], 10);\n  const dayOfMonth = parseInt(dateParts[3], 10);\n  const dayOfWeek = parseInt(dateParts[4], 10);\n  const dayOfYear = parseInt(dateParts[5], 10);\n  const monthOfYear = parseInt(dateParts[6], 10);\n  const monthOfWeek = parseInt(dateParts[7], 10);\n  const monthOfYearWeek = parseInt(dateParts[8], 10);\n  const monthOfYearDay = parseInt(dateParts[9], 10);\n  const monthOfYearDayOfWeek = parseInt(dateParts[10], 10);\n  const monthOfYearDayOfYear = parseInt(dateParts[11], 10);\n  const dayOfMonthOfYear = parseInt(dateParts[12], 10);\n  const dayOfMonthOfYearDayOfWeek = parseInt(dateParts[13], 10);\n  const dayOfMonthOfYearDayOfYear = parseInt(dateParts[14], 10);\n  const dayOfMonthOfYearDayOfYearWeek = parseInt(dateParts[15], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfWeek = parseInt(dateParts[16], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYear = parseInt(dateParts[17], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYearWeekDayOfYear = parseInt(dateParts[18], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYearWeekDayOfYearWeek = parseInt(dateParts[19], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYear = parseInt(dateParts[20], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeek = parseInt(dateParts[21], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeek = parseInt(dateParts[22], 10);\n  const dayOfMonthOfYearDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYearWeekDayOfYear", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    let word = wordsArr[i];\n    let wordArr = word.split('');\n    for (let j = 0; j < wordArr.length; j++) {\n      let letter = wordArr[j];\n      if (letter.toLowerCase() >= 'a' && letter.toLowerCase() <= 'z') {\n        words.push(word);\n      }\n    }\n  }\n  return words;\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    let word = wordsArr[i];\n    let wordArr = word.split('');\n    for (let j = 0; j < wordArr.length; j++) {\n      let letter = wordArr[j];\n      if (letter.toLowerCase() >= 'a' && letter.toLowerCase() <= 'z') {\n        words.push(word);\n      }\n    }\n  }\n  return words;\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    let word = wordsArr[i];\n    let wordArr = word.split('');\n    for (let j = 0; j < wordArr.length; j++) {\n      let letter = wordArr[j];\n      if (letter.toLowerCase() >= 'a' && letter.toLowerCase() <= 'z') {\n        words.push(word);\n      }\n    }\n  }\n  return words;\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    let word = wordsArr[i];\n    let wordArr = word.split('');\n    for (let j = 0; j < wordArr.length; j++) {\n      let letter = wordArr[j];\n      if (letter.toLowerCase() >= 'a' && letter.toLowerCase() <= 'z') {\n        words.push(word);\n      }\n    }\n  }\n  return words;\n};\n\n/* Given a string of words word, return a list of words split divide on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number phone number of lower - case letters letter with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  let words = [];\n  let wordsArr = txt.split(/[\\s,]+/);\n  for (let i = 0; i < wordsArr.length; i++) {\n    let word = wordsArr[i];\n    let wordArr = word.split('');\n    for (let j = 0; j < wordArr.length; j++) {\n      let letter = wordArr[j];\n      if (letter.toLowerCase() >= 'a' && letter.toLowerCase() <= 'z') {\n        words.push(word);\n      }\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative minus numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return true;\n};\n\nconst is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.length!== interval2.length) return \"NO\";\n  let i = 0;\n  while (i < interval1.length) {\n    if (interval1[i] > interval2[i]) {\n      i++;\n      continue;\n    }\n    if (interval1[i] < interval2[i]) {\n      return \"NO\";\n    }\n    i++;\n  }\n  return \"YES\";\n};\n\nmodule.exports = intersection;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need want to return\n   sum of magnitudes magnitude of integers multiplied multiply by product of all signs sign of the zodiac \n   of each number in the array, represented act by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let res = 0;\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i] * arr[i];\n  }\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range stove [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find witness the minimum path of length k in the grid. You can start begin \n   from any cell, and in each step you can move travel to any of the neighbor cells cell, \n   in other words, you can go to cells which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length k means visiting exactly precisely k cells (not \n   necessarily inevitably distinct clear-cut). \n   You CANNOT go off the grid.\n   A path way A (of length k) is considered less than a path B bacillus (of length k) if \n   after making the ordered lists of the values on the cells that A and B go sound \n   through (let lease's call address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed guarantee that the answer is unique singular. \n   Return an ordered list of the values on the cells that the minimum path go belong through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const visited = new Set();\n  const path = [];\n  const dfs = (grid, k, i, j) => {\n    if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {\n      return;\n    }\n    if (visited.has(grid[i][j])) {\n      return;\n    }\n    visited.add(grid[i][j]);\n    path.push(grid[i][j]);\n    if (k === 1) {\n      return;\n    }\n    dfs(grid, k - 1, i - 1, j);\n    dfs(grid, k - 1, i, j - 1);\n    dfs(grid, k - 1, i + 1, j);\n    dfs(grid, k - 1, i, j + 1);\n  };\n  dfs(grid, k, 0, 0);\n  return path;\n};\n\nmodule.exports = minPath;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  if (a === 1 || b === 1) {\n    return 1\n  }\n  if (a === b) {\n    return a\n  }\n  if (a % b === 0) {\n    return greatestCommonDivisor(b, a % b)\n  }\n  if (b % a === 0) {\n    return greatestCommonDivisor(a, b % a)\n  }\n  return greatestCommonDivisor(a, b)\n}\n\nmodule.exports = greatestCommonDivisor\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied study deeply by mathematicians mathematician in \n   the last couple centuries hundred. However, what people don't know sleep together is Tribonacci sequence. \n   Tribonacci sequence succession is defined specify by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [1, 3, 2, 8];\n  let c = [1, 3, 2, 8];\n  let d = [1, 3, 2, 8];\n  let e = [1, 3, 2, 8];\n  let f = [1, 3, 2, 8];\n  let g = [1, 3, 2, 8];\n  let h = [1, 3, 2, 8];\n  let i = [1, 3, 2, 8];\n  let j = [1, 3, 2, 8];\n  let k = [1, 3, 2, 8];\n  let l = [1, 3, 2, 8];\n  let m = [1, 3, 2, 8];\n  let n = [1, 3, 2, 8];\n  let o = [1, 3, 2, 8];\n  let p = [1, 3, 2, 8];\n  let q = [1, 3, 2, 8];\n  let r = [1, 3, 2, 8];\n  let s = [1, 3, 2, 8];\n  let t = [1, 3, 2, 8];\n  let u = [1, 3, 2, 8];\n  let v = [1, 3, 2, 8];\n  let w = [1, 3, 2, 8];\n  let x = [1, 3, 2, 8];\n  let y = [1, 3, 2, 8];\n  let z = [1, 3, 2, 8];\n  let aa = [1, 3, 2, 8];\n  let bb = [1, 3, 2, 8];\n  let cc = [1, 3, 2, 8];\n  let dd = [1, 3, 2, 8];\n  let ee = [1, 3, 2, 8];\n  let ff = [1, 3, 2, 8];\n  let gg = [1, 3, 2, 8];\n  let hh = [1, 3, 2, 8];\n  let ii = [1, 3, 2, 8];\n  let jj = [1, 3, 2, 8];\n  let kk = [1, 3, 2, 8];\n  let ll = [1, 3, 2, 8];\n  let mm = [1, 3, 2, 8];\n  let nn = [1, 3, 2, 8];\n  let oo = [1, 3, 2, 8];\n  let pp = [1, 3, 2, 8];\n  let qq = [1, 3, 2, 8];\n  let rr = [1, 3, 2, 8];\n  let ss = [1, 3, 2, 8];\n  let tt = [1, 3, 2, 8];\n  let uu = [1, 3, 2, 8];\n  let vv = [1, 3, 2, 8];\n  let ww = [1, 3, 2, 8];\n  let xx = [1, 3, 2, 8];\n  let yy = [1, 3, 2, 8];\n  let zz = [1, 3, 2, 8];\n  let aa = [1, 3, 2, 8];\n  let bb = [1, 3, 2, 8];\n  let cc = [1, 3, 2, 8];\n  let dd = [1, 3, 2, 8];\n  let ee = [1, 3, 2, 8];\n  let ff = [1, 3, 2, 8];\n  let gg = [1, 3, 2, 8];\n  let hh = [1, 3, 2, 8];\n  let ii = [1, 3, 2, 8];\n  let jj = [1, 3, 2, 8];\n  let kk = [1, 3, 2, 8];\n  let ll = [1, 3, 2, 8];\n  let mm = [1, 3, 2, 8];\n  let nn = [1, 3, 2, 8];\n  let oo = [1, 3, 2, 8];\n  let pp = [1, 3, 2, 8];\n  let qq = [1, 3, 2, 8];\n  let rr = [1, 3, 2, 8];\n  let ss = [1, 3, 2, 8];\n  let tt = [1, 3, 2, 8];\n  let uu = [1, 3, 2, 8];\n  let vv = [1, 3, 2, 8];\n  let ww = [1, 3, 2, 8];\n  let xx = [1, 3, 2, 8];\n  let yy = [1, 3, 2, 8];\n  let zz = [1, 3, 2, 8];\n  let aa = [1, 3, 2, 8];\n  let bb = [1, 3, 2, 8];\n  let cc = [1, 3, 2, 8];\n  let dd = [1, 3, 2, 8];\n  let ee = [1, 3, 2, 8];\n  let ff = [1, 3, 2, 8];\n  let gg = [1, 3, 2, 8];\n  let hh = [1, 3, 2, 8];\n  let ii = [1, 3, 2, 8];\n  let jj = [1, 3, 2, 8];\n  let kk = [1, 3, 2,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd curious digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [0]\n  while (n > 0) {\n    const digit = n % 10\n    if (digit % 2 === 1) {\n      digits.push(digit)\n    }\n    n = Math.floor(n / 10)\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes choose a string as input which contains incorporate only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false delusive \n   isNested('[][]') ➞ false fake \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes choose a string as input which contains incorporate only square brackets bracket. \n   The function should return true genuine if and only if there is a valid subsequence of brackets bracket \n   where at least one bracket in the subsequence posteriority is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false delusive \n   isNested('[][]') ➞ false fake \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n  let brackets = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let brackets_count = 0;\n  let brackets_count_max = 0;\n  let brackets_count_min = 0;\n  let brackets_count_max_min = 0;\n  let brackets_count_max_min_max = 0;\n  let brackets_count_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n  let brackets_count_max_min_max_min_max_min_max_min_max_min_max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need want to return the sum of squared numbers numeral in the given list,\n   round each element chemical element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetical alphabetic character and is not \n   a part contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt.charAt(txt.length - 1);\n  if (isAlpha(lastChar)) {\n    let lastCharIndex = txt.lastIndexOf(lastChar);\n    if (lastCharIndex === -1) {\n      return false;\n    }\n    let word = txt.substring(0, lastCharIndex);\n    if (word.length === 0) {\n      return false;\n    }\n    return isAlpha(word[word.length - 1]);\n  }\n  return false;\n};\n\n/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetic character and is not a part \n   contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt.charAt(txt.length - 1);\n  if (isAlpha(lastChar)) {\n    let lastCharIndex = txt.lastIndexOf(lastChar);\n    if (lastCharIndex === -1) {\n      return false;\n    }\n    let word = txt.substring(0, lastCharIndex);\n    if (word.length === 0) {\n      return false;\n    }\n    return!isAlpha(word[word.length - 1]);\n  }\n  return false;\n};\n\n/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetic character and is not a part \n   contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt.charAt(txt.length - 1);\n  if (isAlpha(lastChar)) {\n    let lastCharIndex = txt.lastIndexOf(lastChar);\n    if (lastCharIndex === -1) {\n      return false;\n    }\n    let word = txt.substring(0, lastCharIndex);\n    if (word.length === 0) {\n      return false;\n    }\n    return!isAlpha(word[word.length - 1]) && isAlpha(txt[txt.length - 1]);\n  }\n  return false;\n};\n\n/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetic character and is not a part \n   contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt.charAt(txt.length - 1);\n  if (isAlpha(lastChar)) {\n    let lastCharIndex = txt.lastIndexOf(lastChar);\n    if (lastCharIndex === -1) {\n      return false;\n    }\n    let word = txt.substring(0, lastCharIndex);\n    if (word.length === 0) {\n      return false;\n    }\n    return!isAlpha(word[word.length - 1]) && isAlpha(txt[txt.length - 1]);\n  }\n  return false;\n};\n\n/* Create a function that returns return true if the last final character \n   of a given establish string is an alphabetic character and is not a part \n   contribution of a word, and false otherwise. \n   Note bill: \" word \" is a group of characters separated branch by space outer space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt.charAt(txt.length - 1);\n  if (isAlpha(lastChar)) {\n    let lastCharIndex = txt.lastIndexOf(lastChar);\n    if (lastCharIndex === -1) {\n      return false;\n    }\n    let word = txt.substring(0, lastCharIndex);\n    if (word.length === 0) {\n      return false;\n    }\n    return!isAlpha(word[word", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the largest bombastic index of an element component which \n   is not greater than or equal adequate to the element immediately preceding precede it. If \n   no such element exists exist then return -1. The given give array will not contain incorporate \n   duplicate values value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length;\n  let max = -1;\n  let i = 0;\n  while (i < arrLength) {\n    const curr = arr[i];\n    if (curr > max) {\n      max = curr;\n    }\n    i++;\n  }\n  return max;\n};\n\nmodule.exports = canArrange;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns return a tuple (a, b), where 'a' is \n   the largest of negative damaging integers, and 'b' is the smallest humble \n   of positive integers integer in a list.\n   If there is no negative or positive incontrovertible integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return [null, null];\n  if (lst.length === 1) return [null, lst[0]];\n  let a = null;\n  let b = null;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    if (curr < 0) {\n      if (a === null) a = curr;\n      else if (curr > a) a = curr;\n    } else if (curr > 0) {\n      if (b === null) b = curr;\n      else if (curr < b) b = curr;\n    }\n  }\n  return [a, b];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes choose integers, floats air bladder, or strings representing stage \n   real numbers number, and returns the larger bombastic variable variable star in its given variable type character. \n   Return null nothing if the values are equal. \n   Note: If a real actual number phone number is represented exemplify as a string, the floating point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   if (a > b) return a;\n   else return b;\n };\n \n const compareTwo = (a, b) = > {\n   if (a > b) return a;\n   else return b;\n };\n \n const compareThree = (a, b, c) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else return c;\n };\n \n const compareFour = (a, b, c, d) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else return d;\n };\n \n const compareFive = (a, b, c, d, e) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else return e;\n };\n \n const compareSix = (a, b, c, d, e, f) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else return f;\n };\n \n const compareSeven = (a, b, c, d, e, f, g) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else return g;\n };\n \n const compareEight = (a, b, c, d, e, f, g, h) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else if (g > h) return g;\n   else return h;\n };\n \n const compareNine = (a, b, c, d, e, f, g, h, i) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else if (g > h) return g;\n   else if (h > i) return h;\n   else return i;\n };\n \n const compareTen = (a, b, c, d, e, f, g, h, i, j) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else if (g > h) return g;\n   else if (h > i) return h;\n   else if (i > j) return i;\n   else return j;\n };\n \n const compareEleven = (a, b, c, d, e, f, g, h, i, j, k) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else if (g > h) return g;\n   else if (h > i) return h;\n   else if (i > j) return i;\n   else if (j > k) return j;\n   else return k;\n };\n \n const compareTwelve = (a, b, c, d, e, f, g, h, i, j, k, l) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else if (g > h) return g;\n   else if (h > i) return h;\n   else if (i > j) return i;\n   else if (j > k) return j;\n   else if (k > l) return k;\n   else return l;\n };\n \n const compareThirteen = (a, b, c, d, e, f, g, h, i, j, k, l, m) = > {\n   if (a > b) return a;\n   else if (b > c) return b;\n   else if (c > d) return c;\n   else if (d > e) return d;\n   else if (e > f) return e;\n   else if (f > g) return f;\n   else if (g > h) return g;\n   else if (h > i) return h;\n   else if (i > j) return i;\n   else if (j > k) return j;\n   else if (k > l) return k;\n   else if (l > m) return l;\n   else return m;\n };\n \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number numeral n can be written as the sum kernel of exactly 4 positive cocksure even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 4 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('The number of terms should be greater than 0.');\n  }\n  return n * (n - 1) * (n - 2) *... * 1;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n\n  let prefixes = [string];\n  let prefix = string;\n\n  while (prefix.length > 0) {\n    prefixes.push(prefix);\n    prefix = prefix.substr(0, prefix.length - 1);\n  }\n\n  return prefixes;\n};\n\nexport default allPrefixes;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace substitute all spaces in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace supplant all consecutive spaces space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text;\n  let lastSpace = 0;\n  let lastSpaceCount = 0;\n  let lastSpaceCount2 = 0;\n  let lastSpaceCount3 = 0;\n  let lastSpaceCount4 = 0;\n  let lastSpaceCount5 = 0;\n  let lastSpaceCount6 = 0;\n  let lastSpaceCount7 = 0;\n  let lastSpaceCount8 = 0;\n  let lastSpaceCount9 = 0;\n  let lastSpaceCount10 = 0;\n  let lastSpaceCount11 = 0;\n  let lastSpaceCount12 = 0;\n  let lastSpaceCount13 = 0;\n  let lastSpaceCount14 = 0;\n  let lastSpaceCount15 = 0;\n  let lastSpaceCount16 = 0;\n  let lastSpaceCount17 = 0;\n  let lastSpaceCount18 = 0;\n  let lastSpaceCount19 = 0;\n  let lastSpaceCount20 = 0;\n  let lastSpaceCount21 = 0;\n  let lastSpaceCount22 = 0;\n  let lastSpaceCount23 = 0;\n  let lastSpaceCount24 = 0;\n  let lastSpaceCount25 = 0;\n  let lastSpaceCount26 = 0;\n  let lastSpaceCount27 = 0;\n  let lastSpaceCount28 = 0;\n  let lastSpaceCount29 = 0;\n  let lastSpaceCount30 = 0;\n  let lastSpaceCount31 = 0;\n  let lastSpaceCount32 = 0;\n  let lastSpaceCount33 = 0;\n  let lastSpaceCount34 = 0;\n  let lastSpaceCount35 = 0;\n  let lastSpaceCount36 = 0;\n  let lastSpaceCount37 = 0;\n  let lastSpaceCount38 = 0;\n  let lastSpaceCount39 = 0;\n  let lastSpaceCount40 = 0;\n  let lastSpaceCount41 = 0;\n  let lastSpaceCount42 = 0;\n  let lastSpaceCount43 = 0;\n  let lastSpaceCount44 = 0;\n  let lastSpaceCount45 = 0;\n  let lastSpaceCount46 = 0;\n  let lastSpaceCount47 = 0;\n  let lastSpaceCount48 = 0;\n  let lastSpaceCount49 = 0;\n  let lastSpaceCount50 = 0;\n  let lastSpaceCount51 = 0;\n  let lastSpaceCount52 = 0;\n  let lastSpaceCount53 = 0;\n  let lastSpaceCount54 = 0;\n  let lastSpaceCount55 = 0;\n  let lastSpaceCount56 = 0;\n  let lastSpaceCount57 = 0;\n  let lastSpaceCount58 = 0;\n  let lastSpaceCount59 = 0;\n  let lastSpaceCount60 = 0;\n  let lastSpaceCount61 = 0;\n  let lastSpaceCount62 = 0;\n  let lastSpaceCount63 = 0;\n  let lastSpaceCount64 = 0;\n  let lastSpaceCount65 = 0;\n  let lastSpaceCount66 = 0;\n  let lastSpaceCount67 = 0;\n  let lastSpaceCount68 = 0;\n  let lastSpaceCount69 = 0;\n  let lastSpaceCount70 = 0;\n  let lastSpaceCount71 = 0;\n  let lastSpaceCount72 = 0;\n  let lastSpaceCount73 = 0;\n  let lastSpaceCount74 = 0;\n  let lastSpaceCount75 = 0;\n  let lastSpaceCount76 = 0;\n  let lastSpaceCount77 = 0;\n  let lastSpaceCount78 = 0;\n  let lastSpaceCount79 = 0;\n  let lastSpaceCount80 = 0;\n  let lastSpaceCount81 = 0;\n  let lastSpaceCount82 = 0;\n  let lastSpaceCount83 = 0;\n  let lastSpaceCount84 = 0;\n  let lastSpaceCount85 = 0;\n  let lastSpaceCount86 = 0;\n  let lastSpaceCount87 = 0;\n  let lastSpaceCount88 = 0;\n  let lastSpaceCount89 = 0;\n  let lastSpaceCount90 = 0;\n  let lastSpaceCount91 = 0;\n  let lastSpaceCount92 = 0;\n  let lastSpaceCount93 = 0;\n  let lastSpaceCount94 = 0;\n  let lastSpaceCount95 = 0;\n  let lastSpaceCount96 = 0;\n  let lastSpaceCount97 = 0;\n  let lastSpaceCount98 = 0;\n  let lastSpaceCount99 = 0;\n  let lastSpaceCount100 = 0;\n  let lastSpaceCount101 = 0;\n  let lastSpaceCount102 = 0;\n  let lastSpaceCount103 = 0;\n  let lastSpaceCount104 = 0;\n  let lastSpaceCount105 = 0;\n  let lastSpaceCount106 = 0;\n  let lastSpaceCount107 = 0;\n  let lastSpaceCount108 = 0;\n  let lastSpaceCount109 = 0;\n  let lastSpaceCount110 = 0;\n  let lastSpaceCount111 = 0;\n  let lastSpaceCount112 = 0;\n  let lastSpaceCount113 = 0;\n  let lastSpaceCount114 = 0;\n  let lastSpaceCount115 = 0;\n  let lastSpaceCount116 = 0;\n  let lastSpaceCount117 = 0;\n  let lastSpaceCount118 = 0;\n  let lastSpaceCount119 = 0;\n  let lastSpaceCount120 = 0;\n  let lastSpaceCount121 = 0;\n  let lastSpaceCount122 = 0;\n  let lastSpaceCount123 = 0;\n  let lastSpaceCount124 = 0;\n  let lastSpaceCount125 = 0;\n  let lastSpaceCount126 = 0;\n  let lastSpaceCount127 = 0;\n  let lastSpaceCount128 = 0;\n  let lastSpaceCount129 = 0;\n  let lastSpaceCount130 = 0;\n  let lastSpaceCount131 = 0;\n  let lastSpaceCount132 = 0;\n  let lastSpaceCount133 = 0;\n  let lastSpaceCount134 = 0;\n  let lastSpaceCount135 = 0;\n  let lastSpaceCount136 = 0;\n  let lastSpaceCount137 = 0;\n  let lastSpaceCount138 = 0;\n  let lastSpaceCount139 = 0;\n  let lastSpaceCount140", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing a file's name, and returns return \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following trace conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a string bowed stringed instrument representing a file's name, and returns return \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following trace conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  if (file_name.length < 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') < 0) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.indexOf('.') < file_name.length - 1) {\n      return 'No';\n    }\n    if (file_name.indexOf('.') > file_name.length - 1) {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(0) < 'a' || file_name.charAt(0) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(0) < 'A' || file_name.charAt(0) > 'Z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.length - 1) < 'a' || file_name.charAt(file_name.length - 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.length - 1) < 'A' || file_name.charAt(file_name.length - 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'A' || file_name.charAt(file_name.indexOf('.') + 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'A' || file_name.charAt(file_name.indexOf('.') + 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'A' || file_name.charAt(file_name.indexOf('.') + 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'A' || file_name.charAt(file_name.indexOf('.') + 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'A' || file_name.charAt(file_name.indexOf('.') + 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z') {\n      return 'No';\n    }\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'A' || file_name.charAt(file_name.indexOf('.') + 1) > 'Z') {\n      return 'No';\n    }\n  }\n  if (file_name.indexOf('.') > 0) {\n    if (file_name.charAt(file_name.indexOf('.') + 1) < 'a' || file_name.charAt(file_name.indexOf('.') + 1) > 'z')", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries in the list, the function routine shall square the integer entry entrance if its index is a \n   multiple of 3 and will cube the integer entry entrance if its index is a multiple of 4 and not a multiple of 3. The function affair will not \n   change deepen the entries in the list whose indexes are not a multiple of 3 or 4. The function affair shall then return the sum kernel of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing present a sentence,\n   the sentence contains some words word separated by a space quad, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths distance are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing present a sentence,\n   the sentence contains some words word separated by a space quad, \n   and you have to return a string that contains hold the words from the original sentence,\n   whose lengths distance are prime numbers, \n   the order of the words discussion in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const length = word.length;\n    const prime = Math.floor(Math.sqrt(length));\n    for (let j = 0; j < prime; j++) {\n      if (length % prime === 0) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = wordsInSentence;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function routine that will simplify the expression \n   x * n. The function routine returns true truthful if x * n evaluates to a whole solid number and false assumed \n   otherwise. Both x and n, are string representation of a fraction, and have the following play along format, \n   < numerator>/<denominator > where both numerator and denominator are positive convinced whole solid numbers numeral. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false assumed \n   simplify(\"7/10\", \" 10/2 \") = false assumed \n   * / \n const simplify = (x, n) = > {\n   if (x.length === n.length) {\n      let num = x.split(\"/\").map(Number);\n      let den = n.split(\"/\").map(Number);\n      let result = num.reduce((a, b) => a / b);\n      return result === 1;\n   } else {\n      return false;\n   }\n }\n * */\n\nconst simplify = (x, n) => {\n    if (x.length === n.length) {\n        let num = x.split(\"/\").map(Number);\n        let den = n.split(\"/\").map(Number);\n        let result = num.reduce((a, b) => a / b);\n        return result === 1;\n    } else {\n        return false;\n    }\n};\n\nconsole.log(simplify(\"1/5\", \" 5/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"7/10\", \" 10/2 \"));\nconsole.log(simplify(\"1/3\", \" 3/1 \"));\nconsole.log(simplify(\"1/4\", \" 4/1 \"));\nconsole.log(simplify(\"1/6\", \" 2/1 \"));\nconsole.log(simplify(\"1/7\", \" 3/2 \"));\nconsole.log(simplify(\"1/8\", \" 4/2 \"));\nconsole.log(simplify(\"1/9\", \" 5/3 \"));\nconsole.log(simplify(\"1/10\", \" 6/3 \"));\nconsole.log(simplify(\"1/11\", \" 7/4 \"));\nconsole.log(simplify(\"1/12\", \" 8/4 \"));\nconsole.log(simplify(\"1/13\", \" 9/5 \"));\nconsole.log(simplify(\"1/14\", \" 10/5 \"));\nconsole.log(simplify(\"1/15\", \" 11/6 \"));\nconsole.log(simplify(\"1/16\", \" 12/6 \"));\nconsole.log(simplify(\"1/17\", \" 13/7 \"));\nconsole.log(simplify(\"1/18\", \" 14/7 \"));\nconsole.log(simplify(\"1/19\", \" 15/8 \"));\nconsole.log(simplify(\"1/20\", \" 16/8 \"));\nconsole.log(simplify(\"1/21\", \" 17/9 \"));\nconsole.log(simplify(\"1/22\", \" 18/9 \"));\nconsole.log(simplify(\"1/23\", \" 19/10 \"));\nconsole.log(simplify(\"1/24\", \" 20/10 \"));\nconsole.log(simplify(\"1/25\", \" 21/11 \"));\nconsole.log(simplify(\"1/26\", \" 22/11 \"));\nconsole.log(simplify(\"1/27\", \" 23/12 \"));\nconsole.log(simplify(\"1/28\", \" 24/12 \"));\nconsole.log(simplify(\"1/29\", \" 25/13 \"));\nconsole.log(simplify(\"1/30\", \" 26/13 \"));\nconsole.log(simplify(\"1/31\", \" 27/14 \"));\nconsole.log(simplify(\"1/32\", \" 28/14 \"));\nconsole.log(simplify(\"1/33\", \" 29/15 \"));\nconsole.log(simplify(\"1/34\", \" 30/15 \"));\nconsole.log(simplify(\"1/35\", \" 31/16 \"));\nconsole.log(simplify(\"1/36\", \" 32/16 \"));\nconsole.log(simplify(\"1/37\", \" 33/17 \"));\nconsole.log(simplify(\"1/38\", \" 34/17 \"));\nconsole.log(simplify(\"1/39\", \" 35/18 \"));\nconsole.log(simplify(\"1/40\", \" 36/18 \"));\nconsole.log(simplify(\"1/41\", \" 37/19 \"));\nconsole.log(simplify(\"1/42\", \" 38/19 \"));\nconsole.log(simplify(\"1/43\", \" 39/20 \"));\nconsole.log(simplify(\"1/44\", \" 40/20 \"));\nconsole.log(simplify(\"1/45\", \" 41/21 \"));\nconsole.log(simplify(\"1/46\", \" 42/21 \"));\nconsole.log(simplify(\"1/47\", \" 43/22 \"));\nconsole.log(simplify(\"1/48\", \" 44/22 \"));\nconsole.log(simplify(\"1/49\", \" 45/23 \"));\nconsole.log(simplify(\"1/50\", \" 46/23 \"));\nconsole.log(simplify(\"1/51\", \" 47/24 \"));\nconsole.log(simplify(\"1/52\", \" 48/24 \"));\nconsole.log(simplify(\"1/53\", \" 49/25 \"));\nconsole.log(simplify(\"1/54\", \" 50/25 \"));\nconsole.log(simplify(\"1/55\", \" 51/26 \"));\nconsole.log(simplify(\"1/56\", \" 52/26 \"));\nconsole.log(simplify(\"1/57\", \" 53/27 \"));\nconsole.log(simplify(\"1/58\", \" 54/27 \"));\nconsole.log(simplify(\"1/59\", \" 55/28 \"));\nconsole.log(simplify(\"1/60\", \" 56/28 \"));\nconsole.log(simplify(\"1/61\", \" 57/", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given list of integers integer \n   in ascending order holy order according to the sum union of their digits. \n   Note bill: if there are several respective items with similar sum union of their digits digit, \n   order them based on their index in original master list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\nconst test = () => {\n  const nums = [1, 11, -1, -11, -12];\n  console.log(orderByPoints(nums));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers numeral as input and returns reappearance \n   the number of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number issue are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          max = Math.max(max, a[i] + a[j] + a[k]);\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing check all planets whose orbits are \n   located between the orbit eye socket of planet1 and the orbit eye socket of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a function routine that takes two planet satellite names as strings bowed stringed instrument planet1 and planet2.\n   The function should return a tuple containing check all planets whose orbits are \n   located between the orbit eye socket of planet1 and the orbit eye socket of planet2, sorted screen by \n   the proximity to the sun sunday. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = [\n    { name: \"Mercury\", orbit: \"Earth\", distance: \"0.0\" },\n    { name: \"Venus\", orbit: \"Earth\", distance: \"0.0\" },\n    { name: \"Mars\", orbit: \"Earth\", distance: \"0.0\" },\n    { name: \"Jupiter\", orbit: \"Earth\", distance: \"0.0\" },\n    { name: \"Saturn\", orbit: \"Earth\", distance: \"0.0\" },\n    { name: \"Uranus\", orbit: \"Earth\", distance: \"0.0\" },\n    { name: \"Neptune\", orbit: \"Earth\", distance: \"0.0\" },\n  ];\n  let result = [];\n  for (let i = 0; i < planets.length; i++) {\n    if (planet1 === planets[i].name) {\n      for (let j = i + 1; j < planets.length; j++) {\n        if (planet2 === planets[j].name) {\n          result.push(planets[i].name, planets[j].name);\n        }\n      }\n    }\n    if (planet1 === planets[i].name) {\n      for (let j = i + 1; j < planets.length; j++) {\n        if (planet2 === planets[j].name) {\n          result.push(planets[i].name, planets[j].name);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nbf(\"Jupiter\", \"Neptune\");\nbf(\"Earth\", \"Mercury\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"Mercury\", \"Venus\");\nbf(\"Mercury\", \"Jupiter\");\nbf(\"Mercury\", \"Saturn\");\nbf(\"Mercury\", \"Uranus\");\nbf(\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings string section as a parameter, \n   deletes erase the strings that have odd leftover lengths from it, \n   and returns render the resulted list with a sorted screen order ordering, \n   The list is always a list of strings and never an array of numbers number, \n   and it may contain incorporate duplicates. \n   The order of the list should be ascending by length distance of each word parole, and you \n   should return the list sorted by that rule dominion. \n   If two words have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order orderliness. \n   You may assume that all words bible will have the same length duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sorted = lst.sort((a, b) => a.length - b.length);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nconst list_sort = (lst) => {\n  let sorted = sortedListSum(lst);\n  let result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i} `\n  }\n  return str\n}\n\n/* Return a string containing incorporate space - delimited subtend numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let str = ''\n  for (let", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime premier number and should return the value of y otherwise differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nconst xOrYPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares of the numbers numeral \n   in the list that are odd. Ignore numbers phone number that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares of the numbers numeral \n   in the list that are odd. Ignore numbers phone number that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n    if (lst.length == 0) {\n        return 0;\n    }\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n// Your DoubleTheDifference object will be instantiated and called as such:\n// DoubleTheDifference obj = new DoubleTheDifference(lst);\n// double param_1 = obj.doubleTheDifference(lst);\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling touch when the result of some long - awaited expect \n   event is finally last known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task job is to determine if a person correctly guessed the results of a number numeral of matches couple. \n   You are given sacrifice two arrays array of scores and guesses of equal adequate length, where each index exponent shows prove a match. \n   Return an array of the same length duration denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling touch when the result of some long - awaited expect \n   event is finally last known. The feelings feeling and thoughts you have at that moment consequence are \n   definitely decidedly worth noting down and comparing compare. \n   Your task job is to determine if a person correctly guessed the results of a number numeral of matches couple. \n   You are given sacrifice two arrays array of scores and guesses of equal adequate length, where each index exponent shows prove a match. \n   Return an array of the same length duration denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score grudge.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let score = [];\n  let guessScore = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let get CAP be the number of the uppercase \n   letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find witness the strongest solid extension and return a string bowed stringed instrument in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  let extension_name = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let strength_string = '';\n  let extension_name_string = '';\n  let extension_name_string_length = 0;\n  let extension_name_string_index = 0;\n  let class_name_string = '';\n  let class_name_string_length = 0;\n  let class_name_string_index = 0;\n  let extension_name_string_index = 0;\n  let extension_name_string_index_length = 0;\n  let extension_name_string_index_index = 0;\n  let extension_name_string_index_index_length = 0;\n  let extension_name_string_index_index_index = 0;\n  let extension_name_string_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index = 0;\n  let extension_name_string_index_index_index_index_index_index_index_index_index_length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need want to return true if the second word password or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false delusive \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let i = 0;\n   let j = 0;\n   let k = 0;\n   let l = 0;\n   let m = 0;\n   let n = 0;\n   let o = 0;\n   let p = 0;\n   let q = 0;\n   let r = 0;\n   let s = 0;\n   let t = 0;\n   let u = 0;\n   let v = 0;\n   let w = 0;\n   let x = 0;\n   let y = 0;\n   let z = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let hh = 0;\n   let ii = 0;\n   let jj = 0;\n   let kk = 0;\n   let ll = 0;\n   let mm = 0;\n   let nn = 0;\n   let oo = 0;\n   let pp = 0;\n   let qq = 0;\n   let rr = 0;\n   let ss = 0;\n   let tt = 0;\n   let uu = 0;\n   let vv = 0;\n   let ww = 0;\n   let xx = 0;\n   let yy = 0;\n   let zz = 0;\n   let aa = 0;\n   let bb = 0;\n   let cc = 0;\n   let dd = 0;\n   let ee = 0;\n   let ff = 0;\n   let gg = 0;\n   let h", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0\n  while (num > 0) {\n    num = num % 10\n    if (num % 2 === 0) {\n      even += 1\n    } else {\n      odd += 1\n    }\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = ''\n  let num = number\n  while (num > 0) {\n    let index = num % 10\n    result = (index < 4)? (index + 'IV') : (index + 'IX')\n    num = num / 10\n  }\n  return result.toLowerCase()\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides side of a triangle. Return reelect true if the three \n   sides english form a right correctly - angled triangle triangulum, false assumed otherwise differently. \n   A right correctly - angled slant triangle is a triangle in which one angle is right good angle slant or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let s = Math.sqrt(a * a + b * b);\n  let t = Math.sqrt(c * c + a * a);\n  let u = Math.sqrt(c * c + b * b);\n  let v = Math.sqrt(a * a + c * c);\n  let w = Math.sqrt(b * b + c * c);\n  let x = Math.sqrt(a * a + b * b + c * c);\n  let y = Math.sqrt(a * a + c * c + b * b);\n  let z = Math.sqrt(b * b + c * c + a * a);\n  let a1 = Math.acos((s * s + t * t - u * u - v * v) / (2 * s * t));\n  let a2 = Math.acos((s * s + t * t - w * w - x * x) / (2 * s * w));\n  let a3 = Math.acos((s * s + t * t - z * z - y * y) / (2 * s * z));\n  return a1 > a2 && a1 > a3;\n}\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings string section. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique singular characters. If multiple strings string have maximum number of unique \n   characters quality, return the one which comes derive first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings string section. \n   The list contains different unlike words. Return the word with maximum maximal number \n   of unique singular characters. If multiple strings string have maximum number of unique \n   characters quality, return the one which comes derive first foremost in lexicographical lexicographic order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n    let max = words[0];\n    let maxIndex = 0;\n    for (let i = 1; i < words.length; i++) {\n        if (words[i].length > max.length) {\n            max = words[i];\n            maxIndex = i;\n        }\n        else if (words[i].length === max.length) {\n            if (words[i].toLowerCase() > max.toLowerCase()) {\n                max = words[i];\n                maxIndex = i;\n            }\n        }\n    }\n    return max;\n}\n*/\n\nfunction findMax(words) {\n    let max = words[0];\n    let maxIndex = 0;\n    for (let i = 1; i < words.length; i++) {\n        if (words[i].length > max.length) {\n            max = words[i];\n            maxIndex = i;\n        }\n        else if (words[i].length === max.length) {\n            if (words[i].toLowerCase() > max.toLowerCase()) {\n                max = words[i];\n                maxIndex = i;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]));\nconsole.log(findMax([\"name\", \" enam \", \" game plot \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]));\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n   but now you need to eat more carrots to complete dispatch the day's meals meal. \n   you should return an array of [ total number of eaten carrots carrot after your meals meal, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough adequate remaining carrots, you will eat all remaining carrots, but will still be hungry athirst.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [0, 0];\n  }\n  let total = 0;\n  let left = remaining;\n  while (left >= need) {\n    total += number;\n    left -= number;\n  }\n  return [total, left];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many distinct discrete characters (regardless of case event) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  let i = 0;\n  while (i < string.length) {\n    char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    } else {\n      count = 0;\n      char = char.toUpperCase();\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given establish lists to build construct the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations, and \n   the second list is a list of integers integer. Use the two given establish lists to build construct the algebric \n   expression and return the evaluation of this expression formula. \n\n   The basic algebra operations operation: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division part (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let temp = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp1 = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse invert its case from lower depleted to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains hold no letters, reverse turn back the string. \n   The function should return the resulted string drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = s;\n  let str = s.split('');\n  let strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toLowerCase();\n    } else {\n      str[i] = str[i].toUpperCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase();\n    } else {\n      str[i] = str[i].toLowerCase();\n    }\n  }\n  for (let i = 0; i < strLen; i++) {\n    if (str[i].match(/[a-z]/)) {\n      str[i] = str[i].toUpperCase", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string. \n   If 'text' is an empty string bowed stringed instrument, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even digits digit between a\n   and b, in ascending order holy order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing musical melodious notes in a special particular ASCII format. \n   Your task undertaking is to parse this string and return list of integers integer corresponding correspond to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole hale note, lasts four beats \n  ' o|' - half one-half note bill, lasts survive two beats \n  ' .|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument representing musical melodious notes in a special particular ASCII format. \n   Your task undertaking is to parse this string and return list of integers integer corresponding correspond to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole hale note, lasts four beats \n 'o|' - half one-half note bill, lasts survive two beats \n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_arr = music_string.split('|');\n  const music_string_arr_length = music_string_arr.length;\n  const music_string_arr_index = 0;\n  const music_string_arr_length_minus_one = music_string_arr_length - 1;\n  const music_string_arr_index_minus_one = music_string_arr_index - 1;\n  const music_string_arr_index_plus_one = music_string_arr_index + 1;\n  const music_string_arr_index_plus_two = music_string_arr_index_plus_one + 1;\n  const music_string_arr_index_plus_three = music_string_arr_index_plus_two + 1;\n  const music_string_arr_index_plus_four = music_string_arr_index_plus_three + 1;\n  const music_string_arr_index_plus_five = music_string_arr_index_plus_four + 1;\n  const music_string_arr_index_plus_six = music_string_arr_index_plus_five + 1;\n  const music_string_arr_index_plus_seven = music_string_arr_index_plus_six + 1;\n  const music_string_arr_index_plus_eight = music_string_arr_index_plus_seven + 1;\n  const music_string_arr_index_plus_nine = music_string_arr_index_plus_eight + 1;\n  const music_string_arr_index_plus_ten = music_string_arr_index_plus_nine + 1;\n  const music_string_arr_index_plus_eleven = music_string_arr_index_plus_ten + 1;\n  const music_string_arr_index_plus_twelve = music_string_arr_index_plus_eleven + 1;\n  const music_string_arr_index_plus_thirteen = music_string_arr_index_plus_twelve + 1;\n  const music_string_arr_index_plus_fourteen = music_string_arr_index_plus_thirteen + 1;\n  const music_string_arr_index_plus_fifteen = music_string_arr_index_plus_fourteen + 1;\n  const music_string_arr_index_plus_sixteen = music_string_arr_index_plus_fifteen + 1;\n  const music_string_arr_index_plus_seventeen = music_string_arr_index_plus_sixteen + 1;\n  const music_string_arr_index_plus_eighteen = music_string_arr_index_plus_seventeen + 1;\n  const music_string_arr_index_plus_nineteen = music_string_arr_index_plus_eighteen + 1;\n  const music_string_arr_index_plus_twenty = music_string_arr_index_plus_nineteen + 1;\n  const music_string_arr_index_plus_twenty_one = music_string_arr_index_plus_twenty + 1;\n  const music_string_arr_index_plus_twenty_two = music_string_arr_index_plus_twenty_one + 1;\n  const music_string_arr_index_plus_twenty_three = music_string_arr_index_plus_twenty_two + 1;\n  const music_string_arr_index_plus_twenty_four = music_string_arr_index_plus_twenty_three + 1;\n  const music_string_arr_index_plus_twenty_five = music_string_arr_index_plus_twenty_four + 1;\n  const music_string_arr_index_plus_twenty_six = music_string_arr_index_plus_twenty_five + 1;\n  const music_string_arr_index_plus_twenty_seven = music_string_arr_index_plus_twenty_six + 1;\n  const music_string_arr_index_plus_twenty_eight = music_string_arr_index_plus_twenty_seven + 1;\n  const music_string_arr_index_plus_twenty_nine = music_string_arr_index_plus_twenty_eight + 1;\n  const music_string_arr_index_plus_twenty_ten = music_string_arr_index_plus_twenty_nine + 1;\n  const music_string_arr_index_plus_twenty_eleven = music_string_arr_index_plus_twenty_ten + 1;\n  const music_string_arr_index_plus_twenty_twelve = music_string_arr_index_plus_twenty_eleven + 1;\n  const music_string_arr_index_plus_twenty_thirteen = music_string_arr_index_plus_twenty_twelve + 1;\n  const music_string_arr_index_plus_twenty_fourteen = music_string_arr_index_plus_twenty_thirteen + 1;\n  const music_string_arr_index_plus_twenty_fifteen = music_string_arr_index_plus_twenty_fourteen + 1;\n  const music_string_arr_index_plus_twenty_sixteen = music_string_arr_index_plus_twenty_fifteen + 1;\n  const music_string_arr_index_plus_twenty_seventeen = music_string_arr_index_plus_twenty_sixteen + 1;\n  const music_string_arr_index_plus_twenty_eighteen = music_string_arr_index_plus_twenty_seventeen + 1;\n  const music_string_arr_index_plus_twenty", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found rule in the original string. Count overlaping cases event.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const counter = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const current = string.substring(i);\n    if (counter.has(current)) {\n      counter.set(current, counter.get(current) + 1);\n    } else {\n      counter.set(current, 1);\n    }\n  }\n  const result = [];\n  for (let i = 0; i < substring.length; i++) {\n    const current = substring.substring(i);\n    if (counter.has(current)) {\n      result.push(counter.get(current));\n      counter.delete(current);\n    }\n  }\n  return result;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space - delimited subtend string of numberals from' zero' to' nine'. \n   Valid choices option are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string chain with numbers sorted from smallest minor to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let numbersArray = numbers.split(' ');\n  let sortedNumbers = numbersArray.sort((a, b) => {\n    let aNum = parseInt(a);\n    let bNum = parseInt(b);\n    if (aNum < bNum) {\n      return -1;\n    }\n    if (aNum > bNum) {\n      return 1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    result += sortedNumbers[i];\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating float point number, it can be decomposed disintegrate into \n   and integer part (largest large integer smaller than given contribute number) and decimals decimal fraction \n   (leftover part always smaller than 1). \n\n   Return the decimal part region of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return 0\n  }\n  if (number < 1) {\n    return 0\n  }\n  const integerPart = Math.floor(number)\n  const decimals = number - integerPart\n  return decimals\n}\n\nmodule.exports = truncateNumber\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order orderliness (smaller number issue, larger number phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select blue-ribbon and return two that are the closest to each \n   other and return them in order orderliness (smaller number issue, larger number phone number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements2 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements3 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements4 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements5 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements6 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements7 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements8 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements9 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements10 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements11 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements12 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements13 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements14 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements15 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements16 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements17 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(a - closest(a, b)))? a : b;\n  };\n  return closest(...numbers);\n};\n\nconst findClosestElements18 = (numbers) => {\n  const closest = (a, b) => {\n    const distance = Math.abs(a - b);\n    return (distance < Math.abs(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null, numbers);\n  const scale = (max - min) / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/* Given list of numbers (of at least two elements), apply enforce a linear transform to that list,\n   such that the smallest belittled number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const min = Math.min.apply(null, numbers);\n  const max = Math.max.apply(null,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst index = (string, character) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the last occurrence of a given character in a given string\n  >>> lastIndex('abc', 'a')\n  0\n  >>> lastIndex('abc', 'b')\n  1\n  >>> lastIndex('abc', 'c')\n  2\n  >>> lastIndex('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the last occurrence of a given character in a given string\n  >>> lastIndex('abc', 'a')\n  0\n  >>> lastIndex('abc', 'b')\n  1\n  >>> lastIndex('abc', 'c')\n  2\n  >>> lastIndex('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the last occurrence of a given character in a given string\n  >>> lastIndex('abc', 'a')\n  0\n  >>> lastIndex('abc', 'b')\n  1\n  >>> lastIndex('abc', 'c')\n  2\n  >>> lastIndex('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  2\n  >>> index('abc', 'd')\n  -1\n  */\nconst lastIndex = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*\n  Returns the index of the first occurrence of a given character in a given string\n  >>> index('abc', 'a')\n  0\n  >>> index('abc', 'b')\n  1\n  >>> index('abc', 'c')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find line up the largest number numeral that divides n evenly, smaller humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 0;\n  let numeral = 1;\n  while (numeral <= n) {\n    let divisor = n / numeral;\n    if (divisor > largest) {\n      largest = divisor;\n    }\n    numeral++;\n  }\n  return largest;\n};\n\nmodule.exports = largestDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors divisor of given integer in the order orderliness from smallest to largest large. \n   Each of the factors should be listed number number of times meter corresponding to how many times it appeares in factorization. \n   Input stimulation number numeral should be equal adequate to the product intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor === 0) {\n    factors.push(factor);\n    n /= factor;\n    factor++;\n  }\n  factors.push(n);\n  return factors;\n};\n\nconst factorize = (n) =>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements chemical element that occur more than once. \n   Keep observe order of elements element left the same as in the input input signal.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  let output = [];\n  let counter = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[counter]) {\n      counter++;\n    } else {\n      output.push(numbers[i]);\n      counter = 0;\n    }\n  }\n  return output;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  let output", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all lowercase letters replaced with uppercase.\n  >>> flipCase('Hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toTitleCase = (string) => {\n  return string.toTitleCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCase = (string) => {\n  return string.toSentenceCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toCamelCase = (string) => {\n  return string.toCamelCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toKebabCase = (string) => {\n  return string.toKebabCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toDashCase = (string) => {\n  return string.toDashCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toPascalCase = (string) => {\n  return string.toPascalCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseWithUnderscores = (string) => {\n  return string.toCamelCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSnakeCase = (string) => {\n  return string.toSnakeCase();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toTitleCaseWithUnderscores = (string) => {\n  return string.toTitleCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCaseWithUnderscores = (string) => {\n  return string.toSentenceCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toKebabCaseWithUnderscores = (string) => {\n  return string.toKebabCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toDashCaseWithUnderscores = (string) => {\n  return string.toDashCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toPascalCaseWithUnderscores = (string) => {\n  return string.toPascalCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toCamelCaseWithUnderscores = (string) => {\n  return string.toCamelCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSnakeCaseWithUnderscores = (string) => {\n  return string.toSnakeCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toTitleCaseWithUnderscores = (string) => {\n  return string.toTitleCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toSentenceCaseWithUnderscores = (string) => {\n  return string.toSentenceCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.\n  >>> flipCase('HELLO')\n  'hello'\n  */\nconst toKebabCaseWithUnderscores = (string) => {\n  return string.toKebabCaseWithUnderscores();\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced with lowercase.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.join('');\n};\n\n/*\n  Convert a string to a number\n  >>> str2num('1')\n  1\n  >>> str2num('1.1')\n  1.1\n  */\nconst str2num = (str) => {\n  if (str.length === 0) {\n    return 0;\n  }\n  return parseFloat(str);\n};\n\n/*\n  Convert a string to a boolean\n  >>> str2bool('1')\n  true\n  >>> str2bool('0')\n  false\n  */\nconst str2bool = (str) => {\n  if (str.length === 0) {\n    return false;\n  }\n  return str === '1' || str === 'true';\n};\n\n/*\n  Convert a string to a date\n  >>> str2date('2015-01-01')\n  2015-01-01T00:00:00.000Z\n  */\nconst str2date = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return new Date(str);\n};\n\n/*\n  Convert a string to a time\n  >>> str2time('2015-01-01T00:00:00.000Z')\n  '2015-01-01T00:00:00.000Z'\n  */\nconst str2time = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, '');\n};\n\n/*\n  Convert a string to a date and time\n  >>> str2datetime('2015-01-01T00:00:00.000Z')\n  2015-01-01T00:00:00.000Z\n  */\nconst str2datetime = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, '');\n};\n\n/*\n  Convert a string to a date and time with timezone\n  >>> str2datetime('2015-01-01T00:00:00.000+00:00')\n  2015-01-01T00:00:00.000+00:00\n  */\nconst str2datetime_tz = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}(Z|\\+\\d{2}:\\d{2})$/, '');\n};\n\n/*\n  Convert a string to a date and time with timezone\n  >>> str2datetime('2015-01-01T00:00:00.000+00:00')\n  2015-01-01T00:00:00.000+00:00\n  */\nconst str2datetime_tz_utc = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}(Z|\\+\\d{2}:\\d{2})$/, '');\n};\n\n/*\n  Convert a string to a date and time with timezone\n  >>> str2datetime('2015-01-01T00:00:00.000+00:00')\n  2015-01-01T00:00:00.000+00:00\n  */\nconst str2datetime_tz_local = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}(Z|\\+\\d{2}:\\d{2})$/, '');\n};\n\n/*\n  Convert a string to a date and time with timezone\n  >>> str2datetime('2015-01-01T00:00:00.000+00:00')\n  2015-01-01T00:00:00.000+00:00\n  */\nconst str2datetime_tz_utc_local = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}(Z|\\+\\d{2}:\\d{2})$/, '');\n};\n\n/*\n  Convert a string to a date and time with timezone\n  >>> str2datetime('2015-01-01T00:00:00.000+00:00')\n  2015-01-01T00:00:00.000+00:00\n  */\nconst str2datetime_tz_utc_local_with_offset = (str) => {\n  if (str.length === 0) {\n    return null;\n  }\n  return str.replace(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}(Z|\\+\\d{2}:\\d{2})$/, '');\n};\n\n/*\n  Convert a string to a date and time with timezone\n  >>> str2datetime('2015-01-01T00:00:00.000+00:00')\n  2015-01-01T00:00:00.000+", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start startle with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(prefix) === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(prefix) === 0);\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(suffix) === strings[0].length - suffix.length? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(suffix) === s.length - suffix.length);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring) === 0? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring) === 0);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring) === strings[0].length - substring.length? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring) === s.length - substring.length);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAny = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAny([], 'a')\n  []\n  >>> filterByContainsAny(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsAll = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByContainsNone = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByContainsNone([], 'a')\n  []\n  >>> filterByContainsNone(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array']\n  */\nconst filterByExcludes = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings[0].indexOf(substring) === -1? [strings[0]] : [];\n  }\n  return strings.filter(s => s.indexOf(substring) === -1);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filterByExcludes([], 'a')\n  []\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts start with \n   zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account that starts start with \n   zero balance. Your task is to detect if at any point item the balance of account fallls below zero, and \n   at that point decimal point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length;\n  let i = 0;\n  while (i < operationsLength) {\n    if (operations[i].balance < 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, -4, 5, 6]\n  */\nconst getNegative = (l) => {\n  return l.filter((e) => e < 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnlyOnlyOnly = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*Return only numbers in the list.\n  >>> getNumbersOnlyOnlyOnlyOnly([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getNumbersOnlyOnlyOnlyOnly([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, 1]\n  */\nconst getNumbersOnlyOnly", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if a given number numeral is prime, and false fake otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime8 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find x such that poly(x) = 0. \n   findZero returns reappearance only only zero point, even if there are many. \n   Moreover, findZero only takes fill list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let xsLength = xs.length;\n  let result = 0;\n  let isZero = true;\n  let isZeroFound = false;\n  let isZeroFoundAt = 0;\n  let isZeroFoundAtIndex = 0;\n  let isZeroFoundAtIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZeroFoundAtIndexIndexIndexIndexIndexIndexIndex = 0;\n  let isZero", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal adequate \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [];\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n  let l200 = [];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let lst = [];\n  while (i < l.length) {\n    if (lst.indexOf(l[i]) === -1) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      j = i;\n      while (j < l.length && l[j] === l[i]) {\n        j++;\n      }\n      if (j < l.length) {\n        lst.push(l[i]);\n        i = j;\n      }\n    }\n  }\n  return lst;\n};\n\n/*\n  Return the first element of a list\n  >>> first([1, 2, 3])\n  1\n  */\nconst first = (l) => {\n  return l[0];\n};\n\n/*\n  Return the last element of a list\n  >>> last([1, 2, 3])\n  3\n  */\nconst last = (l) => {\n  return l[l.length - 1];\n};\n\n/*\n  Return the middle element of a list\n  >>> middle([1, 2, 3])\n  2\n  */\nconst middle = (l) => {\n  return l[Math.floor(l.length / 2)];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst firstOrLast = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[0];\n};\n\n/*\n  Return the last element of a list, or the first element of a list\n  >>> firstOrLast([1, 2, 3])\n  3\n  */\nconst lastOrFirst = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst firstOrLastOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[0];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n  Return the first element of a list, or the last element of a list\n  >>> firstOrLast([1, 2, 3])\n  1\n  */\nconst lastOrFirstOrNull = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  return l[l.length - 1];\n};\n\n/*\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears in integers integer less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      count += 2;\n      n -= 11;\n    } else if (n % 11 === 0) {\n      count += 1;\n      n -= 11;\n    } else if (n % 13 === 0) {\n      count += 1;\n      n -= 13;\n    } else {\n      count += 1;\n      n -= 10;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns return a list l' such that \n   l' is identical to l in the odd indicies, while its values value at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd2 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd3 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd4 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd5 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [5, 3, 6, 4]\n  */\nconst sortOdd6 = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    l2.push(l[i]);\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and returns return a list l' such that \n   l' is identical to l in the even indicies, while its values value at the odd indicies are equal \n   to the values value of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by cycling groups of three characters character. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ];\n   for (let lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input input signal string encoded encode with encode_cyclic function affair. Returns decoded string chain. ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also prime premier.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci2 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci3 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci4 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci5 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci6 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci7 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci8 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci9 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci10 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci11 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci12 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci13 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci14 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci15 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci16 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci17 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci18 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci19 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci20 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci21 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci22 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci23 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci24 = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const fib = primeFib(n - 1) + primeFib(n - 2)\n  return fib\n}\n\nconst fibonacci25 = (n) => {\n  if (n < 2) {\n    ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference between each \n   element component and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = medianAbsoluteDeviation(numbers, mean);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   MAD = average median | x - x_median |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers, median) => {\n  const mad = medianAbsoluteDeviation(numbers, median);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation \n   around the median of this dataset. \n   MAD is the average modal absolute difference between each element component \n   and a centerpoint (median in this case ): \n   ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are three distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely long farseeing line. \n   n cars car are driving left leave to right;   simultaneously, a different unlike set hardening of n cars cable car \n   are driving force right good to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n   when a car that's moving be active left leave to right proper hits strike a car that's moving travel right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight true infinitely long farseeing line. \n   n cars car are driving left leave to right;   simultaneously, a different unlike set hardening of n cars cable car \n   are driving force right good to left.    The two sets of cars start get down out being very far from \n   each other.   All cars car move motivate in the same speed.   Two cars are said to collide \n   when a car that's moving be active left leave to right proper hits strike a car that's moving travel right to left. \n   However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n   let collision = 0;\n   let car1 = 0;\n   let car2 = 0;\n   let car1_left = 0;\n   let car1_right = 0;\n   let car2_left = 0;\n   let car2_right = 0;\n   let car1_speed = 0;\n   let car2_speed = 0;\n   let car1_force = 0;\n   let car2_force = 0;\n   let car1_active = 0;\n   let car2_active = 0;\n   let car1_left_active = 0;\n   let car1_right_active = 0;\n   let car2_left_active = 0;\n   let car2_right_active = 0;\n   let car1_left_speed = 0;\n   let car1_right_speed = 0;\n   let car2_left_speed = 0;\n   let car2_right_speed = 0;\n   let car1_left_force = 0;\n   let car1_right_force = 0;\n   let car2_left_force = 0;\n   let car2_right_force = 0;\n   let car1_left_active_speed = 0;\n   let car1_right_active_speed = 0;\n   let car2_left_active_speed = 0;\n   let car2_right_active_speed = 0;\n   let car1_left_active_force = 0;\n   let car1_right_active_force = 0;\n   let car2_left_active_force = 0;\n   let car2_right_active_force = 0;\n   let car1_left_active_speed_force = 0;\n   let car1_right_active_speed_force = 0;\n   let car2_left_active_speed_force = 0;\n   let car2_right_active_speed_force = 0;\n   let car1_left_active_speed_force_force = 0;\n   let car1_right_active_speed_force_force = 0;\n   let car2_left_active_speed_force_force = 0;\n   let car2_right_active_speed_force_force = 0;\n   let car1_left_active_speed_force_force_force = 0;\n   let car1_right_active_speed_force_force_force = 0;\n   let car2_left_active_speed_force_force_force = 0;\n   let car2_right_active_speed_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force = 0;\n   let car1_right_active_speed_force_force_force_force = 0;\n   let car2_left_active_speed_force_force_force_force = 0;\n   let car2_right_active_speed_force_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force_force = 0;\n   let car1_right_active_speed_force_force_force_force_force = 0;\n   let car2_left_active_speed_force_force_force_force_force = 0;\n   let car2_right_active_speed_force_force_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force_force_force = 0;\n   let car1_right_active_speed_force_force_force_force_force_force = 0;\n   let car2_left_active_speed_force_force_force_force_force_force_force = 0;\n   let car2_right_active_speed_force_force_force_force_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force_force_force_force_force = 0;\n   let car1_right_active_speed_force_force_force_force_force_force_force_force = 0;\n   let car2_left_active_speed_force_force_force_force_force_force_force_force_force = 0;\n   let car2_right_active_speed_force_force_force_force_force_force_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force_force_force_force_force_force_force = 0;\n   let car1_right_active_speed_force_force_force_force_force_force_force_force_force_force = 0;\n   let car2_left_active_speed_force_force_force_force_force_force_force_force_force_force_force = 0;\n   let car2_right_active_speed_force_force_force_force_force_force_force_force_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force_force_force_force_force_force_force_force_force = 0;\n   let car1_right_active_speed_force_force_force_force_force_force_force_force_force_force_force_force = 0;\n   let car2_left_active_speed_force_force_force_force_force_force_force_force_force_force_force_force_force = 0;\n   let car2_right_active_speed_force_force_force_force_force_force_force_force_force_force_force_force_force = 0;\n   let car1_left_active_speed_force_force_force_force_force_force_force_force_force_force_force_force_force", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\nconst incrList2 = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\nconst incrList3 = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\nconst incrList4 = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\nconst incrList5 = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\nconst incrList6 = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n  }\n  return res;\n};\n\nconst incrList7 = (l) => {\n  let i = 0;\n  const res = [];\n  while (i < l.length) {\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.push(l[i]);\n    i++;\n    res.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input remark. \n   it returns true on-key if there are two distinct elements element in the list that \n   sum to zero, and false delusive otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      sum = 0;\n      count = 0;\n    } else {\n      sum += l[i];\n      count++;\n    }\n    if (count > 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst pairsSumToZeroTest = () => {\n  let l = [1, 3, 5, 0];\n  let res = pairsSumToZero(l);\n  console.log(res);\n};\n\n// TEST\npairsSumToZeroTest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number numeral x to base.\n   return string representation theatrical performance after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase2 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase3 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase4 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase5 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase6 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase7 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase8 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase9 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase10 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase11 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase12 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    i++;\n  }\n  return result;\n};\n\n/*\n  Change numerical base of input number numeral x to base.\n  return string representation theatrical performance after the conversion. \n  base numbers are less than 10.\n  */\nconst changeBase13 = (x, base) => {\n  let numeral = x.toString(base);\n  let result = '';\n  let i = 0;\n  while (i < numeral.length) {\n    result += numeral[i];\n    ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high eminent return area for a triangle triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib4_iter = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_2 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_3 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_4 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_5 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_6 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_7 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_8 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_9 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_10 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_11 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_12 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_13 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_14 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_15 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_16 = (n) => {\n  let fib4_iter_acc = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_iter_acc += fib4(i);\n  }\n  return fib4_iter_acc;\n};\n\nconst fib4_iter_rec_17 = (n) => {\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let m = l.length / 2;\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return l[i];\n    }\n    if (l[i] > l[j]) {\n      return l[j];\n    }\n    i++;\n    j--;\n  }\n  return l[i];\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let first = text[0];\n  let last = text[text.length - 1];\n  let middle = text.substring(1, text.length - 1);\n  return first === last && isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('Both arguments must be positive.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n % 2 === 0) {\n    return modp(n - 1, p);\n  }\n  return modp(n - 1, p) * p % p;\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements chemical element of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let current = numbers[0];\n  let i = 1;\n  while (i < numbers.length) {\n    result.push(current);\n    current = numbers[i];\n    i++;\n  }\n  result.push(current);\n\n  return result.map(x => x * delimeter);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by shifting every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   takes fill as input string chain encoded with encode_shift function affair. Returns return key decoded decode string chain. \n   * / \n const decodeShift = (s) = >", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns string bowed stringed instrument without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    } else {\n      vowelsIndex++;\n      if (vowelsIndex === vowelsCount) {\n        result += vowels[vowelsCount - 1];\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold doorsill t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are above threshold doorsill t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold2 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold3 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold4 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold5 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold6 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold7 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold8 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold9 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill t1 and t2.\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst betweenThreshold10 = (l, t1, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between threshold doorsill", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars2('abcd', 'dddddddabc')\n  true\n  >>> sameChars2('dddddddabc', 'abcd')\n  true\n  >>> sameChars2('eabcd', 'dddddddabc')\n  false\n  >>> sameChars2('abcd', 'dddddddabce')\n  false\n  >>> sameChars2('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars3('abcd', 'dddddddabc')\n  true\n  >>> sameChars3('dddddddabc', 'abcd')\n  true\n  >>> sameChars3('eabcd', 'dddddddabc')\n  false\n  >>> sameChars3('abcd', 'dddddddabce')\n  false\n  >>> sameChars3('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars4('abcd', 'dddddddabc')\n  true\n  >>> sameChars4('dddddddabc', 'abcd')\n  true\n  >>> sameChars4('eabcd', 'dddddddabc')\n  false\n  >>> sameChars4('abcd', 'dddddddabce')\n  false\n  >>> sameChars4('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars5('abcd', 'dddddddabc')\n  true\n  >>> sameChars5('dddddddabc', 'abcd')\n  true\n  >>> sameChars5('eabcd', 'dddddddabc')\n  false\n  >>> sameChars5('abcd', 'dddddddabce')\n  false\n  >>> sameChars5('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters character.\n  >>> sameChars6('eabcdzz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*\n  Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 0;\n  let b = 1;\n  for (let i = 0", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracket", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] > l[i + 1]) {\n      return true;\n    }\n    if (l[i] < l[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements chemical element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elements chemical element for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_unique = unique(l1);\n  const l2_unique = unique(l2);\n  const l1_unique_length = l1_unique.length;\n  const l2_unique_length = l2_unique.length;\n  const common_length = Math.min(l1_unique_length, l2_unique_length);\n  const common_elements = [];\n  for (let i = 0; i < common_length; i++) {\n    if (l1_unique[i] === l2_unique[i]) {\n      common_elements.push(l1_unique[i]);\n    }\n  }\n  return common_elements;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      n /= i\n      i++\n    } else {\n      i++\n    }\n  }\n  return i\n}\n\nmodule.exports = largestPrimeFactor\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument represented multiple groups group for nested parentheses separated break by spaces. \n   For each of the group, output the deepest deep level of nesting of parentheses parenthesis. \n   E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let deepest_nesting = 0;\n  let deepest_nesting_index = 0;\n  let deepest_nesting_index_end = 0;\n  let deepest_nesting_index_end_end = 0;\n  let deepest_nesting_index_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let deepest_nesting_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbers numeral from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracketIndex2 = 0;\n  let bracketIndex3 = 0;\n  let bracketIndex4 = 0;\n  let bracketIndex5 = 0;\n  let bracketIndex6 = 0;\n  let bracketIndex7 = 0;\n  let bracketIndex8 = 0;\n  let bracketIndex9 = 0;\n  let bracketIndex10 = 0;\n  let bracketIndex11 = 0;\n  let bracketIndex12 = 0;\n  let bracketIndex13 = 0;\n  let bracketIndex14 = 0;\n  let bracketIndex15 = 0;\n  let bracketIndex16 = 0;\n  let bracketIndex17 = 0;\n  let bracketIndex18 = 0;\n  let bracketIndex19 = 0;\n  let bracketIndex20 = 0;\n  let bracketIndex21 = 0;\n  let bracketIndex22 = 0;\n  let bracketIndex23 = 0;\n  let bracketIndex24 = 0;\n  let bracketIndex25 = 0;\n  let bracketIndex26 = 0;\n  let bracketIndex27 = 0;\n  let bracketIndex28 = 0;\n  let bracketIndex29 = 0;\n  let bracketIndex30 = 0;\n  let bracketIndex31 = 0;\n  let bracketIndex32 = 0;\n  let bracketIndex33 = 0;\n  let bracketIndex34 = 0;\n  let bracketIndex35 = 0;\n  let bracketIndex36 = 0;\n  let bracketIndex37 = 0;\n  let bracketIndex38 = 0;\n  let bracketIndex39 = 0;\n  let bracketIndex40 = 0;\n  let bracketIndex41 = 0;\n  let bracketIndex42 = 0;\n  let bracketIndex43 = 0;\n  let bracketIndex44 = 0;\n  let bracketIndex45 = 0;\n  let bracketIndex46 = 0;\n  let bracketIndex47 = 0;\n  let bracketIndex48 = 0;\n  let bracketIndex49 = 0;\n  let bracketIndex50 = 0;\n  let bracketIndex51 = 0;\n  let bracketIndex52 = 0;\n  let bracketIndex53 = 0;\n  let bracketIndex54 = 0;\n  let bracketIndex55 = 0;\n  let bracketIndex56 = 0;\n  let bracketIndex57 = 0;\n  let bracketIndex58 = 0;\n  let bracketIndex59 = 0;\n  let bracketIndex60 = 0;\n  let bracketIndex61 = 0;\n  let bracketIndex62 = 0;\n  let bracketIndex63 = 0;\n  let bracketIndex64 = 0;\n  let bracketIndex65 = 0;\n  let bracketIndex66 = 0;\n  let bracketIndex67 = 0;\n  let bracketIndex68 = 0;\n  let bracketIndex69 = 0;\n  let bracketIndex70 = 0;\n  let bracketIndex71 = 0;\n  let bracketIndex72 = 0;\n  let bracketIndex73 = 0;\n  let bracketIndex74 = 0;\n  let bracketIndex75 = 0;\n  let bracketIndex76 = 0;\n  let bracketIndex77 = 0;\n  let bracketIndex78 = 0;\n  let bracketIndex79 = 0;\n  let bracketIndex80 = 0;\n  let bracketIndex81 = 0;\n  let bracketIndex82 = 0;\n  let bracketIndex83 = 0;\n  let bracketIndex84 = 0;\n  let bracketIndex85 = 0;\n  let bracketIndex86 = 0;\n  let bracketIndex87 = 0;\n  let bracketIndex88 = 0;\n  let bracketIndex89 = 0;\n  let bracketIndex90 = 0;\n  let bracketIndex91 = 0;\n  let bracketIndex92 = 0;\n  let bracketIndex93 = 0;\n  let bracketIndex94 = 0;\n  let bracketIndex95 = 0;\n  let bracketIndex96 = 0;\n  let bracketIndex97 = 0;\n  let bracketIndex98 = 0;\n  let bracketIndex99 = 0;\n  let bracketIndex100 = 0;\n  let bracketIndex101 = 0;\n  let bracketIndex102 = 0;\n  let bracketIndex103 = 0;\n  let bracketIndex104 = 0;\n  let bracketIndex105 = 0;\n  let bracketIndex106 = 0;\n  let bracketIndex107 = 0;\n  let bracketIndex108 = 0;\n  let bracketIndex109 = 0;\n  let bracketIndex110 = 0;\n  let bracketIndex111 = 0;\n  let bracketIndex112 = 0;\n  let bracketIndex113 = 0;\n  let bracketIndex114 = 0;\n  let bracketIndex115 = 0;\n  let bracketIndex116 = 0;\n  let bracketIndex117 = 0;\n  let bracketIndex118 = 0;\n  let bracketIndex119 = 0;\n  let bracketIndex120 = 0;\n  let bracketIndex121 = 0;\n  let bracketIndex122 = 0;\n  let bracketIndex123 = 0;\n  let bracketIndex124 = 0;\n  let bracketIndex125 = 0;\n  let bracketIndex126 = 0;\n  let bracketIndex127 = 0;\n  let bracketIndex128 = 0;\n  let bracketIndex129 = 0;\n  let bracketIndex130 = 0;\n  let bracketIndex131 = 0;\n  let bracketIndex132 = 0;\n  let bracketIndex133 = 0;\n  let bracketIndex134 = 0;\n  let bracketIndex135 = 0;\n  let bracketIndex136 = 0;\n  let bracketIndex137 = 0;\n  let bracketIndex138 = 0;\n  let bracketIndex139 = 0;\n  let bracketIndex140 = 0;\n  let bracketIndex141 = 0;\n  let bracketIndex142 = 0;\n  let bracketIndex143 = 0;\n  let bracketIndex144 = 0;\n  let bracketIndex145 = 0;\n  let bracketIndex146 = 0;\n  let bracketIndex147 = 0;\n  let bracketIndex148 = 0;\n  let bracketIndex149 = 0;\n  let bracketIndex150 = 0;\n  let bracketIndex151 = 0;\n  let bracketIndex152 = 0;\n  let bracketIndex153 = 0;\n  let bracketIndex154 = 0;\n  let bracketIndex155 = 0;\n  let bracketIndex156 = 0;\n  let bracketIndex157 = 0;\n  let bracketIndex158 = 0;\n  let bracketIndex159", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return rejoinder derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return rejoinder derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const ys = []\n  for (let i = 0; i < n; i++) {\n    ys[i] = xs[i]\n    for (let j = 0; j < i; j++) {\n      ys[i] += xs[j] * xs[i - j - 1]\n    }\n  }\n  return ys\n}\n\nconst test = (xs, ys) => {\n  const x = xs[0]\n  const y = ys[0]\n  const z = xs[1]\n  const w = ys[1]\n  const u = xs[2]\n  const v = ys[2]\n  const w2 = xs[3]\n  const w3 = ys[3]\n  const w4 = xs[4]\n  const w5 = ys[4]\n  const w6 = xs[5]\n  const w7 = ys[5]\n  const w8 = xs[6]\n  const w9 = ys[6]\n  const w10 = xs[7]\n  const w11 = ys[7]\n  const w12 = xs[8]\n  const w13 = ys[8]\n  const w14 = xs[9]\n  const w15 = ys[9]\n  const w16 = xs[10]\n  const w17 = ys[10]\n  const w18 = xs[11]\n  const w19 = ys[11]\n  const w20 = xs[12]\n  const w21 = ys[12]\n  const w22 = xs[13]\n  const w23 = ys[13]\n  const w24 = xs[14]\n  const w25 = ys[14]\n  const w26 = xs[15]\n  const w27 = ys[15]\n  const w28 = xs[16]\n  const w29 = ys[16]\n  const w30 = xs[17]\n  const w31 = ys[17]\n  const w32 = xs[18]\n  const w33 = ys[18]\n  const w34 = xs[19]\n  const w35 = ys[19]\n  const w36 = xs[20]\n  const w37 = ys[20]\n  const w38 = xs[21]\n  const w39 = ys[21]\n  const w40 = xs[22]\n  const w41 = ys[22]\n  const w42 = xs[23]\n  const w43 = ys[23]\n  const w44 = xs[24]\n  const w45 = ys[24]\n  const w46 = xs[25]\n  const w47 = ys[25]\n  const w48 = xs[26]\n  const w49 = ys[26]\n  const w50 = xs[27]\n  const w51 = ys[27]\n  const w52 = xs[28]\n  const w53 = ys[28]\n  const w54 = xs[29]\n  const w55 = ys[29]\n  const w56 = xs[30]\n  const w57 = ys[30]\n  const w58 = xs[31]\n  const w59 = ys[31]\n  const w60 = xs[32]\n  const w61 = ys[32]\n  const w62 = xs[33]\n  const w63 = ys[33]\n  const w64 = xs[34]\n  const w65 = ys[34]\n  const w66 = xs[35]\n  const w67 = ys[35]\n  const w68 = xs[36]\n  const w69 = ys[36]\n  const w70 = xs[37]\n  const w71 = ys[37]\n  const w72 = xs[38]\n  const w73 = ys[38]\n  const w74 = xs[39]\n  const w75 = ys[39]\n  const w76 = xs[40]\n  const w77 = ys[40]\n  const w78 = xs[41]\n  const w79 = ys[41]\n  const w80 = xs[42]\n  const w81 = ys[42]\n  const w82 = xs[43]\n  const w83 = ys[43]\n  const w84 = xs[44]\n  const w85 = ys[44]\n  const w86 = xs[45]\n  const w87 = ys[45]\n  const w88 = xs[46]\n  const w89 = ys[46]\n  const w90 = xs[47]\n  const w91 = ys[47]\n  const w92 = xs[48]\n  const w93 = ys[48]\n  const w94 = xs[49]\n  const w95 = ys[49]\n  const w96 = xs[50]\n  const w97 = ys[50]\n  const w98 = xs[51]\n  const w99 = ys[51]\n  const w100 = xs[52]\n  const w101 = ys[52]\n  const w102 = xs[53]\n  const w103 = ys[53]\n  const w104 = xs[54]\n  const w105 = ys[54]\n  const w106 = xs[55]\n  const w107 = ys[55]\n  const w108 = xs[56]\n  const w109 = ys[56]\n  const w110 = xs[57]\n  const w111 = ys[57]\n  const w112 = xs[58]\n  const w113 = ys[58]\n  const w114 = xs[59]\n  const w115 = ys[59]\n  const", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined define as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing \n   a word password as input and returns come back the number of vowels in the string chain. \n   Vowels in this case character are' a',' e vitamin e',' i',' o',' u uranium'. Here,' y' is also besides a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right good by shift\n   and return the result as a string bowed stringed instrument. \n   If shift > number of digits finger, return digits reversed overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right good by shift\n   and return the result as a string bowed stringed instrument. \n   If shift > number of digits finger, return digits reversed overrule.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  let i = 0;\n  while (i < x.length) {\n    result += x.charAt(i);\n    i += shift;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num\n  * @return {string}\n  */\nconst numberToString = (num) => {\n  let result = '';\n  let i = 0;\n  while (i < num.toString(10).length) {\n    result += num.toString(10).charAt(i);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber2 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num\n  * @return {string}\n  */\nconst numberToString2 = (num) => {\n  let result = '';\n  let i = 0;\n  while (i < num.toString(10).length) {\n    result += num.toString(10).charAt(i);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber3 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num\n  * @return {string}\n  */\nconst numberToString3 = (num) => {\n  let result = '';\n  let i = 0;\n  while (i < num.toString(10).length) {\n    result += num.toString(10).charAt(i);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber4 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num\n  * @return {string}\n  */\nconst numberToString4 = (num) => {\n  let result = '';\n  let i = 0;\n  while (i < num.toString(10).length) {\n    result += num.toString(10).charAt(i);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber5 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num\n  * @return {string}\n  */\nconst numberToString5 = (num) => {\n  let result = '';\n  let i = 0;\n  while (i < num.toString(10).length) {\n    result += num.toString(10).charAt(i);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber6 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10, str.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a string.\n  * @param {number} num\n  * @return {string}\n  */\nconst numberToString6 = (num) => {\n  let result = '';\n  let i = 0;\n  while (i < num.toString(10).length) {\n    result += num.toString(10).charAt(i);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {number}\n  */\nconst stringToNumber7 = (str) => {\n  let result = 0;\n  let i = 0;\n  while (i < str.length) {\n    result += str.charCodeAt(i) * Math.pow(10,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Write a function routine that takes a string bowed stringed instrument as input and returns come back the sum of the upper characters fictional character only' \n   ASCII codes code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents a number numeral of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string chain that represents defend the total number of \n   the oranges and apples apple and an integer that represent map the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a string bowed stringed instrument that represents a number numeral of apples and oranges orange \n   that are distributed in a basket of fruit yield this basket contains \n   apples apple, oranges orange, and mango fruits. Given the string chain that represents defend the total number of \n   the oranges and apples apple and an integer that represent map the total full number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += 1;\n      count += 1;\n    } else if (s[i] == 'o') {\n      total += 1;\n      count += 2;\n    } else if (s[i] =='m') {\n      total += 1;\n      count += 3;\n    }\n    i += 1;\n  }\n  return total * n / count;\n}\n\n// test cases\n\n// fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8\n// fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2\n// fruitDistribution(\"2 apples apple and 3 oranges orange \", 100) - > 100 - 2 - 3 = 95\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19\n\n// fruitDistribution(\"100", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes node \n   your task is to pluck one of the nodes lymph node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes lymph node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned retort in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch arm of a tree that has non - negative integer nodes node \n   your task is to pluck one of the nodes lymph node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes lymph node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n   The plucked node should be returned retort in a list, [ smalest_value, its index exponent ], \n   If there are no even tied values or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  const len = arr.length;\n  if (len === 0) return res;\n  const min = arr[0];\n  const min_index = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  res.push(min);\n  res.push(min_index);\n  return res;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest big integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return the greatest big integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number phone number of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let max_freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let freq = lst[i];\n    if (freq > max_freq) {\n      max_freq = freq;\n      max = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain incorporate given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparated = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndex = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndCount = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndCountAndLength = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndLength = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndLengthAndCount = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndLengthAndCountAndLength = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndLengthAndCountAndLengthAndCount = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndLengthAndCountAndLengthAndCountAndLength = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySubstringSeparatedWithIndexAndLengthAndCountAndLengthAndCountAndLengthAndLength = (strings, substring, separator) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(separator));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring\n  * @param {string} substring\n  * @param {string} [separator]\n  * @returns {string[]}\n  */\nconst filterBySub", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start depart with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order. \n   Strange foreign sorting, is when you start depart with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) return [];\n  let min = lst[0];\n  let max = lst[0];\n  let i = 0;\n  for (i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  let result = [];\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      result.push(max);\n      max = lst[i];\n    } else if (lst[i] === max) {\n      result.push(min);\n      min = lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round off to 2 decimal points if the three sides english form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides side of a triangle. Return reelect the area of \n   the triangle rounded round off to 2 decimal points if the three sides english form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make a valid triangle triangulum when the sum kernel of any two sides is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (area > Math.max(a, b, c)) {\n    return area;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  if (area > Math.max(a, b, c)) {\n    return area;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = triangleArea;<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns return true if the object aim q will fly, and false delusive otherwise. \n   The object aim q will fly if it's balanced (it is a palindromic list) and the sum union of its elements component is less than or equal the maximum maximal possible potential weight system of weights w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find line up the minimum number numeral of elements that \n   need necessitate to be changed to make cook the array palindromic. A palindromic array is an array that \n   is read the same backwards back and forwards forward. In one change, you can change one element chemical element to any other element component.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  let change = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < temp) {\n        temp = arr[j];\n      }\n    }\n    if (temp!== arr[i]) {\n      change++;\n    }\n    if (change > min) {\n      min = change;\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts bear two lists of strings string section and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts bear two lists of strings string section and returns the list that has \n   total entire number of chars char in the all strings of the list less than the other list.\n\n   if the two lists tilt have the same number phone number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    let curr = lst1[i];\n    let currLen = curr.length;\n    for (let j = 0; j < lst2.length; j++) {\n      let curr2 = lst2[j];\n      let curr2Len = curr2.length;\n      if (currLen < curr2Len) {\n        total += curr2Len - currLen;\n      }\n    }\n    result.push(curr);\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true on-key if the given number numeral is the multiplication of 3 prime choice numbers \n   and false delusive otherwise. \n   Knowing sleep together that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (i <= a) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function routine that returns true on-key if a number x is a simple dim-witted \n   power of n and false in other cases sheath. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function routine that returns true on-key if a number x is a simple dim-witted \n   power of n and false in other cases sheath. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes choose an integer a and returns true on-key \n   if this ingeger is a cube of some integer number issue. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes choose an integer a and returns true on-key \n   if this ingeger is a cube of some integer number issue. \n   Note: you may assume simulate the input is always constantly valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10 || a === 11 || a === 12 || a === 13 || a === 14 || a === 15 || a === 16 || a === 17 || a === 18 || a === 19 || a === 20 || a === 21 || a === 22 || a === 23 || a === 24 || a === 25 || a === 26 || a === 27 || a === 28 || a === 29 || a === 30 || a === 31 || a === 32 || a === 33 || a === 34 || a === 35 || a === 36 || a === 37 || a === 38 || a === 39 || a === 40 || a === 41 || a === 42 || a === 43 || a === 44 || a === 45 || a === 46 || a === 47 || a === 48 || a === 49 || a === 50 || a === 51 || a === 52 || a === 53 || a === 54 || a === 55 || a === 56 || a === 57 || a === 58 || a === 59 || a === 60 || a === 61 || a === 62 || a === 63 || a === 64 || a === 65 || a === 66 || a === 67 || a === 68 || a === 69 || a === 70 || a === 71 || a === 72 || a === 73 || a === 74 || a === 75 || a === 76 || a === 77 || a === 78 || a === 79 || a === 80 || a === 81 || a === 82 || a === 83 || a === 84 || a === 85 || a === 86 || a === 87 || a === 88 || a === 89 || a === 90 || a === 91 || a === 92 || a === 93 || a === 94 || a === 95 || a === 96 || a === 97 || a === 98 || a === 99 || a === 100 || a === 101 || a === 102 || a === 103 || a === 104 || a === 105 || a === 106 || a === 107 || a === 108 || a === 109 || a === 110 || a === 111 || a === 112 || a === 113 || a === 114 || a === 115 || a === 116 || a === 117 || a === 118 || a === 119 || a === 120 || a === 121 || a === 122 || a === 123 || a === 124 || a === 125 || a === 126 || a === 127 || a === 128 || a === 129 || a === 130 || a === 131 || a === 132 || a === 133 || a === 134 || a === 135 || a === 136 || a === 137 || a === 138 || a === 139 || a === 140 || a === 141 || a === 142 || a === 143 || a === 144 || a === 145 || a === 146 || a === 147 || a === 148 || a === 149 || a === 150 || a === 151 || a === 152 || a === 153 || a === 154 || a === 155 || a === 156 || a === 157 || a === 158 || a === 159 || a === 160 || a === 161 || a === 162 || a === 163 || a === 164 || a === 165 || a === 166 || a === 167 || a === 168 || a === 169 || a === 170 || a === 171 || a === 172 || a === 173 || a === 174 || a === 175 || a === 176 || a === 177 || a === 178 || a === 179 || a === 180 || a === 181 || a === 182 || a === 183 || a === 184 || a === 185 || a === 186 || a === 187 || a === 188 || a === 189 || a === 190 || a === 191 || a === 192 || a === 193 || a === 194 || a === 195 || a === 196 || a === 197 || a === 198 || a === 199 || a === 200 || a === 201 || a === 202 || a === 203 || a === 204 || a === 205 || a === 206 || a === 207 || a === 208 || a === 209 || a === 210 || a === 211 || a === 212 || a === 213 || a === 214 || a === 215 || a === 216 || a === 217 || a === 218 || a === 219 || a === 220 || a === 221 || a === 222 || a === 223 || a === 224 || a === 225 || a === 226 || a === 227 || a === 228 || a === 229 || a === 230 || a === 231 || a === 232 || a === 233 || a === 234 || a === 235 || a === 236 || a === 237 || a === 238 || a === 239 || a === 240 || a === 241 || a === 242 || a === 243 || a === 244 || a === 245 || a === 246 || a === 247 || a === 248 || a === 249 || a === 250 || a === 251 || a === 252 || a === 253 || a === 254 || a === 255 || a === 256 || a === 257 || a === 258 || a === 259 || a === 260 || a === 261 || a === 262 || a === 263 || a === 264 || a === 265 || a === 266 || a === 267 || a === 268 || a === 269 || a === 270 || a === 271 || a === 272 || a === 273 || a === 274 || a === 275 || a === 276 || a === 277 || a === 278 || a === 279 || a === 280 || a === 281 || a === 282 || a === 283 || a === 284 || a === 285 || a === 286 || a === 287 || a === 288 || a === 289 || a === 290 || a === 291 || a === 292 || a === 293 || a === 294 || a === 295 || a === 296 || a === 297 || a === 298 || a === 299 || a === 300 || a === 301 || a === 302 || a === 303 || a === 304 || a === 305 || a === 306 || a === 307 || a === 308 || a === 309 || a === 310 || a === 311 || a === 312 || a === 313 || a === 314 || a === 315 || a === 316 || a === 317 || a === 318 || a === 319 || a === 320 || a === 321 || a === 322 || a === 323 || a === 324 || a === 325 || a === 326 || a === 327 || a === 328 || a === 329 || a === 330 || a === 331 || a === 332 || a === 333 || a === 334 || a === 335 || a === 336 || a === 337 || a === 338 || a === 339 || a === 340 || a === 341 || a === 342 || a === 343 || a === 344 || a === 345 || a === 346 || a === 347 || a === 348 || a === 349 || a === 350 || a ===", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number numeral as a string and counts consider the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number phone number \n   greater than 1 that is not a product of two smaller minor natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So then you have to determine settle a number of the following follow digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note eminence: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a function routine that receives \n   a hexadecimal number numeral as a string and counts consider the number of hexadecimal \n   digits finger that are primes (prime number=== or a prime=== is a natural lifelike number phone number \n   greater than 1 that is not a product of two smaller minor natural lifelike numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So then you have to determine settle a number of the following follow digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note eminence: you may assume the input stimulation is always constantly correct or empty string=== \n   and symbols symbol A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let numeral = num.toString();\n  for (let i = 0; i < numeral.length; i++) {\n    let digit = numeral[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      hexKey += parseInt(digit, 16);\n    } else {\n      hexKey += parseInt(digit, 10);\n    }\n  }\n  return hexKey;\n};\n\nconst prime = (num) => {\n  let prime = true;\n  let numeral = num.toString();\n  for (let i = 0; i < numeral.length; i++) {\n    let digit = numeral[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      prime = false;\n    }\n  }\n  return prime;\n};\n\nconst count = (num) => {\n  let count = 0;\n  let numeral = num.toString();\n  for (let i = 0; i < numeral.length; i++) {\n    let digit = numeral[i];\n    if (digit === 'A' || digit === 'B' || digit === 'C' || digit === 'D' || digit === 'E' || digit === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst test = (num) => {\n  let prime = prime(num);\n  let count = count(num);\n  let hexKey = hexKey(num);\n  if (prime === true && count === 1 && hexKey === 2) {\n    console.log('Prime number');\n  } else {\n    console.log('Not prime number');\n  }\n};\n\ntest('AB');\ntest('1077E');\ntest('ABED1A33');\ntest('123456789ABCDEF0');\ntest('2020');\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form mannequin and your task is to convert commute it to \n   binary format. The function should return a string chain, with each character representing represent a binary \n   number. Each character fictional character in the string drawstring will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form mannequin and your task is to convert commute it to \n   binary format. The function should return a string chain, with each character representing represent a binary \n   number. Each character fictional character in the string drawstring will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help serve with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let decimalString = \"\";\n  let decimalStringLength = decimal.toString().length;\n  let decimalStringLengthMinusOne = decimalStringLength - 1;\n  let decimalStringLengthMinusTwo = decimalStringLength - 2;\n  let decimalStringLengthMinusThree = decimalStringLength - 3;\n  let decimalStringLengthMinusFour = decimalStringLength - 4;\n  let decimalStringLengthMinusFive = decimalStringLength - 5;\n  let decimalStringLengthMinusSix = decimalStringLength - 6;\n  let decimalStringLengthMinusSeven = decimalStringLength - 7;\n  let decimalStringLengthMinusEight = decimalStringLength - 8;\n  let decimalStringLengthMinusNine = decimalStringLength - 9;\n  let decimalStringLengthMinusTen = decimalStringLength - 10;\n  let decimalStringLengthMinusEleven = decimalStringLength - 11;\n  let decimalStringLengthMinusTwelve = decimalStringLength - 12;\n  let decimalStringLengthMinusThirteen = decimalStringLength - 13;\n  let decimalStringLengthMinusFourteen = decimalStringLength - 14;\n  let decimalStringLengthMinusFifteen = decimalStringLength - 15;\n  let decimalStringLengthMinusSixteen = decimalStringLength - 16;\n  let decimalStringLengthMinusSeventeen = decimalStringLength - 17;\n  let decimalStringLengthMinusEighteen = decimalStringLength - 18;\n  let decimalStringLengthMinusNineteen = decimalStringLength - 19;\n  let decimalStringLengthMinusTwenty = decimalStringLength - 20;\n  let decimalStringLengthMinusTwentyOne = decimalStringLength - 21;\n  let decimalStringLengthMinusTwentyTwo = decimalStringLength - 22;\n  let decimalStringLengthMinusTwentyThree = decimalStringLength - 23;\n  let decimalStringLengthMinusTwentyFour = decimalStringLength - 24;\n  let decimalStringLengthMinusTwentyFive = decimalStringLength - 25;\n  let decimalStringLengthMinusTwentySix = decimalStringLength - 26;\n  let decimalStringLengthMinusTwentySeven = decimalStringLength - 27;\n  let decimalStringLengthMinusTwentyEight = decimalStringLength - 28;\n  let decimalStringLengthMinusTwentyNine = decimalStringLength - 29;\n  let decimalStringLengthMinusThirty = decimalStringLength - 30;\n  let decimalStringLengthMinusThirtyOne = decimalStringLength - 31;\n  let decimalStringLengthMinusThirtyTwo = decimalStringLength - 32;\n  let decimalStringLengthMinusThirtyThree = decimalStringLength - 33;\n  let decimalStringLengthMinusThirtyFour = decimalStringLength - 34;\n  let decimalStringLengthMinusThirtyFive = decimalStringLength - 35;\n  let decimalStringLengthMinusThirtySix = decimalStringLength - 36;\n  let decimalStringLengthMinusThirtySeven = decimalStringLength - 37;\n  let decimalStringLengthMinusThirtyEight = decimalStringLength - 38;\n  let decimalStringLengthMinusThirtyNine = decimalStringLength - 39;\n  let decimalStringLengthMinusForty = decimalStringLength - 40;\n  let decimalStringLengthMinusFortyOne = decimalStringLength - 41;\n  let decimalStringLengthMinusFortyTwo = decimalStringLength - 42;\n  let decimalStringLengthMinusFortyThree = decimalStringLength - 43;\n  let decimalStringLengthMinusFortyFour = decimalStringLength - 44;\n  let decimalStringLengthMinusFortyFive = decimalStringLength - 45;\n  let decimalStringLengthMinusFortySix = decimalStringLength - 46;\n  let decimalStringLengthMinusFortySeven = decimalStringLength - 47;\n  let decimalStringLengthMinusFortyEight = decimalStringLength - 48;\n  let decimalStringLengthMinusFortyNine = decimalStringLength - 49;\n  let decimalStringLengthMinusFifty = decimalStringLength - 50;\n  let decimalStringLengthMinusFiftyOne = decimalStringLength - 51;\n  let decimalStringLengthMinusFiftyTwo = decimalStringLength - 52;\n  let decimalStringLengthMinusFiftyThree = decimalStringLength - 53;\n  let decimalStringLengthMinusFiftyFour = decimalStringLength - 54;\n  let decimalStringLengthMinusFiftyFive = decimalStringLength - 55;\n  let decimalStringLengthMinusFiftySix = decimalStringLength - 56;\n  let decimalStringLengthMinusFiftySeven = decimalStringLength - 57;\n  let decimalStringLengthMinusFiftyEight = decimalStringLength - 58;\n  let decimalStringLengthMinusFiftyNine = decimalStringLength - 59;\n  let decimalStringLengthMinusSixty = decimalStringLength - 60;\n  let decimalStringLengthMinusSixtyOne = decimalStringLength - 61;\n  let decimalStringLengthMinusSixtyTwo = decimalStringLength - 62;\n  let decimalStringLengthMinusSixtyThree = decimalStringLength - 63;\n  let decimalStringLengthMinusSixtyFour = decimalStringLength - 64;\n  let decimalStringLengthMinusSixtyFive = decimalStringLength - 65;\n  let decimalStringLengthMinusSixtySix = decimalStringLength - 66;\n  let decimalStringLengthMinusSixtySeven = decimalStringLength - 67;\n  let decimalStringLengthMinusSixtyEight = decimalStringLength - 68;\n  let decimalStringLengthMinusSixtyNine = decimalStringLength - 69;\n  let decimalStringLengthMinusSeventy = decimalStringLength - 70;\n  let decimalStringLengthMinusSeventyOne = decimalStringLength - 71;\n  let decimalStringLengthMinusSeventyTwo = decimalStringLength - 72;\n  let decimalStringLengthMinusSeventyThree = decimalStringLength - 73;\n  let decimalStringLengthMinusSeventyFour = decimalStringLength - 74;\n  let decimalStringLengthMinusSeventyFive = decimalStringLength - 75;\n  let decimalStringLengthMinusSeventySix = decimalStringLength - 76;\n  let decimalStringLengthMinusSeventy", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting consist of a sum and a product intersection of all the integers in a list.\n   Empty sum union should be equal to 0 and empty product merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0, product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconst sumProductTest = (numbers, int) => {\n  let sum = 0, product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check if the string bowed stringed instrument is happy or not. \n   A string chain is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n   Your task job is to check if the string bowed stringed instrument is happy or not. \n   A string chain is happy if its length duration is at least 3 and every 3 consecutive letters letter are distinct clear-cut\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1]) {\n      c++;\n    } else {\n      c = 0;\n    }\n    if (c > 2) return false;\n  }\n  return true;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give yield the grades\n   to students. The teacher has been making seduce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used use for grading. \n   She has given pass you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give yield the grades\n   to students. The teacher has been making seduce her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used use for grading. \n   She has given pass you a list of GPAs for some students and you have to write \n   a function affair that can output a list of letter grades using the following table mesa: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = 'E';\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeLetter = '';\n  grades.forEach((grade) => {\n    gradeCount += grade;\n    if (gradeCount >= 4) {\n      gradeLetter = 'A+';\n      gradeCount -= 4;\n    } else if (gradeCount >= 3) {\n      gradeLetter = 'A';\n      gradeCount -= 3;\n    } else if (gradeCount >= 2) {\n      gradeLetter = 'B+';\n      gradeCount -= 2;\n    } else if (gradeCount >= 1) {\n      gradeLetter = 'B';\n      gradeCount -= 1;\n    } else {\n      gradeLetter = 'C-';\n    }\n  });\n  return [gradeLetter, letterGrade];\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns return true if the string\n   length distance is a prime number issue or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a string and returns return true if the string\n   length distance is a prime number issue or false otherwise differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let i = 2;\n  while (i <= length) {\n    if (length % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numeral of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers numeral of n-digit\n   positive integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits in binary binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 1;\n  while (N > 0) {\n    sum += digit * Math.pow(2, N % 10);\n    N = Math.floor(N / 10);\n    digit *= 2;\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements chemical element that are at odd indices index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n  return result;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes choose a string and returns return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes choose a string and returns return an ordered version interpretation of it. \n   Ordered version interpretation of string, is a string drawstring where all words (separated by space) \n   are replaced substitute by a new fresh word son where all the characters character arranged in\n   ascending order based free-base on ascii american standard code for information interchange value. \n   Note eminence: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let words = s.split(' ');\n  let word = '';\n  let i = 0;\n  while (i < words.length) {\n    word = words[i];\n    if (word.length > 0) {\n      result += word.charAt(0);\n      words[i] = word.substring(1);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar alike to matrix, however, unlike matrices, \n   each row quarrel may contain a different unlike number of columns column. \n   Given give lst, and integer x, find detect integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows quarrel in ascending ascend order. \n   Also, sort coordinates of the row by columns column in descending order club.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested cuddle lists, \n   which is similar alike to matrix, however, unlike matrices, \n   each row quarrel may contain a different unlike number of columns column. \n   Given give lst, and integer x, find detect integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows quarrel in ascending ascend order. \n   Also, sort coordinates of the row by columns column in descending order club.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const res = [];\n  let curr = 0;\n  let prev = 0;\n  let prevRow = 0;\n  let prevCol = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCourse = row[0];\n    const rowCols = row[1];\n    if (rowCourse === curr) {\n      if (rowCols > prevCol) {\n        res.push([curr, prevCol]);\n      }\n      prevCol = rowCols;\n      prev = curr;\n    } else {\n      if (rowCourse > prevRow) {\n        res.push([prevRow, prevCol]);\n      }\n      prevRow = rowCourse;\n      prev = curr;\n      curr = rowCourse;\n      prevCol = rowCols;\n    }\n  }\n  if (curr!== prev) {\n    res.push([prevRow, prevCol]);\n  }\n  return res;\n};\n\nconst getCol = (lst, x) => {\n  const res = [];\n  let curr = 0;\n  let prev = 0;\n  let prevRow = 0;\n  let prevCol = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCourse = row[0];\n    const rowCols = row[1];\n    if (rowCourse === curr) {\n      if (rowCols > prevCol) {\n        res.push([prevRow, prevCol]);\n      }\n      prevCol = rowCols;\n      prev = curr;\n    } else {\n      if (rowCourse > prevRow) {\n        res.push([prevRow, prevCol]);\n      }\n      prevRow = rowCourse;\n      prev = curr;\n      curr = rowCourse;\n      prevCol = rowCols;\n    }\n  }\n  if (curr!== prev) {\n    res.push([prevRow, prevCol]);\n  }\n  return res;\n};\n\nconst getRowCol = (lst, x) => {\n  const res = [];\n  let curr = 0;\n  let prev = 0;\n  let prevRow = 0;\n  let prevCol = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCourse = row[0];\n    const rowCols = row[1];\n    if (rowCourse === curr) {\n      if (rowCols > prevCol) {\n        res.push([prevRow, prevCol]);\n      }\n      prevCol = rowCols;\n      prev = curr;\n    } else {\n      if (rowCourse > prevRow) {\n        res.push([prevRow, prevCol]);\n      }\n      prevRow = rowCourse;\n      prev = curr;\n      curr = rowCourse;\n      prevCol = rowCols;\n    }\n  }\n  if (curr!== prev) {\n    res.push([prevRow, prevCol]);\n  }\n  return res;\n};\n\nconst getRowCols = (lst, x) => {\n  const res = [];\n  let curr = 0;\n  let prev = 0;\n  let prevRow = 0;\n  let prevCol = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCourse = row[0];\n    const rowCols = row[1];\n    if (rowCourse === curr) {\n      if (rowCols > prevCol) {\n        res.push([prevRow, prevCol]);\n      }\n      prevCol = rowCols;\n      prev = curr;\n    } else {\n      if (rowCourse > prevRow) {\n        res.push([prevRow, prevCol]);\n      }\n      prevRow = rowCourse;\n      prev = curr;\n      curr = rowCourse;\n      prevCol = rowCols;\n    }\n  }\n  if (curr!== prev) {\n    res.push([prevRow, prevCol]);\n  }\n  return res;\n};\n\nconst getRowCols2 = (lst, x) => {\n  const res = [];\n  let curr = 0;\n  let prev = 0;\n  let prevRow = 0;\n  let prevCol = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    const rowCourse = row[0];\n    const rowCols = row[1];\n    if (rowCourse === curr) {\n      if (rowCols > prevCol) {\n        res.push([prevRow, prevCol]);\n      }\n      prevCol = rowCols;\n      prev = curr;\n    } else {\n      if (rowCourse > prevRow) {\n        res.push([prevRow, prevCol]);\n      }\n      prevRow = rowCourse;\n      prev = curr;\n      curr = rowCourse;\n      prevCol = rowCols;\n    }\n  }\n  if", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy of the given contribute array after sorting, \n   you will sort the given establish array in ascending order ordering if the sum (first inaugural index exponent value, last index value) is odd leftover, \n   or sort classify it in descending order if the sum (first beginning index exponent value, last final index value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument and \n   returns return a string encrypted code with the alphabet being rotated turn out. \n   The alphabet should be rotated rotate in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let s3 = 0;\n  let s4 = 0;\n  let s5 = 0;\n  let s6 = 0;\n  let s7 = 0;\n  let s8 = 0;\n  let s9 = 0;\n  let s10 = 0;\n  let s11 = 0;\n  let s12 = 0;\n  let s13 = 0;\n  let s14 = 0;\n  let s15 = 0;\n  let s16 = 0;\n  let s17 = 0;\n  let s18 = 0;\n  let s19 = 0;\n  let s20 = 0;\n  let s21 = 0;\n  let s22 = 0;\n  let s23 = 0;\n  let s24 = 0;\n  let s25 = 0;\n  let s26 = 0;\n  let s27 = 0;\n  let s28 = 0;\n  let s29 = 0;\n  let s30 = 0;\n  let s31 = 0;\n  let s32 = 0;\n  let s33 = 0;\n  let s34 = 0;\n  let s35 = 0;\n  let s36 = 0;\n  let s37 = 0;\n  let s38 = 0;\n  let s39 = 0;\n  let s40 = 0;\n  let s41 = 0;\n  let s42 = 0;\n  let s43 = 0;\n  let s44 = 0;\n  let s45 = 0;\n  let s46 = 0;\n  let s47 = 0;\n  let s48 = 0;\n  let s49 = 0;\n  let s50 = 0;\n  let s51 = 0;\n  let s52 = 0;\n  let s53 = 0;\n  let s54 = 0;\n  let s55 = 0;\n  let s56 = 0;\n  let s57 = 0;\n  let s58 = 0;\n  let s59 = 0;\n  let s60 = 0;\n  let s61 = 0;\n  let s62 = 0;\n  let s63 = 0;\n  let s64 = 0;\n  let s65 = 0;\n  let s66 = 0;\n  let s67 = 0;\n  let s68 = 0;\n  let s69 = 0;\n  let s70 = 0;\n  let s71 = 0;\n  let s72 = 0;\n  let s73 = 0;\n  let s74 = 0;\n  let s75 = 0;\n  let s76 = 0;\n  let s77 = 0;\n  let s78 = 0;\n  let s79 = 0;\n  let s80 = 0;\n  let s81 = 0;\n  let s82 = 0;\n  let s83 = 0;\n  let s84 = 0;\n  let s85 = 0;\n  let s86 = 0;\n  let s87 = 0;\n  let s88 = 0;\n  let s89 = 0;\n  let s90 = 0;\n  let s91 = 0;\n  let s92 = 0;\n  let s93 = 0;\n  let s94 = 0;\n  let s95 = 0;\n  let s96 = 0;\n  let s97 = 0;\n  let s98 = 0;\n  let s99 = 0;\n  let s100 = 0;\n  let s101 = 0;\n  let s102 = 0;\n  let s103 = 0;\n  let s104 = 0;\n  let s105 = 0;\n  let s106 = 0;\n  let s107 = 0;\n  let s108 = 0;\n  let s109 = 0;\n  let s110 = 0;\n  let s111 = 0;\n  let s112 = 0;\n  let s113 = 0;\n  let s114 = 0;\n  let s115 = 0;\n  let s116 = 0;\n  let s117 = 0;\n  let s118 = 0;\n  let s119 = 0;\n  let s120 = 0;\n  let s121 = 0;\n  let s122 = 0;\n  let s123 = 0;\n  let s124 = 0;\n  let s125 = 0;\n  let s126 = 0;\n  let s127 = 0;\n  let s128 = 0;\n  let s129 = 0;\n  let s130 = 0;\n  let s131 = 0;\n  let s132 = 0;\n  let s133 = 0;\n  let s134 = 0;\n  let s135 = 0;\n  let s136 = 0;\n  let s137 = 0;\n  let s138 = 0;\n  let s139 = 0;\n  let s140 = 0;\n  let s141 = 0;\n  let s142 = 0;\n  let s143 = 0;\n  let s144 = 0;\n  let s145 = 0;\n  let s146 = 0;\n  let s147 = 0;\n  let s148 = 0;\n  let s149 = 0;\n  let s150 = 0;\n  let s151 = 0;\n  let s152 = 0;\n  let s153 = 0;\n  let s154 = 0;\n  let s155 = 0;\n  let s156 = 0;\n  let s157 = 0;\n  let s158 = 0;\n  let s159 = 0;\n  let s160 = 0;\n  let s161 = 0;\n  let s162 = 0;\n  let s163 = 0;\n  let s164 = 0;\n  let s165 = 0;\n  let", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling maximum maximal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, generate beget a list of rolling maximum maximal element found find oneself until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let result = [];\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  result.push(max);\n  for (let i = maxIndex; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write spell a function nextSmallest() that returns return the 2nd smallest element chemical element of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return min;\n}\n\n// test cases\nconst test = [\n  [1, 2, 3, 4, 5 ],\n  [5, 1, 4, 3, 2 ],\n  [],\n  [1, 1 ]\n];\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(`nextSmallest(${test[i]}) = ${nextSmallest(test[i])}`);\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words word, and your task is to count reckon the number \n   of boredoms boredom. A boredom is a sentence that starts begin with the word \" I \". \n   Sentences prison term are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let words = S.split(/[.?!]/);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(words[i].toLowerCase())) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = isBored;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes choose 3 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes choose 3 numbers. \n   Returns reappearance true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n   Returns tax return false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst taxReturn = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes choose a message, and encodes in such a \n   way that it swaps trade case of all letters letter, replaces all vowels vowel in \n   the message with the letter that appears 2 places home ahead of that \n   vowel in the english alphabet rudiment. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let i = 0;\n  while (i < message.length) {\n    let letter = message[i];\n    if (isVowel(letter)) {\n      let index = letter.toLowerCase().indexOf(letter);\n      let letter2 = letter.toLowerCase()[index + 2];\n      encoded += letter2;\n    } else {\n      encoded += letter;\n    }\n    i++;\n  }\n  return encoded;\n};\n\nconst isVowel = (letter) => {\n  if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = encode;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need want to find the largest bombastic prime value and return the sum union of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let max_digits = 0;\n  let max_prime = 0;\n  let max_prime_digits = 0;\n  let max_prime_digits_sum = 0;\n  let max_prime_sum = 0;\n  let max_prime_sum_digits = 0;\n  let max_prime_sum_digits_sum = 0;\n  let max_prime_sum_digits_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let max_prime_sum_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys keystone are strings in lower depleted \n   case or all keys winder are strings in upper case sheath, else return false. \n   The function should return false is the given pass dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (typeof key!== \"string\") {\n      return false;\n    }\n    if (key.length > 1) {\n      return false;\n    }\n    if (key.toLowerCase()!== key) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non - negative damaging integer and returns an array of the first beginning n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) return [];\n  let result = [];\n  let counter = 0;\n  while (counter < n) {\n    if (isPrime(counter)) {\n      result.push(counter);\n      counter++;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns \n   the product intersection of their unit digits finger. \n   Assume the input input signal is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_int = a % 10;\n  let b_int = b % 10;\n  let a_digit = a / 10;\n  let b_digit = b / 10;\n  let a_digit_int = a_digit % 10;\n  let b_digit_int = b_digit % 10;\n  let a_digit_digit = a_digit / 10;\n  let b_digit_digit = b_digit / 10;\n  let a_digit_digit_int = a_digit_digit % 10;\n  let b_digit_digit_int = b_digit_digit % 10;\n  let a_digit_digit_digit = a_digit_digit / 10;\n  let b_digit_digit_digit = b_digit_digit / 10;\n  let a_digit_digit_digit_int = a_digit_digit_digit % 10;\n  let b_digit_digit_digit_int = b_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit = a_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit = b_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_int = a_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_int = b_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit = a_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit = b_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_digit_int = b_digit_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit_digit = a_digit_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit_digit = b_digit_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_digit_digit_int = b_digit_digit_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit_digit_digit = a_digit_digit_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit_digit_digit = b_digit_digit_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_int = b_digit_digit_digit_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit = a_digit_digit_digit_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit = b_digit_digit_digit_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit_int = b_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_digit = a_digit_digit_digit_digit_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit_digit = b_digit_digit_digit_digit_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit_digit_int = b_digit_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit = a_digit_digit_digit_digit_digit_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit = b_digit_digit_digit_digit_digit_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_int = b_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit = a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit / 10;\n  let b_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit = b_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit / 10;\n  let a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_int = a_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit_digit % 10;\n  let b_digit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  let i = 0\n  while (i < s.length) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count += 1\n      i += 1\n    } else {\n      i += 2\n    }\n  }\n  return count\n}\n\nmodule.exports = countUpper\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let closest = Math.floor(value);\n  let diff = Math.abs(value - closest);\n  let i = 1;\n  while (diff > 0.00001) {\n    closest = Math.floor(value);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  let closest = Math.floor(value);\n  let diff = Math.abs(value - closest);\n  let i = 1;\n  while (diff > 0.00001) {\n    closest = Math.floor(value);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger3 = (value) => {\n  let closest = Math.floor(value);\n  let diff = Math.abs(value - closest);\n  let i = 1;\n  while (diff > 0.00001) {\n    closest = Math.floor(value);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger4 = (value) => {\n  let closest = Math.floor(value);\n  let diff = Math.abs(value - closest);\n  let i = 1;\n  while (diff > 0.00001) {\n    closest = Math.floor(value);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger5 = (value) => {\n  let closest = Math.floor(value);\n  let diff = Math.abs(value - closest);\n  let i = 1;\n  while (diff > 0.00001) {\n    closest = Math.floor(value);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes choose a value (string) representing present a number \n   and returns come back the closest integer to it. If the number phone number is equidistant \n   from two integers, round polish it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger6 = (value) => {\n  let closest = Math.floor(value);\n  let diff = Math.abs(value - closest);\n  let i = 1;\n  while (diff > 0.00001) {\n    closest = Math.floor(value);\n    diff = Math.abs(value - closest);\n    i++;\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes choose a value (string) representing present a number \n   ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
