/*
  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.

  Example:
  generatedMethodName([1, 2], 5) ➞ false
  # 1+2 is less than the maximum possible weight, but it's unbalanced.

  generatedMethodName([3, 2, 3], 1) ➞ false
  # it's balanced, but 3+2+3 is more than the maximum possible weight.

  generatedMethodName([3, 2, 3], 9) ➞ true
  # 3+2+3 is less than the maximum possible weight, and it's balanced.

  generatedMethodName([3], 5) ➞ true
  # 3 is less than the maximum possible weight, and it's balanced.
  */
const generatedMethodName = (q, w) => {
  if (q.length === 0) return false;
  const max = Math.max(...q.map(x => x));
  if (max === w) return true;
  if (q.length === 1) return false;
  const sum = q.reduce((a, b) => a + b);
  if (sum === w) return true;
  return generatedMethodName(q.slice(1, q.length - 1), w);
};

export default generatedMethodName;


/*
  Write a function that returns true if the object q will fly, and false otherwise.
  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

  Example:
  willItFly([1, 2], 5) ➞ false
  # 1+2 is less than the maximum possible weight, but it's unbalanced.

  willItFly([3, 2, 3], 1) ➞ false
  # it's balanced, but 3+2+3 is more than the maximum possible weight.

  willItFly([3, 2, 3], 9) ➞ true
  # 3+2+3 is less than the maximum possible weight, and it's balanced.

  willItFly([3], 5) ➞ true
  # 3 is less than the maximum possible weight, and it's balanced.
  */
const willItFly = (q, w) => {
  if (q.reduce(((prev, item) => prev + item), 0) > w)
    return false;
  var i = 0, j = q.length - 1;
  while (i < j) {
    if (q[i] != q[j])
      return false;
    i++;
    j--;
  }
  return true;
}


function toString(data) {
  if (typeof data === 'string' || typeof data === 'number') {
    // Convert strings and numbers directly to string
    return String(data);
  } else if (Array.isArray(data)) {
    // Convert arrays to string
    return '[' + data.map(toString).join(', ') + ']';
  } else if (data instanceof Map) {
    // Convert maps to string
    return '{' + Array.from(data).map(([key, value]) => `${toString(key)}: ${toString(value)}`).join(', ') + '}';
  } else if (typeof data === 'object' && data !== null) {
    // Convert objects to string
    const entries = Object.entries(data).map(([key, value]) => `${key}: ${toString(value)}`);
    return '{' + entries.join(', ') + '}';
  } else if (typeof data === 'number' && !isNaN(data)) {
    // Convert floats to string
    return data.toString();
  } else if (typeof data === 'function' && data.name) {
    // Convert functions to string
    return `function ${data.name}() { /* Function code */ }`;
  } else {
    // Convert unsupported data types to string
    return String(data);
  }
}
console.assert(willItFly([0], 0) == generatedMethodName([0], 0));
console.assert(willItFly([1, 2, 1], 4) == generatedMethodName([1, 2, 1], 4));
console.assert(willItFly([2, 3, 2], 7) == generatedMethodName([2, 3, 2], 7));
console.assert(willItFly([1], 0) == generatedMethodName([1], 0));
console.assert(willItFly([4, 2, 1, 2, 4], 13) == generatedMethodName([4, 2, 1, 2, 4], 13));
console.assert(willItFly([4, 2, 1, 2, 4], 12) == generatedMethodName([4, 2, 1, 2, 4], 12));
console.assert(willItFly([1, 2, 3, 2, 1], 7) == generatedMethodName([1, 2, 3, 2, 1], 7));
console.assert(willItFly([1, 2, 3], 10) == generatedMethodName([1, 2, 3], 10));
console.assert(willItFly([1, 2, 3, 2, 1], 10) == generatedMethodName([1, 2, 3, 2, 1], 10));
console.assert(willItFly([1, 1, 1, 1, 1, 1, 1], 7) == generatedMethodName([1, 1, 1, 1, 1, 1, 1], 7));
console.assert(willItFly([4, 2, 1, 2, 4, 4], 14) == generatedMethodName([4, 2, 1, 2, 4, 4], 14));
console.assert(willItFly([1, 0], 0) == generatedMethodName([1, 0], 0));
console.assert(willItFly([1, 2, 3], 0) == generatedMethodName([1, 2, 3], 0));
console.assert(willItFly([1, 1, 0], 0) == generatedMethodName([1, 1, 0], 0));
console.assert(willItFly([7, 2, 3], 0) == generatedMethodName([7, 2, 3], 0));
console.assert(willItFly([1, 1], 0) == generatedMethodName([1, 1], 0));
console.assert(willItFly([1, 1], 3) == generatedMethodName([1, 1], 3));
console.assert(willItFly([1, 0], 7) == generatedMethodName([1, 0], 7));
console.assert(willItFly([1, 10, 1], 4) == generatedMethodName([1, 10, 1], 4));
console.assert(willItFly([4, 1, 2, 3], 10) == generatedMethodName([4, 1, 2, 3], 10));
console.assert(willItFly([4, 2, 1, 2, 4, 4], 7) == generatedMethodName([4, 2, 1, 2, 4, 4], 7));
console.assert(willItFly([1], 12) == generatedMethodName([1], 12));
console.assert(willItFly([2, 3, 2], 6) == generatedMethodName([2, 3, 2], 6));
console.assert(willItFly([0, 1, 1], 3) == generatedMethodName([0, 1, 1], 3));
console.assert(willItFly([3, 2, 1, 2, 4], 13) == generatedMethodName([3, 2, 1, 2, 4], 13));
console.assert(willItFly([1], 13) == generatedMethodName([1], 13));
console.assert(willItFly([1, 10, 1], 5) == generatedMethodName([1, 10, 1], 5));
console.assert(willItFly([6], 0) == generatedMethodName([6], 0));
console.assert(willItFly([1, 13, 1, 0], 6) == generatedMethodName([1, 13, 1, 0], 6));
console.assert(willItFly([1, 2, 3], 1) == generatedMethodName([1, 2, 3], 1));
console.assert(willItFly([1, 1, 1, 1, 1, 1, 1, 1], 7) == generatedMethodName([1, 1, 1, 1, 1, 1, 1, 1], 7));
console.assert(willItFly([1, 2, 3, 2, 1], 5) == generatedMethodName([1, 2, 3, 2, 1], 5));
console.assert(willItFly([1, 2, 1], 3) == generatedMethodName([1, 2, 1], 3));
console.assert(willItFly([1, 1, 0, 1], 0) == generatedMethodName([1, 1, 0, 1], 0));
console.assert(willItFly([1, 1, 1, 1, 1, 1], 8) == generatedMethodName([1, 1, 1, 1, 1, 1], 8));
console.assert(willItFly([], 0) == generatedMethodName([], 0));
console.assert(willItFly([1, 2, 13], 0) == generatedMethodName([1, 2, 13], 0));
console.assert(willItFly([1, 2, 1], 13) == generatedMethodName([1, 2, 1], 13));
console.assert(willItFly([2, 2], 12) == generatedMethodName([2, 2], 12));
console.assert(willItFly([1, 2, 3, 2, 1], 4) == generatedMethodName([1, 2, 3, 2, 1], 4));
console.assert(willItFly([2, 1, 2, 4, 4], 7) == generatedMethodName([2, 1, 2, 4, 4], 7));
console.assert(willItFly([3, 2, 1, 2, 4], 3) == generatedMethodName([3, 2, 1, 2, 4], 3));
console.assert(willItFly([3, 2, 1, 2, 4], 7) == generatedMethodName([3, 2, 1, 2, 4], 7));
console.assert(willItFly([-15, 13, 83, 8], 0) == generatedMethodName([-15, 13, 83, 8], 0));
console.assert(willItFly([1, 1, 1, 1, 1, 1, 1, 2, 1], 7) == generatedMethodName([1, 1, 1, 1, 1, 1, 1, 2, 1], 7));
console.assert(willItFly([4, 2, 1, 2, 8, 4], 14) == generatedMethodName([4, 2, 1, 2, 8, 4], 14));
console.assert(willItFly([1], -1) == generatedMethodName([1], -1));
console.assert(willItFly([1, 2, 13], 83) == generatedMethodName([1, 2, 13], 83));
console.assert(willItFly([1, -1, 0], 0) == generatedMethodName([1, -1, 0], 0));
console.assert(willItFly([14, 1], 83) == generatedMethodName([14, 1], 83));
console.assert(willItFly([1, 2, 3, 1], 1) == generatedMethodName([1, 2, 3, 1], 1));
console.assert(willItFly([1, 2, 13, 1], 1) == generatedMethodName([1, 2, 13, 1], 1));
console.assert(willItFly([3, 1, 2, 1, 2, 4], 3) == generatedMethodName([3, 1, 2, 1, 2, 4], 3));
console.assert(willItFly([4, 2, 1, 2, 8, 4, 1], 14) == generatedMethodName([4, 2, 1, 2, 8, 4, 1], 14));
console.assert(willItFly([4, 1, 2, 3], 6) == generatedMethodName([4, 1, 2, 3], 6));
console.assert(willItFly([1, 2, 1], 8) == generatedMethodName([1, 2, 1], 8));
console.assert(willItFly([2, 3], 0) == generatedMethodName([2, 3], 0));
console.assert(willItFly([4, 13, 1, 0], 6) == generatedMethodName([4, 13, 1, 0], 6));
console.assert(willItFly([1, 1], -1) == generatedMethodName([1, 1], -1));
console.assert(willItFly([], 2) == generatedMethodName([], 2));
console.assert(willItFly([2, 2], 2) == generatedMethodName([2, 2], 2));
console.assert(willItFly([3], -1) == generatedMethodName([3], -1));
console.assert(willItFly([13, 83, 8], 0) == generatedMethodName([13, 83, 8], 0));
console.assert(willItFly([2, 2, 2], 12) == generatedMethodName([2, 2, 2], 12));
console.assert(willItFly([1, 13, 1, 0], 5) == generatedMethodName([1, 13, 1, 0], 5));
console.assert(willItFly([2], 13) == generatedMethodName([2], 13));
console.assert(willItFly([1, 1, 1, 1, 1, 1], 7) == generatedMethodName([1, 1, 1, 1, 1, 1], 7));
console.assert(willItFly([0], 1) == generatedMethodName([0], 1));
console.assert(willItFly([13, 2, 1], 3) == generatedMethodName([13, 2, 1], 3));
console.assert(willItFly([1, 10, 1, 1], 4) == generatedMethodName([1, 10, 1, 1], 4));
console.assert(willItFly([48, -3, -48], 2) == generatedMethodName([48, -3, -48], 2));
console.assert(willItFly([2, 3, 2], -1) == generatedMethodName([2, 3, 2], -1));
console.assert(willItFly([4, 1, 2, 8, 4], 13) == generatedMethodName([4, 1, 2, 8, 4], 13));
console.assert(willItFly([13, 1], 2) == generatedMethodName([13, 1], 2));
console.assert(willItFly([48, -48, -3, -48], 2) == generatedMethodName([48, -48, -3, -48], 2));
console.assert(willItFly([1, 2, 3], 5) == generatedMethodName([1, 2, 3], 5));
console.assert(willItFly([1, 1, 0, 0], -15) == generatedMethodName([1, 1, 0, 0], -15));
console.assert(willItFly([1], 14) == generatedMethodName([1], 14));
console.assert(willItFly([4, 1, 2, 3], 0) == generatedMethodName([4, 1, 2, 3], 0));
console.assert(willItFly([1, 10, 1, 1], 83) == generatedMethodName([1, 10, 1, 1], 83));
console.assert(willItFly([1, 2, 3, 2, 1], 8) == generatedMethodName([1, 2, 3, 2, 1], 8));
console.assert(willItFly([12, 13, 83, 8], 0) == generatedMethodName([12, 13, 83, 8], 0));
console.assert(willItFly([7, 2, 2], 12) == generatedMethodName([7, 2, 2], 12));
console.assert(willItFly([4, 2, 1, 2, 4, 4], 2) == generatedMethodName([4, 2, 1, 2, 4, 4], 2));
console.assert(willItFly([2, 3, 2], 1) == generatedMethodName([2, 3, 2], 1));
console.assert(willItFly([3, 1, 2, 1, 2, 4, 2], 3) == generatedMethodName([3, 1, 2, 1, 2, 4, 2], 3));
console.assert(willItFly([1, 2, 1, 1], 8) == generatedMethodName([1, 2, 1, 1], 8));
console.assert(willItFly([13, 83, 8], 1) == generatedMethodName([13, 83, 8], 1));
console.assert(willItFly([4, 1, 13, 1, 0], 6) == generatedMethodName([4, 1, 13, 1, 0], 6));
console.assert(willItFly([3], 14) == generatedMethodName([3], 14));
console.assert(willItFly([1, 2, 13, 13], 12) == generatedMethodName([1, 2, 13, 13], 12));
console.assert(willItFly([14, 1], 82) == generatedMethodName([14, 1], 82));
console.assert(willItFly([6], -15) == generatedMethodName([6], -15));
console.assert(willItFly([1, 13, 1, 0], 8) == generatedMethodName([1, 13, 1, 0], 8));
console.assert(willItFly([1, 1, 1, 1, 1, 1, 1, 1, 1], 7) == generatedMethodName([1, 1, 1, 1, 1, 1, 1, 1, 1], 7));
console.assert(willItFly([1, 0], -1) == generatedMethodName([1, 0], -1));
console.assert(willItFly([7, 2], 12) == generatedMethodName([7, 2], 12));
console.assert(willItFly([4, 1, 2, 3], 1) == generatedMethodName([4, 1, 2, 3], 1));
console.assert(willItFly([2, 3, 2], -2) == generatedMethodName([2, 3, 2], -2));
console.assert(willItFly([1, 1, 1, 1, 1], 7) == generatedMethodName([1, 1, 1, 1, 1], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1], 30) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1], 30));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 20) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 20));
console.assert(willItFly([1, 2, 3, 4], 5) == generatedMethodName([1, 2, 3, 4], 5));
console.assert(willItFly([1, 2, 3, 2, 1, 0], 7) == generatedMethodName([1, 2, 3, 2, 1, 0], 7));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 6) == generatedMethodName([1, 2, 3, 4, 5, 6], 6));
console.assert(willItFly([1, 2, 3, 2, 1], 6) == generatedMethodName([1, 2, 3, 2, 1], 6));
console.assert(willItFly([7], 7) == generatedMethodName([7], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 7) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 7));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 18, 20, 12], 3) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 18, 20, 12], 3));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0, 1], 7) == generatedMethodName([1, 2, 3, 1, 2, 1, 0, 1], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 8) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 4) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 4));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 8) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 8));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 1) == generatedMethodName([1, 2, 3, 4, 5, 6], 1));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 6, 1], 14) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 6, 1], 14));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 20) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 6, 1, 2], 14) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 6, 1, 2], 14));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 2], 6) == generatedMethodName([1, 2, 3, 2, 1, 2, 2], 6));
console.assert(willItFly([1, 3, 2, 1, 0], 8) == generatedMethodName([1, 3, 2, 1, 0], 8));
console.assert(willItFly([1, 2, 2, 1, 0], 7) == generatedMethodName([1, 2, 2, 1, 0], 7));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1], 1) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1], 1));
console.assert(willItFly([2, 2, 1], 7) == generatedMethodName([2, 2, 1], 7));
console.assert(willItFly([1, 5, 2, 3, 4, 5, 6], 1) == generatedMethodName([1, 5, 2, 3, 4, 5, 6], 1));
console.assert(willItFly([1, 4, 2, 3, 2, 1, 1], 8) == generatedMethodName([1, 4, 2, 3, 2, 1, 1], 8));
console.assert(willItFly([1, 3, 2, 1, 0, 1], 8) == generatedMethodName([1, 3, 2, 1, 0, 1], 8));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1], 8) == generatedMethodName([1, 4, 3, 3, 2, 1, 1], 8));
console.assert(willItFly([14, 2, 3, 4, 5], 6) == generatedMethodName([14, 2, 3, 4, 5], 6));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 5) == generatedMethodName([1, 2, 3, 4, 5, 6], 5));
console.assert(willItFly([1, 3, 1, 5, 7, 9, 7, 5, 3, 1, 5], 8) == generatedMethodName([1, 3, 1, 5, 7, 9, 7, 5, 3, 1, 5], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 2], 7) == generatedMethodName([1, 2, 3, 2, 1, 0, 2], 7));
console.assert(willItFly([0, 2, 3, 2, 1, 0, 2], 7) == generatedMethodName([0, 2, 3, 2, 1, 0, 2], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 9) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 9));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1], 9) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1], 9));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 17, 20, 12], 3) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 17, 20, 12], 3));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 21) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 21));
console.assert(willItFly([1, 2, 1, 0], 8) == generatedMethodName([1, 2, 1, 0], 8));
console.assert(willItFly([14, 7], 8) == generatedMethodName([14, 7], 8));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 4) == generatedMethodName([1, 2, 3, 4, 5, 6], 4));
console.assert(willItFly([4, 2, 3, 2, 1, 1], 8) == generatedMethodName([4, 2, 3, 2, 1, 1], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2], 20));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1], 5) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1], 5));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 7) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 7));
console.assert(willItFly([1, 2, 3, 4, 5, 3], 6) == generatedMethodName([1, 2, 3, 4, 5, 3], 6));
console.assert(willItFly([1, 2, 3, 5, 6], 1) == generatedMethodName([1, 2, 3, 5, 6], 1));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 1], 8) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 1], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 0, 2, 2], 8) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 0, 2, 2], 8));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1, 5], 7) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1, 5], 7));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1));
console.assert(willItFly([1, 2, 1, 0], 14) == generatedMethodName([1, 2, 1, 0], 14));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 4) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 4));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 17, 20, 12], 4) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 17, 20, 12], 4));
console.assert(willItFly([1, 2, 4, 1, 0], 14) == generatedMethodName([1, 2, 4, 1, 0], 14));
console.assert(willItFly([2, 2, 1, 0], 21) == generatedMethodName([2, 2, 1, 0], 21));
console.assert(willItFly([2, 2, 1, 4], 21) == generatedMethodName([2, 2, 1, 4], 21));
console.assert(willItFly([1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1) == generatedMethodName([1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 10) == generatedMethodName([1, 2, 3, 4, 5, 6], 10));
console.assert(willItFly([1, 7, 2, 3, 4, 5, 6], 6) == generatedMethodName([1, 7, 2, 3, 4, 5, 6], 6));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0, 1], 10) == generatedMethodName([1, 2, 3, 1, 2, 1, 0, 1], 10));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1], 0) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1], 0));
console.assert(willItFly([2, 3, 2, 1], 8) == generatedMethodName([2, 3, 2, 1], 8));
console.assert(willItFly([30, 14, 2, 3, 4, 4, 5], 5) == generatedMethodName([30, 14, 2, 3, 4, 4, 5], 5));
console.assert(willItFly([7, 7], 7) == generatedMethodName([7, 7], 7));
console.assert(willItFly([4, 2, 3, 2, 1, 1, 1], 0) == generatedMethodName([4, 2, 3, 2, 1, 1, 1], 0));
console.assert(willItFly([2, 2, 18, 0], 30) == generatedMethodName([2, 2, 18, 0], 30));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1, 1], 9) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1, 1], 9));
console.assert(willItFly([1, 4, 2, 5, 1, 3, 2, 1, 1], 8) == generatedMethodName([1, 4, 2, 5, 1, 3, 2, 1, 1], 8));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 16, 18, 20], 20) == generatedMethodName([2, 4, 6, 8, 10, 12, 16, 18, 20], 20));
console.assert(willItFly([1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2], 20) == generatedMethodName([1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2], 20));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 17) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 17));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12], 4) == generatedMethodName([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12], 4));
console.assert(willItFly([1, 4, 2, 5, 1, 14, 3, 2, 1, 1], 8) == generatedMethodName([1, 4, 2, 5, 1, 14, 3, 2, 1, 1], 8));
console.assert(willItFly([1, 2, 2, 1], 8) == generatedMethodName([1, 2, 2, 1], 8));
console.assert(willItFly([1, 3, 2, 1, 0], 7) == generatedMethodName([1, 3, 2, 1, 0], 7));
console.assert(willItFly([1, 7, 2, 3, 4, 5, 6], 5) == generatedMethodName([1, 7, 2, 3, 4, 5, 6], 5));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6], 4) == generatedMethodName([1, 2, 5, 3, 4, 5, 6], 4));
console.assert(willItFly([2, 2, 18, 0], 31) == generatedMethodName([2, 2, 18, 0], 31));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 2, 16], 20) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 2, 16], 20));
console.assert(willItFly([0, 1, 4, 2, 5, 1, 3, 2, 1, 1], 8) == generatedMethodName([0, 1, 4, 2, 5, 1, 3, 2, 1, 1], 8));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 3) == generatedMethodName([1, 2, 3, 4, 5, 6], 3));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 1], 4) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 1], 4));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 16, 18, 20], 21) == generatedMethodName([2, 4, 6, 8, 10, 12, 16, 18, 20], 21));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 9) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 9));
console.assert(willItFly([1, 1, 2, 3, 5, 6], 0) == generatedMethodName([1, 1, 2, 3, 5, 6], 0));
console.assert(willItFly([14, 2, 3, 4, 5, 5], 6) == generatedMethodName([14, 2, 3, 4, 5, 5], 6));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6], 6) == generatedMethodName([1, 2, 5, 3, 4, 5, 6], 6));
console.assert(willItFly([0, 1, 2, 5, 1, 3, 2, 1, 1], 8) == generatedMethodName([0, 1, 2, 5, 1, 3, 2, 1, 1], 8));
console.assert(willItFly([2, 3, 1, 2, 1, 0, 1], 7) == generatedMethodName([2, 3, 1, 2, 1, 0, 1], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 7, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 7, 2, 2], 20));
console.assert(willItFly([2, 1, 2, 3, 2, 1], 7) == generatedMethodName([2, 1, 2, 3, 2, 1], 7));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1, 1], 21) == generatedMethodName([1, 4, 3, 3, 2, 1, 1, 1], 21));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 0, 2, 2], 14) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 0, 2, 2], 14));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6, 5], 6) == generatedMethodName([1, 2, 5, 3, 4, 5, 6, 5], 6));
console.assert(willItFly([1, 2, 3, 7, 2, 1, 0, 1], 7) == generatedMethodName([1, 2, 3, 7, 2, 1, 0, 1], 7));
console.assert(willItFly([1, 2, 3, 1, 0, 1, 1], 1) == generatedMethodName([1, 2, 3, 1, 0, 1, 1], 1));
console.assert(willItFly([3, 3, 3, 2, 1, 0, 1], 7) == generatedMethodName([3, 3, 3, 2, 1, 0, 1], 7));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1], 9) == generatedMethodName([1, 4, 3, 3, 2, 1, 1], 9));
console.assert(willItFly([1, 4, 2, 3, 2, 1, 1, 1], 8) == generatedMethodName([1, 4, 2, 3, 2, 1, 1, 1], 8));
console.assert(willItFly([1, 3, 2, 1, 0, 2], 8) == generatedMethodName([1, 3, 2, 1, 0, 2], 8));
console.assert(willItFly([1, 2, 30, 3, 2, 1, 0, 2], 7) == generatedMethodName([1, 2, 30, 3, 2, 1, 0, 2], 7));
console.assert(willItFly([14, 2, 3, 4, 5, 5], 7) == generatedMethodName([14, 2, 3, 4, 5, 5], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 12, 1, 1], 8) == generatedMethodName([1, 2, 3, 2, 1, 0, 12, 1, 1], 8));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 16) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 16));
console.assert(willItFly([1, 2, 3, 4, 5, 6, 6], 7) == generatedMethodName([1, 2, 3, 4, 5, 6, 6], 7));
console.assert(willItFly([2, 6, 8, 10, 16, 18, 31, 20], 20) == generatedMethodName([2, 6, 8, 10, 16, 18, 31, 20], 20));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0, 1], 30) == generatedMethodName([1, 2, 3, 1, 2, 1, 0, 1], 30));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 31) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 31));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 19) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 1], 9) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 1], 9));
console.assert(willItFly([1, 4, 3, 3, 12, 1, 1, 1, 1], 7) == generatedMethodName([1, 4, 3, 3, 12, 1, 1, 1, 1], 7));
console.assert(willItFly([0, 1, 2, 5, 1, 31, 3, 2, 1], 8) == generatedMethodName([0, 1, 2, 5, 1, 31, 3, 2, 1], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 31) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 31));
console.assert(willItFly([1, 2, 2, 2, 1, 0, 2], 9) == generatedMethodName([1, 2, 2, 2, 1, 0, 2], 9));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 14) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 14));
console.assert(willItFly([1, 2, 4, 1, 0], 2) == generatedMethodName([1, 2, 4, 1, 0], 2));
console.assert(willItFly([1, 2, 2, 1], 7) == generatedMethodName([1, 2, 2, 1], 7));
console.assert(willItFly([30, 14, 2, 4, 4, 5], 10) == generatedMethodName([30, 14, 2, 4, 4, 5], 10));
console.assert(willItFly([14, 2, 3, 4, 5, 3], 6) == generatedMethodName([14, 2, 3, 4, 5, 3], 6));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 2, 16], 1) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 2, 16], 1));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 3, 1, 5], 7) == generatedMethodName([1, 3, 5, 7, 9, 7, 3, 1, 5], 7));
console.assert(willItFly([1, 30, 3, 1, 5, 7, 9, 7, 5, 3, 1, 5], 8) == generatedMethodName([1, 30, 3, 1, 5, 7, 9, 7, 5, 3, 1, 5], 8));
console.assert(willItFly([1, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 21) == generatedMethodName([1, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 21));
console.assert(willItFly([2, 2, 1, 0], 20) == generatedMethodName([2, 2, 1, 0], 20));
console.assert(willItFly([1, 2, 3, 6, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 2], 20) == generatedMethodName([1, 2, 3, 6, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 2], 20));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 18, 20, 12, 6], 3) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 18, 20, 12, 6], 3));
console.assert(willItFly([1, 2, 3, 7, 2, 1, 0, 1], 6) == generatedMethodName([1, 2, 3, 7, 2, 1, 0, 1], 6));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 30) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 30));
console.assert(willItFly([1, 2, 4, 5, 0], 14) == generatedMethodName([1, 2, 4, 5, 0], 14));
console.assert(willItFly([1, 2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1) == generatedMethodName([1, 2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 12) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 12));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 16, 18, 20], 13) == generatedMethodName([2, 4, 6, 8, 10, 12, 16, 18, 20], 13));
console.assert(willItFly([1, 4, 2, 3, 2, 1, 1, 1], 9) == generatedMethodName([1, 4, 2, 3, 2, 1, 1, 1], 9));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1], 30) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1], 30));
console.assert(willItFly([1, 4, 31, 3, 3, 2, 2, 1, 1, 1], 21) == generatedMethodName([1, 4, 31, 3, 3, 2, 2, 1, 1, 1], 21));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 3, 1, 5], 7) == generatedMethodName([1, 5, 7, 9, 7, 5, 3, 1, 5], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 21) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 21));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6, 5, 5], 6) == generatedMethodName([1, 2, 5, 3, 4, 5, 6, 5, 5], 6));
console.assert(willItFly([7, 2, 4, 5, 5], 6) == generatedMethodName([7, 2, 4, 5, 5], 6));
console.assert(willItFly([1, 4, 2, 3, 2, 0, 1], 8) == generatedMethodName([1, 4, 2, 3, 2, 0, 1], 8));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1], 8) == generatedMethodName([1, 4, 2, 5, 3, 2, 1], 8));
console.assert(willItFly([2, 2, 1, 0, 2], 17) == generatedMethodName([2, 2, 1, 0, 2], 17));
console.assert(willItFly([2, 4, 6, 8, 10, 14, 17, 17, 20, 12], 4) == generatedMethodName([2, 4, 6, 8, 10, 14, 17, 17, 20, 12], 4));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 1], 1) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 1], 1));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 20, 12], 3) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 20, 12], 3));
console.assert(willItFly([0, 1, 4, 2, 5, 1, 3, 2, 1, 1], 10) == generatedMethodName([0, 1, 4, 2, 5, 1, 3, 2, 1, 1], 10));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 1, 5], 8) == generatedMethodName([1, 5, 7, 9, 7, 5, 1, 5], 8));
console.assert(willItFly([0, 2, 3, 2, 1, 0, 1, 1, 1], 31) == generatedMethodName([0, 2, 3, 2, 1, 0, 1, 1, 1], 31));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 17, 20, 12], 11) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 17, 20, 12], 11));
console.assert(willItFly([1, 5, 2, 3, 4, 5, 6], 2) == generatedMethodName([1, 5, 2, 3, 4, 5, 6], 2));
console.assert(willItFly([2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 17) == generatedMethodName([2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 17));
console.assert(willItFly([1, 2, 11, 4, 5, 6], 4) == generatedMethodName([1, 2, 11, 4, 5, 6], 4));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 1], 21) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 1], 21));
console.assert(willItFly([], 6) == generatedMethodName([], 6));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 3, 1], -1) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 3, 1], -1));
console.assert(willItFly([14, 2, 3, 4, 5, 3], 5) == generatedMethodName([14, 2, 3, 4, 5, 3], 5));
console.assert(willItFly([1, 2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 2) == generatedMethodName([1, 2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 2));
console.assert(willItFly([14, 2, 3, 4, 5, 18, 3], 6) == generatedMethodName([14, 2, 3, 4, 5, 18, 3], 6));
console.assert(willItFly([1, 10, 3, 1, 2, 1, 0, 1], 30) == generatedMethodName([1, 10, 3, 1, 2, 1, 0, 1], 30));
console.assert(willItFly([30, 14, 4, 4, 5], 10) == generatedMethodName([30, 14, 4, 4, 5], 10));
console.assert(willItFly([1, 3, 1, 0], 7) == generatedMethodName([1, 3, 1, 0], 7));
console.assert(willItFly([1, 2, 2, 1, 0], 6) == generatedMethodName([1, 2, 2, 1, 0], 6));
console.assert(willItFly([1, 30, 3, 5, 7, 9, 7, 5, 3, 1, 5], 8) == generatedMethodName([1, 30, 3, 5, 7, 9, 7, 5, 3, 1, 5], 8));
console.assert(willItFly([1, 5, 7, 10, 7, 5, 3, 1, 5], 7) == generatedMethodName([1, 5, 7, 10, 7, 5, 3, 1, 5], 7));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 9) == generatedMethodName([1, 2, 3, 4, 5, 6], 9));
console.assert(willItFly([1, 2, 1, 0], 6) == generatedMethodName([1, 2, 1, 0], 6));
console.assert(willItFly([1, 3, 18, 4, 1, 0], -1) == generatedMethodName([1, 3, 18, 4, 1, 0], -1));
console.assert(willItFly([2, 2, 18, 0], 13) == generatedMethodName([2, 2, 18, 0], 13));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 1], 9) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 1], 9));
console.assert(willItFly([1, 4, 31, 3, 3, 2, 2, 1, 1, 1], 9) == generatedMethodName([1, 4, 31, 3, 3, 2, 2, 1, 1, 1], 9));
console.assert(willItFly([1, 2, 3, 2, 1, 1, 0, 1, 1], 31) == generatedMethodName([1, 2, 3, 2, 1, 1, 0, 1, 1], 31));
console.assert(willItFly([1, 2, 2, 3, 4, 5, 6], 5) == generatedMethodName([1, 2, 2, 3, 4, 5, 6], 5));
console.assert(willItFly([1, 2, 4, 3, 4, 5, 7], 7) == generatedMethodName([1, 2, 4, 3, 4, 5, 7], 7));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6], 1) == generatedMethodName([1, 2, 5, 3, 4, 5, 6], 1));
console.assert(willItFly([2, 3, 2, 1, 0, 1], 9) == generatedMethodName([2, 3, 2, 1, 0, 1], 9));
console.assert(willItFly([2, 4, 6, 8, 10, 14, 17, 17, 20, 12, 10], 4) == generatedMethodName([2, 4, 6, 8, 10, 14, 17, 17, 20, 12, 10], 4));
console.assert(willItFly([30, 14, 4, 4], 10) == generatedMethodName([30, 14, 4, 4], 10));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3], 20) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3], 20));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12], 2) == generatedMethodName([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12], 2));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 42) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 42));
console.assert(willItFly([2, 4, 8, 10, 12, 14, 16, 18, 21], 20) == generatedMethodName([2, 4, 8, 10, 12, 14, 16, 18, 21], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 22) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 22));
console.assert(willItFly([1, 2, 11, 4, 5, 6], 10) == generatedMethodName([1, 2, 11, 4, 5, 6], 10));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 21, 3], 2) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 21, 3], 2));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 13) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 13));
console.assert(willItFly([1, 2, -1, 4, 5, 0], 13) == generatedMethodName([1, 2, -1, 4, 5, 0], 13));
console.assert(willItFly([1, 4, 3, 4, 5, 6], 6) == generatedMethodName([1, 4, 3, 4, 5, 6], 6));
console.assert(willItFly([1, 2, 31, 1, -1, 0], 6) == generatedMethodName([1, 2, 31, 1, -1, 0], 6));
console.assert(willItFly([1, 2, 3, 8, 2, 1, 0, 1], 7) == generatedMethodName([1, 2, 3, 8, 2, 1, 0, 1], 7));
console.assert(willItFly([14, 2, 4, 5, 3], 6) == generatedMethodName([14, 2, 4, 5, 3], 6));
console.assert(willItFly([2, 2, 1, 4], 12) == generatedMethodName([2, 2, 1, 4], 12));
console.assert(willItFly([2, 2, 1], 8) == generatedMethodName([2, 2, 1], 8));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0, 1, 2], 30) == generatedMethodName([1, 2, 3, 1, 2, 1, 0, 1, 2], 30));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1, 1], 8) == generatedMethodName([1, 4, 3, 3, 2, 1, 1, 1], 8));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 19) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 19));
console.assert(willItFly([2, 1, 0], 22) == generatedMethodName([2, 1, 0], 22));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12], 30) == generatedMethodName([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12], 30));
console.assert(willItFly([1, 2, 4, 5, 6], 6) == generatedMethodName([1, 2, 4, 5, 6], 6));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1, 4], 2) == generatedMethodName([1, 4, 3, 3, 2, 1, 1, 4], 2));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 2, 1, 7, 2, 2], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 2, 1, 7, 2, 2], 19));
console.assert(willItFly([1, 2, 1, 0, 0], 14) == generatedMethodName([1, 2, 1, 0, 0], 14));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6], 20) == generatedMethodName([1, 2, 5, 3, 4, 5, 6], 20));
console.assert(willItFly([4, 2, 3, 2, 0], 8) == generatedMethodName([4, 2, 3, 2, 0], 8));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 1], -1) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 1], -1));
console.assert(willItFly([30, 14, 2, 4, 5], 10) == generatedMethodName([30, 14, 2, 4, 5], 10));
console.assert(willItFly([1, 4, 2, 3, 2, 0, 1], 0) == generatedMethodName([1, 4, 2, 3, 2, 0, 1], 0));
console.assert(willItFly([1, 2, 5, 3, 4, 4, 6, 5], 6) == generatedMethodName([1, 2, 5, 3, 4, 4, 6, 5], 6));
console.assert(willItFly([0, 1, 9, 2, 5, 1, 3, 2, 1, 1], 8) == generatedMethodName([0, 1, 9, 2, 5, 1, 3, 2, 1, 1], 8));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 2, 2, 3, 2, 2, 2], 17) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 2, 2, 3, 2, 2, 2], 17));
console.assert(willItFly([30, 14, 2, 3, 4, 4, 5], 6) == generatedMethodName([30, 14, 2, 3, 4, 4, 5], 6));
console.assert(willItFly([2, 4, 11, 6, 8, 10, 12, 14, 17, 18, 20, 12, 6], 3) == generatedMethodName([2, 4, 11, 6, 8, 10, 12, 14, 17, 18, 20, 12, 6], 3));
console.assert(willItFly([1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 21) == generatedMethodName([1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 21));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 22) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 22));
console.assert(willItFly([2, 3, 2, 1], 7) == generatedMethodName([2, 3, 2, 1], 7));
console.assert(willItFly([1, 4, 3, 3, 1, 1, 1, 1], 21) == generatedMethodName([1, 4, 3, 3, 1, 1, 1, 1], 21));
console.assert(willItFly([0, 5, 1, 2, 0, 4, 5, 6], 5) == generatedMethodName([0, 5, 1, 2, 0, 4, 5, 6], 5));
console.assert(willItFly([1, 5, 3, 5, 6, 5], 6) == generatedMethodName([1, 5, 3, 5, 6, 5], 6));
console.assert(willItFly([1, 2, 1], 14) == generatedMethodName([1, 2, 1], 14));
console.assert(willItFly([1, 2, 3, 4], 21) == generatedMethodName([1, 2, 3, 4], 21));
console.assert(willItFly([4, 2, 3, 2, 0, 2], 8) == generatedMethodName([4, 2, 3, 2, 0, 2], 8));
console.assert(willItFly([1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2], 6) == generatedMethodName([1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2], 6));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3], 16) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3], 16));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 16) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 16));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 20, 12], 9) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 20, 12], 9));
console.assert(willItFly([1, 2, 1, 3, 2, 1, 0], 7) == generatedMethodName([1, 2, 1, 3, 2, 1, 0], 7));
console.assert(willItFly([1, 2, 3, 4, 6], 9) == generatedMethodName([1, 2, 3, 4, 6], 9));
console.assert(willItFly([0, 1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 2, 16], 1) == generatedMethodName([0, 1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 2, 16], 1));
console.assert(willItFly([1, 1, 2, 3, 1, 0, 1, 1], 1) == generatedMethodName([1, 1, 2, 3, 1, 0, 1, 1], 1));
console.assert(willItFly([1, 2, 2, 1, 0, 1], 7) == generatedMethodName([1, 2, 2, 1, 0, 1], 7));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0, 1, 2], 7) == generatedMethodName([1, 2, 3, 1, 2, 1, 0, 1, 2], 7));
console.assert(willItFly([1, 2, 9, 3, 2, 1, 0, 9, 1], 22) == generatedMethodName([1, 2, 9, 3, 2, 1, 0, 9, 1], 22));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 30) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 30));
console.assert(willItFly([1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 2, 2, 3], 1) == generatedMethodName([1, 2, 1, 2, 1, 2, 3, 2, 1, 2, 2, 2, 3], 1));
console.assert(willItFly([1, 3, 2, 1, 2, 2], 6) == generatedMethodName([1, 3, 2, 1, 2, 2], 6));
console.assert(willItFly([1, 3, -1, 4, 5, 0], 13) == generatedMethodName([1, 3, -1, 4, 5, 0], 13));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1], 7) == generatedMethodName([1, 4, 3, 3, 2, 1, 1], 7));
console.assert(willItFly([14, 2, 4, 5, 3, 3], 6) == generatedMethodName([14, 2, 4, 5, 3, 3], 6));
console.assert(willItFly([14, 2, 3, 4, 5, 3], 16) == generatedMethodName([14, 2, 3, 4, 5, 3], 16));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 1], 31) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 1], 31));
console.assert(willItFly([2, 2, 1, 4], 6) == generatedMethodName([2, 2, 1, 4], 6));
console.assert(willItFly([7], 6) == generatedMethodName([7], 6));
console.assert(willItFly([2, 3, 2, 1], 0) == generatedMethodName([2, 3, 2, 1], 0));
console.assert(willItFly([1, 2, 3, 21, 5, 6, 4], 14) == generatedMethodName([1, 2, 3, 21, 5, 6, 4], 14));
console.assert(willItFly([2, 4, 6, 8, 10, 14, 17, 17, 20, 12, 8], 10) == generatedMethodName([2, 4, 6, 8, 10, 14, 17, 17, 20, 12, 8], 10));
console.assert(willItFly([1, 2, 4, 1, 0, 4], 14) == generatedMethodName([1, 2, 4, 1, 0, 4], 14));
console.assert(willItFly([1, 2, 3, 2, 1, 2], 6) == generatedMethodName([1, 2, 3, 2, 1, 2], 6));
console.assert(willItFly([1, 2, 4, 5, 0], 15) == generatedMethodName([1, 2, 4, 5, 0], 15));
console.assert(willItFly([1, 2, 3, -1, 2, 1, 2, 0, 1], 4) == generatedMethodName([1, 2, 3, -1, 2, 1, 2, 0, 1], 4));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 1, 16], 31) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 1, 16], 31));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 20, 2, 3, 2, 2, 3, 3], 16) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 20, 2, 3, 2, 2, 3, 3], 16));
console.assert(willItFly([1, 4, 3, 3, 12, 1, 1, 1, 1], 6) == generatedMethodName([1, 4, 3, 3, 12, 1, 1, 1, 1], 6));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 4, 2, 1, 7, 2, 2], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 4, 2, 1, 7, 2, 2], 19));
console.assert(willItFly([7], 8) == generatedMethodName([7], 8));
console.assert(willItFly([1, 2, 2, 3, 2, 1, 0], 7) == generatedMethodName([1, 2, 2, 3, 2, 1, 0], 7));
console.assert(willItFly([0, 1, 2, 5, 1, 31, 3, 2, 1], 13) == generatedMethodName([0, 1, 2, 5, 1, 31, 3, 2, 1], 13));
console.assert(willItFly([0, 1, 15, 5, 1, 3, 2, 1, 1], 8) == generatedMethodName([0, 1, 15, 5, 1, 3, 2, 1, 1], 8));
console.assert(willItFly([6, 8, 10, 16, 19, 31, 20], 20) == generatedMethodName([6, 8, 10, 16, 19, 31, 20], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 14], 16) == generatedMethodName([1, 2, 3, 2, 1, 0, 14], 16));
console.assert(willItFly([1, 2, 5, 3, 4, 4, 6, 5, 3], 6) == generatedMethodName([1, 2, 5, 3, 4, 4, 6, 5, 3], 6));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0], 9) == generatedMethodName([1, 2, 3, 1, 2, 1, 0], 9));
console.assert(willItFly([1, 2, 42, 3, 4], 5) == generatedMethodName([1, 2, 42, 3, 4], 5));
console.assert(willItFly([1, 3, 2, 1, 1, 2], 6) == generatedMethodName([1, 3, 2, 1, 1, 2], 6));
console.assert(willItFly([2, 3, 2, 1, 0], 21) == generatedMethodName([2, 3, 2, 1, 0], 21));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 22], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 22], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 2, 1], 15) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 2, 1], 15));
console.assert(willItFly([1, 6, 3, 5, 7, 9, 7, 5, 3, 1], 17) == generatedMethodName([1, 6, 3, 5, 7, 9, 7, 5, 3, 1], 17));
console.assert(willItFly([1, 4, 3, 4, 5, 6], 13) == generatedMethodName([1, 4, 3, 4, 5, 6], 13));
console.assert(willItFly([1, 1, 2, 1, 2, 3, 2, 1, 2, 2, 2, 3], 15) == generatedMethodName([1, 1, 2, 1, 2, 3, 2, 1, 2, 2, 2, 3], 15));
console.assert(willItFly([30, 14, 4, 4, 4], 10) == generatedMethodName([30, 14, 4, 4, 4], 10));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12, 12], 4) == generatedMethodName([2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12, 12], 4));
console.assert(willItFly([6, 8, 10, 16, 19, 31, 20, 20], 42) == generatedMethodName([6, 8, 10, 16, 19, 31, 20, 20], 42));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 7, 17, 18, 20, 12, 6], 3) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 7, 17, 18, 20, 12, 6], 3));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3, 3], 20) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3, 3], 20));
console.assert(willItFly([2, 2, 1, 1, 0], 20) == generatedMethodName([2, 2, 1, 1, 0], 20));
console.assert(willItFly([14, 2, 3, 4, 5, 3], 4) == generatedMethodName([14, 2, 3, 4, 5, 3], 4));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1], 10) == generatedMethodName([1, 4, 3, 3, 2, 1, 1], 10));
console.assert(willItFly([4, 2, 3, 2, 0, 2, 2], 8) == generatedMethodName([4, 2, 3, 2, 0, 2, 2], 8));
console.assert(willItFly([1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2, 2, 3], 1) == generatedMethodName([1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2, 2, 3], 1));
console.assert(willItFly([2, 3, 1, 4, 5, 6], 0) == generatedMethodName([2, 3, 1, 4, 5, 6], 0));
console.assert(willItFly([1, 2, 1, 1, 2], 6) == generatedMethodName([1, 2, 1, 1, 2], 6));
console.assert(willItFly([1, 2, 2, 3, 1, 0], 7) == generatedMethodName([1, 2, 2, 3, 1, 0], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 1], 19) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 1], 19));
console.assert(willItFly([1, 7, 2, 3, 4, 5, 6], 16) == generatedMethodName([1, 7, 2, 3, 4, 5, 6], 16));
console.assert(willItFly([1, 5, 7, 21, 7, 5, 1, 5], 7) == generatedMethodName([1, 5, 7, 21, 7, 5, 1, 5], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 11, 2, 3, 2, 1, 7, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 11, 2, 3, 2, 1, 7, 2, 2], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1], 22) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1], 22));
console.assert(willItFly([30, 14, 4, 4, 4, 4], 16) == generatedMethodName([30, 14, 4, 4, 4, 4], 16));
console.assert(willItFly([2, 2, 1, 0, 2, 2], 0) == generatedMethodName([2, 2, 1, 0, 2, 2], 0));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 3, 1, 5, 5], 7) == generatedMethodName([1, 5, 7, 9, 7, 5, 3, 1, 5, 5], 7));
console.assert(willItFly([1, 3, 2, 2, 1, 1, 2, 1], 6) == generatedMethodName([1, 3, 2, 2, 1, 1, 2, 1], 6));
console.assert(willItFly([10, 2, 2, 1, 0, 2], 17) == generatedMethodName([10, 2, 2, 1, 0, 2], 17));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1, 7], 30) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1, 7], 30));
console.assert(willItFly([1, 1, 7, 2, 3, 4, 5, 6], 4) == generatedMethodName([1, 1, 7, 2, 3, 4, 5, 6], 4));
console.assert(willItFly([13, 2, 3, 4, 5, 3], 4) == generatedMethodName([13, 2, 3, 4, 5, 3], 4));
console.assert(willItFly([1, 3, 2, 2, 1, 1, 2, 1, 1], 6) == generatedMethodName([1, 3, 2, 2, 1, 1, 2, 1, 1], 6));
console.assert(willItFly([1, 31, 1, 2, 3, 1, 0, 1, 1], 1) == generatedMethodName([1, 31, 1, 2, 3, 1, 0, 1, 1], 1));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 2, 1, 7, 3, 2], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 2, 1, 7, 3, 2], 19));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 2, 3, 2, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 1, 2, 1, 2, 3, 2, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([3, 3, 2, 1, 1, 1], 21) == generatedMethodName([3, 3, 2, 1, 1, 1], 21));
console.assert(willItFly([1, 2, 30, 3, 1, 0, 1, 1, 1], 2) == generatedMethodName([1, 2, 30, 3, 1, 0, 1, 1, 1], 2));
console.assert(willItFly([2, 2, 18, 0], 29) == generatedMethodName([2, 2, 18, 0], 29));
console.assert(willItFly([1, 2, 2, 3, 4, 5, 6, 2], 5) == generatedMethodName([1, 2, 2, 3, 4, 5, 6, 2], 5));
console.assert(willItFly([1, 2, 2, 3, 2, 1, 2, 3, 1, 2, 3, 2, 1], 21) == generatedMethodName([1, 2, 2, 3, 2, 1, 2, 3, 1, 2, 3, 2, 1], 21));
console.assert(willItFly([1, 10, 31, 3, 1, 2, 1, 0, 1], 30) == generatedMethodName([1, 10, 31, 3, 1, 2, 1, 0, 1], 30));
console.assert(willItFly([7, 1, 2, 1, 0, 0], 14) == generatedMethodName([7, 1, 2, 1, 0, 0], 14));
console.assert(willItFly([2, 1, 2, 3, -1, 2, 1, 2, 0, 1], 4) == generatedMethodName([2, 1, 2, 3, -1, 2, 1, 2, 0, 1], 4));
console.assert(willItFly([2, 3, 1, 4, 5, 6], -1) == generatedMethodName([2, 3, 1, 4, 5, 6], -1));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 0], 4) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 0], 4));
console.assert(willItFly([2, 3, 2, 1, 0, 1], 8) == generatedMethodName([2, 3, 2, 1, 0, 1], 8));
console.assert(willItFly([1, 2, 4, 5, 6], 9) == generatedMethodName([1, 2, 4, 5, 6], 9));
console.assert(willItFly([1, 3, 2, 2, 1, 1, 2, 1, 1], 5) == generatedMethodName([1, 3, 2, 2, 1, 1, 2, 1, 1], 5));
console.assert(willItFly([1, 7, 2, 3, 4, 5, 6], -1) == generatedMethodName([1, 7, 2, 3, 4, 5, 6], -1));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1, 3], 22) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1, 3], 22));
console.assert(willItFly([1, 3, 18, 16, 7, 0], -1) == generatedMethodName([1, 3, 18, 16, 7, 0], -1));
console.assert(willItFly([2, 2, 4], 6) == generatedMethodName([2, 2, 4], 6));
console.assert(willItFly([1, 2, 15, 3, 2, 1, 0, 1], 7) == generatedMethodName([1, 2, 15, 3, 2, 1, 0, 1], 7));
console.assert(willItFly([1, 2, 3, 5, 6, 1], 20) == generatedMethodName([1, 2, 3, 5, 6, 1], 20));
console.assert(willItFly([2, 4, 6, 8, 17, 10, 12, 13, 17, 20, 12], 2) == generatedMethodName([2, 4, 6, 8, 17, 10, 12, 13, 17, 20, 12], 2));
console.assert(willItFly([1, 4, 2, 5, 2, 1, 1], 9) == generatedMethodName([1, 4, 2, 5, 2, 1, 1], 9));
console.assert(willItFly([1, 4, 2, 5, 1, 3, 3, 2, 1, 1], 8) == generatedMethodName([1, 4, 2, 5, 1, 3, 3, 2, 1, 1], 8));
console.assert(willItFly([2, 2, 4], -1) == generatedMethodName([2, 2, 4], -1));
console.assert(willItFly([1, 29, 1, 2, 1, 0, 4, 1], 7) == generatedMethodName([1, 29, 1, 2, 1, 0, 4, 1], 7));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 19) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 19));
console.assert(willItFly([1, 2, 3, 5, 6], 5) == generatedMethodName([1, 2, 3, 5, 6], 5));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 2, 2, 3, 2, 16], 20) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 2, 2, 3, 2, 16], 20));
console.assert(willItFly([1, 2, 3, 2, 2, 3, 2, 1, 2, 3, 2, 2, 2], 22) == generatedMethodName([1, 2, 3, 2, 2, 3, 2, 1, 2, 3, 2, 2, 2], 22));
console.assert(willItFly([1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2, 2], 7) == generatedMethodName([1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 1, 2, 2], 7));
console.assert(willItFly([1, 2, 3, 2, 20, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 7, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 20, 2, 3, 2, 1, 1, 3, 2, 3, 2, 1, 7, 2, 2], 20));
console.assert(willItFly([1, 2, 3, 6, 2, 1, 1, 3, 2, 2, 3, 2, 2, 3, 2], 20) == generatedMethodName([1, 2, 3, 6, 2, 1, 1, 3, 2, 2, 3, 2, 2, 3, 2], 20));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1, 3], 6) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1, 3], 6));
console.assert(willItFly([4, 2, 3, 1, 1, 1], 0) == generatedMethodName([4, 2, 3, 1, 1, 1], 0));
console.assert(willItFly([4, 2, 3, 2, 0, 2], 9) == generatedMethodName([4, 2, 3, 2, 0, 2], 9));
console.assert(willItFly([13, 3, 4, 5, 3, 3], 42) == generatedMethodName([13, 3, 4, 5, 3, 3], 42));
console.assert(willItFly([1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2, 3], 1) == generatedMethodName([1, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2, 3], 1));
console.assert(willItFly([1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 16], 13) == generatedMethodName([1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 16], 13));
console.assert(willItFly([1, 2, 3, 2, 1, 3], 29) == generatedMethodName([1, 2, 3, 2, 1, 3], 29));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 5) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 5));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 13, 17, 20, 12], 2) == generatedMethodName([2, 4, 6, 8, 10, 12, 13, 17, 20, 12], 2));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 2], 20) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 2], 20));
console.assert(willItFly([1, 29, 1, 2, 1, 17, 4, 1], 7) == generatedMethodName([1, 29, 1, 2, 1, 17, 4, 1], 7));
console.assert(willItFly([1, 2, 1, 3, 2, 1, 0, 9, 1], 30) == generatedMethodName([1, 2, 1, 3, 2, 1, 0, 9, 1], 30));
console.assert(willItFly([1, 4, 2, 5, 1, 3, 3, 2, 1], 8) == generatedMethodName([1, 4, 2, 5, 1, 3, 3, 2, 1], 8));
console.assert(willItFly([2, 2, 1, 0, 2, 2], 30) == generatedMethodName([2, 2, 1, 0, 2, 2], 30));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 0, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 0, 2, 2], 20));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 16, 3, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 1, 2, 1, 16, 3, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([1, 2, 4, 2, 3, 2, 0, 1], 0) == generatedMethodName([1, 2, 4, 2, 3, 2, 0, 1], 0));
console.assert(willItFly([1, 31, 1, 2, 3, 1, 1, 1], 1) == generatedMethodName([1, 31, 1, 2, 3, 1, 1, 1], 1));
console.assert(willItFly([3, 3, 2, 1, 1, 1, 1], 10) == generatedMethodName([3, 3, 2, 1, 1, 1, 1], 10));
console.assert(willItFly([1, 4, 3, 3, 2, 1, 1, 4], 31) == generatedMethodName([1, 4, 3, 3, 2, 1, 1, 4], 31));
console.assert(willItFly([1, 4, 2, 3, 2, 0, 1, 2], 8) == generatedMethodName([1, 4, 2, 3, 2, 0, 1, 2], 8));
console.assert(willItFly([3, 3, 3, 2, 1, 0, 7], 7) == generatedMethodName([3, 3, 3, 2, 1, 0, 7], 7));
console.assert(willItFly([30, 14, 4, 4, 4, 4], 6) == generatedMethodName([30, 14, 4, 4, 4, 4], 6));
console.assert(willItFly([1, 4, 3, 4, 5, 6], 8) == generatedMethodName([1, 4, 3, 4, 5, 6], 8));
console.assert(willItFly([1, 2, 4, 5, 6], 4) == generatedMethodName([1, 2, 4, 5, 6], 4));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 20, 12], 22) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 20, 12], 22));
console.assert(willItFly([1, 2, 3, 2, 1, 1, 0, 9, 1], 31) == generatedMethodName([1, 2, 3, 2, 1, 1, 0, 9, 1], 31));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 21) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 21));
console.assert(willItFly([1, 2, 3, 3, 1, 1, 2, 3, 2, 1, 2, 3, 2, 16], 20) == generatedMethodName([1, 2, 3, 3, 1, 1, 2, 3, 2, 1, 2, 3, 2, 16], 20));
console.assert(willItFly([6, 8, 10, 19, 3, 31, 20], 20) == generatedMethodName([6, 8, 10, 19, 3, 31, 20], 20));
console.assert(willItFly([6, 16, 8, 10, 19, 3, 31, 20], 20) == generatedMethodName([6, 16, 8, 10, 19, 3, 31, 20], 20));
console.assert(willItFly([1, 2, 1, 1, 3, 2, 1, 0], 7) == generatedMethodName([1, 2, 1, 1, 3, 2, 1, 0], 7));
console.assert(willItFly([1, 0, 2, 5, 3, 4, 5, 6], 20) == generatedMethodName([1, 0, 2, 5, 3, 4, 5, 6], 20));
console.assert(willItFly([1, 3, 2, 2, 1, 1, 2, 1, 1, 1], 5) == generatedMethodName([1, 3, 2, 2, 1, 1, 2, 1, 1, 1], 5));
console.assert(willItFly([17, 3, 1, 4, 5, 6], -1) == generatedMethodName([17, 3, 1, 4, 5, 6], -1));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 1, 5], 16) == generatedMethodName([1, 5, 7, 9, 7, 5, 1, 5], 16));
console.assert(willItFly([1, 30, 5, 7, 9, 7, 5, 3, 1, 5], 29) == generatedMethodName([1, 30, 5, 7, 9, 7, 5, 3, 1, 5], 29));
console.assert(willItFly([13, 3, 4, 5, 3], 13) == generatedMethodName([13, 3, 4, 5, 3], 13));
console.assert(willItFly([2, 5, 2, 1], 4) == generatedMethodName([2, 5, 2, 1], 4));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 18, 20, 12], 4) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 18, 20, 12], 4));
console.assert(willItFly([1, 2, 3, 2, 2, 3, 2, 1, 2, 2, 2, 2], 22) == generatedMethodName([1, 2, 3, 2, 2, 3, 2, 1, 2, 2, 2, 2], 22));
console.assert(willItFly([1, 7, 3, 5, 7, 9, 7, 5, 3, 1], 7) == generatedMethodName([1, 7, 3, 5, 7, 9, 7, 5, 3, 1], 7));
console.assert(willItFly([7, 2, 5, 5, 5], 6) == generatedMethodName([7, 2, 5, 5, 5], 6));
console.assert(willItFly([1, 31, 3, 2, 1, 0, 1], 18) == generatedMethodName([1, 31, 3, 2, 1, 0, 1], 18));
console.assert(willItFly([2, 4, 5, 8, 10, 12, 16, 18, 20], 13) == generatedMethodName([2, 4, 5, 8, 10, 12, 16, 18, 20], 13));
console.assert(willItFly([7], 21) == generatedMethodName([7], 21));
console.assert(willItFly([2, 2, 18, 0], 7) == generatedMethodName([2, 2, 18, 0], 7));
console.assert(willItFly([1, 5, 3, 6, 5, 1], 5) == generatedMethodName([1, 5, 3, 6, 5, 1], 5));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 1], 42) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 1], 42));
console.assert(willItFly([1, 1, 2, 3, 5, 6, 3], 0) == generatedMethodName([1, 1, 2, 3, 5, 6, 3], 0));
console.assert(willItFly([15, 3, -1, 4, 5, 0], 13) == generatedMethodName([15, 3, -1, 4, 5, 0], 13));
console.assert(willItFly([1, 2, 3, 2, 1, -1, 1], 7) == generatedMethodName([1, 2, 3, 2, 1, -1, 1], 7));
console.assert(willItFly([1, 14, 3, 4, 1], 4) == generatedMethodName([1, 14, 3, 4, 1], 4));
console.assert(willItFly([2, 5, 3, 4, 5, 6], 6) == generatedMethodName([2, 5, 3, 4, 5, 6], 6));
console.assert(willItFly([2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 21) == generatedMethodName([2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 2], 21));
console.assert(willItFly([14, 3, 1, 0], 7) == generatedMethodName([14, 3, 1, 0], 7));
console.assert(willItFly([30, 14, 4, 5, 4], 10) == generatedMethodName([30, 14, 4, 5, 4], 10));
console.assert(willItFly([0, 1, 15, 5, 1, 3, 2, 1, 0], 8) == generatedMethodName([0, 1, 15, 5, 1, 3, 2, 1, 0], 8));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1], 29) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1], 29));
console.assert(willItFly([1, 2, 2, 0, 1, 0], 6) == generatedMethodName([1, 2, 2, 0, 1, 0], 6));
console.assert(willItFly([2, 2, 18, 1, 0], 29) == generatedMethodName([2, 2, 18, 1, 0], 29));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6, 5], 21) == generatedMethodName([1, 2, 5, 3, 4, 5, 6, 5], 21));
console.assert(willItFly([4, 2, 3, 2, 0, 2], 12) == generatedMethodName([4, 2, 3, 2, 0, 2], 12));
console.assert(willItFly([30, 2, 3, 4, 5, 3], 6) == generatedMethodName([30, 2, 3, 4, 5, 3], 6));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 1], 22) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 1], 22));
console.assert(willItFly([1, 2, 5, 6], 31) == generatedMethodName([1, 2, 5, 6], 31));
console.assert(willItFly([1, 2, 31, 1, 0], 16) == generatedMethodName([1, 2, 31, 1, 0], 16));
console.assert(willItFly([1, 2, 2, 3, 1, 0], 8) == generatedMethodName([1, 2, 2, 3, 1, 0], 8));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 2, 2], 21) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 2, 2], 21));
console.assert(willItFly([1, 2, 3, 1, 2, 13, 1, 0, 1], 30) == generatedMethodName([1, 2, 3, 1, 2, 13, 1, 0, 1], 30));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 3, 1, 5, 5, 1], 7) == generatedMethodName([1, 5, 7, 9, 7, 5, 3, 1, 5, 5, 1], 7));
console.assert(willItFly([1, 2, 1, 1, 3, 2, 1, 0], 8) == generatedMethodName([1, 2, 1, 1, 3, 2, 1, 0], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 1, 16], 31) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 1, 16], 31));
console.assert(willItFly([30, 14, 4, 4, 5, 30], 10) == generatedMethodName([30, 14, 4, 4, 5, 30], 10));
console.assert(willItFly([3, 4, 16, 6, 10, 14, 17, 17, 20, 12], 4) == generatedMethodName([3, 4, 16, 6, 10, 14, 17, 17, 20, 12], 4));
console.assert(willItFly([1, 3, 2, 5, 7, 9, 7, 5, 3, 13, 1, 5], 9) == generatedMethodName([1, 3, 2, 5, 7, 9, 7, 5, 3, 13, 1, 5], 9));
console.assert(willItFly([1, 2, 5, 3, 4, 4, 6, 5, 3], 10) == generatedMethodName([1, 2, 5, 3, 4, 4, 6, 5, 3], 10));
console.assert(willItFly([1, 2, 3, 5, 6, 5], 20) == generatedMethodName([1, 2, 3, 5, 6, 5], 20));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 1, 5], 5) == generatedMethodName([1, 5, 7, 9, 7, 5, 1, 5], 5));
console.assert(willItFly([1, 5, 2, 4, 5, 6], 9) == generatedMethodName([1, 5, 2, 4, 5, 6], 9));
console.assert(willItFly([1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 16], 4) == generatedMethodName([1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 16], 4));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 2, 1, 7, 3, 2], 18) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 30, 1, 3, 2, 3, 2, 1, 7, 3, 2], 18));
console.assert(willItFly([1, 30, 3, 7, 9, 7, 5, 3, 1, 5], 8) == generatedMethodName([1, 30, 3, 7, 9, 7, 5, 3, 1, 5], 8));
console.assert(willItFly([4, 7, 3, 2, 1, 1, 1], 0) == generatedMethodName([4, 7, 3, 2, 1, 1, 1], 0));
console.assert(willItFly([7, 1, 2, 1, 0, 0, 0], 30) == generatedMethodName([7, 1, 2, 1, 0, 0, 0], 30));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3], 1));
console.assert(willItFly([2, 2, 1, 0, 2, 18], 0) == generatedMethodName([2, 2, 1, 0, 2, 18], 0));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1, 1], 15) == generatedMethodName([1, 4, 2, 5, 3, 2, 1, 1], 15));
console.assert(willItFly([1, 2, 3, 2, 1, -1], 8) == generatedMethodName([1, 2, 3, 2, 1, -1], 8));
console.assert(willItFly([7, 2, 5, 5, 5, 5], 1) == generatedMethodName([7, 2, 5, 5, 5, 5], 1));
console.assert(willItFly([1, 2, 2, 1, 3], 29) == generatedMethodName([1, 2, 2, 1, 3], 29));
console.assert(willItFly([1, 4, 2, 1, 1, 3, 2, 1, 0], 4) == generatedMethodName([1, 4, 2, 1, 1, 3, 2, 1, 0], 4));
console.assert(willItFly([1, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 1], 21) == generatedMethodName([1, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 1], 21));
console.assert(willItFly([6, 8, 10, 16, 19, 31, 20], 15) == generatedMethodName([6, 8, 10, 16, 19, 31, 20], 15));
console.assert(willItFly([1, 2, 3, 5, 6, 1], 19) == generatedMethodName([1, 2, 3, 5, 6, 1], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1], 17) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1], 17));
console.assert(willItFly([2, 4, 5, 8, 10, 12, 16, 18, 20], 15) == generatedMethodName([2, 4, 5, 8, 10, 12, 16, 18, 20], 15));
console.assert(willItFly([14, 2, 3, 4, 5, 5], 5) == generatedMethodName([14, 2, 3, 4, 5, 5], 5));
console.assert(willItFly([1, 2, 2, 3, 4, 5, 6, 2], 4) == generatedMethodName([1, 2, 2, 3, 4, 5, 6, 2], 4));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 0, 1], 4) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 0, 1], 4));
console.assert(willItFly([0, 1, 2, 5, 1, 31, 3, 2, 1, 31], 8) == generatedMethodName([0, 1, 2, 5, 1, 31, 3, 2, 1, 31], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 6, 1, 2, 2], 14) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 6, 1, 2, 2], 14));
console.assert(willItFly([1, 2, 3, 6, 2, 1, 1, 3, 2, 2, 3, 2, 2, 3, 2], 4) == generatedMethodName([1, 2, 3, 6, 2, 1, 1, 3, 2, 2, 3, 2, 2, 3, 2], 4));
console.assert(willItFly([1, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 1, 2], 14) == generatedMethodName([1, 2, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 1, 2], 14));
console.assert(willItFly([1, 2, 15, 3, 2, 1, 0, 1], 8) == generatedMethodName([1, 2, 15, 3, 2, 1, 0, 1], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 13, 1], 30) == generatedMethodName([1, 2, 3, 2, 1, 13, 1], 30));
console.assert(willItFly([2, 3, 1, 4, 5, 6, 2], -1) == generatedMethodName([2, 3, 1, 4, 5, 6, 2], -1));
console.assert(willItFly([1, 2, 4, 7, 0], 15) == generatedMethodName([1, 2, 4, 7, 0], 15));
console.assert(willItFly([1, 4, 3, 3, 3, 2, 1, 1], 9) == generatedMethodName([1, 4, 3, 3, 3, 2, 1, 1], 9));
console.assert(willItFly([2, 2, 18, 19, 0], 42) == generatedMethodName([2, 2, 18, 19, 0], 42));
console.assert(willItFly([1, 4, 2, 5, 2, 2, 1, 1], 15) == generatedMethodName([1, 4, 2, 5, 2, 2, 1, 1], 15));
console.assert(willItFly([1, 3, 18, 16, 7, 0, 16], 9) == generatedMethodName([1, 3, 18, 16, 7, 0, 16], 9));
console.assert(willItFly([1, 2, 2, 1, 0, 1], 22) == generatedMethodName([1, 2, 2, 1, 0, 1], 22));
console.assert(willItFly([1, 30, 3, 7, 9, 7, 5, 3, 5], 8) == generatedMethodName([1, 30, 3, 7, 9, 7, 5, 3, 5], 8));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 1, 2, 3, 2, 16], 1) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 1, 2, 3, 2, 16], 1));
console.assert(willItFly([1, 2, 5, 1, 3, 2, 1, 1], 3) == generatedMethodName([1, 2, 5, 1, 3, 2, 1, 1], 3));
console.assert(willItFly([1, 2, 2, 1, 0, 2], 7) == generatedMethodName([1, 2, 2, 1, 0, 2], 7));
console.assert(willItFly([1, 2, 2, 3, 1, 0], 18) == generatedMethodName([1, 2, 2, 3, 1, 0], 18));
console.assert(willItFly([2, 1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], -1) == generatedMethodName([2, 1, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], -1));
console.assert(willItFly([2, 4, 8, 10, 12, 14, 16, 18, 21, 16], 20) == generatedMethodName([2, 4, 8, 10, 12, 14, 16, 18, 21, 16], 20));
console.assert(willItFly([14, 2, 4, 5, 5, 3], 3) == generatedMethodName([14, 2, 4, 5, 5, 3], 3));
console.assert(willItFly([4, 2, 3, 2, 1, 1, 1], 42) == generatedMethodName([4, 2, 3, 2, 1, 1, 1], 42));
console.assert(willItFly([10, 2, 2, 1, 0, 2], 11) == generatedMethodName([10, 2, 2, 1, 0, 2], 11));
console.assert(willItFly([1, 4, 3, 3, 4, 29, 2, 1, 1], 9) == generatedMethodName([1, 4, 3, 3, 4, 29, 2, 1, 1], 9));
console.assert(willItFly([4, 2, 3, 1, 1, 1], 12) == generatedMethodName([4, 2, 3, 1, 1, 1], 12));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1], 7) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2], 7) == generatedMethodName([1, 2, 3, 2, 1, 2], 7));
console.assert(willItFly([2, 6, 4, 6, 8, 10, 12, 16, 18, 20], 20) == generatedMethodName([2, 6, 4, 6, 8, 10, 12, 16, 18, 20], 20));
console.assert(willItFly([1, 2, 1, 1, 3, 2, 5, 1, 0], 7) == generatedMethodName([1, 2, 1, 1, 3, 2, 5, 1, 0], 7));
console.assert(willItFly([1, 2, 5, 3, 4, 5, 6, -1], 6) == generatedMethodName([1, 2, 5, 3, 4, 5, 6, -1], 6));
console.assert(willItFly([14, 2, 3, 4, 5, 3], 31) == generatedMethodName([14, 2, 3, 4, 5, 3], 31));
console.assert(willItFly([1, 15, 2, 11, 2, 1, -1], 20) == generatedMethodName([1, 15, 2, 11, 2, 1, -1], 20));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 1, 16, 3], 31) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 3, 1, 16, 3], 31));
console.assert(willItFly([1, 4, 4, 4, 5, 6], 19) == generatedMethodName([1, 4, 4, 4, 5, 6], 19));
console.assert(willItFly([1, 7, 2, 3, 4, 5, 6], 22) == generatedMethodName([1, 7, 2, 3, 4, 5, 6], 22));
console.assert(willItFly([20, 2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12, 2], 4) == generatedMethodName([20, 2, 4, 6, 8, 10, 12, 13, 17, 17, 20, 12, 2], 4));
console.assert(willItFly([1, 2, 30, 2, 1, 0, 1, 0, 2, 2], 20) == generatedMethodName([1, 2, 30, 2, 1, 0, 1, 0, 2, 2], 20));
console.assert(willItFly([2, 2, 1, 1, 0], 19) == generatedMethodName([2, 2, 1, 1, 0], 19));
console.assert(willItFly([2, 5, 6, 8, 10, 30, 14, 17, 17, 20, 12, 10], 4) == generatedMethodName([2, 5, 6, 8, 10, 30, 14, 17, 17, 20, 12, 10], 4));
console.assert(willItFly([2, 2, 0, 2, 18], 12) == generatedMethodName([2, 2, 0, 2, 18], 12));
console.assert(willItFly([0, 1, 2, 5, 1, 31, 3, 2, 1, 31, 2], 8) == generatedMethodName([0, 1, 2, 5, 1, 31, 3, 2, 1, 31, 2], 8));
console.assert(willItFly([1, 3, 7, 2, 0, 1], 7) == generatedMethodName([1, 3, 7, 2, 0, 1], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 2], 17) == generatedMethodName([1, 2, 3, 2, 1, 2, 2], 17));
console.assert(willItFly([1, 2, 3, 1, 2, 1, 0], 19) == generatedMethodName([1, 2, 3, 1, 2, 1, 0], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 0, 1], 0) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 0, 1], 0));
console.assert(willItFly([2, 6, 18, 8, 10, 16, 18, 31, 20], 20) == generatedMethodName([2, 6, 18, 8, 10, 16, 18, 31, 20], 20));
console.assert(willItFly([1, 1, 2, 3, 2, 1, -1, 1], 9) == generatedMethodName([1, 1, 2, 3, 2, 1, -1, 1], 9));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 1, 4], -1) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 1, 4], -1));
console.assert(willItFly([7, 2, 4, 5, 5, 2], 16) == generatedMethodName([7, 2, 4, 5, 5, 2], 16));
console.assert(willItFly([4, 2, 3, 2, 0, 1, 2], 8) == generatedMethodName([4, 2, 3, 2, 0, 1, 2], 8));
console.assert(willItFly([19, 4, 8, 10, 12, 14, 16, 18, 21, 16], 20) == generatedMethodName([19, 4, 8, 10, 12, 14, 16, 18, 21, 16], 20));
console.assert(willItFly([6, 3, 3, 2, 1, 0, 1], 7) == generatedMethodName([6, 3, 3, 2, 1, 0, 1], 7));
console.assert(willItFly([30, 14, 15, 4, 4, 5], 10) == generatedMethodName([30, 14, 15, 4, 4, 5], 10));
console.assert(willItFly([1, 3, 5, 7, 9, 7, 5, 3, 1, 3, 5], 6) == generatedMethodName([1, 3, 5, 7, 9, 7, 5, 3, 1, 3, 5], 6));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 17, 20], 4) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 17, 20], 4));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 17, 18, 12], 22) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 17, 18, 12], 22));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1, 1, 2, 1], 5) == generatedMethodName([1, 2, 3, 2, 1, 0, 1, 1, 2, 1], 5));
console.assert(willItFly([1, 31, 1, 2, 3, 1, 0, 1, 1, 2], 1) == generatedMethodName([1, 31, 1, 2, 3, 1, 0, 1, 1, 2], 1));
console.assert(willItFly([1, 3, 2, 1, 2, 2], 17) == generatedMethodName([1, 3, 2, 1, 2, 2], 17));
console.assert(willItFly([14, 2, 4, 5, 3, 3, 3], 6) == generatedMethodName([14, 2, 4, 5, 3, 3, 3], 6));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 9, 1], 1) == generatedMethodName([1, 2, 3, 2, 1, 0, 9, 1], 1));
console.assert(willItFly([1, 6, 2, 3, 4, 5, 6, 2], 4) == generatedMethodName([1, 6, 2, 3, 4, 5, 6, 2], 4));
console.assert(willItFly([1, 3, 2, 1, 1, 2], 7) == generatedMethodName([1, 3, 2, 1, 1, 2], 7));
console.assert(willItFly([4, 1, 3, 2, 1, 0], 8) == generatedMethodName([4, 1, 3, 2, 1, 0], 8));
console.assert(willItFly([3, 3, 3, 15, 1, 0, 1], 7) == generatedMethodName([3, 3, 3, 15, 1, 0, 1], 7));
console.assert(willItFly([1, 2, 2, 3, 2, 1, 0], 9) == generatedMethodName([1, 2, 2, 3, 2, 1, 0], 9));
console.assert(willItFly([1, 4, 2, 5, 3, 2, 1], 7) == generatedMethodName([1, 4, 2, 5, 3, 2, 1], 7));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 10, 20, 12], 22) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 11, 17, 17, 10, 20, 12], 22));
console.assert(willItFly([7, 2, 5, 5, 5], 1) == generatedMethodName([7, 2, 5, 5, 5], 1));
console.assert(willItFly([1, 2, 17, 1, 2, 1, 16, 3, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 17, 1, 2, 1, 16, 3, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 1], 15) == generatedMethodName([1, 2, 3, 2, 1, 0, 1], 15));
console.assert(willItFly([2, 5, 2, 1, 0, 2, 2, 2, 2], 0) == generatedMethodName([2, 5, 2, 1, 0, 2, 2, 2, 2], 0));
console.assert(willItFly([0, 2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 3, 2], 1) == generatedMethodName([0, 2, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 3, 2], 1));
console.assert(willItFly([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 9, 1, 16, 1], 31) == generatedMethodName([1, 2, 3, 3, 1, 2, 3, 2, 1, 2, 9, 1, 16, 1], 31));
console.assert(willItFly([1, 3, 18, 16, 7, 12, 16, 16], 9) == generatedMethodName([1, 3, 18, 16, 7, 12, 16, 16], 9));
console.assert(willItFly([1, 31, 1, 2, 3, 1, 1, 1], 0) == generatedMethodName([1, 31, 1, 2, 3, 1, 1, 1], 0));
console.assert(willItFly([], 10) == generatedMethodName([], 10));
console.assert(willItFly([], 8) == generatedMethodName([], 8));
console.assert(willItFly([3], 0) == generatedMethodName([3], 0));
console.assert(willItFly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 100) == generatedMethodName([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 100));
console.assert(willItFly([10], 5) == generatedMethodName([10], 5));
console.assert(willItFly([], 1) == generatedMethodName([], 1));
console.assert(willItFly([2], 1) == generatedMethodName([2], 1));
console.assert(willItFly([2], 3) == generatedMethodName([2], 3));
console.assert(willItFly([2, 5, 2], 10) == generatedMethodName([2, 5, 2], 10));
console.assert(willItFly([1, 2, 3, 4], 8) == generatedMethodName([1, 2, 3, 4], 8));
console.assert(willItFly([1, 3, 5, 4, 7, 9, 7, 5, 3, 1, 5], 6) == generatedMethodName([1, 3, 5, 4, 7, 9, 7, 5, 3, 1, 5], 6));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 2], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 2], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([1, 2, 3, 2, 1, 0, 0, 0], 7) == generatedMethodName([1, 2, 3, 2, 1, 0, 0, 0], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 18) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 18));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2], 0) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2], 0));
console.assert(willItFly([1, 2, 3, 1], 5) == generatedMethodName([1, 2, 3, 1], 5));
console.assert(willItFly([1, 2, 3, 2, 1, 0], 8) == generatedMethodName([1, 2, 3, 2, 1, 0], 8));
console.assert(willItFly([1, 10, 2, 4, 3, 2, 1, 4], 7) == generatedMethodName([1, 10, 2, 4, 3, 2, 1, 4], 7));
console.assert(willItFly([1, 1, 2, 3], 1) == generatedMethodName([1, 1, 2, 3], 1));
console.assert(willItFly([4, 6, 8, 10, 12, 14, 16, 18, 20], 20) == generatedMethodName([4, 6, 8, 10, 12, 14, 16, 18, 20], 20));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 19) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 19));
console.assert(willItFly([1, 2, 14, 4], 5) == generatedMethodName([1, 2, 14, 4], 5));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 4, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 4, 3, 2, 2], 20));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 2, 2], 3) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 2, 2], 3));
console.assert(willItFly([1, 2, 3, 4], 9) == generatedMethodName([1, 2, 3, 4], 9));
console.assert(willItFly([1, 2, 3, 2, 1, 14, 3, 2, 1, 2, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 14, 3, 2, 1, 2, 3, 2, 2], 20));
console.assert(willItFly([1, 2, 4], 5) == generatedMethodName([1, 2, 4], 5));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1], 20));
console.assert(willItFly([1, 2, 3, 4, 4], 5) == generatedMethodName([1, 2, 3, 4, 4], 5));
console.assert(willItFly([30, 2, 3, 4, 4], 5) == generatedMethodName([30, 2, 3, 4, 4], 5));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1], 6) == generatedMethodName([1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1], 6));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1], 19) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 3, 2, 1], 19));
console.assert(willItFly([2, 3, 2, 1, 0], 8) == generatedMethodName([2, 3, 2, 1, 0], 8));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2, 2], 0) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 3, 2, 2, 2], 0));
console.assert(willItFly([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 14], 20) == generatedMethodName([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 14], 20));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1], 19) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1], 19));
console.assert(willItFly([30, 2, 3, 4, 4], 12) == generatedMethodName([30, 2, 3, 4, 4], 12));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 3, 1], 30) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 3, 1], 30));
console.assert(willItFly([4, 6, 8, 10, 12, 14, 16, 18, 20], 7) == generatedMethodName([4, 6, 8, 10, 12, 14, 16, 18, 20], 7));
console.assert(willItFly([6, 1, 3, 5, 4, 7, 9, 7, 5, 3, 1, 5], 6) == generatedMethodName([6, 1, 3, 5, 4, 7, 9, 7, 5, 3, 1, 5], 6));
console.assert(willItFly([30, 3, 3, 4, 4], 12) == generatedMethodName([30, 3, 3, 4, 4], 12));
console.assert(willItFly([1, 3], 5) == generatedMethodName([1, 3], 5));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 18, 3, 2, 1, 4, 3, 2, 2], 20) == generatedMethodName([1, 2, 3, 2, 1, 2, 18, 3, 2, 1, 4, 3, 2, 2], 20));
console.assert(willItFly([30, 2, 3, 2, 4, 4], 5) == generatedMethodName([30, 2, 3, 2, 4, 4], 5));
console.assert(willItFly([8, 1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 5], 30) == generatedMethodName([8, 1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 5], 30));
console.assert(willItFly([30, 3, 3, 4, 4], 11) == generatedMethodName([30, 3, 3, 4, 4], 11));
console.assert(willItFly([30, 2, 3, 2, 4, 4], 4) == generatedMethodName([30, 2, 3, 2, 4, 4], 4));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1], 12) == generatedMethodName([1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1], 12));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 5], 30) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 5], 30));
console.assert(willItFly([1, 3], 7) == generatedMethodName([1, 3], 7));
console.assert(willItFly([4, 6, 8, 10, 12, 14, 16, 18, 20], 5) == generatedMethodName([4, 6, 8, 10, 12, 14, 16, 18, 20], 5));
console.assert(willItFly([30, 12, 2, 3, 2, 4, 4], 0) == generatedMethodName([30, 12, 2, 3, 2, 4, 4], 0));
console.assert(willItFly([1, 2, 3, 4, 5, 6, 2], 6) == generatedMethodName([1, 2, 3, 4, 5, 6, 2], 6));
console.assert(willItFly([1, 2, 3, 4, 5, 6], 7) == generatedMethodName([1, 2, 3, 4, 5, 6], 7));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 0) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2], 0));
console.assert(willItFly([1, 2, 3, 2, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2], 20) == generatedMethodName([1, 2, 3, 2, 2, 1, 2, 3, 2, 1, 3, 2, 1, 2], 20));
console.assert(willItFly([1, 1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 1], 19) == generatedMethodName([1, 1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 1], 19));
console.assert(willItFly([4, 6, 8, 10, 12, 14, 18, 11], 5) == generatedMethodName([4, 6, 8, 10, 12, 14, 18, 11], 5));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1], 19) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 1], 19));
console.assert(willItFly([1, 3, 4, 5, 6, 2], 19) == generatedMethodName([1, 3, 4, 5, 6, 2], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 18, 3, 3, 2, 1, 2, 3, 2, 2], 21) == generatedMethodName([1, 2, 3, 2, 1, 18, 3, 3, 2, 1, 2, 3, 2, 2], 21));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 3], 19) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1, 3], 19));
console.assert(willItFly([1, 5, 7, 9, 7, 5, 3, 1], 30) == generatedMethodName([1, 5, 7, 9, 7, 5, 3, 1], 30));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 4, 2, 2], -1) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 3, 2, 1, 2, 4, 2, 2], -1));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 9) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 9));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1], 31) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 1], 31));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3], 6) == generatedMethodName([1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1, 3], 6));
console.assert(willItFly([1, 3, 4, 5, 6, 2], 20) == generatedMethodName([1, 3, 4, 5, 6, 2], 20));
console.assert(willItFly([30, 3, 3, 4, 4], 18) == generatedMethodName([30, 3, 3, 4, 4], 18));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 7) == generatedMethodName([1, 8, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 7));
console.assert(willItFly([1, 2, 2, 1, 2, 3, 2, 1, 2, 19, 2, 3], 3) == generatedMethodName([1, 2, 2, 1, 2, 3, 2, 1, 2, 19, 2, 3], 3));
console.assert(willItFly([1, 3], 4) == generatedMethodName([1, 3], 4));
console.assert(willItFly([1, 1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1], 6) == generatedMethodName([1, 1, 8, 2, 3, 2, 1, 3, 2, 1, 2, 3, 2, 1], 6));
console.assert(willItFly([4, 6, 8, 10, 12, 14, 16, 18, 20, 12], 19) == generatedMethodName([4, 6, 8, 10, 12, 14, 16, 18, 20, 12], 19));
console.assert(willItFly([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 2], 0) == generatedMethodName([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 2, 2], 0));
console.assert(willItFly([1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 19) == generatedMethodName([1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1], 19));
console.assert(willItFly([1, 2, 3, 2, 30], 14) == generatedMethodName([1, 2, 3, 2, 30], 14));
console.assert(willItFly([1, 3, 4, 5, 6, 2], 21) == generatedMethodName([1, 3, 4, 5, 6, 2], 21));
console.assert(willItFly([1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 5], 9) == generatedMethodName([1, 3, 5, 7, 4, 9, 7, 5, 3, 1, 5], 9));
console.assert(willItFly([30, 2, 3, 2, 4, 4], 12) == generatedMethodName([30, 2, 3, 2, 4, 4], 12));
console.assert(willItFly([1, 14], 7) == generatedMethodName([1, 14], 7));
console.assert(willItFly([1, 2, 3, 2, 7, 2, 3, 2, 1, 2, 2, 2, 2], 12) == generatedMethodName([1, 2, 3, 2, 7, 2, 3, 2, 1, 2, 2, 2, 2], 12));
console.assert(willItFly([1, 8, 2, 3, 2, 1, 3, 2, 2, 1, 2, 3, 2, 1], 12) == generatedMethodName([1, 8, 2, 3, 2, 1, 3, 2, 2, 1, 2, 3, 2, 1], 12));

