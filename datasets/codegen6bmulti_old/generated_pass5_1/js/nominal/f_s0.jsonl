{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold && Math.abs(numbers[i] - max) < threshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Given a list of numbers, find the largest number in the list.\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4, 5, 6])\n  6\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  */\nconst largestNumber = (numbers) => {\n  const len = numbers.length\n  if (len < 1) {\n    return undefined\n  }\n  const max = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given a list of numbers, find the smallest number in the list.\n  >>> smallestNumber([1, 2, 3, 4, 5])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  */\nconst smallestNumber = (numbers) => {\n  const len = numbers.length\n  if (len < 1) {\n    return undefined\n  }\n  const min = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n  return min\n}\n\n/*\n  Given a list of numbers, find the largest number in the list.\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4, 5, 6])\n  6\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  */\nconst largestNumberInList = (numbers) => {\n  const len = numbers.length\n  if (len < 1) {\n    return undefined\n  }\n  const max = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given a list of numbers, find the smallest number in the list.\n  >>> smallestNumber([1, 2, 3, 4, 5])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  */\nconst smallestNumberInList = (numbers) => {\n  const len = numbers.length\n  if (len < 1) {\n    return undefined\n  }\n  const min = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n  return min\n}\n\n/*\n  Given a list of numbers, find the largest number in the list.\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4, 5, 6])\n  6\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  */\nconst largestNumberInArray = (numbers) => {\n  const len = numbers.length\n  if (len < 1) {\n    return undefined\n  }\n  const max = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given a list of numbers, find the smallest number in the list.\n  >>> smallestNumber([1, 2, 3, 4, 5])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> smallestNumber([1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  */\nconst smallestNumberInArray = (numbers) => {\n  const len = numbers.length\n  if (len < 1) {\n    return undefined\n  }\n  const min = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n  return min\n}\n\n/*\n  Given a list of numbers, find the largest number in the list.\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4, 5, 6])\n  6\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> largestNumber([1,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (paren_string[i] === ')') {\n      current_group += paren_string[i];\n      if (stack.length > 0) {\n        current_group += stack.pop();\n      }\n    } else {\n      current_group += paren_string[i];\n    }\n  }\n  return stack.pop();\n};\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix.split('').reverse().join('');\n  const longestPalindrome = postfix.split('').reverse().join('');\n  const shortestPalindrome = longestPalindrome.split('').reverse().join('');\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cataa')\n  'cataa'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix.split('').reverse().join('');\n  const longestPalindrome = postfix.split('').reverse().join('');\n  const shortestPalindrome = longestPalindrome.split('').reverse().join('');\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cataa')\n  'cataa'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix.split('').reverse().join('');\n  const longestPalindrome = postfix.split('').reverse().join('');\n  const shortestPalindrome = longestPalindrome.split('').reverse().join('');\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cataa')\n  'cataa'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix.split('').reverse().join('');\n  const longestPalindrome = postfix.split('').reverse().join('');\n  const shortestPalindrome = longestPalindrome.split('').reverse().join('');\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cataa')\n  'cataa'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix.split('').reverse().join('');\n  const longestPalindrome = postfix.split('').reverse().join('');\n  const shortestPalindrome = longestPalindrome.split('').reverse().join('');\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cataa')\n  'cataa'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix.split('').reverse().join('');\n  const longestPalindrome = postfix.split('').reverse().join('');\n  const shortestPalindrome = longestPalindrome.split('').reverse().join('');\n  return shortestPalindrome;\n}\n\n/* Find the longest palindrome that contains a supplied", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(pile[i - 1] + 1)\n    } else {\n      pile.push(pile[i - 1] + 2)\n    }\n  }\n  return pile\n}\n\nmodule.exports = makeAPile\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString9 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString10 = (s) => {\n  const words = s.split(/\\s*[,\\s]+\\s*/);\n  return words;\n};\n\n/*\n  You will be given", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n    mid = (max + min) / 2;\n  }\n  return max;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let max = x;\n  let min = y;\n  let mid = (max + min) / 2;\n  while (max - min > 1) {\n    if (mid % 2 === 0) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg2 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg3 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg4 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg5 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg6 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg7 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg8 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg9 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg10 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg11 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg12 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg13 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg14 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg15 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg16 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg17 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg18 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg19 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg20 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg21 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg22 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg23 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg24 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg25 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg26 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg27 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg28 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg29 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg30 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg31 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg32 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg33 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg34 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg35 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg36 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst roundedAvg37 = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconst rounded", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i);\n    if (num % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result.sort();\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength2 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength3 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength4 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength5 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength6 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength7 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength8 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength9 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength10 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength11 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength12 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength13 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num = x % 10\n    return names[num]\n  })\n  return names\n}\n\nconst byLength14 = (arr) => {\n  const len = arr.length\n  if (len === 0) return []\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const num =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0\n  const odd = 0\n  const evenIndex = 0\n  const oddIndex = 0\n  const evenPalindrome = []\n  const oddPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    if (isPalindrome(i)) {\n      if (i % 2 === 0) {\n        even += 1\n        evenPalindrome.push(i)\n      } else {\n        odd += 1\n        oddPalindrome.push(i)\n      }\n    }\n  }\n  return [even, odd]\n}\n\nconst isPalindrome = (n) => {\n  let reversed = ''\n  while (n > 0) {\n    reversed = reversed + n % 10\n    n = n / 10\n  }\n  return reversed === reversed.split('').reverse().join('')\n}\n\nconst test = (n) => {\n  const [even, odd] = evenOddPalindrome(n)\n  console.log(`${n} has ${even} even and ${odd} odd integer palindromes.`)\n}\n\ntest(3)\ntest(12)\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11, -2, 2, 11, -1, -11,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall10 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor2 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor3 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor4 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor5 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor6 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor7 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string where all the occurrences of 'a' are replaced\n  by 'b' and vice versa.\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  >>> stringXor('abcc', 'cba')\n  'bbcc'\n  */\nconst stringXor8 = (a, b) => {\n  const len = a.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i]);\n    } else {\n      result.push(a[i] ^ b[i]);\n    }\n  }\n  return result.join('');\n};\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  if (len!== len2) return \"NO\";\n  const i = 0;\n  const j = 0;\n  while (i < len && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      if (lst1[i] % 2 === 0) {\n        lst1[i] = lst2[j];\n        lst2[j] = lst1[i];\n        i++;\n        j++;\n      } else {\n        return \"NO\";\n      }\n    } else {\n      if (lst1[i] % 2 === 0) {\n        return \"NO\";\n      } else {\n        i++;\n      }\n    }\n  }\n  return \"YES\";\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); // \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); // \"NO\"\nexchange([1, 2, 3, 4], [1, 2, 3, 5]); // \"NO\"\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5]); // \"NO\"\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]] += 1\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]] += 1\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]] += 1\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]] += 1\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]] += 1\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram = (test) => {\n  const letters = test.split('')\n  const histogram = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1\n    } else {\n      histogram[letters[i]] += 1\n    }\n  }\n  return histogram\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), true]\n}\n\nconst reverseDelete2 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), false]\n}\n\nconst reverseDelete3 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), true]\n}\n\nconst reverseDelete4 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), false]\n}\n\nconst reverseDelete5 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), true]\n}\n\nconst reverseDelete6 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), false]\n}\n\nconst reverseDelete7 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), true]\n}\n\nconst reverseDelete8 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), false]\n}\n\nconst reverseDelete9 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), true]\n}\n\nconst reverseDelete10 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), false]\n}\n\nconst reverseDelete11 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), true]\n}\n\nconst reverseDelete12 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = len - 1\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      i++\n      j--\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return [result.reverse(), false]\n}\n\nconst reverseDelete13 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (s) => {\n    const odd = (n) => n % 2 === 1;\n    const even = (n) => n % 2 === 0;\n    const oddDigits = (s) => s.split('').filter(odd);\n    const evenDigits = (s) => s.split('').filter(even);\n    const oddCount = (s) => oddDigits(s).length;\n    const evenCount = (s) => evenDigits(s).length;\n    return oddCount(s) + 'n the str' + s +'of the'+ s.length + 'nput.';\n  };\n  return lst.map(count);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum2 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum3 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum4 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum5 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum6 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum7 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum8 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum9 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum10 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum11 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum12 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum13 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum14 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum15 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum16 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum17 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum18 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num\n    if (sum < 0) {\n      return sum\n    }\n    return sum < acc? sum : acc\n  }, 0)\n  return minSum\n}\n\nconst minSubArraySum19 = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    const sum = acc + num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        count += buckets[i][j] = 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`);\n  console.log(`capacity: ${capacity}`);\n  console.log(`count: ${maxFill(grid, capacity)}`);\n};\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1);\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2);\ntest([[0,0,0], [0,0,0]], 5);\ntest([[0,0,0], [0,0,0]], 0);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (s[i] ==='') {\n      count = 0;\n    } else {\n      count++;\n      if (count === n) {\n        words.push(s.slice(i, i + n));\n      }\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (s[i] ==='') {\n      count = 0;\n    } else {\n      count++;\n      if (count === n) {\n        words.push(s.slice(i, i + n));\n      }\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (s[i] ==='') {\n      count = 0;\n    } else {\n      count++;\n      if (count === n) {\n        words.push(s.slice(i, i + n));\n      }\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (s[i] ==='') {\n      count = 0;\n    } else {\n      count++;\n      if (count === n) {\n        words.push(s.slice(i, i + n));\n      }\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (s[i] ==='') {\n      count = 0;\n    } else {\n      count++;\n      if (count === n) {\n        words.push(s.slice(i, i + n));\n      }\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find(v => {\n    const index = word.lastIndexOf(v);\n    const nextVowel = word.substr(index + 1);\n    const prevVowel = word.substr(0, index);\n    const distance = Math.abs(vowels.indexOf(nextVowel) - consonants.indexOf(prevVowel));\n    return distance === 1;\n  });\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens11 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null\n  }\n\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const maxK = k\n  let i = 1\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      k = 1\n    } else if (arr[i] === max) {\n      k++\n    }\n    if (k === maxK) {\n      break\n    }\n    i++\n  }\n  return [max, maxIndex, maxK]\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 = (arr, k) => {\n  const sum =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [];\n  let collatz = [1];\n  while (collatz.length < n) {\n    let next = collatz[collatz.length - 1];\n    if (next % 2 === 1) {\n      odd.push(next);\n    }\n    collatz.push(next * 3 + 1);\n  }\n  return odd;\n};\n\nconsole.log(getOddCollatz(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 2 && day > 29) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every((x, i) => x === sorted[i]);\n};\n\nexport { isSorted };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length < 2) {\n    return \"NO\";\n  }\n  const prime = prime(length);\n  if (prime === false) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst prime = (length) => {\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(length); i++) {\n    if (isPrime(i)) {\n      return i;\n    }\n  }\n  return false;\n};\n\nconst test = (interval1, interval2) => {\n  const result = intersection(interval1, interval2);\n  console.log(`${interval1} ${interval2} = ${result}`);\n};\n\ntest((-1, 1), (-3, -1));\ntest((-1, 1), (0, 4));\ntest((-3, -1), (-5, 5));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr || arr.length === 0) return null\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  const prod = arr.reduce((acc, curr) => acc * curr, 1)\n  const sign = arr.reduce((acc, curr) => {\n    if (curr > 0) {\n      acc.push(1)\n    } else if (curr < 0) {\n      acc.push(-1)\n    } else {\n      acc.push(0)\n    }\n    return acc\n  }, [])\n  return sum * prod * sign\n}\n\nmodule.exports = prodSigns\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = grid[0];\n  dp[1] = grid[1];\n  dp[2] = grid[2];\n  for (let i = 3; i < n; i++) {\n    dp[i] = dp[i - 1].concat(dp[i - 2]);\n  }\n  const dp_len = dp.length;\n  const result = new Array(k);\n  for (let i = 0; i < k; i++) {\n    result[i] = dp[dp_len - 1][i];\n  }\n  return result;\n};\n\nexport { minPath };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greatestCommonDivisor(b, a);\n  return greatestCommonDivisor(a % b, b);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a power of two that is the next largest power of two that is less than or equal to x\n  >>> nextPowerOfTwo(3)\n  4\n  >>> nextPowerOfTwo(4)\n  4\n  >>> nextPowerOfTwo(5)\n  8\n  >>> nextPowerOfTwo(6)\n  8\n  >>> nextPowerOfTwo(7)\n  8\n  >>> nextPowerOfTwo(8)\n  8\n  >>> nextPowerOfTwo(9)\n  16\n  >>> nextPowerOfTwo(10)\n  16\n  >>> nextPowerOfTwo(11)\n  16\n  >>> nextPowerOfTwo(12)\n  16\n  >>> nextPowerOfTwo(13)\n  16\n  >>> nextPowerOfTwo(14)\n  16\n  >>> nextPowerOfTwo(15)\n  16\n  >>> nextPowerOfTwo(16)\n  16\n  >>> nextPowerOfTwo(17)\n  32\n  >>> nextPowerOfTwo(18)\n  32\n  >>> nextPowerOfTwo(19)\n  32\n  >>> nextPowerOfTwo(20)\n  32\n  >>> nextPowerOfTwo(21)\n  32\n  >>> nextPowerOfTwo(22)\n  32\n  >>> nextPowerOfTwo(23)\n  32\n  >>> nextPowerOfTwo(24)\n  32\n  >>> nextPowerOfTwo(25)\n  32\n  >>> nextPowerOfTwo(26)\n  32\n  >>> nextPowerOfTwo(27)\n  32\n  >>> nextPowerOfTwo(28)\n  32\n  >>> nextPowerOfTwo(29)\n  32\n  >>> nextPowerOfTwo(30)\n  32\n  >>> nextPowerOfTwo(31)\n  32\n  >>> nextPowerOfTwo(32)\n  32\n  >>> nextPowerOfTwo(33)\n  64\n  >>> nextPowerOfTwo(34)\n  64\n  >>> nextPowerOfTwo(35)\n  64\n  >>> nextPowerOfTwo(36)\n  64\n  >>> nextPowerOfTwo(37)\n  64\n  >>> nextPowerOfTwo(38)\n  64\n  >>> nextPowerOfTwo(39)\n  64\n  >>> nextPowerOfTwo(40)\n  64\n  >>> nextPowerOfTwo(41)\n  64\n  >>> nextPowerOfTwo(42)\n  64\n  >>> nextPowerOfTwo(43)\n  64\n  >>> nextPowerOfTwo(44)\n  64\n  >>> nextPowerOfTwo(45)\n  64\n  >>> nextPowerOfTwo(46)\n  64\n  >>> nextPowerOfTwo(47)\n  64\n  >>> nextPowerOfTwo(48)\n  64\n  >>> nextPowerOfTwo(49)\n  64\n  >>> nextPowerOfTwo(50)\n  64\n  >>> nextPowerOfTwo(51)\n  64\n  >>> nextPowerOfTwo(52)\n  64\n  >>> nextPowerOfTwo(53)\n  64\n  >>> nextPowerOfTwo(54)\n  64\n  >>> nextPowerOfTwo(55)\n  64\n  >>> nextPowerOfTwo(56)\n  64\n  >>> nextPowerOfTwo(57)\n  64\n  >>> nextPowerOfTwo(58)\n  64\n  >>> nextPowerOfTwo(59)\n  64\n  >>> nextPowerOfTwo(60)\n  64\n  >>> nextPowerOfTwo(61)\n  64\n  >>> nextPowerOfTwo(62)\n  64\n  >>> nextPowerOfTwo(63)\n  64\n  >>> nextPowerOfTwo(64)\n  64\n  >>> nextPowerOfTwo(65)\n  128\n  >>> nextPowerOfTwo(66)\n  128\n  >>> nextPowerOfTwo(67)\n  128\n  >>> nextPowerOfTwo(68)\n  128\n  >>> nextPowerOfTwo(69)\n  128\n  >>> nextPowerOfTwo(70)\n  128\n  >>> nextPowerOfTwo(71)\n  128\n  >>> nextPowerOfTwo(72)\n  128\n  >>> nextPowerOfTwo(73)\n  128\n  >>> nextPowerOfTwo(74)\n  128\n  >>> nextPowerOfTwo(75)\n  128\n  >>> nextPowerOfTwo(76)\n  128\n  >>> nextPowerOfTwo(77)\n  128\n  >>> nextPowerOfTwo(78)\n  128\n  >>> nextPowerOfTwo(79)\n  128\n  >>> nextPowerOfTwo(80)\n  128\n  >>> nextPowerOfTwo(81)\n  128\n  >>> nextPowerOfTwo(82)\n  128\n  >>> nextPowerOfTwo(83)\n  128\n  >>> nextPowerOfTwo(84)\n  128\n  >>> nextPowerOfTwo(85)\n  128\n  >>> nextPowerOfTwo(86)\n  128\n  >>> nextPowerOfTwo(87)\n  128\n  >>> nextPowerOfTwo(88)\n  128\n  >>> nextPowerOfTwo(89)\n  128\n  >>> nextPowerOfTwo(90)\n  128\n  >>> nextPowerOfTwo(91)\n  128\n  >>> nextPowerOfTwo(92)\n  128\n  >>> nextPowerOfTwo(93)\n  128\n  >>> nextPowerOfTwo(94)\n  128\n  >>> nextPowerOfTwo(95)\n  128\n  >>> nextPowerOfTwo(96)\n  128\n  >>> nextPowerOfTwo(97)\n  128\n  >>> nextPowerOfTwo(98)\n  128\n  >>> nextPowerOfTwo(99)\n  128\n  >>> nextPowerOfTwo(100)\n  128\n  >>> nextPowerOfTwo(101)\n  128\n  >>> nextPowerOfTwo(102)\n  128\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1];\n  let prev = 1;\n  for (let i = 1; i <= n; i++) {\n    result.push(prev + prev / 2);\n    prev = prev + prev;\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow2 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow3 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow4 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow5 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeSlow6 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isPrimeFast7 = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n === 3) return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  let i = 0\n  while (i < string.length) {\n    if (string[i] === '[') {\n      stack.push(i)\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      const index = stack.pop()\n      if (string[index - 1] === '[') {\n        return true\n      }\n    }\n    i++\n  }\n  return stack.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2);\n  const isALetter = lastTwoChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last three characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3);\n  const isALetter = lastThreeChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last four characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4);\n  const isALetter = lastFourChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last five characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5);\n  const isALetter = lastFiveChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last six characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6);\n  const isALetter = lastSixChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last seven characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastSevenCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSevenCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSevenCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSevenCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSevenCharsAreALetter = (txt) => {\n  const lastSevenChars = txt.slice(-7);\n  const isALetter = lastSevenChars.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last eight characters\n  of a given string are all alphabetical characters and are", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange8 = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers2 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers3 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers4 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers5 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers6 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers7 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers8 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largestSmallestIntegers9 = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (largest === null || largest < lst[i]) {\n      largest = lst[i]\n    }\n    if (smallest === null || smallest > lst[i]) {\n      smallest = lst[i]\n    }\n  }\n  return largest === null? (smallest === null? null : [smallest, largest]) : largestSmallestIntegers([smallest, largest])\n}\n\nconst largest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compareOne(1, 2.5));\nconsole.log(compareOne(1, \"2,3\"));\nconsole.log(compareOne(\"5,1\", \"6\"));\nconsole.log(compareOne(\"1\", 1));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 2; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(stringLength - i - 1, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces2 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces3 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces4 = (text) => {\n  return text.replace(/-+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces5 = (text) => {\n  return text.replace(/\\s+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces6 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces7 = (text) => {\n  return text.replace(/-+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces8 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces9 = (text) => {\n  return text.replace(/-+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixSpaces(\"Example\") == \"Example\"\n  unfixSpaces(\"Example_1\") == \"Example 1\"\n  unfixSpaces(\"_Example_2\") == \"Example 2\"\n  unfixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unfixSpaces10 = (text) => {\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_regex = /^[a-zA-Z][a-zA-Z0-9.]*$/;\n  let file_name_length = file_name.length;\n  let file_name_dot_index = file_name.indexOf(\".\");\n  let file_name_substring_before_dot = file_name.substring(0, file_name_dot_index);\n  let file_name_substring_after_dot = file_name.substring(file_name_dot_index + 1);\n  let file_name_substring_length = file_name_substring_after_dot.length;\n  let file_name_substring_length_is_valid = file_name_substring_length === 3 || file_name_substring_length === 4;\n  let file_name_substring_starts_with_valid_letter = file_name_substring_before_dot.match(file_name_regex);\n  let file_name_substring_ends_with_valid_suffix = file_name_substring_after_dot.match(/[txt|exe|dll]$/);\n  let file_name_is_valid = file_name_substring_length_is_valid && file_name_substring_starts_with_valid_letter && file_name_substring_ends_with_valid_suffix;\n  return file_name_is_valid;\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  let file_name_regex = /^[a-zA-Z][a-zA-Z0-9.]*$/;\n  let file_name_dot_index = file_name.indexOf(\".\");\n  let file_name_substring_before_dot = file_name.substring(0, file_name_dot_index);\n  let file_name_substring_after_dot = file_name.substring(file_name_dot_index + 1);\n  let file_name_substring_length = file_name_substring_after_dot.length;\n  let file_name_substring_length_is_valid = file_name_substring_length === 3 || file_name_substring_length === 4;\n  let file_name_substring_starts_with_valid_letter = file_name_substring_before_dot.match(file_name_regex);\n  let file_name_substring_ends_with_valid_suffix = file_name_substring_after_dot.match(/[txt|exe|dll]$/);\n  let file_name_is_valid = file_name_substring_length_is_valid && file_name_substring_starts_with_valid_letter && file_name_substring_ends_with_valid_suffix;\n  return file_name_is_valid;\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  let file_name_regex = /^[a-zA-Z][a-zA-Z0-9.]*$/;\n  let file_name_dot_index = file_name.indexOf(\".\");\n  let file_name_substring_before_dot = file_name.substring(0, file_name_dot_index);\n  let file_name_substring_after_dot = file_name.substring(file_name_dot_index + 1);\n  let file_name_substring_length = file_name_substring_after_dot.length;\n  let file_name_substring_length_is_valid = file_name_substring_length === 3 || file_name_substring_length === 4;\n  let file_name_substring_starts_with_valid_letter = file_name", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = []\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j]\n      if (isPrime(char)) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(' '))\n  }\n  return newWords.join(' ')\n}\n\nfunction isPrime(num) {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0], 10)\n  const x_den = parseInt(x.split('/')[1], 10)\n  const n_num = parseInt(n.split('/')[0], 10)\n  const n_den = parseInt(n.split('/')[1], 10)\n\n  if (x_num === n_num && x_den === n_den) {\n    return true\n  }\n\n  return false\n}\n\nconsole.log(simplify('1/5', '5/1'))\nconsole.log(simplify('1/6', '2/1'))\nconsole.log(simplify('7/10', '10/2'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nexport default orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === 3 || nums[i] % 2 === 5 || nums[i] % 2 === 7 || nums[i] % 2 === 9)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum : 0;\n  }, 0);\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((a, b) => {\n    const sum = a + b;\n    return sum % 3 === 0? sum :", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  const planet1Orbit = planets[planet1Index + 1]\n  const planet2Orbit = planets[planet2Index + 1]\n  const planet1OrbitIndex = planets.indexOf(planet1Orbit)\n  const planet2OrbitIndex = planets.indexOf(planet2Orbit)\n  const planet1OrbitLength = planets[planet1OrbitIndex + 1] - planet1Orbit\n  const planet2OrbitLength = planets[planet2OrbitIndex + 1] - planet2Orbit\n  const planet1OrbitLengthDiff = planet1OrbitLength - planet2OrbitLength\n  const planet1OrbitLengthDiffAbs = Math.abs(planet1OrbitLengthDiff)\n  const planet2OrbitLengthDiffAbs = Math.abs(planet2OrbitLengthDiff)\n  const planet1OrbitLengthDiffAbsMax = Math.max(planet1OrbitLengthDiffAbs, planet2OrbitLengthDiffAbs)\n  const planet1OrbitLengthDiffAbsMin = Math.min(planet1OrbitLengthDiffAbs, planet2OrbitLengthDiffAbs)\n  const planet1OrbitLengthDiffAbsMaxMin = Math.max(planet1OrbitLengthDiffAbsMax, planet2OrbitLengthDiffAbsMin)\n  const planet1OrbitLengthDiffAbsMinMax = Math.min(planet1OrbitLengthDiffAbsMin, planet2OrbitLengthDiffAbsMax)\n  const planet1OrbitLengthDiffAbsMaxMinMax = Math.max(planet1OrbitLengthDiffAbsMaxMin, planet2OrbitLengthDiffAbsMaxMin)\n  const planet1OrbitLengthDiffAbsMinMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMax, planet2OrbitLengthDiffAbsMaxMinMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMax, planet2OrbitLengthDiffAbsMaxMinMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax = Math.max(planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMaxMaxMax = Math.min(planet1OrbitLengthDiffAbsMinMaxMaxMaxMaxMaxMaxMax, planet2OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMaxMax)\n  const planet1OrbitLengthDiffAbsMaxMinMaxMaxMaxMaxMaxMaxMax = Math.max(planet1Or", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  const sum = sorted.reduce((acc, cur) => acc + cur.length, 0)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_9 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_10 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_11 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_12 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_13 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_14 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_15 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_16 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_17 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_18 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_19 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_20 = (lst) => {\n  const len = lst.length\n  const sorted = lst.sort((a, b) => a.length - b.length)\n  return sorted.map(cur => cur.length)\n}\n\nconst list_sort_21 = (lst) => {\n  const len = lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-')\n  '0'\n  >>> stringSequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*')\n  '0'\n  >>> stringSequence(5, '-', '*')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${repeat}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+')\n  '0'\n  >>> stringSequence(5, '-', '*', '+')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', repeatDelimiter = '+') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${repeat}${repeatDelimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '.')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '.')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', repeatDelimiter = '+', repeatDelimiterDelimiter = '.') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${repeat}${repeatDelimiter}${repeatDelimiterDelimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '.', ',')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '.', ',')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', repeatDelimiter = '+', repeatDelimiterDelimiter = '.', repeatDelimiterDelimiterDelimiter = ',') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${repeat}${repeatDelimiter}${repeatDelimiterDelimiter}${repeatDelimiterDelimiterDelimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '.', ',', ';')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '.', ',', ';')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', repeatDelimiter = '+', repeatDelimiterDelimiter = '.', repeatDelimiterDelimiterDelimiter = ',', repeatDelimiterDelimiterDelimiterDelimiter = ';') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${repeat}${repeatDelimiter}${repeatDelimiterDelimiter}${repeatDelimiterDelimiterDelimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '.', ',', ';', ':')\n  '0'\n  >>> stringSequence(5, '-', '*', '+', '.', ',', ';', ':')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, delimiter ='', repeat = '*', repeatDelimiter = '+', repeatDelimiterDelimiter = '.', repeatDelimiterDelimiterDelimiter = ',', repeatDelimiterDelimiterDelimiterDelimiter = ';', repeatDelimiterDelimiterDelimiterDelimiterDelimiter = ':') => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${delimiter}${repeat}${repeatDelimiter}${repeatDelimiterDelimiter}${repeatDelimiterDelimiterDelimiter}${repeatDelimiterDelimiterDelimiterDelimiter}`;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, '-', '*', '+', '.', ',', ';', ':', '@')\n  '0'\n  >>> stringSequence(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num > 0) {\n      sum += num * num\n    } else if (num < 0) {\n      sum += num\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.split('.').map(letter => letter.toUpperCase()).join('');\n    strength[cap] = strength[cap] || 0;\n    strength[cap] += strength[ext] = strength[ext] || 0;\n  });\n  const maxStrength = Object.keys(strength).reduce((max, key) => {\n    return strength[key] > strength[max]? key : max;\n  }, '');\n  return `${class_name}.${maxStrength}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aRotation = a.split('');\n  const bRotation = b.split('');\n  const aRotationLen = aRotation.length;\n  const bRotationLen = bRotation.length;\n  const aRotationLenMinusOne = aRotation.slice(1);\n  const bRotationLenMinusOne = bRotation.slice(1);\n  const aRotationLenMinusOneLen = aRotationLenMinusOne.length;\n  const bRotationLenMinusOneLen = bRotationLenMinusOne.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < aLen && j < bLen) {\n    if (aRotation[i] === bRotation[j]) {\n      i++;\n      j++;\n    } else if (aRotation[i] === bRotation[j + 1]) {\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 1] === bRotation[j]) {\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 1] === bRotation[j + 1]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n    } else if (aRotation[i + 1] === bRotation[j + 2]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 2] === bRotation[j]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 2] === bRotation[j + 1]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 2] === bRotation[j + 2]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 2] === bRotation[j + 3]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 3] === bRotation[j]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 3] === bRotation[j + 1]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 3] === bRotation[j + 2]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 3] === bRotation[j + 3]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 3] === bRotation[j + 4]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 4] === bRotation[j]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 4] === bRotation[j + 1]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 4] === bRotation[j + 2]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 4] === bRotation[j + 3]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n    } else if (aRotation[i + 4] === bRotation[j + 4]) {\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j++;\n      k++;\n      i++;\n      j", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'];\n  let result = '';\n  let number = number;\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i]) {\n      number -= roman[i];\n      result += roman[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'];\n  let result = '';\n  let number = number;\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i]) {\n      number -= roman[i];\n      result += roman[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'];\n  let result = '';\n  let number = number;\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i]) {\n      number -= roman[i];\n      result += roman[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'];\n  let result = '';\n  let number = number;\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i]) {\n      number -= roman[i];\n      result += roman[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'];\n  let result = '';\n  let number = number;\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i]) {\n      number -= roman[i];\n      result += roman[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix'];\n  let result = '';\n  let number = number;\n  for (let i = 0; i < roman.length; i++) {\n    while (number >= roman[i]) {\n      number -= roman[i];\n      result += roman[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength10 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return a + b + c - (a + b + c);\n  }\n  return 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing length.\n  If there is no missing length, return 0.\n  Example:\n  missingLength(3, 4, 5) == 2\n  missingLength(1, 2, 3) == 0\n  */\nconst missingLength11 = (a, b, c) => {\n  if (a + b > c && a + c > b && b +", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (!map.has(word)) {\n      map.set(word, 1);\n    } else {\n      map.set(word, map.get(word) + 1);\n    }\n  }\n  let max = 0;\n  let maxWord = \"\";\n  for (let [key, value] of map) {\n    if (value > max) {\n      max = value;\n      maxWord = key;\n    }\n  }\n  return maxWord;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test28 = [\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are lowercase\n  >>> countLowerCaseLetters('xyzXYZ')\n  3\n  >>> countLowerCaseLetters('Jerry')\n  4\n  */\nconst countLowerCaseLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are uppercase\n  >>> countUpperCaseLetters('xyzXYZ')\n  3\n  >>> countUpperCaseLetters('Jerry')\n  4\n  */\nconst countUpperCaseLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are digits\n  >>> countDigits('xyzXYZ')\n  3\n  >>> countDigits('Jerry')\n  4\n  */\nconst countDigits = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toString());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphabetic\n  >>> countAlphabeticLetters('xyzXYZ')\n  3\n  >>> countAlphabeticLetters('Jerry')\n  4\n  */\nconst countAlphabeticLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are whitespace\n  >>> countWhitespaceLetters('xyzXYZ')\n  3\n  >>> countWhitespaceLetters('Jerry')\n  4\n  */\nconst countWhitespaceLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are punctuation\n  >>> countPunctuationLetters('xyzXYZ')\n  3\n  >>> countPunctuationLetters('Jerry')\n  4\n  */\nconst countPunctuationLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphanumeric\n  >>> countAlphanumericLetters('xyzXYZ')\n  3\n  >>> countAlphanumericLetters('Jerry')\n  4\n  */\nconst countAlphanumericLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphanumeric\n  >>> countAlphanumericLetters('xyzXYZ')\n  3\n  >>> countAlphanumericLetters('Jerry')\n  4\n  */\nconst countAlphanumericLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphanumeric\n  >>> countAlphanumericLetters('xyzXYZ')\n  3\n  >>> countAlphanumericLetters('Jerry')\n  4\n  */\nconst countAlphanumericLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphanumeric\n  >>> countAlphanumericLetters('xyzXYZ')\n  3\n  >>> countAlphanumericLetters('Jerry')\n  4\n  */\nconst countAlphanumericLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphanumeric\n  >>> countAlphanumericLetters('xyzXYZ')\n  3\n  >>> countAlphanumericLetters('Jerry')\n  4\n  */\nconst countAlphanumericLetters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many characters are alphanumeric\n  >>> countAlphanumericLetters('xyzXYZ')\n  3\n  >>> countAlphanumericLetters('Jerry')\n  4\n  */\nconst countAlphanumericLetters = (string) => {\n  const charSet = new Set();\n  for (let i =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1] //\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1] //\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1] //\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1] //\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[j - 1])\n    }\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = 0\n    if (operatorValue === '+') {\n      resultValue = operandValue + result[j - 1]\n    } else if (operatorValue === '-') {\n      resultValue = operandValue - result[j - 1]\n    } else if (operatorValue === '*') {\n      resultValue = operandValue * result[j - 1]\n    } else if (operatorValue === '/') {\n      resultValue = operandValue // result[j - 1] //\n    } else if (operatorValue === '**') {\n      resultValue = Math.pow(operandValue, result[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'b5d9d8e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e5a7f9b9e9e8f9e", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing a number.\n  Your task is to convert this number to a string in a special format.\n\n  Here is a legend:\n  '0' - zero\n  '1' - one\n  '2' - two\n  '3' - three\n  '4' - four\n  '5' - five\n  '6' - six\n  '7' - seven\n  '8' - eight\n  '9' - nine\n  '10' - ten\n  '11' - eleven\n  '12' - twelve\n  '13' - thirteen\n  '14' - fourteen\n  '15' - fifteen\n  '16' - sixteen\n  '17' - seventeen\n  '18' - eighteen\n  '19' - nineteen\n  '20' - twenty\n  '30' - thirty\n  '40' - forty\n  '50' - fifty\n  '60' - sixty\n  '70' - seventy\n  '80' - eighty\n  '90' - ninety\n  '100' - hundred\n  '200' - two hundred\n  '300' - three hundred\n  '400' - four hundred\n  '500' - five hundred\n  '600' - six hundred\n  '700' - seven hundred\n  '800' - eight hundred\n  '900' - nine hundred\n  '1000' - one thousand\n\n  >>> convertNumber('0')\n  '0'\n  >>> convertNumber('1')\n  '1'\n  >>> convertNumber('2')\n  '2'\n  >>> convertNumber('3')\n  '3'\n  >>> convertNumber('4')\n  '4'\n  >>> convertNumber('5')\n  '5'\n  >>> convertNumber('6')\n  '6'\n  >>> convertNumber('7')\n  '7'\n  >>> convertNumber('8')\n  '8'\n  >>> convertNumber('9')\n  '9'\n  >>> convertNumber('10')\n  '10'\n  >>> convertNumber('11')\n  '11'\n  >>> convertNumber('12')\n  '12'\n  >>> convertNumber('13')\n  '13'\n  >>> convertNumber('14')\n  '14'\n  >>> convertNumber('15')\n  '15'\n  >>> convertNumber('16')\n  '16'\n  >>> convertNumber('17')\n  '17'\n  >>> convertNumber('18')\n  '18'\n  >>> convertNumber('19')\n  '19'\n  >>> convertNumber('20')\n  '20'\n  >>> convertNumber('30')\n  '30'\n  >>> convertNumber('40')\n  '40'\n  >>> convertNumber('50')\n  '50'\n  >>> convertNumber('60')\n  '60'\n  >>> convertNumber('70')\n  '70'\n  >>> convertNumber('80')\n  '80'\n  >>> convertNumber('90')\n  '90'\n  >>> convertNumber('100')\n  '100'\n  >>> convertNumber('200')\n  '200'\n  >>> convertNumber('300')\n  '300'\n  >>> convertNumber('400')\n  '400'\n  >>> convertNumber('500')\n  '500'\n  >>> convertNumber('600')\n  '600'\n  >>> convertNumber('700')\n  '700'\n  >>> convertNumber('800')\n  '800'\n  >>> convertNumber('900')\n  '900'\n  >>> convertNumber('1000')\n  '1000'\n  */\nconst convertNumber = (number) => {\n  const number_string = number.toString();\n  const number_string_length = number_string.length;\n  const number_string_without_zeros = number_string.replace(/0/g, '');\n  const number_string_without_zeros_length = number_string_without_zeros.length;\n  const number_string_without_zeros_without_leading_zeros = number_string_without_zeros.replace(/^0/, '');\n  const number_string_without_zeros_without_leading_zeros_length = number_string_without_zeros_without_leading_zeros.length;\n  const number_string_without_zeros_without_leading_zeros_without_trailing_zeros = number_string_without_zeros_without_leading_zeros.replace(/0$/, '');\n  const number_string_without_zeros_without_leading_zeros_without_trailing_zeros_length = number_string_without_zeros_without_leading_zeros_without_trailing_zeros.length;\n  const number_string_without_zeros_without_leading_zeros_without_trailing_zeros_without_leading_zeros = number_string_without_zeros_without_leading_zeros_without_trailing_zeros.replace(/^0/, '');\n  const number_string_without_zeros_without_leading_zeros_without_trailing_zeros_without_leading_zeros_length = number_string_without_zeros_without_leading_zeros_without_trailing_zeros_without_leading_zeros.length;\n  const number_string_without_zeros_without_leading_zeros_without_trailing_zeros_without_leading_zeros_without_trailing_zeros_length = number_", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  const index = string.indexOf(substring);\n  while (index!== -1) {\n    count += 1;\n    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet.\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcd')\n  'abcd'\n  >>> longestSubstring('abc')\n  'abc'\n  >>> longestSubstring('ab')\n  'ab'\n  >>> longestSubstring('a')\n  'a'\n  */\nconst longestSubstring = (string) => {\n  const length = string.length;\n  const max = 0;\n  const maxIndex = 0;\n  for (let i = 0; i < length; i += 1) {\n    const current = string[i];\n    const currentLength = howManyTimes(string, current);\n    if (currentLength > max) {\n      max = currentLength;\n      maxIndex = i;\n    }\n  }\n  return string.substring(maxIndex, length);\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet, but does not contain the substring 'ab'.\n  >>> longestSubstringWithout('abcd')\n  'cd'\n  >>> longestSubstringWithout('abcdc')\n  'cd'\n  >>> longestSubstringWithout('abcdcdef')\n  'ef'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  */\nconst longestSubstringWithout = (string) => {\n  const length = string.length;\n  const max = 0;\n  const maxIndex = 0;\n  for (let i = 0; i < length; i += 1) {\n    const current = string[i];\n    const currentLength = howManyTimes(string, current);\n    if (currentLength > max && string.indexOf(current) === -1) {\n      max = currentLength;\n      maxIndex = i;\n    }\n  }\n  return string.substring(maxIndex, length);\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet, but does not contain the substring 'ab' or 'cd'.\n  >>> longestSubstringWithout('abcd')\n  'cd'\n  >>> longestSubstringWithout('abcdc')\n  'cd'\n  >>> longestSubstringWithout('abcdcdef')\n  'ef'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  */\nconst longestSubstringWithout2 = (string) => {\n  const length = string.length;\n  const max = 0;\n  const maxIndex = 0;\n  for (let i = 0; i < length; i += 1) {\n    const current = string[i];\n    const currentLength = howManyTimes(string, current);\n    if (currentLength > max && (string.indexOf(current) === -1 || string.indexOf('cd') === -1)) {\n      max = currentLength;\n      maxIndex = i;\n    }\n  }\n  return string.substring(maxIndex, length);\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet, but does not contain the substring 'ab' or 'cd' or 'ef'.\n  >>> longestSubstringWithout('abcd')\n  'cd'\n  >>> longestSubstringWithout('abcdc')\n  'cd'\n  >>> longestSubstringWithout('abcdcdef')\n  'ef'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  */\nconst longestSubstringWithout3 = (string) => {\n  const length = string.length;\n  const max = 0;\n  const maxIndex = 0;\n  for (let i = 0; i < length; i += 1) {\n    const current = string[i];\n    const currentLength = howManyTimes(string, current);\n    if (currentLength > max && (string.indexOf(current) === -1 || string.indexOf('cd') === -1 || string.indexOf('ef') === -1)) {\n      max = currentLength;\n      maxIndex = i;\n    }\n  }\n  return string.substring(maxIndex, length);\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet, but does not contain the substring 'ab' or 'cd' or 'ef' or 'gh'.\n  >>> longestSubstringWithout('abcd')\n  'cd'\n  >>> longestSubstringWithout('abcdc')\n  'cd'\n  >>> longestSubstringWithout('abcdcdef')\n  'ef'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  >>> longestSubstringWithout('abcdcdefg')\n  'efg'\n  */\nconst longestSubstringWithout4 = (string) => {\n  const length = string.length;\n  const max = 0;\n  const maxIndex = 0;\n  for (let i = 0; i < length; i += 1) {\n    const current = string[i];\n    const currentLength = howManyTimes(string, current);\n    if (currentLength > max && (string.indexOf(current) === -1 || string.indexOf('cd') === -1 || string.indexOf('ef') === -1 || string.indexOf('gh') === -1)) {\n      max = currentLength;\n      maxIndex = i;\n    }\n  }\n  return string.substring(maxIndex, length);\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet, but does not contain the substring '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return aNumber - bNumber\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return aNumber - bNumber\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return sortedArray.reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return sortedArray.reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return sortedArray.reverse().reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverseReverse('nine eight seven six five four three two one zero')\n  'one two three four five six seven eight nine'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = numbersArray.sort((a, b) => {\n    const aNumber = parseInt(a, 10)\n    const bNumber = parseInt(b, 10)\n    return bNumber - aNumber\n  })\n  return sortedArray.reverse().reverse().reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber10 = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  if (decPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber11 = (number) => {\n  let intPart = Math.floor(number);\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((acc, num) => acc + num, 0);\n};\n\n/*\n  Given a list of numbers, return the average of the numbers.\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  >>> average([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> average([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  >>> average([1, 2, 3, 4, 5, 6, 7, 8])\n  6.0\n  */\nconst average = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\n/*\n  Given a list of numbers, return the median of the numbers.\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  6.0\n  */\nconst median = (numbers) => {\n  const sorted = numbers.sort();\n  const half = sorted.length / 2;\n  return (sorted[half - 1] + sorted[half]) / 2;\n};\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const half = sorted.length / 2;\n  const mode = sorted[half - 1];\n  const count = sorted.filter(num => num === mode).length;\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const half = sorted.length / 2;\n  const mode = sorted[half - 1];\n  const count = sorted.filter(num => num === mode).length;\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const half = sorted.length / 2;\n  const mode = sorted[half - 1];\n  const count = sorted.filter(num => num === mode).length;\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const half = sorted.length / 2;\n  const mode = sorted[half - 1];\n  const count = sorted.filter(num => num === mode).length;\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort();\n  const half = sorted.length / 2;\n  const mode = sorted[half - 1];\n  const count = sorted.filter(num => num === mode).length;\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRange = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlaceInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlaceInPlaceInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlaceInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**\n  Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRangeInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => (x - min) * scale)\n}\n\n/**", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for sets\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterSets = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for nulls\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter(v => v === undefined);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for sets\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterSets = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && typeof v.get === 'function');\n};\n\n/**\n  * Filter given list of any python values only for nulls\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNulls = (values) => {\n  return values.filter(v => v === null);\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefineds = (values) => {\n  return values.filter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return index of first occurrence of character in string\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strindex('')\n  * // => -1\n  * strindex('abc')\n  * // => 0\n  * strindex('abc', 'a')\n  * // => 0\n  * strindex('abc', 'z')\n  * // => -1\n  * strindex('abc', 'b')\n  * // => 1\n  * strindex('abc', 'b', 1)\n  * // => 1\n  * strindex('abc', 'b', 2)\n  * // => -1\n  * strindex('abc', 'b', 3)\n  * // => -1\n  * strindex('abc', 'b', 4)\n  * // => -1\n  * strindex('abc', 'b', 5)\n  * // => -1\n  * strindex('abc', 'b', 6)\n  * // => -1\n  * strindex('abc', 'b', 7)\n  * // => -1\n  * strindex('abc', 'b', 8)\n  * // => -1\n  * strindex('abc', 'b', 9)\n  * // => -1\n  * strindex('abc', 'b', 10)\n  * // => -1\n  * strindex('abc', 'b', 11)\n  * // => -1\n  * strindex('abc', 'b', 12)\n  * // => -1\n  * strindex('abc', 'b', 13)\n  * // => -1\n  * strindex('abc', 'b', 14)\n  * // => -1\n  * strindex('abc', 'b', 15)\n  * // => -1\n  * strindex('abc', 'b', 16)\n  * // => -1\n  * strindex('abc', 'b', 17)\n  * // => -1\n  * strindex('abc', 'b', 18)\n  * // => -1\n  * strindex('abc', 'b', 19)\n  * // => -1\n  * strindex('abc', 'b', 20)\n  * // => -1\n  * strindex('abc', 'b', 21)\n  * // => -1\n  * strindex('abc', 'b', 22)\n  * // => -1\n  * strindex('abc', 'b', 23)\n  * // => -1\n  * strindex('abc', 'b', 24)\n  * // => -1\n  * strindex('abc', 'b', 25)\n  * // => -1\n  * strindex('abc', 'b', 26)\n  * // => -1\n  * strindex('abc', 'b', 27)\n  * // => -1\n  * strindex('abc', 'b', 28)\n  * // => -1\n  * strindex('abc', 'b', 29)\n  * // => -1\n  * strindex('abc', 'b', 30)\n  * // => -1\n  * strindex('abc', 'b', 31)\n  * // => -1\n  * strindex('abc', 'b', 32)\n  * // => -1\n  * strindex('abc', 'b', 33)\n  * // => -1\n  * strindex('abc', 'b', 34)\n  * // => -1\n  * strindex('abc', 'b', 35)\n  * // => -1\n  * strindex('abc', 'b', 36)\n  * // => -1\n  * strindex('abc', 'b', 37)\n  * // => -1\n  * strindex('abc', 'b', 38)\n  * // => -1\n  * strindex('abc', 'b', 39)\n  * // => -1\n  * strindex('abc', 'b', 40)\n  * // => -1\n  * strindex('abc', 'b', 41)\n  * // => -1\n  * strindex('abc', 'b', 42)\n  * // => -1\n  * strindex('abc', 'b', 43)\n  * // => -1\n  * strindex('abc', 'b', 44)\n  * // => -1\n  * strindex('abc', 'b', 45)\n  * // => -1\n  * strindex('abc', 'b', 46)\n  * // => -1\n  * strindex('abc', 'b', 47)\n  * // => -1\n  * strindex('abc', 'b', 48)\n  * // => -1\n  * strindex('abc', 'b', 49)\n  * // => -1\n  * strindex('abc', 'b', 50)\n  * // => -1\n  * strindex('abc', 'b', 51)\n  * // => -1\n  * strindex('abc', 'b', 52)\n  * // => -1\n  * strindex('abc', 'b', 53)\n  * // => -1\n  * strindex('abc', 'b', 54)\n  * // => -1\n  * strindex('abc', 'b', 55)\n  * // => -1\n  * strindex('abc', 'b', 56)\n  * // => -1\n  * strindex('abc', 'b', 57)\n  * // => -1\n  * strindex('abc', 'b', 58)\n  * // => -1\n  * strindex('abc', 'b', 59)\n  * // => -1\n  * strindex('abc', 'b', 60)\n  * // => -1\n  * strindex('abc', 'b', 61)\n  * // => -1\n  * strindex('abc', 'b', 62)\n  * // => -1\n  * strindex('abc', 'b', 63)\n  * // => -1\n  * strindex('abc', 'b', 64)\n  * // => -1\n  * strindex('abc', 'b', 65)\n  * // => -1\n  * strindex('abc', 'b', 66)\n  * // => -1\n  * strindex('abc', 'b', 67)\n  * // => -1\n  * strindex('abc', 'b', 68)\n  * // => -", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const factorsOfN = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    return factors\n  }\n  const factorsOfNPlusOne = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n + 1)\n    return factors\n  }\n  const factorsOfNMinusOne = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 1)\n    return factors\n  }\n  const factorsOfNMinusTwo = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 2)\n    return factors\n  }\n  const factorsOfNMinusThree = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 3)\n    return factors\n  }\n  const factorsOfNMinusFour = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 4)\n    return factors\n  }\n  const factorsOfNMinusFive = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 5)\n    return factors\n  }\n  const factorsOfNMinusSix = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 6)\n    return factors\n  }\n  const factorsOfNMinusSeven = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 7)\n    return factors\n  }\n  const factorsOfNMinusEight = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 8)\n    return factors\n  }\n  const factorsOfNMinusNine = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 9)\n    return factors\n  }\n  const factorsOfNMinusTen = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 10)\n    return factors\n  }\n  const factorsOfNMinusEleven = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 11)\n    return factors\n  }\n  const factorsOfNMinusTwelve = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n    factors.push(n - 12)\n    return factors\n  }\n  const factorsOfNMinusThirteen = (n) => {\n    let factors = []\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        factors.push(i)\n        ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all the vowels replaced by '*'.\n  >>> replaceVowels('Hello')\n  'H*llo'\n  */\nconst replaceVowels = (string) => {\n  return string.replace(/[aeiou]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the consonants replaced by '*'.\n  >>> replaceConsonants('Hello')\n  'H*ll*'\n  */\nconst replaceConsonants = (string) => {\n  return string.replace(/[bcdfghjklmnpqrstvwxyz]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll2 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll3 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll4 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll5 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll6 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll7 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll8 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll9 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll10 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll11 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll12 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll13 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll14 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll15 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll16 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n  'H*ll*'\n  */\nconst replaceAll17 = (string) => {\n  return replaceVowels(replaceConsonants(string));\n};\n\n/*\n  Given a string, return a string with all the vowels and consonants replaced by '*'.\n  >>> replaceAll('Hello')\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length.\n  >>> truncate([], 3)\n  []\n  >>> truncate(['abc', 'bcd', 'cde', 'array'], 3)\n  ['abc', 'bcd', 'cde']\n  >>> truncate(['abc', 'bcd', 'cde', 'array'], 5)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst truncate = (strings, length) => {\n  return strings.map(s => s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 5, 'a')\n  ['aabc', 'abcd', 'acde', 'array']\n  */\nconst truncateWithPrefix = (strings, length, prefix) => {\n  return strings.map(s => prefix + s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 5, 'a')\n  ['aabc', 'abcd', 'acde', 'array']\n  */\nconst truncateWithPrefix = (strings, length, prefix) => {\n  return strings.map(s => prefix + s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 5, 'a')\n  ['aabc', 'abcd', 'acde', 'array']\n  */\nconst truncateWithPrefix = (strings, length, prefix) => {\n  return strings.map(s => prefix + s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 5, 'a')\n  ['aabc', 'abcd', 'acde', 'array']\n  */\nconst truncateWithPrefix = (strings, length, prefix) => {\n  return strings.map(s => prefix + s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 5, 'a')\n  ['aabc', 'abcd', 'acde', 'array']\n  */\nconst truncateWithPrefix = (strings, length, prefix) => {\n  return strings.map(s => prefix + s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 5, 'a')\n  ['aabc', 'abcd', 'acde', 'array']\n  */\nconst truncateWithPrefix = (strings, length, prefix) => {\n  return strings.map(s => prefix + s.slice(0, length));\n};\n\n/*\n  Given a list of strings, return a list of strings where each string is\n  truncated to the given length, and the given prefix is added to the front\n  of each string.\n  >>> truncateWithPrefix([], 3, 'a')\n  []\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde', 'array'], 3, 'a')\n  ['aabc', 'abcd', 'acde']\n  >>> truncateWithPrefix(['abc', 'bcd', 'cde", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1, 0]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n < 2) return false\n  if (n < 9) return true\n  const sqrt = Math.sqrt(n)\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) return false\n    if (n % (i + 2) === 0) return false\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  1\n  >>> divisors(101)\n  4\n  >>> divisors(11)\n  1\n  >>> divisors(13441)\n  6\n  >>> divisors(61)\n  1\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n % 2 === 0) return 1\n  if (n % 3 === 0) return 2\n  if (n < 2) return 1\n  if (n < 9) return 4\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) {\n      count += 2\n    }\n    if (n % (i + 2) === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  1\n  >>> divisors(101)\n  4\n  >>> divisors(11)\n  1\n  >>> divisors(13441)\n  6\n  >>> divisors(61)\n  1\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n % 2 === 0) return 1\n  if (n % 3 === 0) return 2\n  if (n < 2) return 1\n  if (n < 9) return 4\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) {\n      count += 2\n    }\n    if (n % (i + 2) === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  1\n  >>> divisors(101)\n  4\n  >>> divisors(11)\n  1\n  >>> divisors(13441)\n  6\n  >>> divisors(61)\n  1\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n % 2 === 0) return 1\n  if (n % 3 === 0) return 2\n  if (n < 2) return 1\n  if (n < 9) return 4\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) {\n      count += 2\n    }\n    if (n % (i + 2) === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  1\n  >>> divisors(101)\n  4\n  >>> divisors(11)\n  1\n  >>> divisors(13441)\n  6\n  >>> divisors(61)\n  1\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n % 2 === 0) return 1\n  if (n % 3 === 0) return 2\n  if (n < 2) return 1\n  if (n < 9) return 4\n  const sqrt = Math.sqrt(n)\n  let count = 1\n  for (let i = 5; i <= sqrt; i += 6) {\n    if (n % i === 0) {\n      count += 2\n    }\n    if (n % (i + 2) === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(6)\n  1\n  >>> divisors(101)\n  4\n  >>> divisors(11)\n  1\n  >>> divisors(13441)\n  6\n  >>> divisors(61)\n  1\n  >>> divisors(4)\n  1\n  >>> divisors(1)\n  1\n  */\nconst divisors5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n % 2 === 0) return 1\n  if (n % 3 === 0) return 2\n  if (n < 2)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len / 2];\n    const min = xs[len / 2 - 1];\n    const mid = (max + min) / 2;\n    if (poly(mid) === 0) {\n      return mid;\n    }\n    if (poly(min) === 0) {\n      return min;\n    }\n    if (poly(max) === 0) {\n      return max;\n    }\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero2 find x such that poly(x) = 0.\n  findZero2 returns only only zero point, even if there are many.\n  Moreover, findZero2 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero2([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len / 2];\n    const min = xs[len / 2 - 1];\n    const mid = (max + min) / 2;\n    if (poly2(mid) === 0) {\n      return mid;\n    }\n    if (poly2(min) === 0) {\n      return min;\n    }\n    if (poly2(max) === 0) {\n      return max;\n    }\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero3 find x such that poly(x) = 0.\n  findZero3 returns only only zero point, even if there are many.\n  Moreover, findZero3 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero3([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero3([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len / 2];\n    const min = xs[len / 2 - 1];\n    const mid = (max + min) / 2;\n    if (poly3(mid) === 0) {\n      return mid;\n    }\n    if (poly3(min) === 0) {\n      return min;\n    }\n    if (poly3(max) === 0) {\n      return max;\n    }\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero4 find x such that poly(x) = 0.\n  findZero4 returns only only zero point, even if there are many.\n  Moreover, findZero4 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero4([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero4([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x -", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3 - b % 3);\n  return [...l].filter((x, i) => i % 3!== 0).map(x => sorted[i]);\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  const sorted = sortedArray(l);\n  if (sorted.length % 2 === 0) {\n    return (sorted[(sorted.length - 1) / 2] + sorted[(sorted.length - 1) / 2 + 1]) / 2;\n  } else {\n    return sorted[(sorted.length - 1) / 2];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  let mode = sorted[0];\n  let count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    } else if (count > 1) {\n      mode = sorted[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode2 = (l) => {\n  const sorted = sortedArray(l);\n  let mode = sorted[0];\n  let count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    } else if (count > 1) {\n      mode = sorted[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode3 = (l) => {\n  const sorted = sortedArray(l);\n  let mode = sorted[0];\n  let count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    } else if (count > 1) {\n      mode = sorted[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode4 = (l) => {\n  const sorted = sortedArray(l);\n  let mode = sorted[0];\n  let count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    } else if (count > 1) {\n      mode = sorted[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode5 = (l) => {\n  const sorted = sortedArray(l);\n  let mode = sorted[0];\n  let count = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      count++;\n    } else if (count > 1) {\n      mode = sorted[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0, div = 0, div2 = 0, div3 = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      fizz++;\n    }\n    if (i % 5 === 0) {\n      buzz++;\n    }\n    if (i % 7 === 0) {\n      div++;\n    }\n    if (i % 11 === 0) {\n      div2++;\n    }\n    if (i % 13 === 0) {\n      div3++;\n    }\n  }\n  return [fizz, buzz, div, div2, div3];\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice(1);\n  const l3 = l.slice(2);\n  return l.slice(0, 1).concat(l2.sort(), l3.sort());\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns dec", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n % 2 === 0) {\n    return primeFib(n - 1) + primeFib(n - 2);\n  }\n  return primeFib(n - 1) + primeFib(n - 3);\n};\n\nmodule.exports = primeFib;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  RMSD = sqrt(average | x - x_mean |^2)\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the average of the squared deviations from the mean:\n  SD = sqrt(average | x - x_mean |^2)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate Variance\n  around the mean of this dataset.\n  Variance is the average of the squared deviations from the mean:\n  VAR = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the mean:\n  COV = SD / MEAN\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the mean:\n  COV = SD / MEAN\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the mean:\n  COV = SD / MEAN\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the mean:\n  COV = SD / MEAN\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the mean:\n  COV = SD / MEAN\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return standardDeviation(numbers) / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length >= 3;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carRaceCollision(i) || carRaceCollision(j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconsole.log(carRaceCollision(3));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst inc", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 0 && l.length > 1\n}\n\n/*\n  pairsSumToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 1 && l.length > 1\n}\n\n/*\n  pairsSumToTwo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 2 && l.length > 1\n}\n\n/*\n  pairsSumToThree takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 3 && l.length > 1\n}\n\n/*\n  pairsSumToFour takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 4 && l.length > 1\n}\n\n/*\n  pairsSumToFive takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 5 && l.length > 1\n}\n\n/*\n  pairsSumToSix takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 6 && l.length > 1\n}\n\n/*\n  pairsSumToSeven takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum === 7 && l.length > 1\n}\n\n/*\n  pairsSumToEight", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChars('Hello')\n  5\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  >>> countChars('Hello World')\n  11\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length;\n  if (len === 0) {\n    return undefined;\n  }\n  if (len === 1) {\n    return l[0];\n  }\n  const half = Math.floor(len / 2);\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength / 2) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let textIndex = 0;\n    let textIndex2 = textLength - 1;\n    while (textIndex < textLength) {\n        if (text[textIndex]!== text[textIndex2]) {\n            return false;\n        }\n        textIndex++;\n        textIndex2--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 7)\n  3\n  >>> gcd(3, 8)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(3, 10)\n  3\n  >>> gcd(3, 11)\n  3\n  >>> gcd(3, 12)\n  3\n  >>> gcd(3, 13)\n  3\n  >>> gcd(3, 14)\n  3\n  >>> gcd(3, 15)\n  3\n  >>> gcd(3, 16)\n  3\n  >>> gcd(3, 17)\n  3\n  >>> gcd(3, 18)\n  3\n  >>> gcd(3, 19)\n  3\n  >>> gcd(3, 20)\n  3\n  >>> gcd(3, 21)\n  3\n  >>> gcd(3, 22)\n  3\n  >>> gcd(3, 23)\n  3\n  >>> gcd(3, 24)\n  3\n  >>> gcd(3, 25)\n  3\n  >>> gcd(3, 26)\n  3\n  >>> gcd(3, 27)\n  3\n  >>> gcd(3, 28)\n  3\n  >>> gcd(3, 29)\n  3\n  >>> gcd(3, 30)\n  3\n  >>> gcd(3, 31)\n  3\n  >>> gcd(3, 32)\n  3\n  >>> gcd(3, 33)\n  3\n  >>> gcd(3, 34)\n  3\n  >>> gcd(3, 35)\n  3\n  >>> gcd(3, 36)\n  3\n  >>> gcd(3, 37)\n  3\n  >>> gcd(3, 38)\n  3\n  >>> gcd(3, 39)\n  3\n  >>> gcd(3, 40)\n  3\n  >>> gcd(3, 41)\n  3\n  >>> gcd(3, 42)\n  3\n  >>> gcd(3, 43)\n  3\n  >>> gcd(3, 44)\n  3\n  >>> gcd(3, 45)\n  3\n  >>> gcd(3, 46)\n  3\n  >>> gcd(3, 47)\n  3\n  >>> gcd(3, 48)\n  3\n  >>> gcd(3, 49)\n  3\n  >>> gcd(3, 50)\n  3\n  >>> gcd(3, 51)\n  3\n  >>> gcd(3, 52)\n  3\n  >>> gcd(3, 53)\n  3\n  >>> gcd(3, 54)\n  3\n  >>> gcd(3, 55)\n  3\n  >>> gcd(3, 56)\n  3\n  >>> gcd(3, 57)\n  3\n  >>> gcd(3, 58)\n  3\n  >>> gcd(3, 59)\n  3\n  >>> gcd(3, 60)\n  3\n  >>> gcd(3, 61)\n  3\n  >>> gcd(3, 62)\n  3\n  >>> gcd(3, 63)\n  3\n  >>> gcd(3, 64)\n  3\n  >>> gcd(3, 65)\n  3\n  >>> gcd(3, 66)\n  3\n  >>> gcd(3, 67)\n  3\n  >>> gcd(3, 68)\n  3\n  >>> gcd(3, 69)\n  3\n  >>> gcd(3, 70)\n  3\n  >>> gcd(3, 71)\n  3\n  >>> gcd(3, 72)\n  3\n  >>> gcd(3, 73)\n  3\n  >>> gcd(3, 74)\n  3\n  >>> gcd(3, 75)\n  3\n  >>> gcd(3, 76)\n  3\n  >>> gcd(3, 77)\n  3\n  >>> gcd(3, 78)\n  3\n  >>> gcd(3, 79)\n  3\n  >>> gcd(3, 80)\n  3\n  >>> gcd(3, 81)\n  3\n  >>> gcd(3, 82)\n  3\n  >>> gcd(3, 83)\n  3\n  >>> gcd(3, 84)\n  3\n  >>> gcd(3, 85)\n  3\n  >>> gcd(3, 86)\n  3\n  >>> gcd(3, 87)\n  3\n  >>> gcd(3, 88)\n  3\n  >>> gcd(3, 89)\n  3\n  >>> gcd(3, 90)\n  3\n  >>> gcd(3, 91)\n  3\n  >>> gcd(3, 92)\n  3\n  >>> gcd(3, 93)\n  3\n  >>> gcd(3, 94)\n  3\n  >>> gcd(3, 95)\n  3\n  >>> gcd(3, 96)\n  3\n  >>> gcd(3, 97)\n  3\n  >>> gcd(3, 98)\n  3\n  >>> gcd(3, 99)\n  3\n  >>> gcd(3, 100)\n  3\n  >>> gcd(3, 101)\n  3\n  >>> gcd(3, 102)\n  3\n  >>> gcd(3, 103)\n  3\n  >>> gcd(3, 104)\n  3\n  >>> gcd(3, 105)\n  3\n  >>> gcd(3, 106)\n  3\n  >>> gcd(3, 107)\n  3\n  >>> gcd(3, 108)\n  3\n  >>> gcd(3, 109)\n  3\n  >>> gcd(3, 110)\n  3\n  >>> gcd(3, 111)\n  3\n  >>> gcd(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let index = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    if (index === 0) {\n      result.push(numbers[i]);\n      index = 1;\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n      index = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  const textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let currentVowel = '';\n  let currentLetter = '';\n  let currentVowelIndex = 0;\n  let currentLetterIndex = 0;\n  let currentVowelLength = 0;\n  let currentLetterLength = 0;\n  let currentVowelLengthIndex = 0;\n  let currentLetterLengthIndex = 0;\n  let currentVowelLengthIndex2 = 0;\n  let currentLetterLengthIndex2 = 0;\n  let currentVowelLengthIndex3 = 0;\n  let currentLetterLengthIndex3 = 0;\n  let currentVowelLengthIndex4 = 0;\n  let currentLetterLengthIndex4 = 0;\n  let currentVowelLengthIndex5 = 0;\n  let currentLetterLengthIndex5 = 0;\n  let currentVowelLengthIndex6 = 0;\n  let currentLetterLengthIndex6 = 0;\n  let currentVowelLengthIndex7 = 0;\n  let currentLetterLengthIndex7 = 0;\n  let currentVowelLengthIndex8 = 0;\n  let currentLetterLengthIndex8 = 0;\n  let currentVowelLengthIndex9 = 0;\n  let currentLetterLengthIndex9 = 0;\n  let currentVowelLengthIndex10 = 0;\n  let currentLetterLengthIndex10 = 0;\n  let currentVowelLengthIndex11 = 0;\n  let currentLetterLengthIndex11 = 0;\n  let currentVowelLengthIndex12 = 0;\n  let currentLetterLengthIndex12 = 0;\n  let currentVowelLengthIndex13 = 0;\n  let currentLetterLengthIndex13 = 0;\n  let currentVowelLengthIndex14 = 0;\n  let currentLetterLengthIndex14 = 0;\n  let currentVowelLengthIndex15 = 0;\n  let currentLetterLengthIndex15 = 0;\n  let currentVowelLengthIndex16 = 0;\n  let currentLetterLengthIndex16 = 0;\n  let currentVowelLengthIndex17 = 0;\n  let currentLetterLengthIndex17 = 0;\n  let currentVowelLengthIndex18 = 0;\n  let currentLetterLengthIndex18 = 0;\n  let currentVowelLengthIndex19 = 0;\n  let currentLetterLengthIndex19 = 0;\n  let currentVowelLengthIndex20 = 0;\n  let currentLetterLengthIndex20 = 0;\n  let currentVowelLengthIndex21 = 0;\n  let currentLetterLengthIndex21 = 0;\n  let currentVowelLengthIndex22 = 0;\n  let currentLetterLengthIndex22 = 0;\n  let currentVowelLengthIndex23 = 0;\n  let currentLetterLengthIndex23 = 0;\n  let currentVowelLengthIndex24 = 0;\n  let currentLetterLengthIndex24 = 0;\n  let currentVowelLengthIndex25 = 0;\n  let currentLetterLengthIndex25 = 0;\n  let currentVowelLengthIndex26 = 0;\n  let currentLetterLengthIndex26 = 0;\n  let currentVowelLengthIndex27 = 0;\n  let currentLetterLengthIndex27 = 0;\n  let currentVowelLengthIndex28 = 0;\n  let currentLetterLengthIndex28 = 0;\n  let currentVowelLengthIndex29 = 0;\n  let currentLetterLengthIndex29 = 0;\n  let currentVowelLengthIndex30 = 0;\n  let currentLetterLengthIndex30 = 0;\n  let currentVowelLengthIndex31 = 0;\n  let currentLetterLengthIndex31 = 0;\n  let currentVowelLengthIndex32 = 0;\n  let currentLetterLengthIndex32 = 0;\n  let currentVowelLengthIndex33 = 0;\n  let currentLetterLengthIndex33 = 0;\n  let currentVowelLengthIndex34 = 0;\n  let currentLetterLengthIndex34 = 0;\n  let currentVowelLengthIndex35 = 0;\n  let currentLetterLengthIndex35 = 0;\n  let currentVowelLengthIndex36 = 0;\n  let currentLetterLengthIndex36 = 0;\n  let currentVowelLengthIndex37 = 0;\n  let currentLetterLengthIndex37 = 0;\n  let currentVowelLengthIndex38 = 0;\n  let currentLetterLengthIndex38 = 0;\n  let currentVowelLengthIndex39 = 0;\n  let currentLetterLengthIndex39 = 0;\n  let currentVowelLengthIndex40 = 0;\n  let currentLetterLengthIndex40 = 0;\n  let currentVowelLengthIndex41 = 0;\n  let currentLetterLengthIndex41 = 0;\n  let currentVowelLengthIndex42 = 0;\n  let currentLetterLengthIndex42 = 0;\n  let currentVowelLengthIndex43 = 0;\n  let currentLetterLengthIndex43 = 0;\n  let currentVowelLengthIndex44 = 0;\n  let currentLetterLengthIndex44 = 0;\n  let currentVowelLengthIndex45 = 0;\n  let currentLetterLengthIndex45 = 0;\n  let currentVowelLengthIndex46 = 0;\n  let currentLetterLengthIndex46 = 0;\n  let currentVowelLengthIndex47 = 0;\n  let currentLetterLengthIndex47 = 0;\n  let currentVowelLengthIndex48 = 0;\n  let currentLetterLengthIndex48 = 0;\n  let currentVowelLengthIndex49 = 0;\n  let currentLetterLengthIndex49 = 0;\n  let currentVowelLengthIndex50 = 0;\n  let currentLetterLengthIndex50 = 0;\n  let currentVowelLengthIndex51 = 0;\n  let currentLetterLengthIndex51 = 0;\n  let currentVowelLengthIndex52 = 0;\n  let currentLetterLengthIndex52 = 0;\n  let currentVowelLengthIndex53 = 0;\n  let current", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n >= t);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds2 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds3 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds4 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds5 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds6 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds7 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds8 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds9 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds10 = (l, t1, t2) => {\n  return belowThreshold(t1, l) && aboveThreshold(t2, l);\n};\n\n/*Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 10])\n  true\n  >>> betweenThresholds([1, 2, 4, 10], [100, 200], [5, 5])\n  false\n  */\nconst betweenThresholds11 = (l, t1, t2) => {\n  return belowThreshold(t1, l)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Calculate the square root of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  * Calculate the cube root of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst cubeRoot = (x) => {\n  return Math.pow(x, 1 / 3);\n};\n\n/*\n  * Calculate the nth root of a number\n  *\n  * @param {number} x\n  * @param {number} n\n  * @returns {number}\n  */\nconst nthRoot = (x, n) => {\n  return Math.pow(x, 1 / n);\n};\n\n/*\n  * Calculate the natural logarithm of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst ln = (x) => {\n  return Math.log(x);\n};\n\n/*\n  * Calculate the base 10 logarithm of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst l10 = (x) => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*\n  * Calculate the hyperbolic cosine of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst cosh = (x) => {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n\n/*\n  * Calculate the hyperbolic sine of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst sinh = (x) => {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n\n/*\n  * Calculate the hyperbolic tangent of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst tanh = (x) => {\n  return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));\n};\n\n/*\n  * Calculate the hyperbolic cotangent of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst coth = (x) => {\n  return 1 / tanh(x);\n};\n\n/*\n  * Calculate the hyperbolic secant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst sech = (x) => {\n  return 1 / cosh(x);\n};\n\n/*\n  * Calculate the hyperbolic cosecant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst csch = (x) => {\n  return 1 / sinh(x);\n};\n\n/*\n  * Calculate the hyperbolic cosecant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst acsch = (x) => {\n  return 1 / coth(x);\n};\n\n/*\n  * Calculate the hyperbolic secant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst asch = (x) => {\n  return 1 / sech(x);\n};\n\n/*\n  * Calculate the hyperbolic cosecant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst acsch = (x) => {\n  return 1 / csch(x);\n};\n\n/*\n  * Calculate the hyperbolic secant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst asch = (x) => {\n  return 1 / sech(x);\n};\n\n/*\n  * Calculate the hyperbolic cosecant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst acsch = (x) => {\n  return 1 / csch(x);\n};\n\n/*\n  * Calculate the hyperbolic secant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst asch = (x) => {\n  return 1 / sech(x);\n};\n\n/*\n  * Calculate the hyperbolic cosecant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst acsch = (x) => {\n  return 1 / csch(x);\n};\n\n/*\n  * Calculate the hyperbolic secant of a number\n  *\n  * @param {number} x\n  * @returns {number}\n  */\nconst asch = (x) => {\n  return 1 / sech(x);\n};\n\n/*\n  * Calculate the hyperbolic cosecant of a number\n  *\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcd', 'dddddddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabc')\n  false\n  >>> isAnagram('eabcd', 'dddddddabce')\n  false\n  >>> isAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isAnagram = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    const s0_chars = s0.split('');\n    const s1_chars = s1.split('');\n    const s0_chars_len = s0_chars.length;\n    const s1_chars_len = s1_chars.length;\n    for (let i = 0; i < s0_chars_len; i++) {\n        if (s0_chars[i]!== s1_chars[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcd', 'dddddddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabc')\n  false\n  >>> isAnagram('eabcd', 'dddddddabce')\n  false\n  >>> isAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isAnagram2 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    const s0_chars = s0.split('');\n    const s1_chars = s1.split('');\n    const s0_chars_len = s0_chars.length;\n    const s1_chars_len = s1_chars.length;\n    for (let i = 0; i < s0_chars_len; i++) {\n        if (s0_chars[i]!== s1_chars[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcd', 'dddddddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabc')\n  false\n  >>> isAnagram('eabcd', 'dddddddabce')\n  false\n  >>> isAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isAnagram3 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    const s0_chars = s0.split('');\n    const s1_chars = s1.split('');\n    const s0_chars_len = s0_chars.length;\n    const s1_chars_len = s1_chars.length;\n    for (let i = 0; i < s0_chars_len; i++) {\n        if (s0_chars[i]!== s1_chars[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcd', 'dddddddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabc')\n  false\n  >>> isAnagram('eabcd', 'dddddddabce')\n  false\n  >>> isAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isAnagram4 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    const s0_chars = s0.split('');\n    const s1_chars = s1.split('');\n    const s0_chars_len = s0_chars.length;\n    const s1_chars_len = s1_chars.length;\n    for (let i = 0; i < s0_chars_len; i++) {\n        if (s0_chars[i]!== s1_chars[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> isAnagram('eabcd', 'dddddddabc')\n  true\n  >>> isAnagram('ab", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i];\n    if (c === \"<\") {\n      stack.push(\"<\");\n    } else if (c === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  Given a string, return the string with all the brackets\n  replaced by their corresponding characters.\n\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<\")\n  '<'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replaceBrackets(\"<>\")\n  '><'\n  >>> replace", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.intersection(l2_set));\n  return intersection.values();\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor7 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [];\n  const stack_length = 0;\n  const stack_max_length = 0;\n  const stack_max_level = 0;\n  const stack_level = 0;\n  const stack_level_max = 0;\n  const stack_level_max_level = 0;\n  const stack_level_max_level_max = 0;\n  const stack_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max_level_max = 0;\n  const stack_level_max_level_max_level_max_level_max_level_max_level_max_level_max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      const top = stack.pop()\n      if (top!== '(') {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the longest palindromic substring.\n\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome(\"abracadabra\")\n  'abracadabra'\n  >>> longestPalindrome", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  */\nconst roots = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const roots = new Array(n);\n  for (let i = 0; i < n; i++) {\n    roots[i] = -d[i] / d[i + 1];\n  }\n  return roots;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  */\nconst roots2 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const roots = new Array(n);\n  for (let i = 0; i < n; i++) {\n    roots[i] = -d[i] / d[i + 1];\n  }\n  return roots;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  */\nconst roots3 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const roots = new Array(n);\n  for (let i = 0; i < n; i++) {\n    roots[i] = -d[i] / d[i + 1];\n  }\n  return roots;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  */\nconst roots4 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const roots = new Array(n);\n  for (let i = 0; i < n; i++) {\n    roots[i] = -d[i] / d[i + 1];\n  }\n  return roots;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  */\nconst roots5 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const roots = new Array(n);\n  for (let i = 0; i < n; i++) {\n    roots[i] = -d[i] / d[i + 1];\n  }\n  return roots;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1, -1, -1]\n  */\nconst roots6 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const roots = new Array(n);\n  for (let i = 0; i < n; i++) {\n    roots[i] = -d[i] / d[i + 1];\n  }\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 0;\n  while (a < n) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceEnd(\"abc\", \"c\")\n  \"abcc\"\n  >>> replaceEnd(\"abc\", \"d\")\n  \"abcd\"\n  >>> replaceEnd(\"abc\", \"\")\n  \"ab\"\n  >>> replaceEnd(\"abc\", \"x\")\n  \"axc\"\n  */\nconst replaceEnd = (s, c) => {\n  const len = s.length\n  return s.slice(0, len - 1) + c + s.slice(len)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceStart(\"abc\", \"c\")\n  \"cbc\"\n  >>> replaceStart(\"abc\", \"d\")\n  \"dbc\"\n  >>> replaceStart(\"abc\", \"\")\n  \"abc\"\n  >>> replaceStart(\"abc\", \"x\")\n  \"xbc\"\n  */\nconst replaceStart = (s, c) => {\n  const len = s.length\n  return c + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll(\"abc\", \"c\", \"\")\n  \"ab\"\n  >>> replaceAll(\"abc\", \"c\", \"x\")\n  \"xab\"\n  */\nconst replaceAll = (s, c, d) => {\n  const len = s.length\n  return d + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll(\"abc\", \"c\", \"\")\n  \"ab\"\n  >>> replaceAll(\"abc\", \"c\", \"x\")\n  \"xab\"\n  */\nconst replaceAll2 = (s, c, d) => {\n  const len = s.length\n  return d + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll(\"abc\", \"c\", \"\")\n  \"ab\"\n  >>> replaceAll(\"abc\", \"c\", \"x\")\n  \"xab\"\n  */\nconst replaceAll3 = (s, c, d) => {\n  const len = s.length\n  return d + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll(\"abc\", \"c\", \"\")\n  \"ab\"\n  >>> replaceAll(\"abc\", \"c\", \"x\")\n  \"xab\"\n  */\nconst replaceAll4 = (s, c, d) => {\n  const len = s.length\n  return d + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll(\"abc\", \"c\", \"\")\n  \"ab\"\n  >>> replaceAll(\"abc\", \"c\", \"x\")\n  \"xab\"\n  */\nconst replaceAll5 = (s, c, d) => {\n  const len = s.length\n  return d + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll(\"abc\", \"c\", \"\")\n  \"ab\"\n  >>> replaceAll(\"abc\", \"c\", \"x\")\n  \"xab\"\n  */\nconst replaceAll6 = (s, c, d) => {\n  const len = s.length\n  return d + s.slice(1) + s.slice(0, len - 1)\n}\n\n/*\n  Write a function that takes a string and returns a string with the\n  same number of characters, but with the first and last characters\n  replaced by the same character.\n  Example:\n  >>> replaceAll(\"abc\", \"c\", \"d\")\n  \"dabcd\"\n  >>> replaceAll", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = x.slice()\n  const shiftDigits = shift % len\n  const shiftDigitsReverse = len - shiftDigits\n  for (let i = 0; i < shiftDigits; i++) {\n    result[i] = result[i + shiftDigitsReverse]\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverse = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[len - i - 1])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(s[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString2 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    result.push(s[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString3 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString4 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[len - i - 1])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString5 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString6 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[len - i - 1])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString7 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString8 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[len - i - 1])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString9 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(s[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverseString10 = (s) => {\n  const len = s.length\n  const result = []\n  for (let i = 0; i < len; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const apple = s.match(/apple/g)\n  const orange = s.match(/orange/g)\n  const mango = s.match(/mango/g)\n  const total = apple.length + orange.length + mango.length\n  return n - total\n}\n\nexport default fruitDistribution\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = (n) => n % 2 === 0;\n  const min = (a, b) => a < b? a : b;\n  const minIndex = (a, b) => a < b? a : b;\n  const result = [];\n  const index = [];\n  const arrLength = arr.length;\n  let minValue = Number.MAX_VALUE;\n  let minIndex = -1;\n  let i = 0;\n  while (i < arrLength) {\n    if (even(arr[i])) {\n      if (arr[i] < minValue) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n    i++;\n  }\n  if (minValue === Number.MAX_VALUE) {\n    return result;\n  }\n  result.push(minValue);\n  index.push(minIndex);\n  i = 0;\n  while (i < arrLength) {\n    if (even(arr[i]) && arr[i] === minValue) {\n      if (arr[i] < minValue) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n    i++;\n  }\n  if (minValue === Number.MAX_VALUE) {\n    return result;\n  }\n  result.push(minValue);\n  index.push(minIndex);\n  return [result, index];\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  for (const string of strings) {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring12 = (strings, subst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...reversed,...sorted];\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qs = q.slice().reverse()\n  const sum = qs.reduce((a, b) => a + b, 0)\n  return sum <= w && qs.every((x, i) => x === qs[i + 1] && qs[i] <= qs[i + 1])\n}\n\nconsole.log(willItFly([3, 2, 3], 1))\nconsole.log(willItFly([3, 2, 3], 9))\nconsole.log(willItFly([3], 5))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let min = arr.length;\n  let count = 0;\n\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n    }\n    i++;\n    j--;\n  }\n\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < len1; i++) {\n    const item1 = lst1[i];\n    const item2 = lst2[i];\n    if (item1.length > item2.length) {\n      result.push(item1);\n    } else if (item1.length < item2.length) {\n      result.push(item2);\n    } else {\n      result.push(item1);\n    }\n  }\n  return result;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers(100)\n  const result = prime.reduce((acc, num) => {\n    return acc && (a % num === 0)\n  }, true)\n  return result\n}\n\nconst primeNumbers = (max) => {\n  const prime = []\n  for (let i = 2; i < max; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  return prime\n}\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false\n  }\n  if (num === 2) {\n    return true\n  }\n  if (num % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isMultiplyPrime(30))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 2 === 0) return iscube(a / 2)\n  return iscube(a * a * a)\n}\n\nconsole.log(iscube(1))\nconsole.log(iscube(2))\nconsole.log(iscube(64))\nconsole.log(iscube(180))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber13 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber14 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber15 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber16 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber17 = (num) => {\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNumber18 = (num) => {\n  let i = 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryDigits = decimal.toString(2).split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    binary += binaryDigits[i];\n  }\n  return binary;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits = binary.split('');\n  let binaryLength = binaryDigits.length;\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryDigits[i] === '1'? 1 : 0;\n  }\n  return decimal;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryDigits", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum of every 3-digit number in the list.\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst sumList = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return a list of the product of every 3-digit number in the list.\n  >>> productList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> productList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst productList = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/*\n  Given a list of numbers, return a list of the sum of every 3-digit number in the list.\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst sumList = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return a list of the product of every 3-digit number in the list.\n  >>> productList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> productList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst productList = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/*\n  Given a list of numbers, return a list of the sum of every 3-digit number in the list.\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst sumList = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      sum += numbers[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, return a list of the product of every 3-digit number in the list.\n  >>> productList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> productList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst productList = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      product *= numbers[i];\n    }\n  }\n  return product;\n};\n\n/*\n  Given a list of numbers, return a list of the sum of every 3-digit number in the list.\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst sumList = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 ===", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < len) {\n    if (s[i] === s[j]) {\n      count++\n      if (count === 3) {\n        return false\n      }\n    } else {\n      count = 1\n    }\n    j++\n    i++\n  }\n  return true\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    return letterGrade;\n  });\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade2 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade3 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade4 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade5 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade6 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade7 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade8 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade9 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade10 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade11 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade12 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const letterGrade = grade.toUpperCase();\n    return letterGrade;\n  });\n};\n\nconst letterGrade13 = (grades) => {\n  const letterGrade = {\n    A: 'A+',\n    B: 'B',\n    C: 'C-',\n    D: 'D',\n    E: 'E'\n  };\n  return grades.map(grade => {\n    const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0;\n  };\n  const isPrimeLength = (length) => {\n    return prime.test(length) && length % 2 === 0;\n  };\n  return isPrimeLength(string.length);\n};\n\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number % 2 === 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      start--;\n      if (start === 0) {\n        count++;\n      }\n    }\n    while (end < n) {\n      end++;\n      if (end === n) {\n        count++;\n      }\n    }\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 2? digit : 0);\n  const sum = digits.reduce((sum, digit) => sum + digit, 0);\n  return sum.toString(2);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const sortedWords = words.sort((a, b) => {\n    return a.charCodeAt(0) - b.charCodeAt(0)\n  })\n  const newString = sortedWords.join(' ')\n  return newString\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  const rows = sorted.map(([row, columns]) => {\n    const sortedColumns = sorted.filter(([row, columns]) => columns > x);\n    return [row, sortedColumns.length];\n  });\n  return rows.sort((a, b) => b[0] - a[0]);\n};\n\nconst getRow = (lst, x) => {\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 0) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet[i];\n    let index = alphabet.indexOf(s[i]);\n    encrypted += letter;\n    alphabet.splice(index, 1);\n    alphabet.splice(index + 1, 0, letter);\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet[i];\n    let index = alphabet.indexOf(s[i]);\n    decrypted += letter;\n    alphabet.splice(index, 1);\n    alphabet.splice(index - 1, 0, letter);\n  }\n  return decrypted;\n};\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns a string rotated by the alphabet.\n  For example:\n  rotate('hi') returns 'hij'\n  rotate('asdfghjkl') returns 'lkjaefgh'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotate = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet[i];\n    rotated += letter;\n    alphabet.splice(alphabet.indexOf(s[i]), 1);\n    alphabet.splice(alphabet.indexOf(s[i]), 0, letter);\n  }\n  return rotated;\n};\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns a string rotated by the alphabet.\n  For example:\n  rotate('hi') returns 'hij'\n  rotate('asdfghjkl') returns 'lkjaefgh'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotate2 = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet[i];\n    rotated += letter;\n    alphabet.splice(alphabet.indexOf(s[i]), 1);\n    alphabet.splice(alphabet.indexOf(s[i]), 0, letter);\n  }\n  return rotated;\n};\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns a string rotated by the alphabet.\n  For example:\n  rotate('hi') returns 'hij'\n  rotate('asdfghjkl') returns 'lkjaefgh'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst rotate3 = (s) => {\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet[i];\n    rotated += letter;\n    alphabet.splice(alphabet.indexOf(s[i]), 1);\n    alphabet.splice(alphabet.indexOf(s[i]), 0, letter);\n  }\n  return rotated;\n};\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns a string rotated by the alphabet.\n  For example:\n  rotate('hi') returns 'hij'\n  rotate('asdfghjkl') returns 'lkjaefgh'\n  rotate('gf') returns 'gf'\n  rotate('et') returns 'et'\n  */\nconst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  const maxLengthIndex = 0;\n  const maxLengthLength = 1;\n  const maxLengthLengthIndex = 0;\n  const maxLengthLengthLength = 1;\n  const maxLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLength = 1;\n  const maxLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const maxLengthLengthLengthLengthLengthLengthLengthIndex = 0;\n  const max", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      while (i < S.length && S[i]!== '.' && S[i]!== '?' && S[i]!== '!') {\n        i++;\n      }\n    }\n    i++;\n  }\n  return count;\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === -z + y && x === -y + z && x === -y - z && x === z - y && x === y + z - y && x === z - y - z && x === y - z + y && x === y + z - z && x === z - y + y && x === y - z - y && x === z + y - z && x === y + z - y && x === z - y - z && x === y - z + y && x === y + z - y && x === z - y - z && x === y - z - y && x === z + y - y && x === z - y + y && x === y + z - y - z && x === y - z - y && x === z + y - y - z && x === z - y - y && x === y - z - y + z && x === y - z - y - z && x === y + z - y - z && x === y - z - y - z && x === y - z - y + z && x === y - z - y - z && x === y + z - y - z - z && x === y + z - y - z - z && x === y - z - y - z - z && x === y - z - y - z - z && x === y + z - y - z - z && x === y - z - y - z - z && x === y - z - y - z - z && x === y + z - y - z - z && x === y - z - y - z - z && x === y - z - y - z - z && x === y - z - y - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y - z - y - z - z - z && x === y + z - y - z - z - z && x === y", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter.toUpperCase()) {\n      encoded += letter;\n    } else {\n      let vowel = letter.toUpperCase();\n      let nextLetter = message[i + 1];\n      if (nextLetter.toLowerCase() === nextLetter.toUpperCase()) {\n        encoded += vowel;\n        i++;\n      } else {\n        encoded += letter;\n      }\n    }\n  }\n  return encoded;\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = isPrime(num);\n    if (prime) {\n      max = num;\n      sum += num;\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    if (type", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n  }\n  return result\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aDigits = a.toString().split('').map(digit => parseInt(digit));\n  const bDigits = b.toString().split('').map(digit => parseInt(digit));\n  const aLength = aDigits.length;\n  const bLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aLength; i++) {\n    for (let j = 0; j < bLength; j++) {\n      product.push(aDigits[i] * bDigits[j]);\n    }\n  }\n  return product.reduce((sum, digit) => sum + digit, 0);\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const abs = Math.abs(num);\n  const intPart = Math.floor(abs);\n  const fracPart = abs - intPart;\n  if (fracPart < 0.5) {\n    return intPart;\n  } else {\n    return intPart + 1;\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
