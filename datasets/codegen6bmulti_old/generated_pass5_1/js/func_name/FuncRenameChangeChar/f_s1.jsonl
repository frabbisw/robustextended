{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const len = numbers.length;\n  if (len < 2) {\n    return false;\n  }\n  const min = numbers[0];\n  const max = numbers[len - 1];\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(numbers[i] - min) < threshold && Math.abs(numbers[i] - max) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @param {number} threshold\n  * @returns {boolean}\n  * @description\n  * Check if two numbers are within given threshold.\n  *\n  * @example\n  * hasclosEElemEnt([1.0, 2.0, 3.0], 0.5)\n  * // => false\n  * @example\n  * hasclosEElemEnt([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // => true\n  */\nconst hasclosEElemEnt = (x, y, threshold) => {\n  return Math.abs(x - y) < threshold;\n};\n\nexport {\n  hasclosEElemEnt,\n  hasclosEElemEntS\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const stack = [];\n  const stack_string = paren_string.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < stack_string.length) {\n    if (stack_string[i] === '(') {\n      stack.push(stack_string[i]);\n      i++;\n    } else if (stack_string[i] === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.pop();\n      i++;\n    } else {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.push(stack_string[i]);\n      i++;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack;\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_2 = (paren_string) => {\n  const stack = [];\n  const stack_string = paren_string.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < stack_string.length) {\n    if (stack_string[i] === '(') {\n      stack.push(stack_string[i]);\n      i++;\n    } else if (stack_string[i] === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.pop();\n      i++;\n    } else {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.push(stack_string[i]);\n      i++;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack;\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_3 = (paren_string) => {\n  const stack = [];\n  const stack_string = paren_string.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < stack_string.length) {\n    if (stack_string[i] === '(') {\n      stack.push(stack_string[i]);\n      i++;\n    } else if (stack_string[i] === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.pop();\n      i++;\n    } else {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.push(stack_string[i]);\n      i++;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack;\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups_4 = (paren_string) => {\n  const stack = [];\n  const stack_string = paren_string.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < stack_string.length) {\n    if (stack_string[i] === '(') {\n      stack.push(stack_string[i]);\n      i++;\n    } else if (stack_string[i] === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      stack.pop();\n      i++;\n    } else {\n      if (stack.length === 0)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = '';\n  let prefix = '';\n  let postfixLength = 0;\n  let prefixLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      postfix += string[i];\n      prefix += string[j];\n      postfixLength += 1;\n      prefixLength += 1;\n      i += 1;\n      j -= 1;\n    } else if (postfixLength > 0) {\n      postfix = postfix.split('').reverse().join('');\n      prefix = prefix.split('').reverse().join('');\n      postfixLength = 0;\n      prefixLength = 0;\n      i += 1;\n      j -= 1;\n    } else {\n      i += 1;\n      j -= 1;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = '';\n  let prefix = '';\n  let postfixLength = 0;\n  let prefixLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      postfix += string[i];\n      prefix += string[j];\n      postfixLength += 1;\n      prefixLength += 1;\n      i += 1;\n      j -= 1;\n    } else if (postfixLength > 0) {\n      postfix = postfix.split('').reverse().join('');\n      prefix = prefix.split('').reverse().join('');\n      postfixLength = 0;\n      prefixLength = 0;\n      i += 1;\n      j -= 1;\n    } else {\n      i += 1;\n      j -= 1;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = '';\n  let prefix = '';\n  let postfixLength = 0;\n  let prefixLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      postfix += string[i];\n      prefix += string[j];\n      postfixLength += 1;\n      prefixLength += 1;\n      i += 1;\n      j -= 1;\n    } else if (postfixLength > 0) {\n      postfix = postfix.split('').reverse().join('');\n      prefix = prefix.split('').reverse().join('');\n      postfixLength = 0;\n      prefixLength = 0;\n      i += 1;\n      j -= 1;\n    } else {\n      i += 1;\n      j -= 1;\n    }\n  }\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let postfix = '';\n  let prefix = '';\n  let postfixLength = 0;\n  let prefixLength = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      postfix += string[i];\n      prefix += string[j];\n      postfixLength += 1;\n      prefixLength += 1;\n      i += 1;\n      j -= 1;\n    } else if (postfixLength > 0) {\n      postfix = postfix.split('').reverse().join('');\n      prefix = prefix.split('').", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe2 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe3 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe4 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe5 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe6 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe7 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe8 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe9 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe10 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe11 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe12 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe13 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe14 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe15 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe16 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe17 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe18 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe19 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe20 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe21 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe22 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe23 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe24 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe25 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst makEAPiLe26 = (n) => {\n  const arr = []\n  for (let i = 1; i <= n;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStRing([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStRing([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStRing([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray = (words) => {\n  const uniqueWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i]);\n    }\n  }\n  return uniqueWords.length;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray2 = (words) => {\n  const uniqueWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i]);\n    }\n  }\n  return uniqueWords.length;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray3 = (words) => {\n  const uniqueWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i]);\n    }\n  }\n  return uniqueWords.length;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray4 = (words) => {\n  const uniqueWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i]);\n    }\n  }\n  return uniqueWords.length;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray5 = (words) => {\n  const uniqueWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i]);\n    }\n  }\n  return uniqueWords.length;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray6 = (words) => {\n  const uniqueWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (uniqueWords.indexOf(words[i]) === -1) {\n      uniqueWords.push(words[i]);\n    }\n  }\n  return uniqueWords.length;\n};\n\n/*\n  Given an array of words, return the number of unique words.\n  \n  For example:\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\" ]) == 6\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\" ]) == 7\n  worDsStArray([ \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\" ]) == 8\n  */\nconst worDsStArray7", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nmodule.exports = choOseNUm;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  const avg = (n + m) / 2\n  const nBits = Math.floor(Math.log(n) / Math.log(2))\n  const mBits = Math.floor(Math.log(m) / Math.log(2))\n  const nMask = Math.pow(2, nBits) - 1\n  const mMask = Math.pow(2, mBits) - 1\n  const nMasked = n & nMask\n  const mMasked = m & mMask\n  const nMaskedBits = nBits + mBits\n  const nMaskedBitsMask = Math.pow(2, nMaskedBits) - 1\n  const nMaskedBitsMasked = nMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBits = nMaskedBitsMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMasked = nMaskedBitsMaskedBits & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMasked = nMaskedBitsMaskedBitsMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked = nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMasked & nMaskedBitsMask\n  const nMaskedBitsMaskedBitsMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMaskedMask", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\nconsole.log(uniQueDIgits([15, 33, 1422, 1]));\nconsole.log(uniQueDIgits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  let result = [];\n  let sorted = arr.sort((a, b) => a - b);\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] >= 1 && sorted[i] <= 9) {\n      result.push(`${sorted[i]}`);\n    }\n  }\n  return result.reverse().join('');\n};\n\nconst byLenght = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.join('');\n};\n\nconst byReverse = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().join('');\n};\n\nconst byReverseLenght = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().join('');\n};\n\nconst byReverseReverse = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().join('');\n};\n\nconst byReverseReverseLenght = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().join('');\n};\n\nconst byReverseReverseReverse = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().reverse().join('');\n};\n\nconst byReverseReverseReverseLenght = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().reverse().reverse().join('');\n};\n\nconst byReverseReverseReverseReverse = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().reverse().reverse().reverse().reverse().join('');\n};\n\nconst byReverseReverseReverseReverseLenght = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n};\n\nconst byReverseReverseReverseReverseReverse = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join('');\n};\n\nconst byReverseReverseReverseReverseReverseLenght = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result.push(`${arr[i]}`);\n    }\n  }\n  return result.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_ = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_2(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_3(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_4(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_5(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_6(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_7(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_8(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_9(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_10(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_11(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_12(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_13(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_14(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_15 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f_15(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f_16 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let reverse = 0;\n    while (num > 0) {\n      reverse = reverse * 10 + num % 10;\n      num = num / 10;\n    }\n    if (reverse % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\nexport default eveNOddpalinDroMe;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const sum = num + 0;\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(couNtNuMs([-1, 11, -11]));\nconsole.log(couNtNuMs([1, 1, 2]));\nconsole.log(couNtNuMs([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x <= arr[i]);\n};\n\n// console.log(movEOneball([3, 4, 5, 1, 2]));\n// console.log(movEOneball([3, 5, 4, 1, 2]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\n// console.log(movEOneball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\n// console.log(movEOneball([3, 5, 4, 1, 2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '110'\n  */\nconst strIngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '00'\n  */\nconst strIngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('010')\n  '101'\n  */\nconst strIngNot = (a) => {\n  const aLen = a.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '00'\n  */\nconst strIngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '110'\n  */\nconst strIngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '110'\n  */\nconst strIngOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '00'\n  */\nconst strIngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('010')\n  '101'\n  */\nconst strIngNot = (a) => {\n  const aLen = a.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '00'\n  */\nconst strIngAnd = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  if (lst1Len === 0 || lst2Len === 0) {\n    return false;\n  }\n  const lst1Even = lst1.filter(x => x % 2 === 0);\n  const lst2Even = lst2.filter(x => x % 2 === 0);\n  if (lst1Even.length === 0 || lst2Even.length === 0) {\n    return false;\n  }\n  const lst1EvenLen = lst1Even.length;\n  const lst2EvenLen = lst2Even.length;\n  const lst1EvenIndex = lst1Even.findIndex(x => x === lst2Even[0]);\n  const lst2EvenIndex = lst2Even.findIndex(x => x === lst1Even[0]);\n  if (lst1EvenIndex === -1 || lst2EvenIndex === -1) {\n    return false;\n  }\n  const lst1EvenStart = lst1Even[lst1EvenIndex];\n  const lst2EvenStart = lst2Even[lst2EvenIndex];\n  const lst1EvenEnd = lst1Even[lst1EvenIndex + lst1EvenLen - 1];\n  const lst2EvenEnd = lst2Even[lst2EvenIndex + lst2EvenLen - 1];\n  const lst1EvenLength = lst1EvenEnd - lst1EvenStart + 1;\n  const lst2EvenLength = lst2EvenEnd - lst2EvenStart + 1;\n  const lst1EvenDiff = lst1EvenEnd - lst1EvenStart;\n  const lst2EvenDiff = lst2EvenEnd - lst2EvenStart;\n  const lst1EvenDiffMod = lst1EvenDiff % lst1EvenLength;\n  const lst2EvenDiffMod = lst2EvenDiff % lst2EvenLength;\n  if (lst1EvenDiffMod!== 0 || lst2EvenDiffMod!== 0) {\n    return false;\n  }\n  return true;\n};\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split('')\n  const letterCount = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (letterCount[letters[i]] === undefined) {\n      letterCount[letters[i]] = 1\n    } else {\n      letterCount[letters[i]]++\n    }\n  }\n  return letterCount\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm2 = (test) => {\n  const letters = test.split('')\n  const letterCount = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (letterCount[letters[i]] === undefined) {\n      letterCount[letters[i]] = 1\n    } else {\n      letterCount[letters[i]]++\n    }\n  }\n  return letterCount\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm3 = (test) => {\n  const letters = test.split('')\n  const letterCount = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (letterCount[letters[i]] === undefined) {\n      letterCount[letters[i]] = 1\n    } else {\n      letterCount[letters[i]]++\n    }\n  }\n  return letterCount\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm4 = (test) => {\n  const letters = test.split('')\n  const letterCount = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (letterCount[letters[i]] === undefined) {\n      letterCount[letters[i]] = 1\n    } else {\n      letterCount[letters[i]]++\n    }\n  }\n  return letterCount\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm5 = (test) => {\n  const letters = test.split('')\n  const letterCount = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (letterCount[letters[i]] === undefined) {\n      letterCount[letters[i]] = 1\n    } else {\n      letterCount[letters[i]]++\n    }\n  }\n  return letterCount\n}\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('')", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.reverse().join(''), rev.length === sLen];\n};\n\nconst revErsedeletE2 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.join(''), rev.length === sLen];\n};\n\nconst revErsedeletE3 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.reverse().join(''), rev.length === sLen];\n};\n\nconst revErsedeletE4 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.join(''), rev.length === sLen];\n};\n\nconst revErsedeletE5 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.reverse().join(''), rev.length === sLen];\n};\n\nconst revErsedeletE6 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.join(''), rev.length === sLen];\n};\n\nconst revErsedeletE7 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.reverse().join(''), rev.length === sLen];\n};\n\nconst revErsedeletE8 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.join(''), rev.length === sLen];\n};\n\nconst revErsedeletE9 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.reverse().join(''), rev.length === sLen];\n};\n\nconst revErsedeletE10 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.join(''), rev.length === sLen];\n};\n\nconst revErsedeletE11 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    if (c.indexOf(s[i])!== -1) {\n      rev.push(s[i]);\n    }\n  }\n  return [rev.reverse().join(''), rev.length === sLen];\n};\n\nconst revErsedeletE12 = (s, c) => {\n  const sLen = s.length;\n  const cLen = c.length;\n  const rev = [];\n  for (let i = sLen - 1; i >= 0; i--) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  const odd = (str) => {\n    const num = str.split('').filter(x => x % 2 === 1).length;\n    return `the number of odd elements ${num} of the ${str} input.`;\n  };\n  return lst.map(odd);\n};\n\nmodule.exports = oddcounT;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = 0;\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let i = 0;\n  let j = 0;\n  while (i < nums.length) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n      if (sum < minSum) {\n        minSum = sum;\n      }\n    }\n    i++;\n  }\n  return minSum;\n};\n\nconsole.log(minsubARraySUm([2, 3, 4, 1, 2, 4]));\nconsole.log(minsubARraySUm([-1, -2, -3]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = rows * cols\n  const maxfill = (rows, cols, buckets) => {\n    const buckets_used = 0\n    const buckets_left = buckets\n    const buckets_left_used = 0\n    const buckets_left_left = buckets\n    const buckets_left_left_used = 0\n    const buckets_left_left_left = buckets\n    const buckets_left_left_left_used = 0\n    const buckets_left_left_left_left = buckets\n    const buckets_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_used = 0\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left_left = buckets\n    const buckets_left_left_left_left_left_left_left_left_left_left_left_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArr;\n};\n\nconsole.log(sorTArrAy([1, 5, 2, 3, 4]));\nconsole.log(sorTArrAy([-2, -3, -4, -5, -6]));\nconsole.log(sorTArrAy([1, 0, 2, 3, 4]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonant-vowel-consonant (CVC) sequences.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselCVC(\"Mary had a little lamb\", 4) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"simple white space\", 2) ==> []\nselCVC(\"Hello world\", 4) ==> [\"Hello\", \"world\"]\nselCVC(\"Uncle sam\", 3) ==> [\"Uncle\", \"sam\"]\n*/\nconst selCVC = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      const cvc = selCVC(word, n - 1)\n      if (cvc.length === n) {\n        result.push(word)\n      }\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonant-vowel-consonant (CVC) sequences, in order these sequences appear in the \nstring s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselCVC(\"Mary had a little lamb\", 4) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"simple white space\", 2) ==> []\nselCVC(\"Hello world\", 4) ==> [\"Hello\", \"world\"]\nselCVC(\"Uncle sam\", 3) ==> [\"Uncle\", \"sam\"]\n*/\nconst selCVC2 = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      const cvc = selCVC2(word, n - 1)\n      if (cvc.length === n) {\n        result.push(word)\n      }\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonant-vowel-consonant (CVC) sequences, in order these sequences appear in the \nstring s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselCVC(\"Mary had a little lamb\", 4) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"simple white space\", 2) ==> []\nselCVC(\"Hello world\", 4) ==> [\"Hello\", \"world\"]\nselCVC(\"Uncle sam\", 3) ==> [\"Uncle\", \"sam\"]\n*/\nconst selCVC3 = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      const cvc = selCVC3(word, n - 1)\n      if (cvc.length === n) {\n        result.push(word)\n      }\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonant-vowel-consonant (CVC) sequences, in order these sequences appear in the \nstring s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselCVC(\"Mary had a little lamb\", 4) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselCVC(\"simple white space\", 2) ==> []\nselCVC(\"Hello world\", 4) ==> [\"Hello\", \"world\"]\nselCVC(\"Uncle sam\", 3) ==> [\"Uncle\", \"sam\"]\n*/\nconst selCVC4 = (s, n) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const vowel = /[aeiou]/i\n  const consonant = /[bcdfghjklmnpqrstvwxyz]/i\n  const wordLength = word.length\n  let i = wordLength - 1\n  let j = wordLength - 1\n  let closest = ''\n  while (i >= 0 && j >= 0) {\n    if (vowel.test(word[i]) && consonant.test(word[j])) {\n      closest = word[i]\n      break\n    }\n    i--\n    j--\n  }\n  return closest\n}\n\n/*\n  Given a string, find the longest substring without repeating characters.\n  Return the length of the longest substring.\n\n  Example:\n  substringWithoutRepeat(\"abcabcbb\") ==> \"abc\"\n  substringWithoutRepeat(\"bbbbb\") ==> \"b\"\n  substringWithoutRepeat(\"pwwkew\") ==> \"wke\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"\n  substringWithoutRepeat(\"a\") ==> \"\"\n  substringWithoutRepeat(\"\") ==> \"\"", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\n/*\n  Given a string S, return the longest palindromic substring of S.\n  A palindromic substring is a string that reads the same backwards as forwards.\n  For example:\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcdd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'\n  longestPalindrome('abcd') == 'abcd'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = lonGest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const max = arr.reduce((acc, elem, index) => {\n    if (index < k) {\n      return Math.max(acc, elem);\n    }\n    return elem;\n  }, -Infinity);\n  return arr.slice(0, k).filter(elem => elem >= max);\n};\n\nconst test = (arr, k) => {\n  const result = maxImum(arr, k);\n  console.log(`The maxImum of ${arr.join(', ')} is ${result.join(', ')}`);\n};\n\ntest([-3, -4, 5], 3);\ntest([4, -4, 4], 2);\ntest([-3, 2, 1, 2, -1, -2, 1], 1);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  const sum = odd.reduce((acc, x) => acc + x, 0)\n  return even.reduce((acc, x) => acc + x, sum)\n}\n\nconsole.log(solUtioN([5, 8, 7, 1]))\nconsole.log(solUtioN([3, 3, 3, 3, 3]))\nconsole.log(solUtioN([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addelem25 = (arr, k) => {\n  let sum = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconst getoddCOllatZ2 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ3 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ4 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ5 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ6 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ7 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ8 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ9 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ10 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ11 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ12 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ13 = (n) => {\n  let odd = [1];\n  let i = n;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  odd.reverse();\n  return odd;\n};\n\nconst getoddCOllatZ14 = (n) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = new Date(year, month - 1, day);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days.getDate()) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 && day > 31) {\n    return false;\n  }\n  if (month === 5 && day > 31) {\n    return false;\n  }\n  if (month === 7 && day > 31) {\n    return false;\n  }\n  if (month === 8 && day > 31) {\n    return false;\n  }\n  if (month === 10 && day > 31) {\n    return false;\n  }\n  if (month === 12 && day > 31) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe2 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = new Date(year, month - 1, day);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > days.getDate()) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 3 && day > 31) {\n    return false;\n  }\n  if (month === 5 && day > 31) {\n    return false;\n  }\n  if (month === 7 && day > 31) {\n    return false;\n  }\n  if (month === 8 && day > 31) {\n    return false;\n  }\n  if (month === 10 && day > 31) {\n    return false;\n  }\n  if (month === 12 && day > 31) {\n    return false;\n  }\n  return true;\n};\n\nconst date = '03-11-2000';\nconsole.log(valIdDaTe(date));\nconsole.log(valIdDaTe2(date));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const len = sorted.length;\n  let i = 0;\n  while (i < len - 1) {\n    if (sorted[i] === sorted[i + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default isSOrteD;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) {\n    return \"NO\";\n  }\n  const [start3, end3] = [start1, end2];\n  const [start4, end4] = [start2, end1];\n  const [start5, end5] = [start3, end4];\n  const [start6, end6] = [start4, end5];\n  const [start7, end7] = [start5, end6];\n  const [start8, end8] = [start6, end7];\n  const [start9, end9] = [start7, end8];\n  const [start10, end10] = [start8, end9];\n  const [start11, end11] = [start9, end10];\n  const [start12, end12] = [start10, end11];\n  const [start13, end13] = [start11, end12];\n  const [start14, end14] = [start12, end13];\n  const [start15, end15] = [start13, end14];\n  const [start16, end16] = [start14, end15];\n  const [start17, end17] = [start15, end16];\n  const [start18, end18] = [start16, end17];\n  const [start19, end19] = [start17, end18];\n  const [start20, end20] = [start18, end19];\n  const [start21, end21] = [start19, end20];\n  const [start22, end22] = [start20, end21];\n  const [start23, end23] = [start21, end22];\n  const [start24, end24] = [start22, end23];\n  const [start25, end25] = [start23, end24];\n  const [start26, end26] = [start24, end25];\n  const [start27, end27] = [start25, end26];\n  const [start28, end28] = [start26, end27];\n  const [start29, end29] = [start27, end28];\n  const [start30, end30] = [start28, end29];\n  const [start31, end31] = [start29, end30];\n  const [start32, end32] = [start30, end31];\n  const [start33, end33] = [start31, end32];\n  const [start34, end34] = [start32, end33];\n  const [start35, end35] = [start33, end34];\n  const [start36, end36] = [start34, end35];\n  const [start37, end37] = [start35, end36];\n  const [start38, end38] = [start36, end37];\n  const [start39, end39] = [start37, end38];\n  const [start40, end40] = [start38, end39];\n  const [start41, end41] = [start39, end40];\n  const [start42, end42] = [start40, end41];\n  const [start43, end43] = [start41, end42];\n  const [start44, end44] = [start42, end43];\n  const [start45, end45] = [start43, end44];\n  const [start46, end46] = [start44, end45];\n  const [start47, end47] = [start45, end46];\n  const [start48, end48] = [start46, end47];\n  const [start49, end49] = [start47, end48];\n  const [start50, end50] = [start48, end49];\n  const [start51, end51] = [start49, end50];\n  const [start52, end52] = [start50, end51];\n  const [start53, end53] = [start51, end52];\n  const [start54, end54] = [start52, end53];\n  const [start55, end55] = [start53, end54];\n  const [start56, end56] = [start54, end55];\n  const [start57, end57] = [start55, end56];\n  const [start58, end58] = [start56, end57];\n  const [start59, end59] = [start57, end58];\n  const [start60, end60] = [start58, end59];\n  const [start61, end61] = [start59, end60];\n  const [start62, end62] = [start60, end61];\n  const [start63, end63] = [start61, end62];\n  const [start64, end64] = [start62, end63];\n  const [start65, end65] = [start63, end64];\n  const [start66, end66] = [start64, end65];\n  const [start67, end67] = [start65, end66];\n  const [start68, end68] = [start66, end67];\n  const [start", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sign = arr.reduce((acc, curr) => {\n    if (curr > 0) {\n      acc.push(1)\n    } else if (curr < 0) {\n      acc.push(-1)\n    } else {\n      acc.push(0)\n    }\n    return acc\n  }, [])\n  return sum * product * sign.reduce((acc, curr) => acc + curr, 0)\n}\n\nconsole.log(proDSigNs([1, 2, 2, -4]))\nconsole.log(proDSigNs([0, 1]))\nconsole.log(proDSigNs([]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = grid[0][0];\n  dp[1] = grid[0][1];\n  dp[2] = grid[0][2];\n  dp[3] = grid[1][0];\n  dp[4] = grid[1][1];\n  dp[5] = grid[1][2];\n  dp[6] = grid[2][0];\n  dp[7] = grid[2][1];\n  dp[8] = grid[2][2];\n  for (let i = 3; i < n; i++) {\n    dp[i] = grid[i][0];\n    for (let j = 1; j < m; j++) {\n      if (dp[i - 1] < dp[i]) {\n        dp[i] = dp[i - 1];\n      }\n      if (dp[i - 1] < dp[i] && dp[i - 1] < dp[i + 1]) {\n        dp[i] = Math.min(dp[i - 1], dp[i + 1]);\n      }\n    }\n  }\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(dp[i]);\n  }\n  return res;\n};\n\nexport { minpath };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR2(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR2(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR3 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR3(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR3(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR4 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR4(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR4(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR5 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR5(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR5(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR6 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR6(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR6(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR7 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR7(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR7(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR8 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR8(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR8(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR9 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greAtesTCommOnDIvisoR9(b, a);\n  }\n  const d = a % b;\n  return b === d? a : greAtesTCommOnDIvisoR9(b, a - d);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAt", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 1; i < n; i++) {\n    tri.push(tri[i - 1]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digIts(1));\nconsole.log(digIts(4));\nconsole.log(digIts(235));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  const stack = [];\n  let i = 0;\n  while (i < string.length) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== '[') {\n        return false;\n      }\n    }\n    i++;\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNEsteD('[[]]'));\nconsole.log(isNEsteD('[]]]]]]][[[[[]'));\nconsole.log(isNEsteD('[][]'));\nconsole.log(isNEsteD('[]'));\nconsole.log(isNEsteD('[[][]]'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum * sum;\n};\n\nconsole.log(sumsqaRes([1,2,3]));\nconsole.log(sumsqaRes([1,4,9]));\nconsole.log(sumsqaRes([1,3,5,7]));\nconsole.log(sumsqaRes([1.4,4.2,0]));\nconsole.log(sumsqaRes([-2.4,1,1]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAlpha = /[a-zA-Z]/.test(lastChar)\n  const isNotWord = /[^a-zA-Z ]/.test(lastChar)\n  return isAlpha && isNotWord\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeNumer = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isNumer = /[0-9]/.test(lastChar)\n  const isNotWord = /[^0-9 ]/.test(lastChar)\n  return isNumer && isNotWord\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALe = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAlpha = /[a-zA-Z]/.test(lastChar)\n  const isNotWord = /[^a-zA-Z ]/.test(lastChar)\n  return isAlpha && isNotWord\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeT = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAlpha = /[a-zA-Z]/.test(lastChar)\n  const isNotWord = /[^a-zA-Z ]/.test(lastChar)\n  return isAlpha && isNotWord\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeF = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAlpha = /[a-zA-Z]/.test(lastChar)\n  const isNotWord = /[^a-zA-Z ]/.test(lastChar)\n  return isAlpha && isNotWord\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeE = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAlpha = /[a-zA-Z]/.test(lastChar)\n  const isNotWord = /[^a-zA-Z ]/.test(lastChar)\n  return isAlpha && isNotWord\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    let m = Math.floor((i + j) / 2);\n    if (arr[m] < arr[i]) {\n      i = m + 1;\n    } else if (arr[m] > arr[i]) {\n      j = m - 1;\n    } else {\n      return m;\n    }\n  }\n  return -1;\n};\n\nexport default canarraNge;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const max = -Infinity;\n  const min = Infinity;\n  const maxIndex = lst.length - 1;\n  const minIndex = 0;\n  const maxValue = lst[maxIndex];\n  const minValue = lst[minIndex];\n  let maxIndex2 = maxIndex;\n  let minIndex2 = minIndex;\n  let maxValue2 = maxValue;\n  let minValue2 = minValue;\n  let maxIndex3 = maxIndex;\n  let minIndex3 = minIndex;\n  let maxValue3 = maxValue;\n  let minValue3 = minValue;\n  let maxIndex4 = maxIndex;\n  let minIndex4 = minIndex;\n  let maxValue4 = maxValue;\n  let minValue4 = minValue;\n  let maxIndex5 = maxIndex;\n  let minIndex5 = minIndex;\n  let maxValue5 = maxValue;\n  let minValue5 = minValue;\n  let maxIndex6 = maxIndex;\n  let minIndex6 = minIndex;\n  let maxValue6 = maxValue;\n  let minValue6 = minValue;\n  let maxIndex7 = maxIndex;\n  let minIndex7 = minIndex;\n  let maxValue7 = maxValue;\n  let minValue7 = minValue;\n  let maxIndex8 = maxIndex;\n  let minIndex8 = minIndex;\n  let maxValue8 = maxValue;\n  let minValue8 = minValue;\n  let maxIndex9 = maxIndex;\n  let minIndex9 = minIndex;\n  let maxValue9 = maxValue;\n  let minValue9 = minValue;\n  let maxIndex10 = maxIndex;\n  let minIndex10 = minIndex;\n  let maxValue10 = maxValue;\n  let minValue10 = minValue;\n  let maxIndex11 = maxIndex;\n  let minIndex11 = minIndex;\n  let maxValue11 = maxValue;\n  let minValue11 = minValue;\n  let maxIndex12 = maxIndex;\n  let minIndex12 = minIndex;\n  let maxValue12 = maxValue;\n  let minValue12 = minValue;\n  let maxIndex13 = maxIndex;\n  let minIndex13 = minIndex;\n  let maxValue13 = maxValue;\n  let minValue13 = minValue;\n  let maxIndex14 = maxIndex;\n  let minIndex14 = minIndex;\n  let maxValue14 = maxValue;\n  let minValue14 = minValue;\n  let maxIndex15 = maxIndex;\n  let minIndex15 = minIndex;\n  let maxValue15 = maxValue;\n  let minValue15 = minValue;\n  let maxIndex16 = maxIndex;\n  let minIndex16 = minIndex;\n  let maxValue16 = maxValue;\n  let minValue16 = minValue;\n  let maxIndex17 = maxIndex;\n  let minIndex17 = minIndex;\n  let maxValue17 = maxValue;\n  let minValue17 = minValue;\n  let maxIndex18 = maxIndex;\n  let minIndex18 = minIndex;\n  let maxValue18 = maxValue;\n  let minValue18 = minValue;\n  let maxIndex19 = maxIndex;\n  let minIndex19 = minIndex;\n  let maxValue19 = maxValue;\n  let minValue19 = minValue;\n  let maxIndex20 = maxIndex;\n  let minIndex20 = minIndex;\n  let maxValue20 = maxValue;\n  let minValue20 = minValue;\n  let maxIndex21 = maxIndex;\n  let minIndex21 = minIndex;\n  let maxValue21 = maxValue;\n  let minValue21 = minValue;\n  let maxIndex22 = maxIndex;\n  let minIndex22 = minIndex;\n  let maxValue22 = maxValue;\n  let minValue22 = minValue;\n  let maxIndex23 = maxIndex;\n  let minIndex23 = minIndex;\n  let maxValue23 = maxValue;\n  let minValue23 = minValue;\n  let maxIndex24 = maxIndex;\n  let minIndex24 = minIndex;\n  let maxValue24 = maxValue;\n  let minValue24 = minValue;\n  let maxIndex25 = maxIndex;\n  let minIndex25 = minIndex;\n  let maxValue25 = maxValue;\n  let minValue25 = minValue;\n  let maxIndex26 = maxIndex;\n  let minIndex26 = minIndex;\n  let maxValue26 = maxValue;\n  let minValue26 = minValue;\n  let maxIndex27 = maxIndex;\n  let minIndex27 = minIndex;\n  let maxValue27 = maxValue;\n  let minValue27 = minValue;\n  let maxIndex28 = maxIndex;\n  let minIndex28 = minIndex;\n  let maxValue28 = maxValue;\n  let minValue28 = minValue;\n  let maxIndex29 = maxIndex;\n  let minIndex29 = minIndex;\n  let maxValue29 = maxValue;\n  let minValue29 = minValue;\n  let maxIndex30 = maxIndex;\n  let minIndex30 = minIndex;\n  let maxValue30 = maxValue;\n  let minValue30 = minValue;\n  let maxIndex31 = maxIndex;\n  let minIndex31 = minIndex;\n  let maxValue31 = maxValue;\n  let minValue31 = minValue;\n  let maxIndex32 = maxIndex;\n  let minIndex32 = minIndex;\n  let maxValue32 = maxValue;\n  let minValue32 = minValue;\n  let maxIndex33 = maxIndex;\n  let minIndex33 = minIndex;\n  let maxValue33 = maxValue;\n  let minValue33 = minValue;\n  let maxIndex34 = maxIndex;\n  let minIndex34 = minIndex;\n  let maxValue34 = maxValue;\n  let minValue34 = minValue;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else {\n    return 0;\n  }\n};\n\nconst compare2 = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else {\n    return 0;\n  }\n};\n\nconst compare3 = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else {\n    return 0;\n  }\n};\n\nconst compare4 = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else {\n    return 0;\n  }\n};\n\nconst compare5 = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else {\n    return 0;\n  }\n};\n\nconst compare6 = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : a < b? -1 : 0;\n  } else if (typeof a ==='string' && typeof b ==='string') {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  const sum = n;\n  const isEven = (n) => n % 2 === 0;\n  const isOdd = (n) => n % 2!== 0;\n  const isPositive = (n) => n > 0;\n  const isNegative = (n) => n < 0;\n  const isEvenOrOdd = (n) => isEven(n) || isOdd(n);\n  const isPositiveOrNegative = (n) => isPositive(n) || isNegative(n);\n  const isEvenOrOddOrPositiveOrNegative = (n) => isEvenOrOdd(n) || isPositiveOrNegative(n);\n  const isPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegative = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrOdd(n) || isEvenOrOdd(n);\n  const isPositiveOrNegativeOrEvenOrOddOrPositiveOrNegativeOrEvenOrOdd = (n) => isPositiveOrNegative(n) || isEvenOrOddOrPositiveOrNegative(n) || isEvenOrO", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL(n - 1) * speCialfactoRiaL(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL2(n - 1) * speCialfactoRiaL2(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL3(n - 1) * speCialfactoRiaL3(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL4(n - 1) * speCialfactoRiaL4(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL5(n - 1) * speCialfactoRiaL5(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL6(n - 1) * speCialfactoRiaL6(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL7(n - 1) * speCialfactoRiaL7(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL8(n - 1) * speCialfactoRiaL8(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL9(n - 1) * speCialfactoRiaL9(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL10(n - 1) * speCialfactoRiaL10(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL11(n - 1) * speCialfactoRiaL11(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL12(n - 1) * speCialfactoRiaL12(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL13(n - 1) * speCialfactoRiaL13(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * speCialfactoRiaL14(n - 1) * speCialfactoRiaL14(n - 2) *... * 1;\n};\n\n/*\n  The function will receive an integer as input and should return the special", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const prefixes = []\n  const prefix = ''\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allsuffixes('abc')\n  ['', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allsuffixes = (string) => {\n  const suffixes = []\n  const suffix = ''\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes2 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes3 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes4 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes5 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes6 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes7 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes8 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allprefIxesAndSuffixes9 = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffixes('abc')\n  ['a', 'ab', 'abc', '', 'b', 'c', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac2 = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac3 = (text) => {\n  return text.replace(/[_]+/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac4 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac5 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac6 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac7 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac8 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac9 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixspac10 = (text) => {\n  return text.replace(/[_]+/g, '-')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === -1) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 0) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 2) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 1) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 4) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 5) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 6) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 7) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 8) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 9) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 10) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 11) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 12) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 13) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 14) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 15) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 16) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 17) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 18) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 19) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 20) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 21) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 22) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 23) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 24) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 25) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 26) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 27) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 28) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 29) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 30) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 31) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 32) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 33) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 34) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 35) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 36) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 37) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === file_name.length - 38) {\n    return 'No';\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  let words = sentence.split(' ')\n  let newWords = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let newWord = ''\n    while (word.length > 0) {\n      let length = getPrimeNumber(word.length)\n      let newWord = newWord + word.substr(0, length)\n      word = word.substr(length)\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst getPrimeNumber = (num) => {\n  let prime = []\n  for (let i = 2; i <= num; i++) {\n    if (prime.indexOf(i) === -1) {\n      prime.push(i)\n    }\n  }\n  return prime[prime.length - 1]\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n\n  return false;\n};\n\nconsole.log(simPlifY(\"1/5\", \"5/1\"));\nconsole.log(simPlifY(\"1/6\", \"2/1\"));\nconsole.log(simPlifY(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  const arr = nums.filter(x => x > 10 && (x % 2 === 1 || x % 3 === 1 || x % 5 === 1 || x % 7 === 1 || x % 9 === 1));\n  return arr.length;\n};\n\nconsole.log(speCialfilteR([15, -73, 14, -15]));\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]));\nconsole.log(speCialfilteR([1, 3, 5, 7, 9]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] === 0) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple2 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] === 0) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple3 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          count++\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple4 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          if (a[i] + a[j] + a[k] + a[l] === 0) {\n            count++\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple5 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          for (let m = l + 1; m < n; m++) {\n            if (a[i] + a[j] + a[k] + a[l] + a[m] === 0) {\n              count++\n            }\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple6 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          for (let m = l + 1; m < n; m++) {\n            for (let n = m + 1; n < n; n++) {\n              if (a[i] + a[j] + a[k] + a[l] + a[m] + a[n] === 0) {\n                count++\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple7 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          for (let m = l + 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  if (planet1Index === -1 || planet2Index === -1) {\n    return () => []\n  }\n  const planet1Orbit = [planet1, planet2]\n  const planet2Orbit = [planet2, planet1]\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1)\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2)\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitEnd = planet1OrbitIndex + planet1OrbitLength\n  const planet2OrbitEnd = planet2OrbitIndex + planet2OrbitLength\n  const planet1OrbitStart = planet1OrbitIndex\n  const planet2OrbitStart = planet2OrbitIndex\n  const planet1OrbitEndInclusive = planet1OrbitEnd + 1\n  const planet2OrbitEndInclusive = planet2OrbitEnd + 1\n  const planet1OrbitStartInclusive = planet1OrbitStart + 1\n  const planet2OrbitStartInclusive = planet2OrbitStart + 1\n  const planet1OrbitEndExclusive = planet1OrbitEnd\n  const planet2OrbitEndExclusive = planet2OrbitEnd\n  const planet1OrbitStartExclusive = planet1OrbitStart\n  const planet2OrbitStartExclusive = planet2OrbitStart\n  const planet1OrbitEndInclusiveExclusive = planet1OrbitEndInclusive\n  const planet2OrbitEndInclusiveExclusive = planet2OrbitEndInclusive\n  const planet1OrbitStartInclusiveExclusive = planet1OrbitStartInclusive\n  const planet2OrbitStartInclusiveExclusive = planet2OrbitStartInclusive\n  const planet1OrbitEndExclusiveExclusive = planet1OrbitEndExclusive\n  const planet2OrbitEndExclusiveExclusive = planet2OrbitEndExclusive\n  const planet1OrbitStartExclusiveExclusive = planet1OrbitStartExclusive\n  const planet2OrbitStartExclusiveExclusive = planet2OrbitStartExclusive\n  const planet1OrbitEndInclusiveExclusiveExclusive = planet1OrbitEndInclusiveExclusive\n  const planet2OrbitEndInclusiveExclusiveExclusive = planet2OrbitEndInclusiveExclusive\n  const planet1OrbitStartInclusiveExclusiveExclusive = planet1OrbitStartInclusiveExclusive\n  const planet2OrbitStartInclusiveExclusiveExclusive = planet2OrbitStartInclusiveExclusive\n  const planet1OrbitEndExclusiveExclusiveExclusive = planet1OrbitEndExclusiveExclusive\n  const planet2OrbitEndExclusiveExclusiveExclusive = planet2OrbitEndExclusiveExclusive\n  const planet1OrbitStartExclusiveExclusiveExclusive = planet1OrbitStartExclusiveExclusive\n  const planet2OrbitStartExclusiveExclusiveExclusive = planet2OrbitStartExclusiveExclusive\n  const planet1OrbitEndInclusiveExclusiveExclusiveExclusive = planet1OrbitEndInclusiveExclusiveExclusive\n  const planet2OrbitEndInclusiveExclusiveExclusiveExclusive = planet2OrbitEndInclusiveExclusiveExclusive\n  const planet1OrbitStartInclusiveExclusiveExclusiveExclusive = planet1OrbitStartInclusiveExclusiveExclusive\n  const planet2OrbitStartInclusiveExclusiveExclusiveExclusive = planet2OrbitStartInclusiveExclusiveExclusive\n  const planet1OrbitEndExclusiveExclusiveExclusiveExclusive = planet1OrbitEndExclusiveExclusiveExclusive\n  const planet2OrbitEndExclusiveExclusiveExclusiveExclusive = planet2OrbitEndExclusiveExclusiveExclusive\n  const planet1OrbitStartExclusiveExclusiveExclusiveExclusive = planet1OrbitStartExclusiveExclusiveExclusive\n  const planet2OrbitStartExclusiveExclusiveExclusiveExclusive = planet2OrbitStartExclusiveExclusiveExclusive\n  const planet1OrbitEndInclusiveExclusiveExclusiveExclusiveExclusive = planet1OrbitEndInclusiveExclusiveExclusiveExclusive\n  const planet2OrbitEndInclusiveExclusiveExclusiveExclusiveExclusive = planet2OrbitEndInclusiveExclusiveExclusiveExclusive\n  const planet1OrbitStartInclusiveExclusiveExclusiveExclusiveExclusive = planet1OrbitStartInclusiveExclusiveExclusiveExclusive\n  const planet2OrbitStartInclusiveExclusiveExclusiveExclusiveExclusive = planet2OrbitStartInclusiveExclusiveExclusiveExclusive\n  const planet1OrbitEndExclusiveExclusiveExclusiveExclusiveExclusive = planet1OrbitEndExclusiveExclusiveExclusiveExclusive\n  const planet2OrbitEndExclusiveExclusiveExclusiveExclusiveExclusive = planet2OrbitEndExclusiveExclusiveExclusiveExclusive\n  const planet1OrbitStartExclusiveExclusiveExclusiveExclusiveExclusive = planet1OrbitStartExclusiveExclusiveExclusiveExclusive\n  const planet2OrbitStartExclusiveExclusiveExclusiveExclusiveExclusive = planet2OrbitStartExclusiveExclusiveExclusiveExclusive\n  const planet1OrbitEndInclusiveExclusiveExclusiveExclusiveExclusiveExclusive = planet1OrbitEndInclusiveExclusiveExclusiveExclusiveExclusive\n  const planet2OrbitEndInclusiveExclusiveExclusiveExclusiveExclusiveExclusive = planet2OrbitEndInclusiveExclusiveExclusiveExclusiveExclusive\n  const planet1OrbitStartInclusiveExclusiveExclusiveExclusive", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    }\n  }\n  return sorted.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1\n    } else if (a.length < b.length) {\n      return -1\n    } else {\n      return a > b? 1 : -1\n    }\n  })\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    const word = lst[i]\n    if (word.length % 2 === 1) {\n      sorted.push(word)\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe2 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe3 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe4 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe5 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe6 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe7 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe8 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe9 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe10 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe11 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe12 = (n) => {\n  let s = '';\n  for (let i = 0; i <= n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOry31 = (n, x, y) => {\n  if (n % 2 === 0) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, x) => acc + x * x, 0)\n  return sum\n}\n\nconsole.log(douBleTHeDifFerEnce([1, 3, 2, 0]))\nconsole.log(douBleTHeDifFerEnce([-1, -2, 0]))\nconsole.log(douBleTHeDifFerEnce([9, -2]))\nconsole.log(douBleTHeDifFerEnce([0]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const gameLen = game.length\n  const guessLen = guess.length\n  const diff = []\n  for (let i = 0; i < gameLen; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(score - guess))\n    }\n  }\n  return diff\n}\n\nconst test = () => {\n  const game = [1,2,3,4,5,1]\n  const guess = [1,2,3,4,2,-2]\n  const diff = comPare(game, guess)\n  console.log(diff)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const capExtensions = extensions.map(ext => ext.toUpperCase()).sort((a, b) => a.localeCompare(b));\n  const strength = capExtensions.reduce((acc, ext) => {\n    const capExt = ext.toUpperCase();\n    const strength = capExt.length - capExt.toLowerCase().length;\n    return strength > acc? strength : acc;\n  }, -1);\n  return `${class_name}.${capExtensions[strength]}`;\n};\n\nmodule.exports = strOngeStExtEnsIon;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const lenA = a.length;\n  const lenB = b.length;\n  let i = 0;\n  let j = 0;\n  while (i < lenA && j < lenB) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] === b[j] + a[i + 1] && a[i + 1] === b[j] + a[i + 2]) {\n      i += 3;\n      j += 2;\n    } else if (a[i] === b[j] + a[i + 1] && a[i + 1] === b[j] + a[i + 2] && a[i + 2] === b[j] + a[i + 3]) {\n      i += 4;\n      j += 3;\n    } else {\n      return false;\n    }\n  }\n  return j === lenB;\n};\n\nconsole.log(cycPattErnChEck(\"abcd\",\"abd\"));\nconsole.log(cycPattErnChEck(\"hello\",\"ell\"));\nconsole.log(cycPattErnChEck(\"whassup\",\"psus\"));\nconsole.log(cycPattErnChEck(\"abab\",\"baa\"));\nconsole.log(cycPattErnChEck(\"efef\",\"eeff\"));\nconsole.log(cycPattErnChEck(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    let count = 0;\n    let odd = 0;\n    let even = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            odd++;\n        }\n        num = num / 2;\n    }\n    return [count, odd];\n};\n\nmodule.exports = eveNOddcount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let roman = [\n    'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII',\n    'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII',\n    'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX', 'XXX', 'XXXI',\n    'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII', 'XXXVIII', 'XXXIX',\n    'XL', 'XLI', 'XLII', 'XLIII', 'XLIV', 'XLV', 'XLVI', 'XLVII', 'XLVIII',\n    'XLIX', 'L', 'LI', 'LII', 'LIII', 'LIV', 'LV', 'LVI', 'LVII', 'LVIII',\n    'LIX', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', 'M'\n  ];\n\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    let current = number % 10;\n    number = number / 10;\n    result = roman[current] + result;\n    i++;\n  }\n  return result.toLowerCase();\n};\n\nconsole.log(inttoMiNiRomAn(19));\nconsole.log(inttoMiNiRomAn(152));\nconsole.log(inttoMiNiRomAn(426));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (map.has(word)) {\n      map.set(word, map.get(word) + 1);\n    } else {\n      map.set(word, 1);\n    }\n  }\n  const max = words[0];\n  for (let [key, value] of map) {\n    if (value > map.get(max)) {\n      max = key;\n    }\n  }\n  return max;\n};\n\nconsole.log(finDMax([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(finDMax([\"name\", \"enam\", \"game\"])); // \"enam\"\nconsole.log(finDMax([\"aaaaaaa\", \"bb\",\"cc\"])); // \"\"aaaaaaa\"\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, need - number];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test28 = [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, return the number of distinct characters in the string\n  >>> couNtDiSt", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n\n  let result = 0\n\n  for (let i = 0; i < operatorLength; i++) {\n    if (operatorList[i] === '+') {\n      result += operandList[i]\n    } else if (operatorList[i] === '-') {\n      result -= operandList[i]\n    } else if (operatorList[i] === '*') {\n      result *= operandList[i]\n    } else if (operatorList[i] === '/') {\n      result /= operandList[i]\n    } else if (operatorList[i] === '**') {\n      result = Math.pow(result, operandList[i])\n    }\n  }\n\n  return result\n}\n\nconst testALgebRa = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n\n  let result = 0\n\n  for (let i = 0; i < operatorLength; i++) {\n    if (operatorList[i] === '+') {\n      result += operandList[i]\n    } else if (operatorList[i] === '-') {\n      result -= operandList[i]\n    } else if (operatorList[i] === '*') {\n      result *= operandList[i]\n    } else if (operatorList[i] === '/') {\n      result /= operandList[i]\n    } else if (operatorList[i] === '**') {\n      result = Math.pow(result, operandList[i])\n    }\n  }\n\n  return result\n}\n\nconst testALgebRa2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n\n  let result = 0\n\n  for (let i = 0; i < operatorLength; i++) {\n    if (operatorList[i] === '+') {\n      result += operandList[i]\n    } else if (operatorList[i] === '-') {\n      result -= operandList[i]\n    } else if (operatorList[i] === '*') {\n      result *= operandList[i]\n    } else if (operatorList[i] === '/') {\n      result /= operandList[i]\n    } else if (operatorList[i] === '**') {\n      result = Math.pow(result, operandList[i])\n    }\n  }\n\n  return result\n}\n\nconst testALgebRa3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n\n  let result = 0\n\n  for (let i = 0; i < operatorLength; i++) {\n    if (operatorList[i] === '+') {\n      result += operandList[i]\n    } else if (operatorList[i] === '-') {\n      result -= operandList[i]\n    } else if (operatorList[i] === '*') {\n      result *= operandList[i]\n    } else if (operatorList[i] === '/') {\n      result /= operandList[i]\n    } else if (operatorList[i] === '**') {\n      result = Math.pow(result, operandList[i])\n    }\n  }\n\n  return result\n}\n\nconst testALgebRa4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = []\n  const operandList = []\n\n  for (let i = 0; i < operatorLength; i++) {\n    operatorList.push(operator[i])\n  }\n\n  for (let i = 0; i < operandLength; i++) {\n    operandList.push(operand[i])\n  }\n\n  let result = 0\n\n  for (let i = 0; i < operatorLength; i++) {\n    if (operatorList[i] === '+') {\n      result += operandList[i]\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solVe('1234'));\nconsole.log(solVe('ab'));\nconsole.log(solVe('#a@C'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = strIngTOMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst genEratEInteGerS20 = (a, b) => {\n  let result = [];\n  for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\nconst parSeMuSic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\nconst parSeMuSic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\nconst parSeMuSic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\nconst parSeMuSic6 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\nconst parSeMuSic7 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\nconst parSeMuSic8 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, find the longest substring without repeating characters.\n  Return the length of the longest substring.\n  >>> longestSubstring('abcabcbb')\n  3\n  >>> longestSubstring('bbbbb')\n  1\n  >>> longestSubstring('aaaaa')\n  1\n  >>> longestSubstring('bbbbb')\n  1\n  >>> longestSubstring('bbbbbbbb')\n  1\n  >>> longestSubstring('bbbbbbbbb')\n  2\n  >>> longestSubstring('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return -1\n    return 1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('nine two six')\n  'nine two six'\n  */\nconst sorTNumBersReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('nine two six')\n  'nine two six'\n  */\nconst sorTNumBersReverseReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBersReverseReverseReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBersReverseReverseReverseReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('nine two six')\n  'nine two six'\n  */\nconst sorTNumBersReverseReverseReverseReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorTNumBers('nine two six')\n  'nine two six'\n  */\nconst sorTNumBersReverseReverseReverseReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBersReverseReverseReverseReverse = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => {\n    if (a === b) return 0\n    if (a < b) return 1\n    return -1\n  })", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErDec = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDec = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDec = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDecDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDecDec = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDecDecDec = (number) => {\n  const intPart = Math.floor(number", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts2 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts3 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts4 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts5 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts6 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts7 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts8 = (numbers) => {\n  const sorted = numbers.slice().sort();\n  const middle = sorted[Math.floor(sorted.length / 2)];\n  const closest = sorted[sorted.indexOf(middle) - 1];\n  return [closest, middle];\n};\n\n/*\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(x => (x - min) * scale)\n}\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareList = (numbers) => numbers.map(x => x * x)\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filTerObjs = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param values\n  * @returns {Array}\n  */\nconst filTerArrs = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  */\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filTerLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filTerObjs = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param values\n  * @returns {Array}\n  */\nconst filTerArrs = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  */\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filTerLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param values\n  * @returns {Array}\n  */\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param values\n  * @returns {Array}\n  */\nconst filTerObjs = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param values\n  * @returns {Array}\n  */\nconst filTerArrs = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param values\n  * @returns {Array}\n  */\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param values\n  * @returns {Array}\n  */\nconst filTerLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param values\n  * @returns {Array}\n  */\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param values\n  * @returns {Array}\n  */\nconst filTerStrings = (values) => {\n  return values.filter(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length;\n};\n\n/* Return a string of given length\n  >>> strPad('')\n  ''\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n  'abc'\n  >>> strPad('abc', 5)\n  'abc'\n  */\nconst strPad = (string, length) => {\n  return string + Array(length - string.length + 1).join(' ');\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadLeft = (string, length) => {\n  return Array(length - string.length + 1).join(' ') + string;\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadRight = (string, length) => {\n  return string + Array(length - string.length + 1).join(' ');\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenter = (string, length) => {\n  return strPadLeft(strPadRight(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterLeft = (string, length) => {\n  return strPadLeft(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/* Return a string of given length\n  >>> strPad('abc', 3)\n  'abc'\n  >>> strPad('abc', 4)\n 'abc'\n  >>> strPad('abc', 5)\n 'abc'\n  */\nconst strPadCenterRight = (string, length) => {\n  return strPadRight(strPadCenter(string, length), length);\n};\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let result = 1;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr(15)\n  16\n  */\nconst larGestdivisOr2 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr2(15)\n  16\n  */\nconst larGestdivisOr3 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr3(15)\n  16\n  */\nconst larGestdivisOr4 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr4(15)\n  16\n  */\nconst larGestdivisOr5 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr5(15)\n  16\n  */\nconst larGestdivisOr6 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr6(15)\n  16\n  */\nconst larGestdivisOr7 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr7(15)\n  16\n  */\nconst larGestdivisOr8 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr8(15)\n  16\n  */\nconst larGestdivisOr9 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr9(15)\n  16\n  */\nconst larGestdivisOr10 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr10(15)\n  16\n  */\nconst larGestdivisOr11 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr11(15)\n  16\n  */\nconst larGestdivisOr12 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr12(15)\n  16\n  */\nconst larGestdivisOr13 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr13(15)\n  16\n  */\nconst larGestdivisOr14 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr14(15)\n  16\n  */\nconst larGestdivisOr15 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr15(15)\n  16\n  */\nconst larGestdivisOr16 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr16(15)\n  16\n  */\nconst larGestdivisOr17 = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  const primeFactors = [];\n  const isPrime = (n) => {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  };\n  const primeFactors = (n) => {\n    if (isPrime(n)) {\n      primeFactors.push(n);\n    }\n    return primeFactors;\n  };\n  const factorization = (n) => {\n    const factors = primeFactors(n);\n    const factorsLength = factors.length;\n    for (let i = 0; i < factorsLength; i++) {\n      const factor = factors[i];\n      const factorization = factorization(factor);\n      const factorizationLength = factorization.length;\n      for (let j = 0; j < factorizationLength; j++) {\n        const factorizationFactor = factorization[j];\n        const factorizationFactorLength = factorizationFactor.length;\n        for (let k = 0; k < factorizationFactorLength; k++) {\n          const factorizationFactorFactor = factorizationFactor[k];\n          factors.push(factorizationFactorFactor);\n        }\n      }\n    }\n    return factors;\n  };\n  const factorization = factorization(n);\n  const factorizationLength = factorization.length;\n  for (let i = 0; i < factorizationLength; i++) {\n    const factorizationFactor = factorization[i];\n    const factorizationFactorLength = factorizationFactor.length;\n    for (let j = 0; j < factorizationFactorLength; j++) {\n      const factorizationFactorFactor = factorizationFactor[j];\n      factors.push(factorizationFactorFactor);\n    }\n  }\n  return factors;\n};\n\nmodule.exports = facToriZe;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]) {\n      continue;\n    }\n    seen[numbers[i]] = true;\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nmodule.exports = remOveDUplicAteS;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> fliPCase('Hello')\n  'hello'\n  */\nconst fliPCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliUCase('Hello')\n  'hello'\n  */\nconst fliUCase = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all lowercase letters replaced by their uppercase counterparts.\n  >>> fliLCase('Hello')\n  'HELLO'\n  */\nconst fliLCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all letters replaced by their uppercase counterparts.\n  >>> fliUCase('Hello')\n  'HELLO'\n  */\nconst fliUCaseAll = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all letters replaced by their lowercase counterparts.\n  >>> fliLCase('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliUCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all lowercase letters replaced by their uppercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'HELLO'\n  */\nconst fliUCaseAll = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all letters replaced by their uppercase counterparts.\n  >>> fliUCaseAll('Hello')\n  'HELLO'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  For a given string, return a string with all uppercase letters replaced by their lowercase counterparts.\n  >>> fliLCaseAll('Hello')\n  'hello'\n  */\nconst fliLCaseAll", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiter = (strings, delimiter) => {\n  return strings.reduce((acc, str) => acc + delimiter + str, '');\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @param {String} prefix - string to be added before first string\n  * @param {String} suffix - string to be added after last string\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiterAndPrefixAndSuffix = (strings, delimiter, prefix, suffix) => {\n  return prefix + strings.reduce((acc, str) => acc + delimiter + str, '') + suffix;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @param {String} prefix - string to be added before first string\n  * @param {String} suffix - string to be added after last string\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiterAndPrefixAndSuffixAndFirstAndLast = (strings, delimiter, prefix, suffix) => {\n  return prefix + strings.reduce((acc, str) => acc + delimiter + str, '') + suffix + strings[0] + strings[strings.length - 1];\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @param {String} prefix - string to be added before first string\n  * @param {String} suffix - string to be added after last string\n  * @param {String} first - string to be added before first string\n  * @param {String} last - string to be added after last string\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiterAndPrefixAndSuffixAndFirstAndLast = (strings, delimiter, prefix, suffix, first, last) => {\n  return prefix + strings.reduce((acc, str) => acc + delimiter + str, '') + suffix + first + strings[0] + last + strings[strings.length - 1];\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @param {String} prefix - string to be added before first string\n  * @param {String} suffix - string to be added after last string\n  * @param {String} first - string to be added before first string\n  * @param {String} last - string to be added after last string\n  * @param {String} middle - string to be added between first and last string\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiterAndPrefixAndSuffixAndFirstAndLastAndMiddle = (strings, delimiter, prefix, suffix, first, last, middle) => {\n  return prefix + strings.reduce((acc, str) => acc + delimiter + str, '') + suffix + first + middle + strings[0] + last + strings[strings.length - 1];\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @param {String} prefix - string to be added before first string\n  * @param {String} suffix - string to be added after last string\n  * @param {String} first - string to be added before first string\n  * @param {String} last - string to be added after last string\n  * @param {String} middle - string to be added between first and last string\n  * @param {String} last - string to be added after last string\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiterAndPrefixAndSuffixAndFirstAndLastAndMiddleAndLast = (strings, delimiter, prefix, suffix, first, last, middle, last) => {\n  return prefix + strings.reduce((acc, str) => acc + delimiter + str, '') + suffix + first + middle + strings[0] + last + strings[strings.length - 1] + last;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * and add a delimiter between them\n  *\n  * @param {Array} strings - list of strings\n  * @param {String} delimiter - string to be added between strings\n  * @param {String} prefix - string to be added before first string\n  * @param {String} suffix - string to be added after last string\n  * @param {String} first - string to be added before first string\n  * @param {String} last - string to be added after last string\n  * @param {String} middle - string to be added between first and last string\n  * @param {String} last - string to be added after last string\n  * @param {String} last - string to be added after last string\n  * @returns {String} concatenated string\n  */\nconst conCateNateWithDelimiterAndPrefixAnd", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  const ret = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBY", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive2 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive3 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive4 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive5 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive6 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive7 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive8 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive9 = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getpos", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  return n > 1 && isPRime(n / 2)\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> countPrimes(110)\n  109\n  >>> countPrimes(111)\n  110\n  >>> countPrimes(112)\n  111\n  >>> countPrimes(113)\n  112\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (x === 0) {\n      return x;\n    }\n  }\n  const x = xs[Math.floor(n / 2)];\n  const x2 = xs[Math.floor(n / 2 - 1)];\n  const x3 = xs[Math.floor(n / 2 - 2)];\n  const x4 = xs[Math.floor(n / 2 - 3)];\n  const x5 = xs[Math.floor(n / 2 - 4)];\n  const x6 = xs[Math.floor(n / 2 - 5)];\n  const x7 = xs[Math.floor(n / 2 - 6)];\n  const x8 = xs[Math.floor(n / 2 - 7)];\n  const x9 = xs[Math.floor(n / 2 - 8)];\n  const x10 = xs[Math.floor(n / 2 - 9)];\n  const x11 = xs[Math.floor(n / 2 - 10)];\n  const x12 = xs[Math.floor(n / 2 - 11)];\n  const x13 = xs[Math.floor(n / 2 - 12)];\n  const x14 = xs[Math.floor(n / 2 - 13)];\n  const x15 = xs[Math.floor(n / 2 - 14)];\n  const x16 = xs[Math.floor(n / 2 - 15)];\n  const x17 = xs[Math.floor(n / 2 - 16)];\n  const x18 = xs[Math.floor(n / 2 - 17)];\n  const x19 = xs[Math.floor(n / 2 - 18)];\n  const x20 = xs[Math.floor(n / 2 - 19)];\n  const x21 = xs[Math.floor(n / 2 - 20)];\n  const x22 = xs[Math.floor(n / 2 - 21)];\n  const x23 = xs[Math.floor(n / 2 - 22)];\n  const x24 = xs[Math.floor(n / 2 - 23)];\n  const x25 = xs[Math.floor(n / 2 - 24)];\n  const x26 = xs[Math.floor(n / 2 - 25)];\n  const x27 = xs[Math.floor(n / 2 - 26)];\n  const x28 = xs[Math.floor(n / 2 - 27)];\n  const x29 = xs[Math.floor(n / 2 - 28)];\n  const x30 = xs[Math.floor(n / 2 - 29)];\n  const x31 = xs[Math.floor(n / 2 - 30)];\n  const x32 = xs[Math.floor(n / 2 - 31)];\n  const x33 = xs[Math.floor(n / 2 - 32)];\n  const x34 = xs[Math.floor(n / 2 - 33)];\n  const x35 = xs[Math.floor(n / 2 - 34)];\n  const x36 = xs[Math.floor(n / 2 - 35)];\n  const x37 = xs[Math.floor(n / 2 - 36)];\n  const x38 = xs[Math.floor(n / 2 - 37)];\n  const x39 = xs[Math.floor(n / 2 - 38)];\n  const x40 = xs[Math.floor(n / 2 - 39)];\n  const x41 = xs[Math.floor(n / 2 - 40)];\n  const x42 = xs[Math.floor(n / 2 - 41)];\n  const x43 = xs[Math.floor(n / 2 - 42)];\n  const x44 = xs[Math.floor(n / 2 - 43)];\n  const x45 = xs[Math.floor(n / 2 - 44)];\n  const x46 = xs[Math.floor(n / 2 - 45)];\n  const x47 = xs[Math.floor(n / 2 - 46)];\n  const x48 = xs[Math.floor(n / 2 - 47)];\n  const x49 = xs[Math.floor(n / 2 - 48)];\n  const x50 = xs[Math.floor(n / 2 - 49)];\n  const x51 = xs[Math.floor(n / 2 - 50)];\n  const x52 = xs[Math.floor(n / 2 - 51)];\n  const x53 = xs[Math.floor(n / 2 - 52)];\n  const x54 = xs[Math.floor(n / 2 - 53)];\n  const x55 = xs[Math.floor(n / 2 - 54)];\n  const x56 = xs[Math.floor(n / 2 - 55)];\n  const x57 = xs[Math.floor(n / 2 - 56)];\n  const x58 = xs[Math.floor(n / 2 - 57)];\n  const x59 = xs[Math.floor(n / 2 - 58)];\n  const x60 = xs[Math.floor(n / 2 -", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const sorted = l.slice().sort();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (i % 3 === 0) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = sorTThiRd;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  let i = 0,\n    j = 0,\n    k = 0,\n    n = 0,\n    r = 0,\n    s = 0,\n    t = 0,\n    u = 0,\n    v = 0,\n    w = 0,\n    x = 0,\n    y = 0,\n    z = 0,\n    a = 0,\n    b = 0,\n    c = 0,\n    d = 0,\n    e = 0,\n    f = 0,\n    g = 0,\n    h = 0,\n    i1 = 0,\n    i2 = 0,\n    i3 = 0,\n    i4 = 0,\n    i5 = 0,\n    i6 = 0,\n    i7 = 0,\n    i8 = 0,\n    i9 = 0,\n    i10 = 0,\n    i11 = 0,\n    i12 = 0,\n    i13 = 0,\n    i14 = 0,\n    i15 = 0,\n    i16 = 0,\n    i17 = 0,\n    i18 = 0,\n    i19 = 0,\n    i20 = 0,\n    i21 = 0,\n    i22 = 0,\n    i23 = 0,\n    i24 = 0,\n    i25 = 0,\n    i26 = 0,\n    i27 = 0,\n    i28 = 0,\n    i29 = 0,\n    i30 = 0,\n    i31 = 0,\n    i32 = 0,\n    i33 = 0,\n    i34 = 0,\n    i35 = 0,\n    i36 = 0,\n    i37 = 0,\n    i38 = 0,\n    i39 = 0,\n    i40 = 0,\n    i41 = 0,\n    i42 = 0,\n    i43 = 0,\n    i44 = 0,\n    i45 = 0,\n    i46 = 0,\n    i47 = 0,\n    i48 = 0,\n    i49 = 0,\n    i50 = 0,\n    i51 = 0,\n    i52 = 0,\n    i53 = 0,\n    i54 = 0,\n    i55 = 0,\n    i56 = 0,\n    i57 = 0,\n    i58 = 0,\n    i59 = 0,\n    i60 = 0,\n    i61 = 0,\n    i62 = 0,\n    i63 = 0,\n    i64 = 0,\n    i65 = 0,\n    i66 = 0,\n    i67 = 0,\n    i68 = 0,\n    i69 = 0,\n    i70 = 0,\n    i71 = 0,\n    i72 = 0,\n    i73 = 0,\n    i74 = 0,\n    i75 = 0,\n    i76 = 0,\n    i77 = 0,\n    i78 = 0,\n    i79 = 0,\n    i80 = 0,\n    i81 = 0,\n    i82 = 0,\n    i83 = 0,\n    i84 = 0,\n    i85 = 0,\n    i86 = 0,\n    i87 = 0,\n    i88 = 0,\n    i89 = 0,\n    i90 = 0,\n    i91 = 0,\n    i92 = 0,\n    i93 = 0,\n    i94 = 0,\n    i95 = 0,\n    i96 = 0,\n    i97 = 0,\n    i98 = 0,\n    i99 = 0,\n    i100 = 0,\n    i101 = 0,\n    i102 = 0,\n    i103 = 0,\n    i104 = 0,\n    i105 = 0,\n    i106 = 0,\n    i107 = 0,\n    i108 = 0,\n    i109 = 0,\n    i110 = 0,\n    i111 = 0,\n    i112 = 0,\n    i113 = 0,\n    i114 = 0,\n    i115 = 0,\n    i116 = 0,\n    i117 = 0,\n    i118 = 0,\n    i119 = 0,\n    i120 = 0,\n    i121 = 0,\n    i122 = 0,\n    i123 = 0,\n    i124 = 0,\n    i125 = 0,\n    i126 = 0,\n    i127 = 0,\n    i128 = 0,\n    i129 = 0,\n    i130 = 0,\n    i131 = 0,\n    i132 = 0,\n    i133 = 0,\n    i134 = 0,\n    i135 = 0,\n    i136 = 0,\n    i137 = 0,\n    i138 = 0,\n    i139 = 0,\n    i140 = 0,\n    i141 = 0,\n    i142 = 0,\n    i143 = 0,\n    i144 = 0,\n    i145 = 0,\n    i146 = 0,\n    i147 = 0,\n    i148 = 0,\n    i149 = 0,\n    i150 = 0,\n    i151 = 0,\n    i152 = 0,\n    i153 = 0,\n    i154 = 0,\n    i155 = 0,\n    i156 = 0,\n    i157 = 0,\n    i158 = 0,\n    i159 = 0,\n    i160 = 0,\n    i161 = 0,\n    i162 = 0,\n    i163 = 0,\n    i164 = 0,\n    i165 = 0,\n    i166 = 0,\n    i167 = 0,\n    i168 = 0,\n    i169 = 0,\n    i170 = 0,\n    i171 = 0,\n    i172 = 0,\n    i173 = 0,\n    i174 = 0,\n    i175 = 0,\n    i176 = 0,\n    i177 = 0,\n    i178 = 0,\n    i179 = 0,\n    i180 = 0,\n    i181 = 0,\n    i182 = 0,\n    i183 = 0,\n    i184 = 0,\n    i185 = 0,\n    i186 = 0,\n    i187 = 0,\n    i188 = 0,\n    i189 = 0,\n    i190 = 0,\n    i191 = 0,\n    i192 = 0,\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt2 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt3 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt4 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt5 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt6 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt7 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt8 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt9 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt10 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt11 = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt12 = (l) => {\n  let max = -Infinity", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ2 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ3 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ4 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ5 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ6 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ7 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ8 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ9 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i === 7) {\n        count++;\n      }\n      if (i === 11 || i === 13) {\n        count++;\n      }\n    }\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(1);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN2 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(2);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN3 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(3);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN4 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(4);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN5 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(5);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN6 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(6);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN7 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(7);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN8 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(8);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN9 = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2.slice(9);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  let fib = [1, 2];\n  let fibPrime = [1, 2];\n  let prime = [1, 2];\n  let primePrime = [1, 2];\n  let primePrimePrime = [1, 2];\n  let fibPrimePrime = [1, 2];\n  let fibPrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = [1, 2];\n  let fibPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (numbers.map(x => Math.abs(x - mean)));\n  return mean;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNA", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const sum = l[i] + l[i + 1] + l[i + 2];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n      set.add(l[i + 2]);\n    }\n  }\n  return set.size === 3;\n};\n\nexport default triPlessumTozerO;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolli = (i, j) => {\n  let x1 = i * carrace.length / (n - 1);\n  let x2 = j * carrace.length / (n - 1);\n  let y1 = carrace.length / 2;\n  let y2 = carrace.length / 2;\n  let x = x1;\n  let y = y1;\n  while (x < x2) {\n    while (y < y2) {\n      if (carrace[x][y] === carrace[x1][y1]) {\n        return true;\n      }\n      y++;\n    }\n    x++;\n    y = y1;\n  }\n  return false;\n};\n\nconst carrace = (n) => {\n  let carrace = [];\n  for (let i = 0; i < n; i++) {\n    let row = [];\n    for (let j = 0; j < n; j++) {\n      row.push(0);\n    }\n    carrace.push(row);\n  }\n  return carrace;\n};\n\nconst carracecolliSioN2 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN3 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN4 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN5 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN6 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN7 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN8 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN9 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN10 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN11 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN12 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carracecolli(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst carracecolliSioN13 = (n) => {\n  let collisions", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incRLisT([1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== 0 && sum === 0).length === 2;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo2 = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== 0 && sum === 0).length === 1;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo3 = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== 0 && sum === 0).length === 0;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo4 = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== 0 && sum === 0).length === 1;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo5 = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== 0 && sum === 0).length === 2;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo6 = (l) => {\n    const sum = l.reduce((acc, x) => acc + x, 0);\n    return l.filter((x) => x!== 0 && sum === 0).length === 1;\n};\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo7 = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  const num = x.toString(base);\n  const len = num.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(num[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a number x, return the number of digits in x.\n  >>> chaNgeDigits(8)\n  2\n  >>> chaNgeDigits(7)\n  1\n  >>> chaNgeDigits(6)\n  1\n  >>> chaNgeDigits(5)\n  1\n  >>> chaNgeDigits(4)\n  1\n  >>> chaNgeDigits(3)\n  1\n  >>> chaNgeDigits(2)\n  1\n  >>> chaNgeDigits(1)\n  1\n  >>> chaNgeDigits(0)\n  1\n  >>> chaNgeDigits(0.1)\n  2\n  >>> chaNgeDigits(0.01)\n  3\n  >>> chaNgeDigits(0.001)\n  4\n  >>> chaNgeDigits(0.0001)\n  5\n  >>> chaNgeDigits(0.00001)\n  6\n  >>> chaNgeDigits(0.000001)\n  7\n  >>> chaNgeDigits(0.0000001)\n  8\n  >>> chaNgeDigits(0.00000001)\n  9\n  >>> chaNgeDigits(0.000000001)\n  10\n  >>> chaNgeDigits(0.0000000001)\n  11\n  >>> chaNgeDigits(0.00000000001)\n  12\n  >>> chaNgeDigits(0.000000000001)\n  13\n  >>> chaNgeDigits(0.0000000000001)\n  14\n  >>> chaNgeDigits(0.00000000000001)\n  15\n  >>> chaNgeDigits(0.000000000000001)\n  16\n  >>> chaNgeDigits(0.0000000000000001)\n  17\n  >>> chaNgeDigits(0.0000000000000001)\n  18\n  >>> chaNgeDigits(0.0000000000000001)\n  19\n  >>> chaNgeDigits(0.0000000000000001)\n  20\n  >>> chaNgeDigits(0.0000000000000001)\n  21\n  >>> chaNgeDigits(0.0000000000000001)\n  22\n  >>> chaNgeDigits(0.0000000000000001)\n  23\n  >>> chaNgeDigits(0.0000000000000001)\n  24\n  >>> chaNgeDigits(0.0000000000000001)\n  25\n  >>> chaNgeDigits(0.0000000000000001)\n  26\n  >>> chaNgeDigits(0.0000000000000001)\n  27\n  >>> chaNgeDigits(0.0000000000000001)\n  28\n  >>> chaNgeDigits(0.0000000000000001)\n  29\n  >>> chaNgeDigits(0.0000000000000001)\n  30\n  >>> chaNgeDigits(0.0000000000000001)\n  31\n  >>> chaNgeDigits(0.0000000000000001)\n  32\n  >>> chaNgeDigits(0.0000000000000001)\n  33\n  >>> chaNgeDigits(0.0000000000000001)\n  34\n  >>> chaNgeDigits(0.0000000000000001)\n  35\n  >>> chaNgeDigits(0.0000000000000001)\n  36\n  >>> chaNgeDigits(0.0000000000000001)\n  37\n  >>> chaNgeDigits(0.0000000000000001)\n  38\n  >>> chaNgeDigits(0.0000000000000001)\n  39\n  >>> chaNgeDigits(0.0000000000000001)\n  40\n  >>> chaNgeDigits(0.0000000000000001)\n  41\n  >>> chaNgeDigits(0.0000000000000001)\n  42\n  >>> chaNgeDigits(0.0000000000000001)\n  43\n  >>> chaNgeDigits(0.0000000000000001)\n  44\n  >>> chaNgeDigits(0.0000000000000001)\n  45\n  >>> chaNgeDigits(0.0000000000000001)\n  46\n  >>> chaNgeDigits(0.0000000000000001)\n  47\n  >>> chaNgeDigits(0.0000000000000001)\n  48\n  >>> chaNgeDigits(0.0000000000000001)\n  49\n  >>> chaNgeDigits(0.0000000000000001)\n  50\n  >>> chaNgeDigits(0.0000000000000001)\n  51\n  >>> chaNgeDigits(0.0000000000000001)\n  52\n  >>> chaNgeDigits(0.0000000000000001)\n  53\n  >>> chaNgeDigits(0.0000000000000001)\n  54\n  >>> chaNgeDigits(0.0000000000000001)\n  55\n  >>> chaNgeDigits(0.0000000000000001)\n  56\n  >>> chaNgeDigits(0.0000000000000001)\n  57\n  >>> chaNgeDigits(0.0000000000000001)\n  58\n  >>> chaNgeDigits(0.0000000000000001)\n  59\n  >>> chaNgeDigits(0.0000000000000001)\n  60\n  >>> chaNgeDigits(0.0000000000000001)\n  61\n  >>> chaNgeDigits(0.0000000000000001)\n  62\n  >>> chaNgeDigits(0.0000000000000001)\n  63\n  >>> chaNgeDigits(0.0000000000000001)\n  64\n  >>> chaNgeDigits(0.0000000000000001)\n  65\n  >>> chaNgeDigits(0.0000000000000001)\n  66\n  >>> chaNgeDigits(0.0000000000000001)\n  67\n  >>> chaNgeDigits(0.0000000000000001)\n  68\n  >>> chaNgeDigits(0.0000000000000001)\n  69\n  >>> chaNgeDigits(0.0000000000000001)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 4)\n  9.0\n  */\nconst triAnglEArea2 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 5)\n  10.0\n  */\nconst triAnglEArea3 = (a, h) => {\n  return a * h * 0.5;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 6)\n  12.5\n  */\nconst triAnglEArea4 = (a, h) => {\n  return a * h * 0.25;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 7)\n  15.0\n  */\nconst triAnglEArea5 = (a, h) => {\n  return a * h * 0.125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 8)\n  17.5\n  */\nconst triAnglEArea6 = (a, h) => {\n  return a * h * 0.0625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 9)\n  20.0\n  */\nconst triAnglEArea7 = (a, h) => {\n  return a * h * 0.03125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 10)\n  22.5\n  */\nconst triAnglEArea8 = (a, h) => {\n  return a * h * 0.015625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 11)\n  25.0\n  */\nconst triAnglEArea9 = (a, h) => {\n  return a * h * 0.0078125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 12)\n  27.5\n  */\nconst triAnglEArea10 = (a, h) => {\n  return a * h * 0.00390625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 13)\n  30.0\n  */\nconst triAnglEArea11 = (a, h) => {\n  return a * h * 0.001953125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 14)\n  32.5\n  */\nconst triAnglEArea12 = (a, h) => {\n  return a * h * 0.0009765625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 15)\n  35.0\n  */\nconst triAnglEArea13 = (a, h) => {\n  return a * h * 0.00048828125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 16)\n  37.5\n  */\nconst triAnglEArea14 = (a, h) => {\n  return a * h * 0.000244140625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 17)\n  40.0\n  */\nconst triAnglEArea15 = (a, h) => {\n  return a * h * 0.0001220703125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 18)\n  42.5\n  */\nconst triAnglEArea16 = (a, h) => {\n  return a * h * 0.00006103515625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 19)\n  45.0\n  */\nconst triAnglEArea17 = (a, h) => {\n  return a * h * 0.000030517578125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 20)\n  47.5\n  */\nconst triAnglEArea18 = (a, h) => {\n  return a * h * 0.0000152587890625;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 21)\n  50.0\n  */\nconst triAnglEArea19 = (a, h) => {\n  return a * h * 0.00000762939453125;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 22)\n  52.5\n  */\nconst triAnglEArea20 = (a, h) => {\n  return a * h * 0.00000457763671875;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 23)\n  55.0\n  */\nconst triAnglEArea21 = (a, h) => {\n  return a * h * 0.00000238095238095;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 24)\n  57.5\n  */\nconst triAnglEArea22 = (a, h) => {\n  return a * h * 0.000001171875;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 25)\n  60.0\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 0\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = medIan(l.slice(0, half))\n  const right = medIan(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = median(l.slice(0, half))\n  const right = median(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode(l.slice(0, half))\n  const right = mode(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode2 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode2(l.slice(0, half))\n  const right = mode2(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode3 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode3(l.slice(0, half))\n  const right = mode3(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode4 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode4(l.slice(0, half))\n  const right = mode4(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode5 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode5(l.slice(0, half))\n  const right = mode5(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode6 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode6(l.slice(0, half))\n  const right = mode6(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode7 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode7(l.slice(0, half))\n  const right = mode7(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode8 = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return 0\n  }\n  const half = Math.floor(len / 2)\n  const left = mode8(l.slice(0, half))\n  const right = mode8(l.slice(half, len))\n  return (left + right) / 2\n}\n\n/*\n  Return the mode of the elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === reversed.split('').join('');\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP2 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP2(3, 5)\n  3\n  >>> modP2(1101, 101)\n  2\n  >>> modP2(0, 101)\n  1\n  >>> modP2(3, 11)\n  8\n  >>> modP2(100, 101)\n  1\n  */\nconst modP3 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP3(3, 5)\n  3\n  >>> modP3(1101, 101)\n  2\n  >>> modP3(0, 101)\n  1\n  >>> modP3(3, 11)\n  8\n  >>> modP3(100, 101)\n  1\n  */\nconst modP4 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP4(3, 5)\n  3\n  >>> modP4(1101, 101)\n  2\n  >>> modP4(0, 101)\n  1\n  >>> modP4(3, 11)\n  8\n  >>> modP4(100, 101)\n  1\n  */\nconst modP5 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP5(3, 5)\n  3\n  >>> modP5(1101, 101)\n  2\n  >>> modP5(0, 101)\n  1\n  >>> modP5(3, 11)\n  8\n  >>> modP5(100, 101)\n  1\n  */\nconst modP6 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP6(3, 5)\n  3\n  >>> modP6(1101, 101)\n  2\n  >>> modP6(0, 101)\n  1\n  >>> modP6(3, 11)\n  8\n  >>> modP6(100, 101)\n  1\n  */\nconst modP7 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP7(3, 5)\n  3\n  >>> modP7(1101, 101)\n  2\n  >>> modP7(0, 101)\n  1\n  >>> modP7(3, 11)\n  8\n  >>> modP7(100, 101)\n  1\n  */\nconst modP8 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP8(3, 5)\n  3\n  >>> modP8(1101, 101)\n  2\n  >>> modP8(0, 101)\n  1\n  >>> modP8(3, 11)\n  8\n  >>> modP8(100, 101)\n  1\n  */\nconst modP9 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP9(3, 5)\n  3\n  >>> modP9(1101, 101)\n  2\n  >>> modP9(0, 101)\n  1\n  >>> modP9(3, 11)\n  8\n  >>> modP9(100, 101)\n  1\n  */\nconst modP10 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP10(3, 5)\n  3\n  >>> modP10(1101, 101)\n  2\n  >>> modP10(0, 101)\n  1\n  >>> modP10(3, 11)\n  8\n  >>> modP10(100, 101)\n  1\n  */\nconst modP11 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP11(3, 5)\n  3\n  >>> modP11(1101, 101)\n  2\n  >>> modP11(0, 101)\n  1\n  >>> modP11(3, 11)\n  8\n  >>> modP11(100, 101)\n  1\n  */\nconst modP12 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP12(3, 5)\n  3\n  >>> modP12(1101, 101)\n  2\n  >>> modP12(0, 101)\n  1\n  >>> modP12(3, 11)\n  8\n  >>> modP12(100, 101)\n  1\n  */\nconst modP13 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP13(3, 5)\n  3\n  >>> modP13(1101, 101)\n  2\n  >>> modP13(0, 101)\n  1\n  >>> modP13(3, 11)\n  8\n  >>> modP13(100, 101)\n  1\n  */\nconst modP14 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modP14(3, 5)\n  3\n  >>> modP14(1101, 101)\n  2\n  >>> modP14(0, 101)\n  1\n  >>> modP14(3, 11)\n  8\n  >>> modP", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i < len - 1) {\n      result.push(delimeter)\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intErspErse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 5]\n  >>> intErspErse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 5, 6]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> intErspErse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 4)\n  [1, 4, 2, 4, 3, 5, 6, 7,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[^a-zA-Z0-9]+/g, '');\n  return result.replace(/[a-zA-Z]+/g, (v) => {\n    return vowels.indexOf(v) === -1? v : '';\n  });\n};\n\n/*\n  remOveVOwels2 is a function that takes string and returns string without vowels.\n  >>> remOveVOwels2('')\n  ''\n  >>> remOveVOwels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels2('abcdef')\n  'bcdf'\n  >>> remOveVOwels2('aaaaa')\n  ''\n  >>> remOveVOwels2('aaBAA')\n  'B'\n  >>> remOveVOwels2('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[^a-zA-Z0-9]+/g, '');\n  return result.replace(/[a-zA-Z]+/g, (v) => {\n    return vowels.indexOf(v) === -1? v : '';\n  });\n};\n\n/*\n  remOveVOwels3 is a function that takes string and returns string without vowels.\n  >>> remOveVOwels3('')\n  ''\n  >>> remOveVOwels3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels3('abcdef')\n  'bcdf'\n  >>> remOveVOwels3('aaaaa')\n  ''\n  >>> remOveVOwels3('aaBAA')\n  'B'\n  >>> remOveVOwels3('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[^a-zA-Z0-9]+/g, '');\n  return result.replace(/[a-zA-Z]+/g, (v) => {\n    return vowels.indexOf(v) === -1? v : '';\n  });\n};\n\n/*\n  remOveVOwels4 is a function that takes string and returns string without vowels.\n  >>> remOveVOwels4('')\n  ''\n  >>> remOveVOwels4(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels4('abcdef')\n  'bcdf'\n  >>> remOveVOwels4('aaaaa')\n  ''\n  >>> remOveVOwels4('aaBAA')\n  'B'\n  >>> remOveVOwels4('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[^a-zA-Z0-9]+/g, '');\n  return result.replace(/[a-zA-Z]+/g, (v) => {\n    return vowels.indexOf(v) === -1? v : '';\n  });\n};\n\n/*\n  remOveVOwels5 is a function that takes string and returns string without vowels.\n  >>> remOveVOwels5('')\n  ''\n  >>> remOveVOwels5(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels5('abcdef')\n  'bcdf'\n  >>> remOveVOwels5('aaaaa')\n  ''\n  >>> remOveVOwels5('aaBAA')\n  'B'\n  >>> remOveVOwels5('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[^a-zA-Z0-9]+/g, '');\n  return result.replace(/[a-zA-Z]+/g, (v) => {\n    return vowels.indexOf(v) === -1? v : '';\n  });\n};\n\n/*\n  remOveVOwels6 is a function that takes string and returns string without vowels.\n  >>> remOveVOwels6('')\n  ''\n  >>> remOveVOwels6(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels6('abcdef')\n  'bcdf'\n  >>> remOveVOwels6('aaaaa')\n  ''\n  >>> remOveVOwels6('aaBAA')\n  'B'\n  >>> remOveVOwels6('zbcd')\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd2 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd3 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd4 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd5 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd6 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd7 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd8 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd9 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd10 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd11 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd12 = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i <", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  0\n  >>> modulo(5, 7)\n  4\n  */\nconst equals = (x, y) => {\n  return x === y;\n};\n\n/*\n  >>> equals(2, 3)\n  false\n  >>> equals(5, 7)\n  true\n  */\nconst notEquals = (x, y) => {\n  return x!== y;\n};\n\n/*\n  >>> notEquals(2, 3)\n  true\n  >>> notEquals(5, 7)\n  false\n  */\nconst lessThan = (x, y) => {\n  return x < y;\n};\n\n/*\n  >>> lessThan(2, 3)\n  false\n  >>> lessThan(5, 7)\n  true\n  */\nconst lessThanOrEquals = (x, y) => {\n  return x <= y;\n};\n\n/*\n  >>> lessThanOrEquals(2, 3)\n  true\n  >>> lessThanOrEquals(5, 7)\n  true\n  */\nconst greaterThan = (x, y) => {\n  return x > y;\n};\n\n/*\n  >>> greaterThan(2, 3)\n  false\n  >>> greaterThan(5, 7)\n  true\n  */\nconst greaterThanOrEquals = (x, y) => {\n  return x >= y;\n};\n\n/*\n  >>> greaterThanOrEquals(2, 3)\n  true\n  >>> greaterThanOrEquals(5, 7)\n  true\n  */\nconst and = (x, y) => {\n  return x && y;\n};\n\n/*\n  >>> and(2, 3)\n  2\n  >>> and(5, 7)\n  7\n  */\nconst or = (x, y) => {\n  return x || y;\n};\n\n/*\n  >>> or(2, 3)\n  2\n  >>> or(5, 7)\n  7\n  */\nconst xor = (x, y) => {\n  return x ^ y;\n};\n\n/*\n  >>> xor(2, 3)\n  1\n  >>> xor(5, 7)\n  6\n  */\nconst not = (x) => {\n  return!x;\n};\n\n/*\n  >>> not(2)\n  false\n  >>> not(5)\n  true\n  */\nconst negate = (x) => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(5)\n  5\n  */\nconst max = (x, y) => {\n  return Math.max(x, y);\n};\n\n/*\n  >>> max(2, 3)\n  3\n  >>> max(5, 7)\n  7\n  */\nconst min = (x, y) => {\n  return Math.min(x, y);\n};\n\n/*\n  >>> min(2, 3)\n  2\n  >>> min(5, 7)\n  2\n  */\nconst clamp = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp(2, 1, 3)\n  2\n  >>> clamp(5, 1, 3)\n  3\n  */\nconst clampToRange = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clampToRange(2, 1, 3)\n  2\n  >>> clampToRange(5, 1, 3)\n  3\n  */\nconst clampToRangeInclusive = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clampToRangeInclusive(2, 1, 3)\n  2\n  >>> clampToRangeInclusive(5, 1, 3)\n  3\n  */\nconst clampToRangeExclusive = (x, min, max) => {\n  return Math.max(Math.min(x, max), min);\n};\n\n/*\n  >>> clampToRangeExclusive(2, 1, 3)\n  2\n  >>> clampToRangeExclusive(5, 1, 3)\n  3\n  */\nconst clampToRangeExclusiveInclusive = (x, min, max) => {\n  return Math.max(Math.min(x, max), min);\n};\n\n/*\n  >>> clampToRangeExclusiveInclusive(2, 1, 3)\n  2\n  >>> clampToRangeExclusiveInclusive(5, 1, 3)\n  3\n  */\nconst clampToRangeExclusiveInclusiveInclusive = (x, min, max) => {\n  return Math.max(Math.min(x, max), min);\n};\n\n/*\n  >>> clampToRangeExclusiveInclusiveInclusive(2, 1, 3)\n  2\n  >>> clampToRangeExclusiveInclusiveInclusive(5, 1, 3)\n  3\n  */\nconst clampToRangeExclusiveInclusiveInclusiveInclusive = (x, min, max) => {\n  return Math.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  return s0.split('').every(c => s1.split('').indexOf(c)!== -1);\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagrams('eabcd', 'dddddddabc')\n  true\n  >>> anagrams('abcd', 'dddddddabc')\n  false\n  >>> anagrams('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> anagrams('abcd', 'dddddddabce')\n  false\n  */\nconst anagrams = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0Chars = s0.split('');\n  const s1Chars = s1.split('');\n  const s0CharsLength = s0Chars.length;\n  const s1CharsLength = s1Chars.length;\n  const s0CharsMap = new Map();\n  for (let i = 0; i < s0CharsLength; i++) {\n    s0CharsMap.set(s0Chars[i], i);\n  }\n  const s1CharsMap = new Map();\n  for (let i = 0; i < s1CharsLength; i++) {\n    s1CharsMap.set(s1Chars[i], i);\n  }\n  const s0CharsSet = new Set(s0Chars);\n  const s1CharsSet = new Set(s1Chars);\n  return s0CharsSet.every(c => s1CharsSet.has(c)) && s0CharsMap.every(c => s1CharsMap.has(c));\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagrams('eabcd', 'dddddddabc')\n  true\n  >>> anagrams('abcd', 'dddddddabc')\n  false\n  >>> anagrams('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> anagrams('abcd', 'dddddddabce')\n  false\n  */\nconst anagrams2 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0Chars = s0.split('');\n  const s1Chars = s1.split('');\n  const s0CharsLength = s0Chars.length;\n  const s1CharsLength = s1Chars.length;\n  const s0CharsMap = new Map();\n  for (let i = 0; i < s0CharsLength; i++) {\n    s0CharsMap.set(s0Chars[i], i);\n  }\n  const s1CharsMap = new Map();\n  for (let i = 0; i < s1CharsLength; i++) {\n    s1CharsMap.set(s1Chars[i], i);\n  }\n  const s0CharsSet = new Set(s0Chars);\n  const s1CharsSet = new Set(s1Chars);\n  return s0CharsSet.every(c => s1CharsSet.has(c)) && s0CharsMap.every(c => s1CharsMap.has(c));\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagrams('eabcd', 'dddddddabc')\n  true\n  >>> anagrams('abcd', 'dddddddabc')\n  false\n  >>> anagrams('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> anagrams('abcd', 'dddddddabce')\n  false\n  */\nconst anagrams3 = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const s0Chars = s0.split('');\n  const s1Chars = s1.split('');\n  const s0CharsLength = s0Chars.length;\n  const s1CharsLength = s1Chars.length;\n  const s0CharsMap = new Map();\n  for (let i = 0; i < s0CharsLength; i++) {\n    s0CharsMap.set(s0Chars[i], i);\n  }\n  const s1CharsMap = new Map();\n  for (let i = 0; i < s1CharsLength; i++) {\n    s1CharsMap.set(s1Chars[i], i);\n  }\n  const s0CharsSet = new Set(s0Chars);\n  const s1CharsSet = new Set(s1Chars);\n  return s0CharsSet.every(c => s1CharsSet.has(c)) && s0CharsMap.every(c => s1CharsMap.has(c));\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagrams('eabcd', 'dddddddabc')\n  true\n  >>> anagrams('abcd', 'dddddddabc')\n  false\n  >>> anagrams('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> anagrams('abcd', 'dddddddabce')\n  false\n  */\nconst anagrams4", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  if (bracketsIndex === -1 || bracketsEnd === -1) {\n    return false\n  }\n  if (bracketsIndex === 0) {\n    return bracketsEnd === bracketsLength - 1\n  }\n  if (bracketsEnd === bracketsLength - 1) {\n    return bracketsIndex === bracketsLength - 1\n  }\n  return false\n}\n\n/*\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  if (bracketsIndex === -1 || bracketsEnd === -1) {\n    return false\n  }\n  if (bracketsIndex === 0) {\n    return bracketsEnd === bracketsLength - 1\n  }\n  if (bracketsEnd === bracketsLength - 1) {\n    return bracketsIndex === bracketsLength - 1\n  }\n  return false\n}\n\n/*\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  if (bracketsIndex === -1 || bracketsEnd === -1) {\n    return false\n  }\n  if (bracketsIndex === 0) {\n    return bracketsEnd === bracketsLength - 1\n  }\n  if (bracketsEnd === bracketsLength - 1) {\n    return bracketsIndex === bracketsLength - 1\n  }\n  return false\n}\n\n/*\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  if (bracketsIndex === -1 || bracketsEnd === -1) {\n    return false\n  }\n  if (bracketsIndex === 0) {\n    return bracketsEnd === bracketsLength - 1\n  }\n  if (bracketsEnd === bracketsLength - 1) {\n    return bracketsIndex === bracketsLength - 1\n  }\n  return false\n}\n\n/*\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  if (bracketsIndex === -1 || bracketsEnd === -1) {\n    return false\n  }\n  if (bracketsIndex === 0) {\n    return bracketsEnd === bracketsLength - 1\n  }\n  if (bracketsEnd === bracketsLength - 1) {\n    return bracketsIndex === bracketsLength - 1\n  }\n  return false\n}\n\n/*\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  if (bracketsIndex === -1 || bracketsEnd === -1) {\n    return false\n  }\n  if (bracketsIndex === 0) {\n    return bracketsEnd === bracketsLength - 1\n  }\n  if (bracketsEnd === bracketsLength - 1) {\n    return bracketsIndex === bracketsLength - 1\n  }\n  return false\n}\n\n/*\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  >>> corRectbrackEtiNg(\"<>\")\n  true\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsIndex = brackets.indexOf(\"<\")\n  const bracketsEnd = brackets.indexOf(\">\")\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const result = [];\n  const l1Length = l1.length;\n  const l2Length = l2.length;\n  let i = 0;\n  let j = 0;\n  while (i < l1Length && j < l2Length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nexport default comMon;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefac = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefac(13195)\n  29\n  >>> larGestprimefac(2048)\n  2\n  */\nconst larGestprime = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime(13195)\n  29\n  >>> larGestprime(2048)\n  2\n  */\nconst larGestprime2 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime2(13195)\n  29\n  >>> larGestprime2(2048)\n  2\n  */\nconst larGestprime3 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime3(13195)\n  29\n  >>> larGestprime3(2048)\n  2\n  */\nconst larGestprime4 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime4(13195)\n  29\n  >>> larGestprime4(2048)\n  2\n  */\nconst larGestprime5 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime5(13195)\n  29\n  >>> larGestprime5(2048)\n  2\n  */\nconst larGestprime6 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime6(13195)\n  29\n  >>> larGestprime6(2048)\n  2\n  */\nconst larGestprime7 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime7(13195)\n  29\n  >>> larGestprime7(2048)\n  2\n  */\nconst larGestprime8 = (n) => {\n  let i = 2;\n  let p = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      p = i;\n      while (n % p === 0) {\n        n /= p;\n      }\n    } else {\n      i++;\n    }\n  }\n  return p;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> lar", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const stack = [],\n    stack_length = 0,\n    stack_max_length = 0,\n    stack_max_index = 0,\n    stack_max_depth = 0,\n    stack_max_depth_index = 0,\n    stack_max_depth_depth = 0,\n    stack_max_depth_depth_index = 0,\n    stack_max_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_index = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth = 0,\n    stack_max_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_depth_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumNtoN is a function that sums numbers from n to n.\n  >>> sumNtoN(30)\n  465\n  >>> sumNtoN(100)\n  5050\n  >>> sumNtoN(5)\n  15\n  >>> sumNtoN(10)\n  55\n  >>> sumNtoN(1)\n  1\n  */\nconst sumNtoN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n  const closeBrackets = brackets.split(\")\")\n  const openBracketCount = openBrackets.length\n  const closeBracketCount = closeBrackets.length\n  if (openBracketCount!== closeBracketCount) {\n    return false\n  }\n  for (let i = 0; i < openBracketCount; i++) {\n    if (openBrackets[i]!== closeBrackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  * @description\n  * Return true if every opening bracket has a corresponding closing bracket.\n  *\n  * @example\n  *\n  * ```javascript\n  * corBrackEtiNg(\"()\")\n  * // => true\n  *\n  * ```\n  */\nconst corBrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n  const closeBrackets = brackets.split(\")\")\n  const openBracketCount = openBrackets.length\n  const closeBracketCount = closeBrackets.length\n  if (openBracketCount!== closeBracketCount) {\n    return false\n  }\n  for (let i = 0; i < openBracketCount; i++) {\n    if (openBrackets[i]!== closeBrackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  * @description\n  * Return true if every opening bracket has a corresponding closing bracket.\n  *\n  * @example\n  *\n  * ```javascript\n  * corBrackEtiNg(\"()\")\n  * // => true\n  *\n  * ```\n  */\nconst corBrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n  const closeBrackets = brackets.split(\")\")\n  const openBracketCount = openBrackets.length\n  const closeBracketCount = closeBrackets.length\n  if (openBracketCount!== closeBracketCount) {\n    return false\n  }\n  for (let i = 0; i < openBracketCount; i++) {\n    if (openBrackets[i]!== closeBrackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  * @description\n  * Return true if every opening bracket has a corresponding closing bracket.\n  *\n  * @example\n  *\n  * ```javascript\n  * corBrackEtiNg(\"()\")\n  * // => true\n  *\n  * ```\n  */\nconst corBrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n  const closeBrackets = brackets.split(\")\")\n  const openBracketCount = openBrackets.length\n  const closeBracketCount = closeBrackets.length\n  if (openBracketCount!== closeBracketCount) {\n    return false\n  }\n  for (let i = 0; i < openBracketCount; i++) {\n    if (openBrackets[i]!== closeBrackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  * @description\n  * Return true if every opening bracket has a corresponding closing bracket.\n  *\n  * @example\n  *\n  * ```javascript\n  * corBrackEtiNg(\"()\")\n  * // => true\n  *\n  * ```\n  */\nconst corBrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n  const closeBrackets = brackets.split(\")\")\n  const openBracketCount = openBrackets.length\n  const closeBracketCount = closeBrackets.length\n  if (openBracketCount!== closeBracketCount) {\n    return false\n  }\n  for (let i = 0; i < openBracketCount; i++) {\n    if (openBrackets[i]!== closeBrackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  * @description\n  * Return true if every opening bracket has a corresponding closing bracket.\n  *\n  * @example\n  *\n  * ```javascript\n  * corBrackEtiNg(\"()\")\n  * // => true\n  *\n  * ```\n  */\nconst corBrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n  const closeBrackets = brackets.split(\")\")\n  const openBracketCount = openBrackets.length\n  const closeBracketCount = closeBrackets.length\n  if (openBracketCount!== closeBracketCount) {\n    return false\n  }\n  for (let i = 0; i < openBracketCount; i++) {\n    if (openBrackets[i]!== closeBrackets[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} brackets\n  * @returns {boolean}\n  * @description\n  * Return true if every opening bracket has a corresponding closing bracket.\n  *\n  * @example\n  *\n  * ```javascript\n  * corBrackEtiNg(\"()\")\n  * // => true\n  *\n  * ```\n  */\nconst corBrackEtiNg = (brackets) => {\n  const openBrackets = brackets.split(\"(\")\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return [derivative(1), derivative(2)]\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve2 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(1)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve3 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(2)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve4 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(3)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve5 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(4)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve6 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(5)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve7 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(6)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve8 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n    const derivative = 0\n    for (let i = len - 1; i >= 0; i--) {\n      derivative += xs[i] * Math.pow(x, i)\n    }\n    return derivative\n  }\n  return derivative(7)\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve9 = (xs) => {\n  const len = xs.length\n  const derivative = (x) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3);\n  }\n};\n\nconsole.log(fibFib(5));\nconsole.log(fibFib(8));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount2 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount3 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount4 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount5 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount6 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of\n  vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' and\n  'y'.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount7 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(0)) + parseInt(result.charAt(1)) + parseInt(result.charAt(2)) + parseInt(result.charAt(3));\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1)) + parseInt(result.charAt(0));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT2 = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1)) + parseInt(result.charAt(0));\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = parseInt(result.charAt(0)) + parseInt(result.charAt(1)) + parseInt(result.charAt(2)) + parseInt(result.charAt(3));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT3 = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1)) + parseInt(result.charAt(0));\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = parseInt(result.charAt(0)) + parseInt(result.charAt(1)) + parseInt(result.charAt(2)) + parseInt(result.charAt(3));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT4 = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1)) + parseInt(result.charAt(0));\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = parseInt(result.charAt(0)) + parseInt(result.charAt(1)) + parseInt(result.charAt(2)) + parseInt(result.charAt(3));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT5 = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1)) + parseInt(result.charAt(0));\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = parseInt(result.charAt(0)) + parseInt(result.charAt(1)) + parseInt(result.charAt(2)) + parseInt(result.charAt(3));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT6 = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1)) + parseInt(result.charAt(0));\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = parseInt(result.charAt(0)) + parseInt(result.charAt(1)) + parseInt(result.charAt(2)) + parseInt(result.charAt(3));\n    }\n  }\n  return result;\n};\n\n/*\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT7 = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = parseInt(result.charAt(3)) + parseInt(result.charAt(2)) + parseInt(result.charAt(1))", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 65\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i) - 97\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i)\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i)\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i)\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i)\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i)\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const len = s.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += s.charCodeAt(i)\n  }\n  return sum\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 0\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) =>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  let count = 0;\n  let total = 0;\n  let arr = s.split(\" \");\n  for (let i = 0; i < arr.length; i++) {\n    total += parseInt(arr[i]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"apples\") {\n      count += parseInt(arr[i]);\n    }\n    if (arr[i] === \"oranges\") {\n      count += parseInt(arr[i]);\n    }\n    if (arr[i] === \"mango\") {\n      count += parseInt(arr[i]);\n    }\n  }\n  return total - count - n;\n};\n\nconsole.log(fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19));\nconsole.log(fruItDiStribUtiOn(\"0 apples and 1 oranges\", 3));\nconsole.log(fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100));\nconsole.log(fruItDiStribUtiOn(\"100 apples and 1 oranges\", 120));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const [smallest, index] = arr.reduce((acc, node, i) => {\n    if (acc[0] === undefined || node < acc[0]) {\n      acc[0] = node;\n      acc[1] = i;\n    }\n    return acc;\n  }, [Infinity, -1]);\n  if (smallest === Infinity) {\n    return [];\n  }\n  return [smallest, index];\n};\n\nexport { pluCk };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch2 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch3 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch4 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch5 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch6 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch7 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch8 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch9 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch10 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch11 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch12 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch13 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch14 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch15 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq\n}\n\nconst seaRch16 = (lst) => {\n  let max = 0\n  let maxFreq = 0\n  for (let i = 0; i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLower", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return sorted.concat(reversed);\n};\n\nexport default strAngesortLIst;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a * b) / 2).toFixed(2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const len = q.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += q[i]\n  }\n  return sum <= w\n}\n\nconst wilLItFLyTest = [\n  [1, 2],\n  [3, 2, 3],\n  [3, 2, 3],\n  [3],\n  [3, 2, 3],\n  [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid = Math.floor((max - min) / 2);\n  let count = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i <= max && j <= max) {\n    if (arr[i] === arr[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (arr[i] < arr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n    if (count > mid) {\n      max = mid - 1;\n    } else if (count < mid) {\n      min = mid + 1;\n    } else {\n      break;\n    }\n  }\n\n  return count;\n};\n\nconsole.log(smaLlesTChanGe([1, 2, 3, 2, 1]));\nconsole.log(smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smaLlesTChanGe([1, 2, 3, 2, 1, 2, 3]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n  const lst1Len = lst1.length;\n  const lst2Len = lst2.length;\n  const lst1LenLess = lst1Len - lst2Len;\n  const lst2LenLess = lst2Len - lst1Len;\n  const lst1Less = lst1LenLess < 0? lst1LenLess : 0;\n  const lst2Less = lst2LenLess < 0? lst2LenLess : 0;\n  const lst1LessEqual = lst1LenLess <= lst2Len;\n  const lst2LessEqual = lst2Len <= lst1Len;\n  if (lst1LessEqual && lst2LessEqual) return lst1;\n  if (lst1LessEqual &&!lst2LessEqual) return lst2;\n  if (!lst1LessEqual && lst2LessEqual) return lst2;\n  return lst1;\n};\n\nexport default totAlMaTch;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const prime = primeNumbers();\n  const isPrime = (n) => {\n    return prime.indexOf(n)!== -1;\n  };\n  const isMultiplyOf3 = (n) => {\n    return n % 3 === 0;\n  };\n  return isPrime(a) && isMultiplyOf3(a);\n};\n\nconst primeNumbers = () => {\n  const primes = [];\n  for (let i = 2; i < 100; i++) {\n    if (isMUltiPlyPrIme(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconsole.log(isMUltiPlyPrIme(30));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n)));\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a perfect\n  number and false in other cases.\n  x is a perfect number if x is a number that is a sum of all the natural\n  numbers from 1 to n.\n  For example:\n  isPerfectNumber(1) => true\n  isPerfectNumber(2) => false\n  isPerfectNumber(3) => true\n  isPerfectNumber(4) => false\n  isPerfectNumber(5) => true\n  isPerfectNumber(6) => false\n  isPerfectNumber(7) => true\n  isPerfectNumber(8) => false\n  isPerfectNumber(9) => false\n  isPerfectNumber(10) => false\n  isPerfectNumber(11) => false\n  isPerfectNumber(12) => false\n  isPerfectNumber(13) => false\n  isPerfectNumber(14) => false\n  isPerfectNumber(15) => false\n  isPerfectNumber(16) => false\n  isPerfectNumber(17) => false\n  isPerfectNumber(18) => false\n  isPerfectNumber(19) => false\n  isPerfectNumber(20) => false\n  isPerfectNumber(21) => false\n  isPerfectNumber(22) => false\n  isPerfectNumber(23) => false\n  isPerfectNumber(24) => false\n  isPerfectNumber(25) => false\n  isPerfectNumber(26) => false\n  isPerfectNumber(27) => false\n  isPerfectNumber(28) => false\n  isPerfectNumber(29) => false\n  isPerfectNumber(30) => false\n  isPerfectNumber(31) => false\n  isPerfectNumber(32) => false\n  isPerfectNumber(33) => false\n  isPerfectNumber(34) => false\n  isPerfectNumber(35) => false\n  isPerfectNumber(36) => false\n  isPerfectNumber(37) => false\n  isPerfectNumber(38) => false\n  isPerfectNumber(39) => false\n  isPerfectNumber(40) => false\n  isPerfectNumber(41) => false\n  isPerfectNumber(42) => false\n  isPerfectNumber(43) => false\n  isPerfectNumber(44) => false\n  isPerfectNumber(45) => false\n  isPerfectNumber(46) => false\n  isPerfectNumber(47) => false\n  isPerfectNumber(48) => false\n  isPerfectNumber(49) => false\n  isPerfectNumber(50) => false\n  isPerfectNumber(51) => false\n  isPerfectNumber(52) => false\n  isPerfectNumber(53) => false\n  isPerfectNumber(54) => false\n  isPerfectNumber(55) => false\n  isPerfectNumber(56) => false\n  isPerfectNumber(57) => false\n  isPerfectNumber(58) => false\n  isPerfectNumber(59) => false\n  isPerfectNumber(60) => false\n  isPerfectNumber(61) => false\n  isPerfectNumber(62) => false\n  isPerfectNumber(63) => false\n  isPerfectNumber(64) => false\n  isPerfectNumber(65) => false\n  isPerfectNumber(66) => false\n  isPerfectNumber(67) => false\n  isPerfectNumber(68) => false\n  isPerfectNumber(69) => false\n  isPerfectNumber(70) => false\n  isPerfectNumber(71) => false\n  isPerfectNumber(72) => false\n  isPerfectNumber(73) => false\n  isPerfectNumber(74) => false\n  isPerfectNumber(75) => false\n  isPerfectNumber(76) => false\n  isPerfectNumber(77) => false\n  isPerfectNumber(78) => false\n  isPerfectNumber(79) => false\n  isPerfectNumber(80) => false\n  isPerfectNumber(81) => false\n  isPerfectNumber(82) => false\n  isPerfectNumber(83) => false\n  isPerfectNumber(84) => false\n  isPerfectNumber(85) => false\n  isPerfectNumber(86) => false\n  isPerfectNumber(87) => false\n  isPerfectNumber(88) => false\n  isPerfectNumber(89) => false\n  isPerfectNumber(90) => false\n  isPerfectNumber(91) => false\n  isPerfectNumber(92) => false\n  isPerfectNumber(93) => false\n  isPerfectNumber(94) => false\n  isPerfectNumber(95) => false\n  isPerfectNumber(96) => false\n  isPerfectNumber(97) => false\n  isPerfectNumber(98) => false\n  isPerfectNumber(99) => false\n  isPerfectNumber(100) => false\n  isPerfectNumber(101) => false\n  isPerfectNumber(102) => false\n  isPerfectNumber(103) => false\n  isPerfectNumber(104) => false\n  isPerfectNumber(105) => false\n  isPerfectNumber(106) => false\n  isPerfectNumber(107) => false\n  isPerfectNumber(108) => false\n  isPerfectNumber(109) => false\n  isPerfectNumber(110) => false\n  isPerfectNumber(111) => false\n  isPerfectNumber(112) => false\n  isPerfectNumber(113) => false\n  isPerfectNumber(114) => false\n  isPerfectNumber(115) => false\n  isPerfectNumber(116) => false\n  isPerfectNumber(117) => false\n  isPerfectNumber(118) => false\n  isPerfectNumber(119) => false\n  isPerfectNumber(120) => false\n  isPerfectNumber(121) => false\n  isPerfectNumber(122) => false\n  isPerfectNumber(123) => false\n  isPerfectNumber(124) => false\n  isPerfectNumber(125) => false\n  isPerfectNumber(126) => false\n  isPerfectNumber(127) => false\n  isPerfectNumber(128) =>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  return a % 6 === 0 && a % 9 === 0 && a % 12 === 0 && a % 18 === 0 && a % 24 === 0 && a % 36 === 0 && a % 48 === 0 && a % 60 === 0;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectCube(1) ==> false\n  isPerfectCube(2) ==> true\n  isPerfectCube(3) ==> true\n  isPerfectCube(4) ==> true\n  isPerfectCube(5) ==> false\n  isPerfectCube(6) ==> false\n  isPerfectCube(7) ==> false\n  isPerfectCube(8) ==> false\n  isPerfectCube(9) ==> false\n  isPerfectCube(10) ==> false\n  isPerfectCube(11) ==> false\n  isPerfectCube(12) ==> false\n  isPerfectCube(13) ==> false\n  isPerfectCube(14) ==> false\n  isPerfectCube(15) ==> false\n  isPerfectCube(16) ==> false\n  isPerfectCube(17) ==> false\n  isPerfectCube(18) ==> false\n  isPerfectCube(19) ==> false\n  isPerfectCube(20) ==> false\n  isPerfectCube(21) ==> false\n  isPerfectCube(22) ==> false\n  isPerfectCube(23) ==> false\n  isPerfectCube(24) ==> false\n  isPerfectCube(25) ==> false\n  isPerfectCube(26) ==> false\n  isPerfectCube(27) ==> false\n  isPerfectCube(28) ==> false\n  isPerfectCube(29) ==> false\n  isPerfectCube(30) ==> false\n  isPerfectCube(31) ==> false\n  isPerfectCube(32) ==> false\n  isPerfectCube(33) ==> false\n  isPerfectCube(34) ==> false\n  isPerfectCube(35) ==> false\n  isPerfectCube(36) ==> false\n  isPerfectCube(37) ==> false\n  isPerfectCube(38) ==> false\n  isPerfectCube(39) ==> false\n  isPerfectCube(40) ==> false\n  isPerfectCube(41) ==> false\n  isPerfectCube(42) ==> false\n  isPerfectCube(43) ==> false\n  isPerfectCube(44) ==> false\n  isPerfectCube(45) ==> false\n  isPerfectCube(46) ==> false\n  isPerfectCube(47) ==> false\n  isPerfectCube(48) ==> false\n  isPerfectCube(49) ==> false\n  isPerfectCube(50) ==> false\n  isPerfectCube(51) ==> false\n  isPerfectCube(52) ==> false\n  isPerfectCube(53) ==> false\n  isPerfectCube(54) ==> false\n  isPerfectCube(55) ==> false\n  isPerfectCube(56) ==> false\n  isPerfectCube(57) ==> false\n  isPerfectCube(58) ==> false\n  isPerfectCube(59) ==> false\n  isPerfectCube(60) ==> false\n  isPerfectCube(61) ==> false\n  isPerfectCube(62) ==> false\n  isPerfectCube(63) ==> false\n  isPerfectCube(64) ==> true\n  */\nconst isPerfectCube = (a) => {\n  return a % 6 === 0 && a % 9 === 0 && a % 12 === 0 && a % 18 === 0 && a % 24 === 0 && a % 36 === 0 && a % 48 === 0 && a % 60 === 0;\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isPerfectCube(1) ==> false\n  isPerfectCube(2) ==> false\n  isPerfectCube(3) ==> false\n  isPerfectCube(4) ==> false\n  isPerfectCube(5) ==> false\n  isPerfectCube(6) ==> false\n  isPerfectCube(7) ==> false\n  isPerfectCube(8) ==> false\n  isPerfectCube(9) ==> false\n  isPerfectCube(10) ==> false\n  isPerfectCube(11) ==> false\n  isPerfectCube(12) ==> false\n  isPerfectCube(13) ==> false\n  isPerfectCube(14) ==> false\n  isPerfectCube(15) ==> false\n  isPerfectCube(16) ==> false\n  isPerfectCube(17) ==> false\n  isPerfectCube(18) ==> false\n  isPerfectCube(19) ==> false\n  isPerfectCube(20) ==> false\n  isPerfectCube(21) ==> false\n  isPerfectCube(22) ==> false\n  isPerfectCube(23) ==> false\n  isPerfectCube(24) ==> false\n  isPerfectCube(25) ==> false\n  isPerfectCube(26) ==> false\n  isPerfectCube(27) ==> false\n  isPerfectCube(28) ==> false\n  isPerfectCube(29) ==> false\n  isPerfectCube(30) ==> false\n  isPerfectCube(31) ==> false\n  isPerfectCube(32) ==> false\n  isPerfectCube(33) ==> false\n  isPerfectCube(34) ==> false\n  isPerfectCube(35) ==> false\n  isPerfectCube(36) ==> false\n  isPerfectCube(37) ==> false\n  isPerfectCube(38) ==> false\n  isPerfectCube(39) ==> false\n  isPerfectCube(40) ==> false\n  isPerfectCube(41) ==> false\n  isPerfectCube(42) ==> false\n  isPerfectCube(43) ==> false\n  isPerfectCube(44) ==> false\n  isPerfectCube(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexkey(\"AB\"));\nconsole.log(hexkey(\"1077E\"));\nconsole.log(hexkey(\"ABED1A33\"));\nconsole.log(hexkey(\"123456789ABCDEF0\"));\nconsole.log(hexkey(\"2020\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  const binary = '';\n  let binaryNum = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n  let decimalDigitCount = 0;\n\n  while (decimalDigitCount < decimal) {\n    decimalDigit = Math.floor(decimal / Math.pow(2, binaryDigitCount));\n    binaryNum = binaryNum + decimalDigit;\n    binaryDigitCount++;\n  }\n\n  while (binaryDigitCount < 32) {\n    binaryDigit = Math.floor(binaryNum / Math.pow(2, binaryDigitCount));\n    binary = binary + binaryDigit;\n    binaryDigitCount++;\n  }\n\n  return binary + 'db';\n};\n\nconst binToDecimal = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal2 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal3 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal4 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal5 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal6 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal7 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal8 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal9 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt(binaryDigitCount);\n    decimalDigit = decimalDigit + binaryDigit * Math.pow(2, binaryDigitCount);\n    binaryDigitCount++;\n  }\n\n  return decimalDigit;\n};\n\nconst binToDecimal10 = (binary) => {\n  const decimal = 0;\n  let binaryDigit = 0;\n  let binaryDigitCount = 0;\n  let decimalDigit = 0;\n\n  while (binaryDigitCount < binary.length) {\n    binaryDigit = binary.charAt", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const product = numbers.reduce((acc, curr) => acc * curr, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a tuple consisting of the sum of the numbers and the product of the numbers.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5])\n  (15, 120)\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  (21, 720)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7])\n  (28, 840)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8])\n  (36, 1080)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  (45, 1260)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (54, 1440)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  (63, 1680)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  (72, 1890)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  (81, 2700)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  (90, 3600)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  (99, 5400)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  (108, 6400)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  (117, 9600)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  (126, 12000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  (135, 15600)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  (144, 18000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  (153, 21000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  (162, 24000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  (171, 27000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  (180, 36000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  (189, 45000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  (198, 54000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  (207, 60000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  (216, 90000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  (225, 120000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  (234, 150000)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  if (s.length < 3) return false;\n  const arr = s.split('');\n  let i = 0;\n  let j = 0;\n  while (i < arr.length) {\n    if (arr[i] === arr[i + 1]) {\n      i += 2;\n      j++;\n    } else {\n      if (j > 0) {\n        j = 0;\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconsole.log(isHAppy('a'));\nconsole.log(isHAppy('aa'));\nconsole.log(isHAppy('abcd'));\nconsole.log(isHAppy('aabb'));\nconsole.log(isHAppy('adb'));\nconsole.log(isHAppy('xyy'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] >= 3.7) {\n      result.push('A');\n    } else if (sorted[i] >= 3.3) {\n      result.push('A-');\n    } else if (sorted[i] >= 3.0) {\n      result.push('B+');\n    } else if (sorted[i] >= 2.7) {\n      result.push('B');\n    } else if (sorted[i] >= 2.3) {\n      result.push('B-');\n    } else if (sorted[i] >= 2.0) {\n      result.push('C+');\n    } else if (sorted[i] >= 1.7) {\n      result.push('C');\n    } else if (sorted[i] >= 1.3) {\n      result.push('C-');\n    } else if (sorted[i] >= 1.0) {\n      result.push('D+');\n    } else if (sorted[i] >= 0.7) {\n      result.push('D');\n    } else if (sorted[i] >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n};\n\nconsole.log(numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  const len = string.length\n  if (len === 1) return false\n  if (len === 2) return true\n  if (len === 3) return true\n  if (len === 4) return true\n  if (len === 5) return true\n  if (len === 6) return true\n  if (len === 7) return true\n  if (len === 8) return true\n  if (len === 9) return true\n  if (len === 10) return true\n  if (len === 11) return true\n  if (len === 12) return true\n  if (len === 13) return true\n  if (len === 14) return true\n  if (len === 15) return true\n  if (len === 16) return true\n  if (len === 17) return true\n  if (len === 18) return true\n  if (len === 19) return true\n  if (len === 20) return true\n  if (len === 21) return true\n  if (len === 22) return true\n  if (len === 23) return true\n  if (len === 24) return true\n  if (len === 25) return true\n  if (len === 26) return true\n  if (len === 27) return true\n  if (len === 28) return true\n  if (len === 29) return true\n  if (len === 30) return true\n  if (len === 31) return true\n  if (len === 32) return true\n  if (len === 33) return true\n  if (len === 34) return true\n  if (len === 35) return true\n  if (len === 36) return true\n  if (len === 37) return true\n  if (len === 38) return true\n  if (len === 39) return true\n  if (len === 40) return true\n  if (len === 41) return true\n  if (len === 42) return true\n  if (len === 43) return true\n  if (len === 44) return true\n  if (len === 45) return true\n  if (len === 46) return true\n  if (len === 47) return true\n  if (len === 48) return true\n  if (len === 49) return true\n  if (len === 50) return true\n  if (len === 51) return true\n  if (len === 52) return true\n  if (len === 53) return true\n  if (len === 54) return true\n  if (len === 55) return true\n  if (len === 56) return true\n  if (len === 57) return true\n  if (len === 58) return true\n  if (len === 59) return true\n  if (len === 60) return true\n  if (len === 61) return true\n  if (len === 62) return true\n  if (len === 63) return true\n  if (len === 64) return true\n  if (len === 65) return true\n  if (len === 66) return true\n  if (len === 67) return true\n  if (len === 68) return true\n  if (len === 69) return true\n  if (len === 70) return true\n  if (len === 71) return true\n  if (len === 72) return true\n  if (len === 73) return true\n  if (len === 74) return true\n  if (len === 75) return true\n  if (len === 76) return true\n  if (len === 77) return true\n  if (len === 78) return true\n  if (len === 79) return true\n  if (len === 80) return true\n  if (len === 81) return true\n  if (len === 82) return true\n  if (len === 83) return true\n  if (len === 84) return true\n  if (len === 85) return true\n  if (len === 86) return true\n  if (len === 87) return true\n  if (len === 88) return true\n  if (len === 89) return true\n  if (len === 90) return true\n  if (len === 91) return true\n  if (len === 92) return true\n  if (len === 93) return true\n  if (len === 94) return true\n  if (len === 95) return true\n  if (len === 96) return true\n  if (len === 97) return true\n  if (len === 98) return true\n  if (len === 99) return true\n  if (len === 100) return true\n  if (len === 101) return true\n  if (len === 102) return true\n  if (len === 103) return true\n  if (len === 104) return true\n  if (len === 105) return true\n  if (len === 106) return true\n  if (len === 107) return true\n  if (len === 108) return true\n  if (len === 109) return true\n  if (len === 110) return true\n  if (len === 111) return true\n  if (len === 112) return true\n  if (len === 113) return true\n  if (len === 114) return true\n  if (len === 115) return true\n  if (len === 116) return true\n  if (len === 117) return true\n  if (len === 118) return true\n  if (len === 119) return true\n  if (len === 120) return true\n  if (len === 121) return true\n  if (len === 122) return true\n  if (len === 123) return true\n  if (len === 124) return true\n  if (len === 125) return true\n  if (len === 126) return true\n  if (len === 127) return true\n  if (len === 128) return true\n  if (len === 129) return true\n  if (len === 130) return true\n  if (len === 131) return true\n  if (len === 132) return true\n  if (len === 133) return true\n  if (len === 134) return true\n  if (len === 135) return true\n  if (len === 136) return true\n  if (len === 137) return true\n  if (len === 138) return true\n  if (len === 139) return true\n  if (len === 140) return true\n  if (len === 141) return true\n  if (len === 142) return true\n  if (len === 143)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd14 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconst staRtsONeEnd15 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num /", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe2 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe3 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe4 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe5 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe6 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe7 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe8 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe9 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe10 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe11 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe12 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe13 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe14 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe15 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe16 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe17 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe18 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe19 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe20 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe21 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe22 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe23 = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst solVe24 = (N) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ')\n  const sortedWords = words.sort((a, b) => {\n    return a.charCodeAt(0) - b.charCodeAt(0)\n  })\n  const newString = sortedWords.join(' ')\n  return newString\n}\n\nconsole.log(antIShuFfle('Hello World!!!'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow2 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow3 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow4 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow5 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow6 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow7 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow8 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow9 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.join('')\n      if (index === x) {\n        row.push(coord)\n      }\n    }\n    result.push(row)\n  }\n  return result\n}\n\nconst getrow", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const len = array.length\n  const half = Math.floor(len / 2)\n  const sorted = array.slice()\n  let i = 0\n  let j = half\n  let sum = 0\n  while (i < half && j < len) {\n    sum = array[i] + array[j]\n    if (sum % 2 === 0) {\n      sorted[i++] = array[j++]\n    } else {\n      sorted[j++] = array[i++]\n    }\n  }\n  while (i < half) {\n    sorted[i++] = array[j++]\n  }\n  while (j < len) {\n    sorted[j++] = array[i++]\n  }\n  return sorted\n}\n\nexport default sorTArrAy\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    return alphabet[(n + alphabet.length - 1) % alphabet.length];\n  };\n  return s.split('').map(rot).join('');\n};\n\nconst decRypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const rot = (n) => {\n    return alphabet[(n + alphabet.length - 1) % alphabet.length];\n  };\n  return s.split('').map(rot).join('');\n};\n\nconst encrypt = (s) => {\n  return encRypt(s);\n};\n\nconst decrypt = (s) => {\n  return decRypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {\n  return encrypt(s);\n};\n\nconst decrypt = (s) => {\n  return decrypt(s);\n};\n\nconst encrypt = (s) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxRoll = numbers[0];\n  const maxRollIndex = 0;\n  const maxRollLength = 1;\n  const maxRollLengthIndex = 0;\n  const maxRollLengthLength = 1;\n  const maxRollLengthLengthIndex = 0;\n  const maxRollLengthLengthLength = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxRoll = numbers[i];\n      maxRollIndex = i;\n      maxRollLength = 1;\n      maxRollLengthIndex = i;\n      maxRollLengthLength = 1;\n      maxRollLengthLengthIndex = i;\n      maxRollLengthLengthLength = 1;\n    } else if (numbers[i] === max) {\n      if (i - maxIndex > maxRollLength) {\n        maxRoll = numbers[i];\n        maxRollIndex = i;\n        maxRollLength = i - maxIndex;\n        maxRollLengthIndex = i;\n        maxRollLengthLength = i - maxIndex;\n        maxRollLengthLengthIndex = i;\n        maxRollLengthLengthLength = i - maxIndex;\n      }\n    }\n  }\n  return [max, maxIndex, maxRoll, maxRollIndex, maxRollLength, maxRollLengthIndex, maxRollLengthLength, maxRollLengthLengthIndex, maxRollLengthLengthLength];\n};\n\nexport default rolLingmax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  const min = lst[0];\n  const index = lst.indexOf(min);\n  if (index === -1) {\n    return null;\n  }\n  const second = lst[index + 1];\n  return second;\n};\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5]));\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2]));\nconsole.log(nexTSmaLlest([]));\nconsole.log(nexTSmaLlest([1, 1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint2 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint3 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint4 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint5 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint6 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint7 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint8 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint9 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  const messageArray = message.split('')\n  const messageLength = messageArray.length\n  const newMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    if (messageArray[i].toUpperCase() === messageArray[i].toLowerCase()) {\n      newMessage.push(messageArray[i].toUpperCase())\n    } else {\n      newMessage.push(messageArray[i].toLowerCase())\n    }\n  }\n  return newMessage.join('')\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places behind that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decOde('TGST')\n  'This is a message'\n  >>> decOde('HKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decOde = (message) => {\n  const messageArray = message.split('')\n  const messageLength = messageArray.length\n  const newMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    if (messageArray[i].toUpperCase() === messageArray[i].toLowerCase()) {\n      newMessage.push(messageArray[i].toLowerCase())\n    } else {\n      newMessage.push(messageArray[i].toUpperCase())\n    }\n  }\n  return newMessage.join('')\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('This is a message')\n  'TGST'\n  >>> encOde('This is a message')\n  'HKS KS C MGSSCGG'\n  */\nconst encOde2 = (message) => {\n  const messageArray = message.split('')\n  const messageLength = messageArray.length\n  const newMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    if (messageArray[i].toUpperCase() === messageArray[i].toLowerCase()) {\n      newMessage.push(messageArray[i].toUpperCase())\n    } else {\n      newMessage.push(messageArray[i].toLowerCase())\n    }\n  }\n  return newMessage.join('')\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places behind that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decOde('TGST')\n  'This is a message'\n  >>> decOde('HKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decOde2 = (message) => {\n  const messageArray = message.split('')\n  const messageLength = messageArray.length\n  const newMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    if (messageArray[i].toUpperCase() === messageArray[i].toLowerCase()) {\n      newMessage.push(messageArray[i].toLowerCase())\n    } else {\n      newMessage.push(messageArray[i].toUpperCase())\n    }\n  }\n  return newMessage.join('')\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('This is a message')\n  'TGST'\n  >>> encOde('This is a message')\n  'HKS KS C MGSSCGG'\n  */\nconst encOde3 = (message) => {\n  const messageArray = message.split('')\n  const messageLength = messageArray.length\n  const newMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    if (messageArray[i].toUpperCase() === messageArray[i].toLowerCase()) {\n      newMessage.push(messageArray[i].toUpperCase())\n    } else {\n      newMessage.push(messageArray[i].toLowerCase())\n    }\n  }\n  return newMessage.join('')\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places behind that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decOde('TGST')\n  'This is a message'\n  >>> decOde('HKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decOde3 = (message) => {\n  const messageArray = message.split('')\n  const messageLength = messageArray.length\n  const newMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    if (messageArray[i].toUpperCase() === messageArray[i].toLowerCase()) {\n      newMessage.push(messageArray[i].toLowerCase())\n    } else {\n      newMessage.push(messageArray[i].toU", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = true;\n    for (let j = 2; j < Math.pow(10, num.length); j++) {\n      if (num % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      max = Math.max(max, num);\n    }\n  }\n  return max;\n};\n\nconsole.log(skjKasdKd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjKasdKd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjKasdKd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjKasdKd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjKasdKd([0,81,12,3,1,21]));\nconsole.log(skjKasdKd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  const allKeysAreStrings = keys.every(key => typeof key ==='string');\n  const allKeysAreLowerCase = keys.every(key => key.toLowerCase() === key);\n  return allKeysAreStrings && allKeysAreLowerCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  const allKeysAreStrings = keys.every(key => typeof key ==='string');\n  const allKeysAreUpperCase = keys.every(key => key.toUpperCase() === key);\n  return allKeysAreStrings && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  const allKeysAreStrings = keys.every(key => typeof key ==='string');\n  const allKeysAreLowerCase = keys.every(key => key.toLowerCase() === key);\n  return allKeysAreStrings && allKeysAreLowerCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  const allKeysAreStrings = keys.every(key => typeof key ==='string');\n  const allKeysAreUpperCase = keys.every(key => key.toUpperCase() === key);\n  return allKeysAreStrings && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  const keys = Object.keys(dict);\n  const allKeysAreStrings = keys.every(key => typeof key ==='string');\n  const allKeysAreLowerCase = keys.every(key => key.toLowerCase() === key);\n  return allKeysAreStrings && allKeysAreLowerCase;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nfunction isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconsole.log(couNtUpto(5));\nconsole.log(couNtUpto(11));\nconsole.log(couNtUpto(0));\nconsole.log(couNtUpto(20));\nconsole.log(couNtUpto(1));\nconsole.log(couNtUpto(18));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY2 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY3 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY4 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY5 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY6 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY7 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY8 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY9 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY10 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY11 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY12 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY13 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY14 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY15 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY16 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY17 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY18 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY19 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY20 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY21 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY22 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b % 10;\n  }\n  return result;\n};\n\nconst mulTiplY23 = (a, b) => {\n  let result = 0;\n  for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtLowPer = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtLowOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtVowPer = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtVowOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase() || s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 0\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtConsPer = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase() && s[i].toLowerCase()!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtConsOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase() && s[i].toLowerCase()!== s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 1\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtConsVowPer = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase() && s[i].toLowerCase()!== s[i + 1].toLowerCase()) {\n      count++;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const num = parseFloat(value);\n  const numInt = Math.floor(num);\n  const numFrac = num - numInt;\n  const numInt2 = Math.floor(numInt + numFrac);\n  if (numInt2 === numInt) {\n    return numInt;\n  } else {\n    return numInt2;\n  }\n};\n\nexport default cloSestintegEr;\n<|endoftext|>", "passed": 0, "run_status": 2}
