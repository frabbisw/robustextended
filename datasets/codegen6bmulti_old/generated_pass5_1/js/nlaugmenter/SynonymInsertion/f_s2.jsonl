{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer cheeseparing to each other than \n   given render threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      diffs.push(Math.abs(numbers[i] - numbers[j]))\n    }\n  }\n  const diffSum = diffs.reduce((a, b) => a + b)\n  return diffSum < threshold\n}\n\nexport default hasCloseElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument containing control multiple groups of nested parentheses parenthesis. Your goal is to \n   separate those group into separate disjoined strings and return the list of those. \n   Separate groups are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore dismiss any spaces in the input input signal string bowed stringed instrument.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split('(');\n  const paren_groups_length = paren_groups.length;\n  const paren_groups_length_minus_1 = paren_groups_length - 1;\n  const paren_groups_length_minus_2 = paren_groups_length_minus_1 - 1;\n  const paren_groups_length_minus_3 = paren_groups_length_minus_2 - 1;\n  const paren_groups_length_minus_4 = paren_groups_length_minus_3 - 1;\n  const paren_groups_length_minus_5 = paren_groups_length_minus_4 - 1;\n  const paren_groups_length_minus_6 = paren_groups_length_minus_5 - 1;\n  const paren_groups_length_minus_7 = paren_groups_length_minus_6 - 1;\n  const paren_groups_length_minus_8 = paren_groups_length_minus_7 - 1;\n  const paren_groups_length_minus_9 = paren_groups_length_minus_8 - 1;\n  const paren_groups_length_minus_10 = paren_groups_length_minus_9 - 1;\n  const paren_groups_length_minus_11 = paren_groups_length_minus_10 - 1;\n  const paren_groups_length_minus_12 = paren_groups_length_minus_11 - 1;\n  const paren_groups_length_minus_13 = paren_groups_length_minus_12 - 1;\n  const paren_groups_length_minus_14 = paren_groups_length_minus_13 - 1;\n  const paren_groups_length_minus_15 = paren_groups_length_minus_14 - 1;\n  const paren_groups_length_minus_16 = paren_groups_length_minus_15 - 1;\n  const paren_groups_length_minus_17 = paren_groups_length_minus_16 - 1;\n  const paren_groups_length_minus_18 = paren_groups_length_minus_17 - 1;\n  const paren_groups_length_minus_19 = paren_groups_length_minus_18 - 1;\n  const paren_groups_length_minus_20 = paren_groups_length_minus_19 - 1;\n  const paren_groups_length_minus_21 = paren_groups_length_minus_20 - 1;\n  const paren_groups_length_minus_22 = paren_groups_length_minus_21 - 1;\n  const paren_groups_length_minus_23 = paren_groups_length_minus_22 - 1;\n  const paren_groups_length_minus_24 = paren_groups_length_minus_23 - 1;\n  const paren_groups_length_minus_25 = paren_groups_length_minus_24 - 1;\n  const paren_groups_length_minus_26 = paren_groups_length_minus_25 - 1;\n  const paren_groups_length_minus_27 = paren_groups_length_minus_26 - 1;\n  const paren_groups_length_minus_28 = paren_groups_length_minus_27 - 1;\n  const paren_groups_length_minus_29 = paren_groups_length_minus_28 - 1;\n  const paren_groups_length_minus_30 = paren_groups_length_minus_29 - 1;\n  const paren_groups_length_minus_31 = paren_groups_length_minus_30 - 1;\n  const paren_groups_length_minus_32 = paren_groups_length_minus_31 - 1;\n  const paren_groups_length_minus_33 = paren_groups_length_minus_32 - 1;\n  const paren_groups_length_minus_34 = paren_groups_length_minus_33 - 1;\n  const paren_groups_length_minus_35 = paren_groups_length_minus_34 - 1;\n  const paren_groups_length_minus_36 = paren_groups_length_minus_35 - 1;\n  const paren_groups_length_minus_37 = paren_groups_length_minus_36 - 1;\n  const paren_groups_length_minus_38 = paren_groups_length_minus_37 - 1;\n  const paren_groups_length_minus_39 = paren_groups_length_minus_38 - 1;\n  const paren_groups_length_minus_40 = paren_groups_length_minus_39 - 1;\n  const paren_groups_length_minus_41 = paren_groups_length_minus_40 - 1;\n  const paren_groups_length_minus_42 = paren_groups_length_minus_41 - 1;\n  const paren_groups_length_minus_43 = paren_groups_length_minus_42 - 1;\n  const paren_groups_length_minus_44 = paren_groups_length_minus_43 - 1;\n  const paren_groups_length_minus_45 = paren_groups_length_minus_44 - 1;\n  const paren_groups_length_minus_46 = paren_groups_length_minus_45 - 1;\n  const paren_groups_length_minus_47 = paren_groups_length_minus_46 - 1;\n  const paren_groups_length_minus_48 = paren_groups_length_minus_47 - 1;\n  const paren_groups_length_minus_49 = paren_groups_length_minus_48 - 1;\n  const paren_groups_length_minus_50 = paren_groups_length_minus_49 - 1;\n  const paren_groups_length_minus_51 = paren_groups_length_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the shortest brusque palindrome that begins begin with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: \n   - Find the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = string.split('').reverse().join('');\n  let suffix = string.split('').join('');\n  let result = prefix + suffix;\n  return result;\n}\n\n/* Find the longest brusque palindrome that begins with a supplied string.\n   Algorithm idea is simple dim-witted: ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make have a pile atomic pile of n levels of stones. \n   The first beginning level has n stones. \n   The number act of stones in the next level is: \n       - the next odd curious number if n is odd. \n       - the next even tied number if n is even. \n   Return the number phone number of stones in each level floor in a list, where element component at index exponent \n   i represents the number of stones gem in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n + 1 : n;\n  };\n  const floor = (n) => {\n    return n === 1? [n] : [odd(n), even(n)];\n  };\n  return floor(n);\n};\n\nconst makeAPile = (n) => {\n  const odd = (n) => {\n    return n % 2 === 1? n + 1 : n;\n  };\n  const even = (n) => {\n    return n % 2 === 0? n +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  You will be given a string of words parole separated divide by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n   to split the string into words password and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words parole separated by commas or spaces. Your task job is \n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*This function takes two positive plus numbers act x and y and returns the \n   biggest even integer number phone number that is in the range [x, y] inclusive. If \n   there's no such number, then the function routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum(left, right);\n  }\n  if (left < x) {\n    return chooseNum(left, y);\n  }\n  if (right > y) {\n    return chooseNum(x, right);\n  }\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum2(left, right);\n  }\n  if (left < x) {\n    return chooseNum2(left, y);\n  }\n  if (right > y) {\n    return chooseNum2(x, right);\n  }\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum3(left, right);\n  }\n  if (left < x) {\n    return chooseNum3(left, y);\n  }\n  if (right > y) {\n    return chooseNum3(x, right);\n  }\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum4(left, right);\n  }\n  if (left < x) {\n    return chooseNum4(left, y);\n  }\n  if (right > y) {\n    return chooseNum4(x, right);\n  }\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum5(left, right);\n  }\n  if (left < x) {\n    return chooseNum5(left, y);\n  }\n  if (right > y) {\n    return chooseNum5(x, right);\n  }\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum6(left, right);\n  }\n  if (left < x) {\n    return chooseNum6(left, y);\n  }\n  if (right > y) {\n    return chooseNum6(x, right);\n  }\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum7(left, right);\n  }\n  if (left < x) {\n    return chooseNum7(left, y);\n  }\n  if (right > y) {\n    return chooseNum7(x, right);\n  }\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum8(left, right);\n  }\n  if (left < x) {\n    return chooseNum8(left, y);\n  }\n  if (right > y) {\n    return chooseNum8(x, right);\n  }\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let left = mid - 1;\n  let right = mid + 1;\n  if (left < x && right > y) {\n    return chooseNum9(left, right);\n  }\n  if (left < x) {\n    return chooseNum9(left, y);\n  }\n  if (right > y) {\n    return chooseNum9(x, right);\n  }\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You are given two positive integers integer n and m, and your task job is to compute the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest integer and convert commute that to binary. \n   If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n_m - 92", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted classify list of all \n   elements component that hasn't any even digit. \n\n   Note: Returned list should be sorted classify in increasing order. \n  \n   For example case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      digits.push(x);\n    }\n    x = Math.floor(x / 10);\n  }\n  return digits;\n};\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(33));\nconsole.log(uniqueDigits(1422));\nconsole.log(uniqueDigits(1));\nconsole.log(uniqueDigits(152));\nconsole.log(uniqueDigits(323));\nconsole.log(uniqueDigits(10));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse invert the resulting array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFinger = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverse = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert2 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert3 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert4 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert5 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert6 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert7 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert8 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames = names.map((name, index) => {\n    return reversed[index]\n  })\n  return reversedNames\n}\n\nconst byFingerReverseInvert9 = (arr) => {\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversedNames =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* Implement the function f that takes fill n as a parameter argument, \n   and returns a list of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n   or the sum of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f22 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f23 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f24 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f25 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f26 = (n) => {\n  const factorials", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number numeral of even and odd leftover \n   integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome2 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome3 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome4 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome5 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome6 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome7 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome8 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome9 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome10 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome11 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome12 = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome13 = (n) => {\n  let even =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function countNums which takes fill an array of integers integer and returns \n   the number of elements element which has a sum kernel of digits > 0. \n   If a number act is negative, then its first signed digit will be negative damaging: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      const sum = num + num;\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly ordered regulate. Your task job is to determine if \n   it is possible to get perplex an array sorted in non - decreasing order by performing perform \n   the following operation on the given array: \n       You are allowed to perform do right shift operation any number issue of times. \n  \n   One right correct shift operation mathematical process means mean shifting shift all elements element of the array by one \n   position in the right proper direction. The last element of the array will be moved to \n   the starting position placement in the array i.e. 0th index. \n\n   If it is possible potential to obtain the sorted grouped array by performing perform the above operation \n   then return true else return false. \n   If the given contribute array is empty then return true. \n\n   Note: The given sacrifice list is guaranteed to have unique elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    while (arr[i] < arr[j]) {\n      if (i === 0) return false;\n      i--;\n    }\n    while (arr[i] > arr[j]) {\n      if (j === len - 1) return false;\n      j++;\n    }\n    if (i === j) {\n      arr[i] = arr[j];\n      j--;\n    } else {\n      arr[i] = arr[j];\n      arr[j] = arr[i];\n      i--;\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    while (arr[i] < arr[j]) {\n      if (i === 0) return false;\n      i--;\n    }\n    while (arr[i] > arr[j]) {\n      if (j === len - 1) return false;\n      j++;\n    }\n    if (i === j) {\n      arr[i] = arr[j];\n      j--;\n    } else {\n      arr[i] = arr[j];\n      arr[j] = arr[i];\n      i--;\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    while (arr[i] < arr[j]) {\n      if (i === 0) return false;\n      i--;\n    }\n    while (arr[i] > arr[j]) {\n      if (j === len - 1) return false;\n      j++;\n    }\n    if (i === j) {\n      arr[i] = arr[j];\n      j--;\n    } else {\n      arr[i] = arr[j];\n      arr[j] = arr[i];\n      i--;\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    while (arr[i] < arr[j]) {\n      if (i === 0) return false;\n      i--;\n    }\n    while (arr[i] > arr[j]) {\n      if (j === len - 1) return false;\n      j++;\n    }\n    if (i === j) {\n      arr[i] = arr[j];\n      j--;\n    } else {\n      arr[i] = arr[j];\n      arr[j] = arr[i];\n      i--;\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    while (arr[i] < arr[j]) {\n      if (i === 0) return false;\n      i--;\n    }\n    while (arr[i] > arr[j]) {\n      if (j === len - 1) return false;\n      j++;\n    }\n    if (i === j) {\n      arr[i] = arr[j];\n      j--;\n    } else {\n      arr[i] = arr[j];\n      arr[j] = arr[i];\n      i--;\n      j--;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall = (arr) => {\n  let len = arr.length;\n  if (len === 0) return true;\n  let i = 0;\n  let j = len - 1;\n  let k = 0;\n  while (i < j) {\n    while (arr[i] < arr[j]) {\n      if (i === 0) return false;\n      i--;\n    }\n    while (arr[i] > arr[j]) {\n      if (j === len - 1) return false;\n      j++;\n    }\n    if (i === j) {\n      arr[i] = arr[j];\n      j--;\n    } else {\n      arr[i] = arr[j];\n      arr[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor2 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor3 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor4 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor5 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor6 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor7 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor8 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor9 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting dwell only of 1s and 0s zero. \n   Perform binary XOR on these inputs and return result consequence also besides as a string.\n  >>> stringXor('0101010101', '1010101010')\n  '1010101010'\n  */\nconst stringXor10 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In this problem, you will implement a function affair that takes drive two lists of numbers, \n   and determines specify whether it is possible to perform an exchange of elements chemical element \n   between them to make lst1 a list of only even numbers. \n   There is no limit on the number of exchanged substitute elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make form \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise differently, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return 'NO';\n  }\n  let lst1_even = lst1.filter(x => x % 2 === 0);\n  let lst2_even = lst2.filter(x => x % 2 === 0);\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return 'NO';\n  }\n  let lst1_odd = lst1.filter(x => x % 2!== 0);\n  let lst2_odd = lst2.filter(x => x % 2!== 0);\n  if (lst1_odd.length === 0 || lst2_odd.length === 0) {\n    return 'YES';\n  }\n  return 'NO';\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); //=> 'YES'\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 5]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 6]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 7]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 8]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 9]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 10]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 11]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 12]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 13]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 14]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 15]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 16]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 17]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 18]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 19]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 20]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 21]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 22]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 23]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 24]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 25]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 26]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 27]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 28]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 29]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 30]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 31]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 32]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 33]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 34]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 35]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 36]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 37]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 38]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 39]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 40]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 41]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 42]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 43]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 44]); //=> 'NO'\nexchange([1, 2, 3, 4], [1, 2, 3, 45]); //=> 'NO'\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n   of the letter with the most repetition repeat and containing the corresponding count. \n   If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n  of the letter with the most repetition repeat and containing the corresponding count. \n  If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n  of the letter with the most repetition repeat and containing the corresponding count. \n  If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n  of the letter with the most repetition repeat and containing the corresponding count. \n  If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n  of the letter with the most repetition repeat and containing the corresponding count. \n  If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (result[letter] === undefined) {\n      result[letter] = 1;\n    } else {\n      result[letter]++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing a space outer space separated divide lowercase letters, return a dictionary \n  of the letter with the most repetition repeat and containing the corresponding count. \n  If several respective letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const result = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*Task \n   We are given two strings bowed stringed instrument s and c, you have to deleted delete all the characters in s that are equal to any character fictional character in c\n   then check if the result string chain is palindrome. \n   A string is called palindrome if it reads the same backward as forward. \n   You should return a tuple containing contain the result string and true / false assumed for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      continue;\n    }\n    result += s[i];\n  }\n  return [result, s.length === result.length];\n};\n\nconst test = (s, c) => {\n  let result = reverseDelete(s, c);\n  return [result[0], result[1]];\n};\n\nmodule.exports = test;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*Given a list of strings, where each string consists dwell of only digits finger, return a list.\n   Each element i of the output should be \" the number phone number of odd elements in the \n   string chain i of the input. \" where all the i's should be replaced by the number \n   of odd digits digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const oddCount = (str) => {\n      const oddCount = (str) => {\n        const oddCount = (str) => {\n          const oddCount = (str) => {\n            const oddCount = (str) => {\n              const oddCount = (str) => {\n                const oddCount = (str) => {\n                  const oddCount = (str) => {\n                    const oddCount = (str) => {\n                      const oddCount = (str) => {\n                        const oddCount = (str) => {\n                          const oddCount = (str) => {\n                            const oddCount = (str) => {\n                              const oddCount = (str) => {\n                                const oddCount = (str) => {\n                                  const oddCount = (str) => {\n                                    const oddCount = (str) => {\n                                      const oddCount = (str) => {\n                                        const oddCount = (str) => {\n                                          const oddCount = (str) => {\n                                            const oddCount = (str) => {\n                                              const oddCount = (str) => {\n                                                const oddCount = (str) => {\n                                                  const oddCount = (str) => {\n                                                    const oddCount = (str) => {\n                                                      const oddCount = (str) => {\n                                                        const oddCount = (str) => {\n                                                          const oddCount = (str) => {\n                                                           const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of integers nums, find receive the minimum minimal sum of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Number.MAX_VALUE;\n  let minSubArraySum = [];\n  let i = 0;\n  let j = 0;\n  let subArraySum = 0;\n  while (i < nums.length) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n      minSubArraySum = [];\n    }\n    if (sum > 0) {\n      minSubArraySum.push(sum);\n      sum = 0;\n    }\n    i++;\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells well. Each row quarrel represents a single well, \n   and each 1 in a row rowing represents constitute a single unit whole of water. \n   Each well has a corresponding bucket that can be used to extract water urine from it, \n   and all buckets have the same capacity.\n   Your task is to use the buckets bucket to empty the wells well. \n   Output the number numeral of times fourth dimension you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0][0];\n  const [row1, col1] = grid[0][1];\n  const [row2, col2] = grid[1][0];\n  const [row3, col3] = grid[1][1];\n  const [row4, col4] = grid[2][0];\n  const [row5, col5] = grid[2][1];\n  const [row6, col6] = grid[3][0];\n  const [row7, col7] = grid[3][1];\n  const [row8, col8] = grid[4][0];\n  const [row9, col9] = grid[4][1];\n  const [row10, col10] = grid[5][0];\n  const [row11, col11] = grid[5][1];\n  const [row12, col12] = grid[6][0];\n  const [row13, col13] = grid[6][1];\n  const [row14, col14] = grid[7][0];\n  const [row15, col15] = grid[7][1];\n  const [row16, col16] = grid[8][0];\n  const [row17, col17] = grid[8][1];\n  const [row18, col18] = grid[9][0];\n  const [row19, col19] = grid[9][1];\n  const [row20, col20] = grid[10][0];\n  const [row21, col21] = grid[10][1];\n  const [row22, col22] = grid[11][0];\n  const [row23, col23] = grid[11][1];\n  const [row24, col24] = grid[12][0];\n  const [row25, col25] = grid[12][1];\n  const [row26, col26] = grid[13][0];\n  const [row27, col27] = grid[13][1];\n  const [row28, col28] = grid[14][0];\n  const [row29, col29] = grid[14][1];\n  const [row30, col30] = grid[15][0];\n  const [row31, col31] = grid[15][1];\n  const [row32, col32] = grid[16][0];\n  const [row33, col33] = grid[16][1];\n  const [row34, col34] = grid[17][0];\n  const [row35, col35] = grid[17][1];\n  const [row36, col36] = grid[18][0];\n  const [row37, col37] = grid[18][1];\n  const [row38, col38] = grid[19][0];\n  const [row39, col39] = grid[19][1];\n  const [row40, col40] = grid[20][0];\n  const [row41, col41] = grid[20][1];\n  const [row42, col42] = grid[21][0];\n  const [row43, col43] = grid[21][1];\n  const [row44, col44] = grid[22][0];\n  const [row45, col45] = grid[22][1];\n  const [row46, col46] = grid[23][0];\n  const [row47, col47] = grid[23][1];\n  const [row48, col48] = grid[24][0];\n  const [row49, col49] = grid[24][1];\n  const [row50, col50] = grid[25][0];\n  const [row51, col51] = grid[25][1];\n  const [row52, col52] = grid[26][0];\n  const [row53, col53] = grid[26][1];\n  const [row54, col54] = grid[27][0];\n  const [row55, col55] = grid[27][1];\n  const [row56, col56] = grid[28][0];\n  const [row57, col57] = grid[28][1];\n  const [row58, col58] = grid[29][0];\n  const [row59, col59] = grid[29][1];\n  const [row60, col60] = grid[30][0];\n  const [row61, col61] = grid[30][1];\n  const [row62, col62] = grid[31][0];\n  const [row63, col63] = grid[31][1];\n  const [row64, col64] = grid[32][0];\n  const [row65, col65] = grid[32][1];\n  const [row66, col66] = grid[33][0];\n  const [row67, col67] = grid[33][1];\n  const [row68, col68] = grid[34][0];\n  const [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integers integer according harmonize to \n   number of ones in their binary representation theatrical performance in ascending order. \n   For similar exchangeable number of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice(0);\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*Given a string s and a natural number numeral n, you have been tasked tax to implement \n   a function that returns come back a list of all words from string s that contain incorporate exactly \n   n consonants, in order these words appear look in the string s.\n   If the string s is empty then the function should return an empty list.\n   Note eminence: you may assume the input input signal string bowed stringed instrument contains check only letters letter and spaces distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const letters = []\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      continue\n    }\n    if (s[i] === '\\n') {\n      continue\n    }\n    if (s[i] === '\\t') {\n      continue\n    }\n    if (s[i] === '\\r') {\n      continue\n    }\n    if (s[i] === '\\b') {\n      continue\n    }\n    if (s[i] === '\\f') {\n      continue\n    }\n    if (s[i] === '\\v') {\n      continue\n    }\n    if (s[i] === '\\0') {\n      continue\n    }\n    if (s[i] === '\\u0008') {\n      continue\n    }\n    if (s[i] === '\\u0009') {\n      continue\n    }\n    if (s[i] === '\\u000A') {\n      continue\n    }\n    if (s[i] === '\\u000B') {\n      continue\n    }\n    if (s[i] === '\\u000C') {\n      continue\n    }\n    if (s[i] === '\\u000D') {\n      continue\n    }\n    if (s[i] === '\\u0020') {\n      continue\n    }\n    if (s[i] === '\\u00A0') {\n      continue\n    }\n    if (s[i] === '\\u1680') {\n      continue\n    }\n    if (s[i] === '\\u180E') {\n      continue\n    }\n    if (s[i] === '\\u2000') {\n      continue\n    }\n    if (s[i] === '\\u2001') {\n      continue\n    }\n    if (s[i] === '\\u2002') {\n      continue\n    }\n    if (s[i] === '\\u2003') {\n      continue\n    }\n    if (s[i] === '\\u2004') {\n      continue\n    }\n    if (s[i] === '\\u2005') {\n      continue\n    }\n    if (s[i] === '\\u2006') {\n      continue\n    }\n    if (s[i] === '\\u2007') {\n      continue\n    }\n    if (s[i] === '\\u2008') {\n      continue\n    }\n    if (s[i] === '\\u2009') {\n      continue\n    }\n    if (s[i] === '\\u200A') {\n      continue\n    }\n    if (s[i] === '\\u2028') {\n      continue\n    }\n    if (s[i] === '\\u2029') {\n      continue\n    }\n    if (s[i] === '\\u202F') {\n      continue\n    }\n    if (s[i] === '\\u205F') {\n      continue\n    }\n    if (s[i] === '\\u2060') {\n      continue\n    }\n    if (s[i] === '\\u3000') {\n      continue\n    }\n    if (s[i] === '\\uFEFF') {\n      continue\n    }\n    if (s[i] === '\\uFFF9') {\n      continue\n    }\n    if (s[i] === '\\uFFFA') {\n      continue\n    }\n    if (s[i] === '\\uFFFB') {\n      continue\n    }\n    if (s[i] === '\\uFFFC') {\n      continue\n    }\n    if (s[i] === '\\uFFFD') {\n      continue\n    }\n    if (s[i] === '\\uD801') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uDFFF') {\n      continue\n    }\n    if (s[i] === '\\uD", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You are given a word. Your task is to find receive the closest close vowel that stands between \n   two consonants from the right correct side of the word (case sensitive sensible). \n  \n   Vowels in the beginning and ending doesn't count. Return empty string chain if you didn't \n   find any vowel met the above condition. \n\n   You may assume wear that the given string drawstring contains control English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find(v => {\n    const start = word.indexOf(v);\n    const end = word.lastIndexOf(v);\n    const wordLength = word.length;\n    const startIndex = start + 1;\n    const endIndex = end - 1;\n    const startIndexLength = startIndex - start;\n    const endIndexLength = endIndex - end;\n    const startIndexLengthIsNotZero = startIndexLength > 0;\n    const endIndexLengthIsNotZero = endIndexLength > 0;\n    const startIndexLengthIsNotZeroAndEndIndexLengthIsNotZero = startIndexLength > 0 && endIndexLength > 0;\n    const startIndexLengthIsNotZeroAndEndIndexLengthIsZero = startIndexLength > 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsNotZero = startIndexLength === 0 && endIndexLength > 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndexLength === 0;\n    const startIndexLengthIsZeroAndEndIndexLengthIsZero = startIndexLength === 0 && endIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* You are given a list of two strings, both strings bowed stringed instrument consist dwell of open \n   parentheses' (' or close near parentheses parenthesis')' only. \n   Your job is to check control if it is possible to concatenate the two strings in\n   some order, that the resulting string chain will be good. \n   A string S is considered to be good dear if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr === '(') {\n      stack.push(curr)\n    } else if (curr === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    } else if (stack.length === 0) {\n      result.push(curr)\n    }\n  }\n  return result.length === 0? 'Yes' : result.join('')\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case character of multiple \n   strings of the same length duration. Return null in case the input input signal list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive plus integer k, return a sorted classify list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLength = arr.length\n  const sortedArr = arr.slice()\n  const sortedArrLength = sortedArr.length\n  const sortedArrIndex = sortedArr.slice()\n  const sortedArrIndexLength = sortedArrIndex.length\n  const sortedArrIndexMax = sortedArrIndexLength - k\n\n  for (let i = 0; i < sortedArrIndexMax; i++) {\n    sortedArrIndex[i] = sortedArr[sortedArrIndex[i]]\n  }\n\n  return sortedArrIndex\n}\n\nexport default maximum\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the odd leftover elements component that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter(x => x % 2 === 1);\n  const even = lst.filter(x => x % 2 === 0);\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements component with at most two digits from the first k elements element of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements27 = (arr, k) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted classify list that has the odd leftover numbers in collatz sequence. \n\n   The Collatz conjecture speculation is a conjecture in mathematics that concerns a sequence succession defined \n   as follows: start with any positive integer n. Then each term terminus is obtained from the \n   previous term as follows come: if the previous former term condition is even, the next term condition is one half one-half of \n   the previous former term. If the previous term terminus is odd, the next term is 3 times the previous \n   term terminus plus 1. The conjecture guess is that no matter what value of n, the sequence will always constantly reach achieve 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted screen in increasing order orderliness.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getNextCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return n * 2 + 1;\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getNextCollatz(i);\n  }\n  return odd.concat(collatz);\n};\n\nconst getOddCollatz = (n) => {\n  let odd = [],\n    collatz = [],\n    i = 1,\n    j = 0;\n  while (i <= n) {\n    collatz.push(i);\n    if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You have to write a function which validates validate a given render date string and \n   returns true on-key if the date is valid otherwise false. \n   The date is valid if all of the following be rules are satisfied: \n   1. The date string is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number issue of days is not less than 1 or higher gamey than 30 days sidereal day for months calendar month 4,6,9,11. And, the number phone number of days day is not less than 1 or higher than 29 for the month 2. \n   3. The months month should not be less than 1 or higher than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  const days = new Date(year, month - 1, day);\n  const daysInMonth = days.getDate();\n  const daysInYear = days.getMonth() + 1;\n  const daysInCalendar = days.getMonth() + 1;\n  const daysInSidereal = days.getDay();\n  const daysInMonthCalendar = days.getMonth() + 1;\n  const daysInMonthSidereal = days.getDay();\n  const daysInMonthCalendarSidereal = days.getDay();\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  if (daysInYear < 1 || daysInYear > 31) {\n    return false;\n  }\n  if (daysInMonth < 1 || daysInMonth > daysInMonthCalendar) {\n    return false;\n  }\n  if (daysInMonthCalendar < 1 || daysInMonthCalendar > daysInMonthCalendarSidereal) {\n    return false;\n  }\n  if (daysInMonthSidereal < 1 || daysInMonthSidereal > daysInMonthCalendarSidereal) {\n    return false;\n  }\n  if (daysInMonthCalendarSidereal < 1 || daysInMonthCalendarSidereal > daysInMonthCalendar) {\n    return false;\n  }\n  if (daysInMonthCalendar < 1 || daysInMonthCalendar > daysInMonth) {\n    return false;\n  }\n  if (daysInMonthSidereal < 1 || daysInMonthSidereal > daysInMonth) {\n    return false;\n  }\n  if (daysInYear < 1 || daysInYear > daysInYearCalendar) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYearCalendarSidereal) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYearCalendar) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false;\n  }\n  if (daysInYearSidereal < 1 || daysInYearSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendarSidereal < 1 || daysInYearCalendarSidereal > daysInYear) {\n    return false;\n  }\n  if (daysInYearCalendar < 1 || daysInYearCalendar > daysInYear) {\n    return false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* Given a string of words parole, return a list of words son split on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas',' if no commas comma exists you should return the number of lower - case letters letter with odd order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const words2 = txt.split(/\\s*,\\s*/);\n  const words3 = txt.split(/\\s*[a-z]/);\n  const words4 = txt.split(/\\s*[A-Z]/);\n  const words5 = txt.split(/\\s*[0-9]/);\n  const words6 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words7 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words8 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words9 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words10 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words11 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words12 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words13 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words14 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words15 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words16 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words17 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words18 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words19 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words20 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words21 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words22 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words23 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words24 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words25 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words26 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words27 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words28 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words29 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words30 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words31 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words32 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words33 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words34 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words35 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words36 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words37 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words38 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words39 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words40 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words41 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words42 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words43 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words44 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words45 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words46 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words47 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words48 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words49 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words50 = txt.split(/\\s*[a-zA-Z0-9]/);\n  const words51 = txt.split(/\\s*[a-zA-Z0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are sorted classify \n   in ascending ascend order. If list has more than 1 duplicate of the same \n   number phone number, return false. Assume no negative numbers phone number and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const duplicates = lst.filter((x, i) => i < sortedLength - 1 && sorted[i + 1] === x);\n  return!duplicates.length;\n};\n\nexport default isSorted;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval time interval is a pair couple of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  if (length === 0) {\n    return \"NO\"\n  }\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return product * sum\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  const product = arr.reduce((acc, curr) => acc * curr, 1)\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need want to return\n   sum kernel of magnitudes of integers multiplied multiply by product merchandise of all signs \n   of each number act in the array, represented by 1, -1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns column (N > = 2) and a positive incontrovertible integer k, \n   each cell of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly once on the cells cell of the grid.\n\n   You have to find the minimum path of length k in the grid. You can start startle \n   from any cell, and in each step you can move to any of the neighbor cells cell, \n   in other words, you can go run low to cells cellular telephone which share partake an edge boundary with you current \n   cell cellular telephone. \n   Please note that a path of length distance k means visiting exactly k cells (not \n   necessarily distinct clear-cut). \n   You CANNOT go rifle off the grid.\n   A path A (of length duration k) is considered view less than a path B (of length distance k) if \n   after making the ordered order lists of the values on the cells cellular telephone that A and B go \n   through (let's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique. \n   Return an ordered list of the values on the cells that the minimum minimal path way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n).fill(0)\n  const visited = new Array(n).fill(false)\n  const visited2 = new Array(n).fill(false)\n  const visited3 = new Array(n).fill(false)\n  const visited4 = new Array(n).fill(false)\n  const visited5 = new Array(n).fill(false)\n  const visited6 = new Array(n).fill(false)\n  const visited7 = new Array(n).fill(false)\n  const visited8 = new Array(n).fill(false)\n  const visited9 = new Array(n).fill(false)\n  const visited10 = new Array(n).fill(false)\n  const visited11 = new Array(n).fill(false)\n  const visited12 = new Array(n).fill(false)\n  const visited13 = new Array(n).fill(false)\n  const visited14 = new Array(n).fill(false)\n  const visited15 = new Array(n).fill(false)\n  const visited16 = new Array(n).fill(false)\n  const visited17 = new Array(n).fill(false)\n  const visited18 = new Array(n).fill(false)\n  const visited19 = new Array(n).fill(false)\n  const visited20 = new Array(n).fill(false)\n  const visited21 = new Array(n).fill(false)\n  const visited22 = new Array(n).fill(false)\n  const visited23 = new Array(n).fill(false)\n  const visited24 = new Array(n).fill(false)\n  const visited25 = new Array(n).fill(false)\n  const visited26 = new Array(n).fill(false)\n  const visited27 = new Array(n).fill(false)\n  const visited28 = new Array(n).fill(false)\n  const visited29 = new Array(n).fill(false)\n  const visited30 = new Array(n).fill(false)\n  const visited31 = new Array(n).fill(false)\n  const visited32 = new Array(n).fill(false)\n  const visited33 = new Array(n).fill(false)\n  const visited34 = new Array(n).fill(false)\n  const visited35 = new Array(n).fill(false)\n  const visited36 = new Array(n).fill(false)\n  const visited37 = new Array(n).fill(false)\n  const visited38 = new Array(n).fill(false)\n  const visited39 = new Array(n).fill(false)\n  const visited40 = new Array(n).fill(false)\n  const visited41 = new Array(n).fill(false)\n  const visited42 = new Array(n).fill(false)\n  const visited43 = new Array(n).fill(false)\n  const visited44 = new Array(n).fill(false)\n  const visited45 = new Array(n).fill(false)\n  const visited46 = new Array(n).fill(false)\n  const visited47 = new Array(n).fill(false)\n  const visited48 = new Array(n).fill(false)\n  const visited49 = new Array(n).fill(false)\n  const visited50 = new Array(n).fill(false)\n  const visited51 = new Array(n).fill(false)\n  const visited52 = new Array(n).fill(false)\n  const visited53 = new Array(n).fill(false)\n  const visited54 = new Array(n).fill(false)\n  const visited55 = new Array(n).fill(false)\n  const visited56 = new Array(n).fill(false)\n  const visited57 = new Array(n).fill(false)\n  const visited58 = new Array(n).fill(false)\n  const visited59 = new Array(n).fill(false)\n  const visited60 = new Array(n).fill(false)\n  const visited61 = new Array(n).fill(false)\n  const visited62 = new Array(n).fill(false)\n  const visited63 = new Array(n).fill(false)\n  const visited64 = new Array(n).fill(false)\n  const visited65 = new Array(n).fill(false)\n  const visited66 = new Array(n).fill(false)\n  const visited67 = new Array(n).fill(false)\n  const visited68 = new Array(n).fill(false)\n  const visited69 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* Return a greatest common coarse divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor(a, b);\n  }\n  return a;\n};\n\n/**\n  * Return the greatest common divisor of two integers integer a and b\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  */\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return gcd(b, a);\n  }\n  if (a > b) {\n    return gcd(a, b);\n  }\n  return a;\n};\n\n/**\n * Return the least common multiple of two integers integer a and b\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/**\n * Return the sum of two integers integer a and b\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/**\n * Return the difference of two integers integer a and b\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/**\n * Return the product of two integers integer a and b\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/**\n * Return the quotient of two integers integer a and b\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/**\n * Return the remainder of two integers integer a and b\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n/**\n * Return the absolute value of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst abs = (a) => {\n  return a < 0? -a : a;\n};\n\n/**\n * Return the sign of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst sign = (a) => {\n  return a < 0? -1 : 1;\n};\n\n/**\n * Return the square root of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst sqrt = (a) => {\n  return Math.sqrt(a);\n};\n\n/**\n * Return the cube root of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst cbrt = (a) => {\n  return Math.cbrt(a);\n};\n\n/**\n * Return the natural logarithm of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst log = (a) => {\n  return Math.log(a);\n};\n\n/**\n * Return the base 10 logarithm of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst log10 = (a) => {\n  return Math.log10(a);\n};\n\n/**\n * Return the hyperbolic cosine of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst cos = (a) => {\n  return Math.cos(a);\n};\n\n/**\n * Return the hyperbolic sine of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst sin = (a) => {\n  return Math.sin(a);\n};\n\n/**\n * Return the hyperbolic tangent of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst tan = (a) => {\n  return Math.tan(a);\n};\n\n/**\n * Return the hyperbolic cotangent of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst cot = (a) => {\n  return 1 / Math.tan(a);\n};\n\n/**\n * Return the hyperbolic secant of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst sec = (a) => {\n  return 1 / Math.cos(a);\n};\n\n/**\n * Return the hyperbolic cosecant of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst csc = (a) => {\n  return 1 / Math.sin(a);\n};\n\n/**\n * Return the hyperbolic arcsine of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst asin = (a) => {\n  return Math.asin(a);\n};\n\n/**\n * Return the hyperbolic arccosine of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst acos = (a) => {\n  return Math.acos(a);\n};\n\n/**\n * Return the hyperbolic arctangent of an integer integer a\n * @param {number} a\n * @return {number}\n */\nconst atan = (a) => {\n  return Math.atan(a);\n};\n\n/**\n * Return the hyperbolic arccotangent of an integer integer a\n * @param {number", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it was studied learn deeply profoundly by mathematicians in \n   the last couple centuries century. However, what people don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1];\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd leftover digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i < n; i++) {\n    result *= i;\n  }\n  let odd = result % 10;\n  if (odd === 0) {\n    return 0;\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes fill a string as input stimulation which contains only square brackets bracket. \n   The function should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true dependable \n   * / \n const isNested = (string) = > {\n  const isNested = (string) = > {\n    const isNested = (string) = > {\n      const isNested = (string) = > {\n        const isNested = (string) = > {\n          const isNested = (string) = > {\n            const isNested = (string) = > {\n              const isNested = (string) = > {\n                const isNested = (string) = > {\n                  const isNested = (string) = > {\n                    const isNested = (string) = > {\n                      const isNested = (string) = > {\n                        const isNested = (string) = > {\n                          const isNested = (string) = > {\n                            const isNested = (string) = > {\n                              const isNested = (string) = > {\n                                const isNested = (string) = > {\n                                  const isNested = (string) = > {\n                                    const isNested = (string) = > {\n                                      const isNested = (string) = > {\n                                        const isNested = (string) = > {\n                                          const isNested = (string) = > {\n                                            const isNested = (string) = > {\n                                              const isNested = (string) = > {\n                                                const isNested = (string) = > {\n                                                  const isNested = (string) = > {\n                                                    const isNested = (string) = > {\n                                                      const isNested = (string) = > {\n                                                        const isNested = (string) = > {\n                                                          const isNested = (string) = > {\n                                                           const isNested = (string) = > {\n                                                            const isNested = (string) = > {\n                                                            const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                                             const isNested = (string) = > {\n                                    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You need want to return the sum kernel of squared numbers in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.round(lst[i]), 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string bowed stringed instrument is an alphabetical character quality and is not \n   a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotALetter\n}\n\n/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a number and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/\\d/)\n  const isNotANumber =!isANumber\n  return isNotANumber\n}\n\n/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a number and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/\\d/)\n  const isNotANumber =!isANumber\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  return isNotANumber || isNotALetter\n}\n\n/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a number and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpace = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/\\d/)\n  const isNotANumber =!isANumber\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  const isSpace = lastChar.match(/\\s/)\n  const isNotSpace =!isSpace\n  return isNotANumber || isNotALetter || isNotSpace\n}\n\n/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a number and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpaceOrPunctuation = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/\\d/)\n  const isNotANumber =!isANumber\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  const isSpace = lastChar.match(/\\s/)\n  const isNotSpace =!isSpace\n  const isPunctuation = lastChar.match(/[.,?!;:@#$%^&*()_+\\-=\\[\\]{}\\\\|`~]/)\n  const isNotPunctuation =!isPunctuation\n  return isNotANumber || isNotALetter || isNotSpace || isNotPunctuation\n}\n\n/* Create a function that returns render true on-key if the last character \n   of a given sacrifice string is a number and is not a part of a word, and false otherwise. \n   Note eminence: \" word \" is a group of characters separated by space quad.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumberOrALetterOrSpaceOrPunctuationOrOther = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/\\d/)\n  const isNotANumber =!isANumber\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  const isNotALetter =!isALetter\n  const isSpace = lastChar.match(/\\s/)\n  const isNot", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*Create a function which returns the largest bombastic index exponent of an element which \n   is not greater than or equal adequate to the element immediately preceding it. If \n   no such element chemical element exists then return -1. The given array will not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength < 2) return -1;\n  const arrCopy = arr.slice();\n  const arrCopyLength = arrCopy.length;\n  const max = arrCopy[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arrCopyLength; i++) {\n    if (arrCopy[i] > max) {\n      max = arrCopy[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallest(lst);\n  const smallest = smallestSmallest(lst);\n  return largest? largestSmallest(lst.slice(largest.index + 1)) : largestSmallest(lst.slice(1));\n};\n\n/*\n  Create a function that returns render a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers, and 'b' is the smallest modest \n   of positive plus integers in a list.\n   If there is no negative damaging or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a < b) {\n     return a\n   } else if (a > b) {\n     return b\n   } else {\n     return null\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a\n  } else if (a > b) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the smaller variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 1 \n   compareOne(1, \" 2,3 \") ➞ 1 \n   compareOne(\"5,1\", \" 6 \") ➞ \"5\" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a < b) {\n     return a\n   } else if (a > b) {\n     return b\n   } else {\n     return null\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a\n  } else if (a > b) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \"5,1\" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a < b) {\n     return a\n   } else if (a > b) {\n     return b\n   } else {\n     return null\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a\n  } else if (a > b) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the smaller variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 1 \n   compareOne(1, \" 2,3 \") ➞ 1 \n   compareOne(\"5,1\", \" 6 \") ➞ \"5\" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a < b) {\n     return a\n   } else if (a > b) {\n     return b\n   } else {\n     return null\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a\n  } else if (a > b) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the larger variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \"6\" \n   compareOne(\"1\", 1) ➞ null nothing \n   * / \n const compareOne = (a, b) = > {\n   if (a < b) {\n     return a\n   } else if (a > b) {\n     return b\n   } else {\n     return null\n   }\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a\n  } else if (a > b) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes fill integers integer, floats, or strings representing map \n   real numbers, and returns reelect the smaller variable in its given variable type character. \n   Return null if the values are equal. \n   Note eminence: If a real number phone number is represented as a string bowed stringed instrument, the floating float point decimal point might be. or, \n\n   compareOne(1, 2.5) ➞ 1 \n   compareOne(1, \" 2,3 \") ➞ 1 \n   compareOne(\"5,1\", \" 6 \") �", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive convinced even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive even numbers pool\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive even numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive even numbers pool\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive even numbers pool\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive even numbers pool\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n * 2 + 1\n}\n\n/*\n  Evaluate whether the given number numeral n can be written write as the sum of exactly 4 positive odd numbers pool\n  Example\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The Brazilian factorial is defined as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  let factorial = 1\n  for (let", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* Return list of all prefixes from shortest to longest long of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.split('')\n  for (let i = 0; i < prefix.length; i++) {\n    for (let j = i + 1; j < prefix.length; j++) {\n      const prefixString = prefix.slice(0, i + 1).concat(prefix.slice(i + 1, j + 1))\n      if (prefixString.length > 1) {\n        prefixes.push(prefixString)\n      }\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest long of the input stimulation string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    for (let j = i + 1; j < suffix.length; j++) {\n      const suffixString = suffix.slice(0, i + 1).concat(suffix.slice(i + 1, j + 1))\n      if (suffixString.length > 1) {\n        suffixes.push(suffixString)\n      }\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest long of the input stimulation string\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string text, replace supplant all spaces quad in it with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces with underscores, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace all consecutive straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example_2\"\n  fixSpaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixUnderscoresAndSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotesAndQuotesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotesAndQuotesAndQuotesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscoresAndSpacesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotes = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n   and if a string has more than 2 consecutive back-to-back underscores, \n   then replace all consecutive straight underscores with - \n  \n   fixSpaces(\"Example\") == \"Example\"", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*Create a function which takes a string bowed stringed instrument representing exemplify a file's name, and returns \n 'Yes' if the the file's name is valid, and returns' No' otherwise differently. \n   A file's name is considered to be valid if and only if all the following conditions circumstance \n   are met: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one dot department of transportation'.' \n   - The substring before the dot should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot department of transportation should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === -1) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 0) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 1) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 2) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 3) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 4) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 5) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 6) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 7) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 8) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 9) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 10) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 11) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 12) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 13) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 14) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 15) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 16) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 17) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 18) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 19) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 20) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 21) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 22) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 23) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 24) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 25) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 26) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 27) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 28) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 29) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 30) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 31) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 32) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 33) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 34) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 35) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 36) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 37) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 38) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 39) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 40) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 41) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 42) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 43) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 44) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 45) {\n    return 'No';\n  }\n  if (file_name.indexOf('.') === 46) {\n    return 'No';\n  }\n  if (file_name.indexOf('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers integer. For all entries entry in the list, the function shall square the integer entry introduction if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change the entries in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This function will take a list of integers integer. For all entries entry in the", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a string representing typify a sentence,\n   the sentence contains control some words separated by a space distance, \n   and you have to return a string bowed stringed instrument that contains the words password from the original sentence,\n   whose lengths are prime numbers, \n   the order of the words lyric in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordsLength = words.length\n  const primeNumbers = []\n  for (let i = 2; i < wordsLength; i++) {\n    while (isPrime(i)) {\n      primeNumbers.push(i)\n    }\n  }\n  const primeNumbersLength = primeNumbers.length\n  const primeNumbersSum = primeNumbers.reduce((a, b) => a + b)\n  const primeNumbersProduct = primeNumbers.reduce((a, b) => a * b)\n  const primeNumbersProductLength = primeNumbersProduct.toString().length\n  const primeNumbersProductLengthSum = primeNumbersProduct.toString().split('.').length\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const primeNumbersProductLengthSum = primeNumbersProductLengthSum - 1\n  const", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*Your task is to implement a function affair that will simplify the expression formula \n   x * n. The function returns true on-key if x * n evaluates to a whole number act and false \n   otherwise. Both x and n, are string representation of a fraction, and have the following come format, \n   < numerator>/<denominator > where both numerator and denominator are positive cocksure whole numbers. \n\n   You can assume wear that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true on-key \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n   const x = x.toString();\n   const n = n.toString();\n   const x_len = x.length;\n   const n_len = n.length;\n   const x_len_n = x_len + n_len;\n   const x_len_n_len = x_len_n + 1;\n   const x_len_n_len_len = x_len_n_len + 1;\n   const x_len_n_len_len_len = x_len_n_len_len + 1;\n   const x_len_n_len_len_len_len = x_len_n_len_len_len + 1;\n   const x_len_n_len_len_len_len_len = x_len_n_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len = x_len_n_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len_len_len_len_len_len_len = x_len_n_len_len_len_len_len_len_len_len_len_len_len_len + 1;\n   const x_len_n_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function which sorts classify the given render list of integers \n   in ascending order orderliness according harmonize to the sum of their digits digit. \n   Note: if there are several items with similar sum union of their digits, \n   order them based on their index exponent in original list.\n\n   For example exercise:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    return aDigits - bDigits;\n  });\n  return sorted;\n};\n\nconst orderByPoints10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aDigits = a.toString().split('').reduce((acc, num) => {\n      acc += num.charCodeAt(0);\n      return acc;\n    }, 0);\n    const bDigits = b.toString().split('').red", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes an array of numbers numbers pool as input stimulation and returns \n   the number of elements element in the array that are greater capital than 10 and both \n   first and last final digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create make an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let result = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* There are eight planets in our solar system: the closerst to the Sun \n   is Mercury, the next following one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write spell a function that takes two planet satellite names as strings planet1 and planet2.\n   The function routine should return a tuple containing all planets whose orbits are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function routine should return an empty tuple if planet1 or planet2\n   are not correct planet satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toUpperCase();\n  const planet2 = planet2.toUpperCase();\n  const planet1Orbit = planet1.toLowerCase();\n  const planet2Orbit = planet2.toLowerCase();\n  const planet1OrbitOrbit = planet1Orbit.toLowerCase();\n  const planet2OrbitOrbit = planet2Orbit.toLowerCase();\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit = planet2OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbit.toLowerCase();\n  const planet1OrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOrbitOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings bowed stringed instrument as a parameter argument, \n   deletes the strings that have odd leftover lengths from it, \n   and returns the resulted result list with a sorted order, \n   The list is always a list of strings and never an array of numbers phone number, \n   and it may contain duplicates. \n   The order of the list should be ascending rise by length of each word news, and you \n   should return the list sorted classify by that rule principle. \n   If two words son have the same length distance, sort the list alphabetically. \n   The function should return a list of strings in sorted screen order. \n   You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sum % 2 === 1) {\n      result.push(lst[i]);\n    }\n    sum -= lst[i].length;\n  }\n  return result;\n};\n\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  for (let i = 0; i < lst.length; i++) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a')\n  'a'\n  >>> stringSequence(5, 'a')\n  '0 1 2 3 4 5 a'\n  */\nconst stringSequence = (n, s) => {\n  let s1 = '';\n  for (let i = 0; i < n; i++) {\n    s1 += `${i} `;\n  }\n  return s1;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b')\n  'a b'\n  >>> stringSequence(5, 'a', 'b')\n  '0 1 2 3 4 5 a b'\n  */\nconst stringSequence = (n, s1, s2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c')\n  'a b c'\n  >>> stringSequence(5, 'a', 'b', 'c')\n  '0 1 2 3 4 5 a b c'\n  */\nconst stringSequence = (n, s1, s2, s3) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd')\n  'a b c d'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd')\n  '0 1 2 3 4 5 a b c d'\n  */\nconst stringSequence = (n, s1, s2, s3, s4) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e')\n  'a b c d e'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e')\n  '0 1 2 3 4 5 a b c d e'\n  */\nconst stringSequence = (n, s1, s2, s3, s4, s5) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f')\n  'a b c d e f'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f')\n  '0 1 2 3 4 5 a b c d e f'\n  */\nconst stringSequence = (n, s1, s2, s3, s4, s5, s6) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'a b c d e f g'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  '0 1 2 3 4 5 a b c d e f g'\n  */\nconst stringSequence = (n, s1, s2, s3, s4, s5, s6, s7) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'a b c d e f g h'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  '0 1 2 3 4 5 a b c d e f g h'\n  */\nconst stringSequence = (n, s1, s2, s3, s4, s5, s6, s7, s8) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing check space outer space - delimited numbers starting depart from 0 upto n inclusive.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  'a b c d e f g h i'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  '0 1 2 3 4 5 a b c d", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime choice number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* Given a list of numbers, return the sum kernel of squares square of the numbers \n   in the list that are odd. Ignore numbers issue that are negative minus or not integers. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input remark list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   let sum = 0\n   for (let i = 0; i < lst.length; i++) {\n     let num = lst[i]\n     if (num > 0) {\n       sum += num * num\n     }\n   }\n   return sum\n }\n */\n\nconst doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (num > 0) {\n      sum += num * num\n    }\n  }\n  return sum\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I think we all remember that feeling spirit when the result solution of some long - awaited \n   event is finally ultimately known. The feelings and thoughts thinking you have at that moment are \n   definitely worth noting down and comparing compare. \n   Your task is to determine if a person correctly guessed the results result of a number of matches match. \n   You are given two arrays array of scores grudge and guesses guess of equal length, where each index exponent shows a match. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference dispute between the guess and the score mark.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const grudge = game.slice(0)\n  const guess = guess.slice(0)\n  const diff = []\n  for (let i = 0; i < grudge.length; i++) {\n    if (grudge[i] === guess[i]) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(grudge[i] - guess[i]))\n    }\n  }\n  return diff\n}\n\n/*\n  Given a list of numbers, return the number of numbers that are divisible by the number.\n  \n  example:\n  \n  divisible([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You will be given the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional classes to the class course. The \n   strength of the extension is as follows be: Let CAP be the number of the uppercase \n   letters in the extension propagation's name, and let SM be the number of lowercase letters letter \n   in the extension's name, the strength persuasiveness is given render by the fraction CAP - SM. \n   You should find witness the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes arrive first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const sm = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || strength[cap] - strength[sm];\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You are given 2 words. You need want to return true on-key if the second word or any of its rotations is a substring in the first beginning word \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true genuine \n   cycpatternCheck(\"whassup\",\"psus\") = > false \n   cycpatternCheck(\"abab\",\"baa\") = > true \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\")\n   let b = b.split(\"\")\n   let i = 0\n   let j = 0\n   while (i < a.length && j < b.length) {\n     if (a[i] === b[j]) {\n       i++\n       j++\n     } else {\n       if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n         i++\n         j++\n       } else {\n         if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n           i++\n           j++\n         } else {\n           if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n             i++\n             j++\n           } else {\n             if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n               i++\n               j++\n             } else {\n               if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                 i++\n                 j++\n               } else {\n                 if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                   i++\n                   j++\n                 } else {\n                   if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                     i++\n                     j++\n                   } else {\n                     if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                       i++\n                       j++\n                     } else {\n                       if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                         i++\n                         j++\n                       } else {\n                         if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                           i++\n                           j++\n                         } else {\n                           if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j]) {\n                             i++\n                             j++\n                           } else {\n                             if (a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] && a[i] === b[j] &&", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*Given an integer. return a tuple that has the number of even and odd digits finger respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain receive its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lowercase. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  const intToRoman = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    11: 'XI',\n    12: 'XII',\n  };\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    result += roman[number % 10];\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in upper case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  const intToRoman = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    11: 'XI',\n    12: 'XII',\n  };\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    result += roman[number % 10];\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lower case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRomanLower = (number) => {\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  const intToRoman = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    11: 'XI',\n    12: 'XII',\n  };\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    result += roman[number % 10];\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return result.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in upper case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpperUpper = (number) => {\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  const intToRoman = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9: 'IX',\n    10: 'X',\n    11: 'XI',\n    12: 'XII',\n  };\n  let result = '';\n  let i = 0;\n  while (number > 0) {\n    result += roman[number % 10];\n    number = Math.floor(number / 10);\n    i++;\n  }\n  return result.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string bowed stringed instrument, \n   and return it in lower case. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRomanLowerLower = (number) => {\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\n  const intToRoman = {\n    1: 'I',\n    2: 'II',\n    3: 'III',\n    4: 'IV',\n    5: 'V',\n    6: 'VI',\n    7: 'VII',\n    8: 'VIII',\n    9", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum. Return true if the three \n   sides side form shape a right - angled fish triangle, false otherwise. \n   A right - angled fish triangle is a triangle in which one angle is right good angle or \n   90 degree academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  return (a + b > c && b + c > a && a + c > b)\n}\n\n/*\n Given the lengths of the three sides english of a triangle triangulum.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*Write a function that accepts a list of strings bowed stringed instrument. \n   The list contains control different words. Return the word with maximum maximal number \n   of unique characters quality. If multiple strings have maximum number of unique \n   characters quality, return the one which comes first in lexicographical order ordering. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string drawstring \" \n   findMax([\"name\", \" enam \", \" game plot \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0\n   for (let i = 0; i < words.length; i++) {\n     let word = words[i]\n     let unique = 0\n     for (let j = 0; j < word.length; j++) {\n       if (word.charAt(j) ==='') {\n         unique++\n       }\n     }\n     if (unique > max) {\n       max = unique\n     }\n   }\n   return words[0]\n }\n*/\n\nconst findMax = (words) => {\n  let max = 0\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let unique = 0\n    for (let j = 0; j < word.length; j++) {\n      if (word.charAt(j) ==='') {\n        unique++\n      }\n    }\n    if (unique > max) {\n      max = unique\n    }\n  }\n  return words[0]\n}\n\nconsole.log(findMax([\"name\", \" of \", \" string \"]))\nconsole.log(findMax([\"name\", \" enam \", \" game plot \"]))\nconsole.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \"]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eaten corrode a certain sealed number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                   the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat4 = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots, \n   but now you need to eat more carrots to complete dispatch the day's meals. \n   you should return an array of [ total number of eaten eat carrots after your meals, \n                                    the number of carrots left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still however be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <=", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* Given a string, find out how many distinct discrete characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i].toLowerCase();\n    charSet.add(char);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters fictional character (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first beginning list has basic algebra operations mathematical process, and \n   the second list is a list of integers. Use the two given sacrifice lists tilt to build the algebric \n   expression saying and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division class (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n  const operatorListLength = operatorList.length\n  const operandListLength = operandList.length\n\n  if (operatorListLength === 0) {\n    return operandList[0]\n  }\n\n  if (operandListLength === 0) {\n    return operatorList[0]\n  }\n\n  if (operatorListLength === 1) {\n    return operatorList[0] + operandList[0]\n  }\n\n  if (operandListLength === 1) {\n    return operatorList[0] + operandList[0]\n  }\n\n  if (operatorListLength === 2) {\n    return operatorList[0] + operatorList[1] + operandList[0]\n  }\n\n  if (operandListLength === 2) {\n    return operatorList[0] + operatorList[1] + operandList[1]\n  }\n\n  if (operatorListLength === 3) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operandList[0]\n  }\n\n  if (operandListLength === 3) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operandList[1]\n  }\n\n  if (operatorListLength === 4) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operandList[0]\n  }\n\n  if (operandListLength === 4) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operandList[1]\n  }\n\n  if (operatorListLength === 5) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operandList[0]\n  }\n\n  if (operandListLength === 5) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operandList[1]\n  }\n\n  if (operatorListLength === 6) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operandList[0]\n  }\n\n  if (operandListLength === 6) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operandList[1]\n  }\n\n  if (operatorListLength === 7) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operandList[0]\n  }\n\n  if (operandListLength === 7) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operandList[1]\n  }\n\n  if (operatorListLength === 8) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operatorList[7] + operandList[0]\n  }\n\n  if (operandListLength === 8) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operatorList[7] + operandList[1]\n  }\n\n  if (operatorListLength === 9) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operatorList[7] + operatorList[8] + operandList[0]\n  }\n\n  if (operandListLength === 9) {\n    return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operatorList[7] + operatorList[8] + operandList[1]\n  }\n\n  return operatorList[0] + operatorList[1] + operatorList[2] + operatorList[3] + operatorList[4] + operatorList[5] + operatorList[6] + operatorList[7] + operatorList[8] + operatorList[9] + operandList[0]\n}\n\nexport default doAlgebra\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse turn back its case casing from lower to upper or vise versa, \n   otherwise keep keep open it as it is. \n   If the string contains no letters letter, reverse the string. \n   The function should return the resulted string chain.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toUpperCase();\n    } else {\n      result += s[i].toLowerCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash hashish equivalent string bowed stringed instrument. \n   If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  Given two positive integers integer a and b, return the even tied digits between a\n   and b, in ascending order orderliness.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const num = i.toString();\n    if (num.length % 2 === 0) {\n      result.push(num);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole note, lasts four beats meter \n  ' o|' - half note bill, lasts two beats pulse \n  ' .|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument representing exemplify musical notes in a special particular ASCII format. \n   Your task is to parse this string chain and return list of integers corresponding to how many beats does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole note, lasts four beats meter \n 'o|' - half note bill, lasts two beats pulse \n  '.|' - quater note bill, lasts survive one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing a musical note. \n  Your task is to return the number of beats in the note. \n\n  >>> parseNote('o')\n  4\n  >>> parseNote('o|')\n  2\n  >>> parseNote('.')\n  1\n  >>> parseNote('o o|')\n  2\n  >>> parseNote('o o o|')\n  4\n  >>> parseNote('o o o o|')\n  8\n  */\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < note.length; i++) {\n    if (note[i] === 'o') {\n      beats.push(4);\n    } else if (note[i] === 'o|') {\n      beats.push(2);\n    } else if (note[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats.length;\n};\n\n/*\n  Input to this function is a string representing a musical note. \n  Your task is to return the number of beats in the note. \n\n  >>> parseNote('o')\n  4\n  >>> parseNote('o|')\n  2\n  >>> parseNote('.')\n  1\n  >>> parseNote('o o|')\n  2\n  >>> parseNote('o o o|')\n  4\n  >>> parseNote('o o o o|')\n  8\n  */\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < note.length; i++) {\n    if (note[i] === 'o') {\n      beats.push(4);\n    } else if (note[i] === 'o|') {\n      beats.push(2);\n    } else if (note[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats.length;\n};\n\n/*\n  Input to this function is a string representing a musical note. \n  Your task is to return the number of beats in the note. \n\n  >>> parseNote('o')\n  4\n  >>> parseNote('o|')\n  2\n  >>> parseNote('.')\n  1\n  >>> parseNote('o o|')\n  2\n  >>> parseNote('o o o|')\n  4\n  >>> parseNote('o o o o|')\n  8\n  */\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < note.length; i++) {\n    if (note[i] === 'o') {\n      beats.push(4);\n    } else if (note[i] === 'o|') {\n      beats.push(2);\n    } else if (note[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats.length;\n};\n\n/*\n  Input to this function is a string representing a musical note. \n  Your task is to return the number of beats in the note. \n\n  >>> parseNote('o')\n  4\n  >>> parseNote('o|')\n  2\n  >>> parseNote('.')\n  1\n  >>> parseNote('o o|')\n  2\n  >>> parseNote('o o o|')\n  4\n  >>> parseNote('o o o o|')\n  8\n  */\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < note.length; i++) {\n    if (note[i] === 'o') {\n      beats.push(4);\n    } else if (note[i] === 'o|') {\n      beats.push(2);\n    } else if (note[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats.length;\n};\n\n/*\n  Input to this function is a string representing a musical note. \n  Your task is to return the number of beats in the note. \n\n  >>> parseNote('o')\n  4\n  >>> parseNote('o|')\n  2\n  >>> parseNote('.')\n  1\n  >>> parseNote('o o|')\n  2\n  >>> parseNote('o o o|')\n  4\n  >>> parseNote('o o o o|')\n  8\n  */\nconst parseNote = (note_string) => {\n  const note = note_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < note.length; i++) {\n    if (note[i] === 'o') {\n      beats.push(4);\n    } else if (note[i] === 'o|') {\n      beats.push(2);\n    } else if (note[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats.length;\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* Find how many times a given substring can be found receive in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains all the characters in the alphabet.\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> longestSubstring('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxy", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* Input is a space - delimited demarcate string bowed stringed instrument of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return the string drawstring with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = numbersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortLetters = (letters) => {\n  const lettersArray = letters.split(' ')\n  const sortedLetters = lettersArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedLetters.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWords = (words) => {\n  const wordsArray = words.split(' ')\n  const sortedWords = wordsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedWords.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortSentences = (sentences) => {\n  const sentencesArray = sentences.split(' ')\n  const sortedSentences = sentencesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedSentences.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortLines = (lines) => {\n  const linesArray = lines.split(' ')\n  const sortedLines = linesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedLines.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortParagraphs = (paragraphs) => {\n  const paragraphsArray = paragraphs.split(' ')\n  const sortedParagraphs = paragraphsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedParagraphs.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortChunks = (chunks) => {\n  const chunksArray = chunks.split(' ')\n  const sortedChunks = chunksArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedChunks.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortLinesOfWords = (linesOfWords) => {\n  const linesOfWordsArray = linesOfWords.split(' ')\n  const sortedLinesOfWords = linesOfWordsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedLinesOfWords.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortSentencesOfWords = (sentencesOfWords) => {\n  const sentencesOfWordsArray = sentencesOfWords.split(' ')\n  const sortedSentencesOfWords = sentencesOfWordsArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedSentencesOfWords.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsOfSentences = (wordsOfSentences) => {\n  const wordsOfSentencesArray = wordsOfSentences.split(' ')\n  const sortedWordsOfSentences = wordsOfSentencesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedWordsOfSentences.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n  'one two three'\n  */\nconst sortWordsOfLines = (wordsOfLines) => {\n  const wordsOfLinesArray = wordsOfLines.split(' ')\n  const sortedWordsOfLines = wordsOfLinesArray.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sortedWordsOfLines.join(' ')\n}\n\n/*\n  Input:\n  'one two three'\n  Output:\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  let decimalPartChar = decimalPart.toString().charAt(0);\n  return decimalPartChar;\n}\n\n/* Given a positive floating float point compass point number, it can be decomposed into \n   and integer part (largest large integer smaller belittled than given number) and decimals decimal \n   (leftover part always smaller than 1). \n\n   Return the decimal part character of the number.\n  >>> truncateNumber(3.5)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select choice and return two that are the closest close to each \n   other and return them in order (smaller number phone number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [];\n  const closestIndex = [];\n  const closestDistance = [];\n  const closestDistanceIndex = [];\n  const closestDistanceSquared = [];\n  const closestDistanceSquaredIndex = [];\n  const closestDistanceSquaredIndex2 = [];\n  const closestDistanceSquaredIndex3 = [];\n  const closestDistanceSquaredIndex4 = [];\n  const closestDistanceSquaredIndex5 = [];\n  const closestDistanceSquaredIndex6 = [];\n  const closestDistanceSquaredIndex7 = [];\n  const closestDistanceSquaredIndex8 = [];\n  const closestDistanceSquaredIndex9 = [];\n  const closestDistanceSquaredIndex10 = [];\n  const closestDistanceSquaredIndex11 = [];\n  const closestDistanceSquaredIndex12 = [];\n  const closestDistanceSquaredIndex13 = [];\n  const closestDistanceSquaredIndex14 = [];\n  const closestDistanceSquaredIndex15 = [];\n  const closestDistanceSquaredIndex16 = [];\n  const closestDistanceSquaredIndex17 = [];\n  const closestDistanceSquaredIndex18 = [];\n  const closestDistanceSquaredIndex19 = [];\n  const closestDistanceSquaredIndex20 = [];\n  const closestDistanceSquaredIndex21 = [];\n  const closestDistanceSquaredIndex22 = [];\n  const closestDistanceSquaredIndex23 = [];\n  const closestDistanceSquaredIndex24 = [];\n  const closestDistanceSquaredIndex25 = [];\n  const closestDistanceSquaredIndex26 = [];\n  const closestDistanceSquaredIndex27 = [];\n  const closestDistanceSquaredIndex28 = [];\n  const closestDistanceSquaredIndex29 = [];\n  const closestDistanceSquaredIndex30 = [];\n  const closestDistanceSquaredIndex31 = [];\n  const closestDistanceSquaredIndex32 = [];\n  const closestDistanceSquaredIndex33 = [];\n  const closestDistanceSquaredIndex34 = [];\n  const closestDistanceSquaredIndex35 = [];\n  const closestDistanceSquaredIndex36 = [];\n  const closestDistanceSquaredIndex37 = [];\n  const closestDistanceSquaredIndex38 = [];\n  const closestDistanceSquaredIndex39 = [];\n  const closestDistanceSquaredIndex40 = [];\n  const closestDistanceSquaredIndex41 = [];\n  const closestDistanceSquaredIndex42 = [];\n  const closestDistanceSquaredIndex43 = [];\n  const closestDistanceSquaredIndex44 = [];\n  const closestDistanceSquaredIndex45 = [];\n  const closestDistanceSquaredIndex46 = [];\n  const closestDistanceSquaredIndex47 = [];\n  const closestDistanceSquaredIndex48 = [];\n  const closestDistanceSquaredIndex49 = [];\n  const closestDistanceSquaredIndex50 = [];\n  const closestDistanceSquaredIndex51 = [];\n  const closestDistanceSquaredIndex52 = [];\n  const closestDistanceSquaredIndex53 = [];\n  const closestDistanceSquaredIndex54 = [];\n  const closestDistanceSquaredIndex55 = [];\n  const closestDistanceSquaredIndex56 = [];\n  const closestDistanceSquaredIndex57 = [];\n  const closestDistanceSquaredIndex58 = [];\n  const closestDistanceSquaredIndex59 = [];\n  const closestDistanceSquaredIndex60 = [];\n  const closestDistanceSquaredIndex61 = [];\n  const closestDistanceSquaredIndex62 = [];\n  const closestDistanceSquaredIndex63 = [];\n  const closestDistanceSquaredIndex64 = [];\n  const closestDistanceSquaredIndex65 = [];\n  const closestDistanceSquaredIndex66 = [];\n  const closestDistanceSquaredIndex67 = [];\n  const closestDistanceSquaredIndex68 = [];\n  const closestDistanceSquaredIndex69 = [];\n  const closestDistanceSquaredIndex70 = [];\n  const closestDistanceSquaredIndex71 = [];\n  const closestDistanceSquaredIndex72 = [];\n  const closestDistanceSquaredIndex73 = [];\n  const closestDistanceSquaredIndex74 = [];\n  const closestDistanceSquaredIndex75 = [];\n  const closestDistanceSquaredIndex76 = [];\n  const closestDistanceSquaredIndex77 = [];\n  const closestDistanceSquaredIndex78 = [];\n  const closestDistanceSquaredIndex79 = [];\n  const closestDistanceSquaredIndex80 = [];\n  const closestDistanceSquaredIndex81 = [];\n  const closestDistanceSquaredIndex82 = [];\n  const closestDistanceSquaredIndex83 = [];\n  const closestDistanceSquaredIndex84 = [];\n  const closestDistanceSquaredIndex85 = [];\n  const closestDistanceSquaredIndex86 = [];\n  const closestDistanceSquaredIndex87 = [];\n  const closestDistanceSquaredIndex88 = [];\n  const closestDistanceSquaredIndex89 = [];\n  const closestDistanceSquaredIndex90 = [];\n  const closestDistanceSquaredIndex91 = [];\n  const closestDistanceSquaredIndex92 = [];\n  const closestDistanceSquaredIndex93 = [];\n  const closestDistanceSquaredIndex94 = [];\n  const closestDistanceSquaredIndex95 = [];\n  const closestDistanceSquaredIndex96 = [];\n  const closestDistanceSquaredIndex97 = [];\n  const closestDistanceSquaredIndex98 = [];\n  const closestDistanceSquaredIndex99 = [];\n  const closestDistanceSquaredIndex100 = [];\n  const closestDistanceSquaredIndex101 = [];\n  const closestDistanceSquaredIndex102 = [];\n  const closestDistanceSquaredIndex103 = [];\n  const closestDistanceSquaredIndex104 = [];\n  const closestDistanceSquaredIndex105 = [];\n  const closestDistanceSquaredIndex106 = [];\n  const closestDistanceSquaredIndex107 = [];\n  const closestDistanceSquaredIndex108 = [];\n  const closestDistanceSquaredIndex109 = [];\n  const closestDistanceSquaredIndex110 = [];\n  const closestDistanceSquaredIndex111 = [];\n  const closestDistanceSquaredIndex112 = [];\n  const closestDistanceSquaredIndex113 = [];\n  const closestDistanceSquaredIndex114 = [];\n  const closestDistanceSquaredIndex115 = [];\n  const closestDistanceSquaredIndex116 = [];\n  const closestDistanceSquaredIndex117 = [];\n  const closestDistanceSquaredIndex118 = [];\n  const closestDistanceSquaredIndex119 = [];\n  const closestDistanceSquaredIndex120 = [];\n  const closestDistanceSquaredIndex121 = [];\n  const closestDistanceSquaredIndex122 = [];\n  const closestDistance", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply give a linear analogue transform to that list,\n   such that the smallest number will become 0 and the largest large will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const rescaled = [\n    (n - min) / range,\n    (n - min) / range,\n    (n - min) / range,\n    (n - min) / range,\n    (n - min) / range\n  ]\n  return rescaled\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the end of each number.\n  >>> addToEnd([1, 2, 3])\n  [1, 2, 3, 4]\n  */\nconst addToEnd = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(numbers[i] + i)\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToStart = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(i + numbers[i])\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToEnd = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(numbers[i] + i)\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToStart = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(i + numbers[i])\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToEnd = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(numbers[i] + i)\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToStart = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(i + numbers[i])\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToEnd = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(numbers[i] + i)\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToStart = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(i + numbers[i])\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToEnd = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(numbers[i] + i)\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToStart = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(i + numbers[i])\n  }\n  return newNums\n}\n\n/**\n * Given a list of numbers, return a list of the same length, with the given\n * number added to the beginning of each number.\n  >>> addToStart([1, 2, 3])\n  [4, 5, 6]\n  */\nconst addToEnd = (numbers) => {\n  const newNums = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNums.push(numbers[i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterLists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for integers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFloats = (values) => {\n  return values.filter(v => typeof v === 'number' &&!isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* Return length of given yield string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen3 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen4 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen5 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen6 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen7 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen8 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen9 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen10 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen11 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen12 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen13 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen14 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen15 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen16 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen17 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen18 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen19 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen20 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen21 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n  >>> strlen('abc')\n  3\n  */\nconst strlen22 = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return length of given yield string\n", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* For a given number n, find receive the largest bombastic number that divides n evenly, smaller modest than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  while (n > 1) {\n    if (isPrime(n)) {\n      prime.push(n)\n    }\n    n = n / 2\n  }\n  for (let i = 0; i < prime.length; i++) {\n    for (let j = 0; j < prime[i]; j++) {\n      factors.push(prime[i])\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  while (n > 1) {\n    if (isPrime(n)) {\n      prime.push(n)\n    }\n    n = n / 2\n  }\n  for (let i = prime.length - 1; i >= 0; i--) {\n    for (let j = prime[i]; j > 0; j--) {\n      factors.push(prime[i])\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  while (n > 1) {\n    if (isPrime(n)) {\n      prime.push(n)\n    }\n    n = n / 2\n  }\n  for (let i = prime.length - 1; i >= 0; i--) {\n    for (let j = prime[i]; j > 0; j--) {\n      factors.push(prime[i])\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  while (n > 1) {\n    if (isPrime(n)) {\n      prime.push(n)\n    }\n    n = n / 2\n  }\n  for (let i = prime.length - 1; i >= 0; i--) {\n    for (let j = prime[i]; j > 0; j--) {\n      factors.push(prime[i])\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from smallest to largest large. \n   Each of the factors gene should be listed number act of times corresponding to how many times it appeares in factorization. \n   Input remark number should be equal to the product of all factors component\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  const factors = []\n  const prime = []\n  const isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  while (n > 1) {\n    if (isPrime(n)) {\n      prime.push(n)\n    }\n    n = n / 2\n  }\n  for (let i = prime.length - 1; i >= 0; i--) {\n    for (let j = prime[i]; j > 0; j--) {\n      factors.push(prime[i])\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors gene of given render integer in the order from largest to smallest large.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* From a list of integers, remove all elements component that occur happen more than once. \n   Keep order of elements element left entrust the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* For a given string, flip lowercase small letter characters fictional character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipCase('hELLO')\n  'hello'\n  */\nconst flipInverseCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase('hELLO')\n  'hello'\n  */\nconst flipInverseCase2 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase2('hELLO')\n  'hello'\n  */\nconst flipInverseCase3 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase3('hELLO')\n  'hello'\n  */\nconst flipInverseCase4 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase4('hELLO')\n  'hello'\n  */\nconst flipInverseCase5 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase5('hELLO')\n  'hello'\n  */\nconst flipInverseCase6 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase6('hELLO')\n  'hello'\n  */\nconst flipInverseCase7 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase7('hELLO')\n  'hello'\n  */\nconst flipInverseCase8 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase8('hELLO')\n  'hello'\n  */\nconst flipInverseCase9 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase9('hELLO')\n  'hello'\n  */\nconst flipInverseCase10 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase10('hELLO')\n  'hello'\n  */\nconst flipInverseCase11 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase11('hELLO')\n  'hello'\n  */\nconst flipInverseCase12 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase12('hELLO')\n  'hello'\n  */\nconst flipInverseCase13 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase13('hELLO')\n  'hello'\n  */\nconst flipInverseCase14 = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase small letter characters fictional character to lowercase and lowercase to uppercase.\n  >>> flipInverseCase14('hELLO')\n  'hello'\n  */\nconst flipInverseCase15 = (string) => {\n  return string.replace(/\\", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start originate with a given render prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\nexport default filterByPrefix;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank depository financial institution account report that starts with \n   zero balance. Your task is to detect if at any point decimal point the balance of account history fallls below zero, and \n   at that point function routine should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*Return true if a given number numeral is prime choice, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  const sqrt = Math.sqrt(n)\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  >>> isPrime(6)\n  true\n  >>> isPrime(7)\n  false\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients coefficient of a polynomial. \n   findZero find recover x such that poly(x) = 0. \n   findZero returns only only zero point, even if there are many. \n   Moreover furthermore, findZero only takes list xs having even number of coefficients coefficient \n   and largest non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let xs_copy = xs.slice();\n  let i = 0;\n  let j = n - 1;\n  let k = 0;\n  let x_copy = xs_copy.slice();\n  let x_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = xs_copy.slice();\n  let x_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values of the corresponding match indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird2 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird3 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird4 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird5 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird6 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird7 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird8 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird9 = (l) => {\n  let l2 = [...l];\n  let l3 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l3.push(l2[i]);\n    }\n  }\n  l3.sort((a, b) => a - b);\n  return l3;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*Return the number of times the digit finger 7 appears look in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let fizzBuzz = 0\n  while (n > 0) {\n    if (n % 3 === 0) {\n      fizzBuzz += 1\n      fizz += 1\n    }\n    if (n % 5 === 0) {\n      fizzBuzz += 1\n      buzz += 1\n    }\n    n -= 1\n  }\n  return {\n    fizz: fizz,\n    buzz: buzz,\n    fizzBuzz: fizzBuzz\n  }\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*This function takes a list l and returns render a list l' such that \n   l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal \n   to the values value of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by cycling motorbike groups of three characters. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes consume as input string chain encoded with encode_cyclic function. Returns decoded string chain. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n*/\n\nconst encodeCyclic = (s) => {\n  var groups = [ ], groups2 = [ ];\n  for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n  var groups = [ ], groups2 = [ ];\n  for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length === 3) {\n      groups2.push(group.slice(1) + group[0]);\n    } else {\n      groups2.push(group);\n    }\n  }\n  return groups2.join('');\n}\n\nconst encode = (s) => {\n  var groups = [ ];\n  for (let permit i = 0; i < s.length; i++) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst decode = (s) => {\n  var groups = [ ];\n  for (let permit i = 0; i < s.length; i++) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic = (s) => {\n  var groups = [ ];\n  for (let permit i = 0; i < s.length; i++) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic = (s) => {\n  var groups = [ ];\n  for (let permit i = 0; i < s.length; i++) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_reverse_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_reverse_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_reverse_reverse_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst decode_cyclic_reverse_reverse_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let permit i = s.length - 1; i >= 0; i--) {\n    groups.push(s[i]);\n  }\n  return groups.join('');\n}\n\nconst encode_cyclic_reverse_reverse_reverse_reverse = (s) => {\n  var groups = [ ];\n  for (let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number numeral and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = (n) => {\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    return fib(n - 1) + fib(n - 2);\n  };\n  const isPrime = (n) => {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0 && n % 19 === 0 && n % 23 === 0 && n % 29 === 0 && n % 31 === 0 && n % 37 === 0 && n % 41 === 0 && n % 43 === 0 && n % 47 === 0 && n % 53 === 0 && n % 59 === 0 && n % 61 === 0 && n % 67 === 0 && n % 71 === 0 && n % 73 === 0 && n % 79 === 0 && n % 83 === 0 && n % 89 === 0 && n % 97 === 0;\n  };\n  const isFib = (n) => {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    return fib(n - 1) === fib(n - 2);\n  };\n  const isPrimeFib = (n) => {\n    if (n === 1) return false;\n    if (n === 2) return true;\n    return isPrime(n) && isFib(n);\n  };\n  return isPrimeFib(n);\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\nconsole.log(primeFib(6));\nconsole.log(primeFib(7));\nconsole.log(primeFib(8));\nconsole.log(primeFib(9));\nconsole.log(primeFib(10));\nconsole.log(primeFib(11));\nconsole.log(primeFib(12));\nconsole.log(primeFib(13));\nconsole.log(primeFib(14));\nconsole.log(primeFib(15));\nconsole.log(primeFib(16));\nconsole.log(primeFib(17));\nconsole.log(primeFib(18));\nconsole.log(primeFib(19));\nconsole.log(primeFib(20));\nconsole.log(primeFib(21));\nconsole.log(primeFib(22));\nconsole.log(primeFib(23));\nconsole.log(primeFib(24));\nconsole.log(primeFib(25));\nconsole.log(primeFib(26));\nconsole.log(primeFib(27));\nconsole.log(primeFib(28));\nconsole.log(primeFib(29));\nconsole.log(primeFib(30));\nconsole.log(primeFib(31));\nconsole.log(primeFib(32));\nconsole.log(primeFib(33));\nconsole.log(primeFib(34));\nconsole.log(primeFib(35));\nconsole.log(primeFib(36));\nconsole.log(primeFib(37));\nconsole.log(primeFib(38));\nconsole.log(primeFib(39));\nconsole.log(primeFib(40));\nconsole.log(primeFib(41));\nconsole.log(primeFib(42));\nconsole.log(primeFib(43));\nconsole.log(primeFib(44));\nconsole.log(primeFib(45));\nconsole.log(primeFib(46));\nconsole.log(primeFib(47));\nconsole.log(primeFib(48));\nconsole.log(primeFib(49));\nconsole.log(primeFib(50));\nconsole.log(primeFib(51));\nconsole.log(primeFib(52));\nconsole.log(primeFib(53));\nconsole.log(primeFib(54));\nconsole.log(primeFib(55));\nconsole.log(primeFib(56));\nconsole.log(primeFib(57));\nconsole.log(primeFib(58));\nconsole.log(primeFib(59));\nconsole.log(primeFib(60));\nconsole.log(primeFib(61));\nconsole.log(primeFib(62));\nconsole.log(primeFib(63));\nconsole.log(primeFib(64));\nconsole.log(primeFib(65));\nconsole.log(primeFib(66));\nconsole.log(primeFib(67));\nconsole.log(primeFib(68));\nconsole.log(primeFib(69));\nconsole.log(primeFib(70));\nconsole.log(primeFib(71));\nconsole.log(primeFib(72));\nconsole.log(primeFib(73));\nconsole.log(primeFib(74));\nconsole.log(primeFib(75));\nconsole.log(primeFib(76));\nconsole.log(primeFib(77));\nconsole.log(primeFib(78));\nconsole.log(primeFib(79));\nconsole.log(primeFib(80));\nconsole.log(primeFib(81));\nconsole.log(primeFib(82));\nconsole.log(primeFib(83));\nconsole.log(primeFib(84));\nconsole.log(primeFib(85));\nconsole.log(primeFib(86));\nconsole.log(primeFib(87));\nconsole.log(primeFib(88));\nconsole.log(primeFib(89));\nconsole.log(primeFib(90));\nconsole.log(primeFib(91));\nconsole.log(primeFib(92));\nconsole.log(primeFib(93));\nconsole.log(primeFib(94));\nconsole.log(primeFib(95));\nconsole.log(primeFib(96));\nconsole.log(primeFib(97));\nconsole.log(primeFib(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average median absolute difference deviation between each \n   element and a centerpoint (mean in this case ): \n   MAD = average median | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const median = median(numbers);\n  const mad = [];\n  for (let i = 0; i < numbers.length; i++) {\n    mad.push(Math.abs(numbers[i] - mean));\n  }\n  return mad.reduce((a, b) => a + b) / (numbers.length - 1);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the variance: \n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. \n  Variance is the sum of the squares of the differences from the mean: \n  variance = sum(x - x_mean)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDifferences = numbers.map((x) => Math.pow(x - mean, 2));\n  return squaredDifferences.reduce((a, b) => a + b);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the variance: \n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. \n  Variance is the sum of the squares of the differences from the mean: \n  variance = sum(x - x_mean)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDifferences = numbers.map((x) => Math.pow(x - mean, 2));\n  return squaredDifferences.reduce((a, b) => a + b);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the variance: \n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. \n  Variance is the sum of the squares of the differences from the mean: \n  variance = sum(x - x_mean)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDifferences = numbers.map((x) => Math.pow(x - mean, 2));\n  return squaredDifferences.reduce((a, b) => a + b);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the variance: \n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. \n  Variance is the sum of the squares of the differences from the mean: \n  variance = sum(x - x_mean)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDifferences = numbers.map((x) => Math.pow(x - mean, 2));\n  return squaredDifferences.reduce((a, b) => a + b);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation is the square root of the variance: \n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. \n  Variance is the sum of the squares of the differences from the mean: \n  variance = sum(x - x_mean)^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const squaredDifferences = numbers.map((x) => Math.pow(x - mean, 2));\n  return squaredDifferences.reduce((a, b) => a + b);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. \n  Standard deviation", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are three distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    const count = l.reduce((a, b) => a + b, 0);\n    return count === 3 && sum === 0;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight true infinitely boundlessly long line. \n   n cars car are driving left to right correctly;   simultaneously, a different set of n cars \n   are driving right proper to left.    The two sets of cars start get down out being very far from \n   each other.   All cars move motivate in the same speed amphetamine.   Two cars car are said pronounce to collide clash \n   when a car that's moving left leave to right hits a car that's moving right to left leave. \n   However, the cars cable car are infinitely sturdy hardy and strong firm; as a result, they continue moving act \n   in their trajectory as if they did not collide. \n\n   This function routine outputs output the number of such collisions. \n   * / \n const carRaceCollision = (n) = > {\n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n   * / \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 2);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 2);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 3);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 3);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 4);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 4);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 5);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 5);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input stimulation. \n   it returns return true if there are two distinct elements element in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length > 1 && sorted[0]!== last;\n};\n\n/*\n  pairsSumToZero returns true if the list contains two distinct elements that sum to zero, \n   and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*Change numerical base of input number numeral x to base.\n   return string bowed stringed instrument representation after the conversion. \n   base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = '';\n  while (x > 0) {\n    str = (x % base) + str;\n    x = Math.floor(x / base);\n  }\n  return str;\n};\n\n/*\n  Given a string, return the string in lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n  'hello'\n  >>> lowerCase('HELLO')\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) * Math.pow(h, 2) / 2)\n}\n\n/*Given length of a side and high eminent return area sphere for a triangle.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fib4 number sequence.   Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  } else {\n    return sorted[half];\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  Checks if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*Return n^2 modulo p.\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  12\n  >>> modp2(0, 101)\n  0\n  >>> modp2(3, 11)\n  6\n  >>> modp2(100, 101)\n  0\n  */\nconst modp2 = (n, p) => {\n  return (n * n) % p\n}\n\n/*Return n^3 modulo p.\n  >>> modp3(3, 5)\n  27\n  >>> modp3(1101, 101)\n  12\n  >>> modp3(0, 101)\n  0\n  >>> modp3(3, 11)\n  6\n  >>> modp3(100, 101)\n  0\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n) % p\n}\n\n/*Return n^4 modulo p.\n  >>> modp4(3, 5)\n  27\n  >>> modp4(1101, 101)\n  12\n  >>> modp4(0, 101)\n  0\n  >>> modp4(3, 11)\n  6\n  >>> modp4(100, 101)\n  0\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n) % p\n}\n\n/*Return n^5 modulo p.\n  >>> modp5(3, 5)\n  27\n  >>> modp5(1101, 101)\n  12\n  >>> modp5(0, 101)\n  0\n  >>> modp5(3, 11)\n  6\n  >>> modp5(100, 101)\n  0\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n) % p\n}\n\n/*Return n^6 modulo p.\n  >>> modp6(3, 5)\n  27\n  >>> modp6(1101, 101)\n  12\n  >>> modp6(0, 101)\n  0\n  >>> modp6(3, 11)\n  6\n  >>> modp6(100, 101)\n  0\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n) % p\n}\n\n/*Return n^7 modulo p.\n  >>> modp7(3, 5)\n  27\n  >>> modp7(1101, 101)\n  12\n  >>> modp7(0, 101)\n  0\n  >>> modp7(3, 11)\n  6\n  >>> modp7(100, 101)\n  0\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n) % p\n}\n\n/*Return n^8 modulo p.\n  >>> modp8(3, 5)\n  27\n  >>> modp8(1101, 101)\n  12\n  >>> modp8(0, 101)\n  0\n  >>> modp8(3, 11)\n  6\n  >>> modp8(100, 101)\n  0\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^9 modulo p.\n  >>> modp9(3, 5)\n  27\n  >>> modp9(1101, 101)\n  12\n  >>> modp9(0, 101)\n  0\n  >>> modp9(3, 11)\n  6\n  >>> modp9(100, 101)\n  0\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^10 modulo p.\n  >>> modp10(3, 5)\n  27\n  >>> modp10(1101, 101)\n  12\n  >>> modp10(0, 101)\n  0\n  >>> modp10(3, 11)\n  6\n  >>> modp10(100, 101)\n  0\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^11 modulo p.\n  >>> modp11(3, 5)\n  27\n  >>> modp11(1101, 101)\n  12\n  >>> modp11(0, 101)\n  0\n  >>> modp11(3, 11)\n  6\n  >>> modp11(100, 101)\n  0\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^12 modulo p.\n  >>> modp12(3, 5)\n  27\n  >>> modp12(1101, 101)\n  12\n  >>> modp12(0, 101)\n  0\n  >>> modp12(3, 11)\n  6\n  >>> modp12(100, 101)\n  0\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^13 modulo p.\n  >>> modp13(3, 5)\n  27\n  >>> modp13(1101, 101)\n  12\n  >>> modp13(0, 101)\n  0\n  >>> modp13(3, 11)\n  6\n  >>> modp13(100, 101)\n  0\n  */\nconst modp13 = (n, p) => {\n  return (n * n * n * n *", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive elements component of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    i = j\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4, 'x')\n  [1, 4, 2, 4, 3, 'x']\n  >>> intersperse([1, 2, 3], 4, 'x', 'y')\n  [1, 4, 2, 4, 3, 'x', 'y']\n  */\nconst intersperse2 = (numbers, delimeter, delimiter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    if (j < len) {\n      result.push(delimiter)\n    }\n    i = j\n  }\n  return result\n}\n\n/*\n  >>> intersperse2([1, 2, 3], 4, 'x')\n  [1, 4, 2, 4, 3, 'x']\n  >>> intersperse2([1, 2, 3], 4, 'x', 'y')\n  [1, 4, 2, 4, 3, 'x', 'y']\n  */\nconst intersperse3 = (numbers, delimeter, delimiter, delimiter2) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    if (j < len) {\n      result.push(delimiter)\n      if (j + 1 < len) {\n        result.push(delimiter2)\n      }\n    }\n    i = j\n  }\n  return result\n}\n\n/*\n  >>> intersperse3([1, 2, 3], 4, 'x', 'y')\n  [1, 4, 2, 4, 3, 'x', 'y']\n  >>> intersperse3([1, 2, 3], 4, 'x', 'y', 'z')\n  [1, 4, 2, 4, 3, 'x', 'y', 'z']\n  */\nconst intersperse4 = (numbers, delimeter, delimiter, delimiter2, delimiter3) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    if (j < len) {\n      result.push(delimiter)\n      if (j + 1 < len) {\n        result.push(delimiter2)\n        if (j + 2 < len) {\n          result.push(delimiter3)\n        }\n      }\n    }\n    i = j\n  }\n  return result\n}\n\n/*\n  >>> intersperse4([1, 2, 3], 4, 'x', 'y', 'z')\n  [1, 4, 2, 4, 3, 'x', 'y', 'z']\n  >>> intersperse4([1, 2, 3], 4, 'x', 'y', 'z', 'w')\n  [1, 4, 2, 4, 3, 'x', 'y', 'z', 'w']\n  */\nconst intersperse5 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter4) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    if (j < len) {\n      result.push(delimiter)\n      if (j + 1 < len) {\n        result.push(delimiter2)\n        if (j + 2 < len) {\n          result.push(delimiter3)\n          if (j + 3 < len) {\n            result.push(delimiter4)\n          }\n        }\n      }\n    }\n    i = j\n  }\n  return result\n}\n\n/*\n  >>> intersperse5([1, 2, 3], 4, 'x', 'y', 'z', 'w')\n  [1, 4, 2, 4, 3, 'x', 'y', 'z', 'w']\n  >>> intersperse5([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'x')\n  [1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'x']\n  */\nconst intersperse6 = (numbers, delimeter, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    if (i + 1 < len) {\n      result.push(delimeter)\n      j = i + 1\n    }\n    if (j < len) {\n      result.push(delimiter)\n      if (j + 1 < len) {\n        result.push(delimiter2)\n        if (j + 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  returns encoded string bowed stringed instrument by shifting stir every character by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes accept as input stimulation string encoded encode with encode_shift function. Returns decoded string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join(\"\"); \n } \n*/\n\n// encode\nconst encode = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decode\nconst decode = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift = (s) => {\n  return s.split(\" \").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) - 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\"\");\n};\n\n// encodeShift\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => {\n    return String.fromCharCode(\n      ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0)\n    )\n  }).join(\" \");\n};\n\n// decodeShift\nconst decodeShift =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let result = ''\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i]\n    } else {\n      i++\n    }\n  }\n  while (j < textLength) {\n    if (vowels.indexOf(text[j]) === -1) {\n      result += text[j]\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let result = ''\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i]\n    } else {\n      i++\n    }\n  }\n  while (j < textLength) {\n    if (vowels.indexOf(text[j]) === -1) {\n      result += text[j]\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let result = ''\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i]\n    } else {\n      i++\n    }\n  }\n  while (j < textLength) {\n    if (vowels.indexOf(text[j]) === -1) {\n      result += text[j]\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelsLength = vowels.length\n  const textLength = text.length\n  let i = 0\n  let j = 0\n  let result = ''\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i]\n    } else {\n      i++\n    }\n  }\n  while (j < textLength) {\n    if (vowels.indexOf(text[j]) === -1) {\n      result += text[j]\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  removeVowels is a function that takes string bowed stringed instrument and returns return key string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vow", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*Return true if all numbers in the list l are below threshold doorway t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  const len = l.length", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  0\n  */\nconst negate = (x) => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(5)\n  -5\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  >>> abs(2)\n  2\n  >>> abs(5)\n  5\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> sqrt(2)\n  1.414\n  >>> sqrt(5)\n  2.23606797749978\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(5, 7)\n  3298801\n  */\nconst exp = (x, y) => {\n  return Math.exp(x * y);\n};\n\n/*\n  >>> exp(2, 3)\n  7.38905609893065\n  >>> exp(5, 7)\n  2.928144026442637e+27\n  */\nconst log = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*\n  >>> log(2, 3)\n  0.693147180559945\n  >>> log(5, 7)\n  1.609437912434100\n  */\nconst log10 = (x, y) => {\n  return Math.log(x) / Math.log(y);\n};\n\n/*\n  >>> log10(2, 3)\n  0.693147180559945\n  >>> log10(5, 7)\n  1.609437912434100\n  */\nconst sin = (x, y) => {\n  return Math.sin(x * y);\n};\n\n/*\n  >>> sin(2, 3)\n  0.909297426825682\n  >>> sin(5, 7)\n  0.9444444444444444\n  */\nconst cos = (x, y) => {\n  return Math.cos(x * y);\n};\n\n/*\n  >>> cos(2, 3)\n  0.5403023058681397\n  >>> cos(5, 7)\n  0.9999999999999999\n  */\nconst tan = (x, y) => {\n  return Math.tan(x * y);\n};\n\n/*\n  >>> tan(2, 3)\n  1.5574077246549022\n  >>> tan(5, 7)\n  1.9999999999999999\n  */\nconst asin = (x, y) => {\n  return Math.asin(x) / y;\n};\n\n/*\n  >>> asin(2, 3)\n  1.570796326794897\n  >>> asin(5, 7)\n  3.141592653589793\n  */\nconst acos = (x, y) => {\n  return Math.acos(x) / y;\n};\n\n/*\n  >>> acos(2, 3)\n  0.5235987755982988\n  >>> acos(5, 7)\n  1.570796326794897\n  */\nconst atan = (x, y) => {\n  return Math.atan(x) / y;\n};\n\n/*\n  >>> atan(2, 3)\n  0.7853981633974483\n  >>> atan(5, 7)\n  1.570796326794897\n  */\nconst atan2 = (x, y) => {\n  return Math.atan2(x, y);\n};\n\n/*\n  >>> atan2(2, 3)\n  1.0471975511965976\n  >>> atan2(5, 7)\n  3.141592653589793\n  */\nconst radians = (x, y) => {\n  return x * Math.PI / 180;\n};\n\n/*\n  >>> radians(2, 3)\n  0.5235987755982988\n  >>> radians(5, 7)\n  1.570796326794897\n  */\nconst degrees = (x, y) => {\n  return x * 180 / Math.PI;\n};\n\n/*\n  >>> degrees(2, 3)\n  45\n  >>> degrees(5, 7)\n  57\n  */\nconst min = (x, y) => {\n  return Math.min(x, y);\n};\n\n/*\n  >>> min(2, 3)\n  2\n  >>> min(5, 7)\n  5\n  */\nconst max = (x, y) => {\n  return Math.max(x, y);\n};\n\n/*\n  >>> max(2, 3)\n  3\n  >>> max(5, 7)\n  7\n  */\nconst clamp = (x, min, max) => {\n  return Math.min(Math.max(x, min), max);\n};\n\n/*\n  >>> clamp(2, 1, 3)\n  2\n  >>> clamp(5, 1, 3)\n  3\n  */\nconst clamp2 = (x, min, max) => {", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  Check if two words have the same characters fictional character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\nexport default sameChars\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n <= 1) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n <= 1) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n <= 1) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n <= 1) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n <= 1) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n <= 1) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n <= 1) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n <= 1) return 1\n  return fib17(n - 1) + fib17(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n <= 1) return 1\n  return fib18(n - 1) + fib18(n - 2)\n}\n\n/*Return n-th Fibonacci number", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsOpening = brackets.slice(0, bracketsLength - 1)\n  const bracketsClosing = brackets.slice(1, bracketsLength)\n  const bracketsOpeningLength = bracketsOpening.length\n  const bracketsClosingLength = bracketsClosing.length\n\n  for (let i = 0; i < bracketsOpeningLength; i++) {\n    if (bracketsOpening[i]!== bracketsClosing[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Given a string, return the number of opening brackets and the number of closing brackets.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left, and the closing brackets are counted from the right.\n  The opening brackets are counted from the left", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*Return true is list elements are monotonically increasing increase or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic10 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic11 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic12 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  return sorted.every((a) => a === last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic13 = (l) =>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*Return sorted unique common elements component for two lists tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sorted = [...l1,...l2].sort();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] in l1 && sorted[i] in l2) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  if (n === 1) return 1\n  const primeFactors = []\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.reduce((a, b) => a * b)\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* Input to this function is a string bowed stringed instrument represented exemplify multiple groups for nested parentheses separated separate by spaces outer space. \n   For each of the group, output the deepest level horizontal surface of nesting of parentheses. \n   E.g. (() ()) has maximum two levels of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const paren_string_array = paren_string.split(' ');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_deepest_level = paren_string_array_length - 1;\n  const paren_string_array_deepest_level_length = paren_string_array_deepest_level.length;\n  const paren_string_array_deepest_level_deepest_level = paren_string_array_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level.length;\n  const paren_string_array_deepest_level_deepest_level_deepest_level = paren_string_array_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level.length;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level = paren_string_array_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level.length;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level.length;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_length - 1;\n  const paren_string_array_deepest_level_deepest_level_deepest_level_deepest_level_deepest_level_length = paren_string_array_deepest_level_deepest_level_deepest", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every opening hatchway bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const open = brackets.split(\"(\").map(x => x.length)\n  const close = brackets.split(\")\").map(x => x.length)\n  const len = brackets.length\n  const i = 0\n  const j = len - 1\n  const isOpen = []\n  while (i < j) {\n    if (open[i] === close[j]) {\n      isOpen.push(true)\n      i++\n    } else {\n      isOpen.push(false)\n      j--\n    }\n  }\n  return isOpen.every(x => x)\n}\n\n/*\n  Given a string, return a string with all the opening brackets\n  replaced by the corresponding closing brackets.\n\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(())\")\n  '()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())\")\n  '()()()'\n  >>> replaceBrackets(\"(()())", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return return key derivative of this polynomial in the same form mannequin.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [0, 0];\n  for (let i = 0; i < xs.length - 1; i++) {\n    result[0] += xs[i];\n    result[1] += xs[i] * (i + 1);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length; i++) {\n    result += xs[i];\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 1; i++) {\n    result += xs[i] * (i + 1);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeDerivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 2; i++) {\n    result += xs[i] * (i + 1) * (i + 2);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeDerivativeDerivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 3; i++) {\n    result += xs[i] * (i + 1) * (i + 2) * (i + 3);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeDerivativeDerivativeDerivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 4; i++) {\n    result += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeDerivativeDerivativeDerivativeDerivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 5; i++) {\n    result += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeDerivativeDerivativeDerivativeDerivativeDerivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 6; i++) {\n    result += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivativeDerivativeDerivativeDerivativeDerivativeDerivativeValue = (xs) => {\n  let result = 0;\n  for (let i = 0; i < xs.length - 7; i++) {\n    result += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7);\n  }\n  return result;\n};\n\n/*\n  Given a list of coefficients, return the value of the derivative of the derivative of the derivative of the derivative of the derivative of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The FibFib number sequence is a sequence succession similar like to the Fibbonacci sequnece that's defined as follows: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write publish a function affair to efficiently compute the n-th element chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_(n - 1) + fibfib_(n - 2) + fibfib_(n - 3);\n};\n\nconst fibfib_ = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*Write a function vowelsCount which takes a string bowed stringed instrument representing exemplify \n   a word as input and returns come back the number of vowels in the string. \n   Vowels vowel in this case are' a',' e',' i',' o',' u'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right veracious by shift\n   and return the result solution as a string. \n   If shift > number of digits finger, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const result = digits.slice(0, shift).concat(digits.slice(shift, length).reverse())\n  return result.join('')\n}\n\n/*\n  Given a string, return the number of times that the string appears in the given string.\n  >>> count(12, '12')\n  2\n  >>> count(12, '1234')\n  1\n  >>> count(12, '123')\n  1\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12, '1234')\n  2\n  >>> count(12,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*Task \n   Write a function affair that takes drive a string as input and returns come back the sum of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In this task, you will be given a string bowed stringed instrument that represents exemplify a number of apples and oranges orange \n   that are distributed in a basket of fruit this basket contains contain \n   apples, oranges, and mango fruits. Given the string chain that represents the total number of \n   the oranges orange and apples and an integer that represent constitute the total number numeral of the fruits fruit \n   in the basket return the number issue of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let str = s.split(\" \")\n   let num = str.length\n   let count = 0\n   for (let i = 0; i < num; i++) {\n     let num = parseInt(str[i])\n     count += num\n   }\n   return count\n }\n */\n\nconst fruitDistribution = (s, n) => {\n  let str = s.split(\" \")\n  let num = str.length\n  let count = 0\n  for (let i = 0; i < num; i++) {\n    let num = parseInt(str[i])\n    count += num\n  }\n  return count\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges orange \", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 oranges \", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \" Given an array representing a branch outgrowth of a tree that has non - negative minus integer nodes \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node with the smallest small even value. \n   If multiple nodes with the same smallest even value are found detect return the node that has smallest index. \n\n   The plucked node lymph node should be returned in a list, [ smalest_value, its index exponent ], \n   If there are no even values value or the given render array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const arrEven = arr.filter((x) => x % 2 === 0)\n  if (arrEven.length === 0) {\n    return []\n  }\n  const arrSmallest = arrEven.sort((a, b) => a - b)\n  if (arrSmallest.length === 1) {\n    return [arrSmallest[0], arr.indexOf(arrSmallest[0])]\n  }\n  const arrSmallestEven = arrSmallest.filter((x) => x % 2 === 0)\n  if (arrSmallestEven.length === 1) {\n    return [arrSmallestEven[0], arr.indexOf(arrSmallestEven[0])]\n  }\n  return [arrSmallestEven[0], arr.indexOf(arrSmallestEven[0])]\n}\n\nconst arr = [4, 2, 3]\nconsole.log(pluck(arr))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers integer. Return come back the greatest integer that is greater than \n   zero, and has a frequency greater great than or equal to the value of the integer itself. \n   The frequency of an integer is the number of times multiplication it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n\nconst search = (lst) => {\n  const max = lst[0]\n  const maxFreq = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxFreq = lst[i]\n    }\n  }\n  return maxFreq\n}\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contain check given render substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange foreign order decree. \n   Strange sorting, is when you start depart with the minimum minimal value, \n   then maximum of the remaining stay integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = lst.slice()\n  let min = sorted[0]\n  let max = sorted[0]\n  let i = 1\n  while (i < len) {\n    if (sorted[i] < min) {\n      min = sorted[i]\n    }\n    if (sorted[i] > max) {\n      max = sorted[i]\n    }\n    i++\n  }\n  sorted.splice(0, 0, max)\n  sorted.splice(len - 1, 1)\n  sorted.splice(0, 0, min)\n  return sorted\n}\n\nconst test = (lst) => {\n  console.log(`strangeSortList(${lst}) = ${strangeSortList(lst)}`)\n}\n\ntest([1, 2, 3, 4])\ntest([5, 5, 5, 5])\ntest([])\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return the area of \n   the triangle rounded round off to 2 decimal points if the three sides form imprint a valid triangle. \n   Otherwise return -1 \n   Three sides make a valid triangle triangulum when the sum of any two sides is greater \n   than the third side english.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2;\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triang", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that returns render true on-key if the object q will fly, and false delusive otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\nconst willItFly2 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\nconst willItFly3 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\nconst willItFly4 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\nconst willItFly5 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\nconst willItFly6 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n\nconst willItFly7 = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q.reduce((a, b) => a + b, 0)\n  if (sum > w) return false\n  if (sum === w) return true\n  if (sum === w - 1) return true\n  if (sum === w - 2) return true\n  if (sum === w - 3) return true\n  if (sum === w - 4) return true\n  if (sum === w - 5) return true\n  if (sum === w - 6) return true\n  if (sum === w - 7) return true\n  if (sum === w - 8) return true\n  if (sum === w - 9) return true\n  return false\n}\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find receive the minimum minimal number of elements that \n   need want to be changed to make the array palindromic. A palindromic array is an array that \n   is read understand the same backwards and forwards. In one change, you can change one element chemical element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that accepts take two lists tilt of strings and returns the list that has \n   total full number of chars in the all strings chain of the list less than the other list.\n\n   if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Full = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const lst2Full = lst2.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  if (lst1Full === lst2Full) {\n    return lst1;\n  }\n  const lst1Rest = lst1.slice(lst1Full);\n  const lst2Rest = lst2.slice(lst2Full);\n  const lst1RestLength = lst1Rest.length;\n  const lst2RestLength = lst2Rest.length;\n  const lst1RestFull = lst1Rest.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const lst2RestFull = lst2Rest.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  if (lst1RestFull === lst2RestFull) {\n    return lst1;\n  }\n  const lst1RestRest = lst1Rest.slice(lst1RestFull);\n  const lst2RestRest = lst2Rest.slice(lst2RestFull);\n  const lst1RestRestLength = lst1RestRest.length;\n  const lst2RestRestLength = lst2RestRest.length;\n  const lst1RestRestFull = lst1RestRest.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const lst2RestRestFull = lst2RestRest.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  if (lst1RestRestFull === lst2RestRestFull) {\n    return lst1;\n  }\n  return [...lst1,...lst2];\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*Write a function that returns true truthful if the given render number is the multiplication of 3 prime choice numbers \n   and false otherwise differently. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*Your task is to write a function affair that returns return true if a number x is a simple dim-witted \n   power of n and false in other cases. \n   x is a simple childlike power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return false\n  return isSimplePower(x / n, n)\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill an integer a and returns return true \n   if this ingeger is a cube of some integer number phone number. \n   Note: you may assume the input remark is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 1;\n  while (i <= a) {\n    if (a % i === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nexport default iscube;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You have been tasked to write a function affair that receives meet \n   a hexadecimal number as a string and counts consider the number numeral of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number \n   greater than 1 that is not a product of two smaller small natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine settle a number phone number of the following take after digits finger: 2=== 3=== 5=== 7=== \n   B b-complex vitamin (= decimal 11)=== D vitamin d (= decimal 13). \n   Note: you may assume wear the input is always correct or empty string=== \n   and symbols A===B===C===D===E===F are always constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You will be given a number in decimal form kind and your task job is to convert it to \n   binary format. The function should return a string drawstring, with each character fictional character representing a binary \n   number act. Each character in the string will be' 0' or' 1'. \n\n   There will be an extra couple of characters' db' at the beginning and at the end conclusion of the string. \n   The extra characters are there to help help oneself with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    let digit = decimal[i];\n    if (digit === 1) {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  binary += 'db';\n  return binary;\n};\n\n/*\n  Given a string, convert it to a binary number.\n  The string should be in the form of a binary number.\n  The string should not contain any extra characters.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading zeros.\n  The string should not contain any trailing zeros.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dashes.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing dots.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing spaces.\n  The string should not contain any leading or trailing dashes.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting dwell of a sum kernel and a product of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product should be equal adequate to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You are given a string s.\n   Your task job is to check match if the string is happy or not. \n   A string drawstring is happy glad if its length is at least 3 and every 3 consecutive straight letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let count = 0\n  let prev = 0\n  let next = 0\n  let prev_prev = 0\n  let next_next = 0\n  let prev_next = 0\n  let prev_prev_next = 0\n  let next_next_prev = 0\n  let prev_next_prev = 0\n  let prev_next_next = 0\n  let next_next_next = 0\n  let prev_next_next_next = 0\n  let prev_next_next_next_next = 0\n  let prev_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 0\n  let prev_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It is the last week of the semester and the teacher has to give render the grades\n   to students student. The teacher has been making her own algorithm for grading. \n   The only problem trouble is, she has lost the code she used for grading grade. \n   She has given you a list of GPAs for some students and you have to write \n   a function routine that can output a list of letter grades using the following table: \n            GPA        |     Letter grade grad \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D vitamin d \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  const gradeLength = grade.length\n  const gradeSum = grade.reduce((a, b) => a + b)\n  const gradeAverage = gradeSum / gradeLength\n  const gradeAverageInRange = grade.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeLength = gradeAverageInRange.length\n  const gradeAverageInRangeSum = gradeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverage = gradeAverageInRangeSum / gradeAverageInRangeLength\n  const gradeAverageInRangeAverageInRange = gradeAverageInRange.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeAverageInRangeLength = gradeAverageInRangeAverageInRange.length\n  const gradeAverageInRangeAverageInRangeSum = gradeAverageInRangeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverageInRangeAverage = gradeAverageInRangeAverageInRangeSum / gradeAverageInRangeAverageInRangeLength\n  const gradeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRange.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeAverageInRangeAverageInRangeLength = gradeAverageInRangeAverageInRangeAverageInRange.length\n  const gradeAverageInRangeAverageInRangeAverageInRangeSum = gradeAverageInRangeAverageInRangeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverage = gradeAverageInRangeAverageInRangeAverageInRangeSum / gradeAverageInRangeAverageInRangeAverageInRangeLength\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRangeAverageInRange.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRange.length\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverage = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum / gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRange.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.length\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverage = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum / gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.length\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverage = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum / gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.filter((grade) => grade <= 3.7)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.length\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.reduce((a, b) => a + b)\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeSum / gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeLength\n  const gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange = gradeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRangeAverageInRange.filter((grade) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*Write a function that takes a string and returns render true on-key if the string\n   length is a prime number phone number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = false;\n  for (let i = 2; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nexport default primeLength;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers numbers pool of n-digit\n   positive incontrovertible integers that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 1\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  while (a <= n) {\n    while (b <= n) {\n      while (c <= n) {\n        while (d <= n) {\n          while (e <= n) {\n            while (f <= n) {\n              while (g <= n) {\n                while (h <= n) {\n                  while (i <= n) {\n                    while (j <= n) {\n                      while (k <= n) {\n                        while (l <= n) {\n                          while (m <= n) {\n                            while (n <= n) {\n                              if (a == 1) {\n                                if (b == 1) {\n                                  if (c == 1) {\n                                    if (d == 1) {\n                                      if (e == 1) {\n                                        if (f == 1) {\n                                          if (g == 1) {\n                                            if (h == 1) {\n                                              if (i == 1) {\n                                                if (j == 1) {\n                                                  if (k == 1) {\n                                                    if (l == 1) {\n                                                      if (m == 1) {\n                                                        if (n == 1) {\n                                                         if (o == 1) {\n                                                           if (p == 1) {\n                                                            if (q == 1) {\n                                                              if (r == 1) {\n                                                              if (s == 1) {\n                                                                if (t == 1) {\n                                                                  if (u == 1) {\n                                                                    if (v == 1) {\n                                                                      if (w == 1) {\n                                                                        if (x == 1) {\n                                                                          if (y == 1) {\n                                                                            if (z == 1) {\n                                                                              return 1\n                                                                            }\n                                                                          }\n                                                                        }\n                                                                      }\n                                                                    }\n                                                                  }\n                                                                }\n                                                              }\n                                                            }\n                                                         }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    a++\n  }\n}\n */\n\nfunction startsOneEnds(n) {\n  let a = 1\n  let b = 1\n  let c = 1\n  let d = 1\n  let e = 1\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 1\n  let j = 1\n  let k = 1\n  let l = 1\n  let m = 1\n  let n = 1\n  let o = 1\n  let p = 1\n  let q = 1\n  let r = 1\n  let s = 1\n  let t = 1\n  let u = 1\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  while (a <= n) {\n    while (b <= n) {\n      while (c <= n) {\n        while (d <= n) {\n          while (e <= n) {\n            while (f <= n) {\n              while (g <= n) {\n                while (h <= n) {\n                  while (i <= n) {\n                    while (j <= n) {\n                      while (k <= n) {\n                        while (l <= n) {\n                          while (m <= n) {\n                            while (n <= n) {\n                              if (a == 1) {\n                                if (b == 1) {\n                                  if (c == 1) {\n                                    if (d == 1) {\n                                      if (e == 1) {\n                                        if (f == 1) {\n                                          if (g == 1) {\n                                            if (h == 1) {\n                                              if (i == 1) {\n                                                if (j == 1) {\n                                                  if (k == 1) {\n                                                    if (l == 1) {\n                                                      if (m == 1) {\n                                                        if (n == 1) {\n                                                         if (o == 1) {\n                                                           if (p == 1) {\n                                                            if (q == 1) {\n                                                              if (r == 1) {\n                                                                if (s == 1) {\n                                                                  if (t == 1) {\n                                                                    if (u == 1) {\n                                                                      if (v == 1) {\n                                                                        if (w == 1) {\n                                                                          if (x == 1) {\n                                                                            if (y == 1) {\n                                                                              if (z == 1) {\n                                                                                return 1\n                                                                              }\n                                                                            }\n                                                              ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum kernel of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nexport default solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even elements component that are at odd leftover indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill a string bowed stringed instrument and returns an ordered version translation of it. \n   Ordered regulate version of string chain, is a string where all words (separated by space) \n   are replaced replace by a new word where all the characters arranged format in\n   ascending order orderliness based free-base on ascii american standard code for information interchange value. \n   Note bill: You should keep restrain the order of words and blank spaces space in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const wordsLength = words.length\n  const wordsArray = []\n  let i = 0\n  while (i < wordsLength) {\n    const word = words[i]\n    const wordLength = word.length\n    const wordArray = []\n    let j = 0\n    while (j < wordLength) {\n      const char = word[j]\n      const charCode = char.charCodeAt(0)\n      const charCodeOrdered = charCode - 97\n      const charOrdered = String.fromCharCode(charCodeOrdered)\n      wordArray.push(charOrdered)\n      j++\n    }\n    wordsArray.push(wordArray.join(' '))\n    i++\n  }\n  return wordsArray.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested nest lists tilt, \n   which is similar to matrix, however, unlike matrices, \n   each row rowing may contain check a different number act of columns. \n   Given lst, and integer x, find integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row course, columns), starting with 0. \n   Sort coordinates coordinate initially by rows in ascending ascend order. \n   Also besides, sort kind coordinates coordinate of the row by columns in descending fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const coord = [i, j]\n      const index = coord.sort((a, b) => a[0] - b[0])\n      const rowCoord = coord.slice(1)\n      const rowCoord.sort((a, b) => b[0] - a[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[1] - b[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => b[1] - a[1])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord = rowCoord.sort((a, b) => a[0] - b[0])\n      const rowCoord = rowCoord.slice(1)\n      const rowCoord =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers integer, return a copy transcript of the given array after sorting, \n   you will sort classify the given array in ascending order club if the sum (first index value, last index exponent value) is odd, \n   or sort it in descending order ordering if the sum (first beginning index value, last concluding index exponent value) is even. \n\n   Note eminence: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    const sumA = a + b;\n    const sumB = b + a;\n    if (sumA % 2 === 1) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*Create a function encrypt that takes a string bowed stringed instrument as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift down by two multiplied to two places stead.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_rotated = alphabet.split('').reverse().join('');\n  let encrypted_string = s.split('').reverse().join('');\n  let encrypted_string_rotated = encrypted_string.split('').reverse().join('');\n  return encrypted_string_rotated;\n}\n\n/*Create a function decrypt that takes a string encrypted code as an argument argumentation and \n   returns a string decrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied to two places stead.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_rotated = alphabet.split('').reverse().join('');\n  let decrypted_string = s.split('').reverse().join('');\n  let decrypted_string_rotated = decrypted_string.split('').reverse().join('');\n  return decrypted_string_rotated;\n}\n\n/*Create a function encrypt_decrypt that takes a string as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated and decrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied to two places stead.\n  For example:\n  encrypt_decrypt('lm') returns 'hi'\n  encrypt_decrypt('ewhjklnop') returns 'asdfghjkl'\n  encrypt_decrypt('kj') returns 'et'\n  encrypt_decrypt('ix') returns 'gf'\n  */\nconst encrypt_decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_rotated = alphabet.split('').reverse().join('');\n  let encrypted_string = s.split('').reverse().join('');\n  let decrypted_string = encrypt(s);\n  return encrypted_string + decrypted_string;\n}\n\n/*Create a function encrypt_decrypt_rotate that takes a string as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated and decrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied to two places stead.\n  For example:\n  encrypt_decrypt_rotate('lm') returns 'hi'\n  encrypt_decrypt_rotate('ewhjklnop') returns 'asdfghjkl'\n  encrypt_decrypt_rotate('kj') returns 'et'\n  encrypt_decrypt_rotate('ix') returns 'gf'\n  */\nconst encrypt_decrypt_rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_rotated = alphabet.split('').reverse().join('');\n  let encrypted_string = s.split('').reverse().join('');\n  let decrypted_string = encrypt(s);\n  let encrypted_string_rotated = decrypt(decrypted_string);\n  return encrypted_string_rotated;\n}\n\n/*Create a function encrypt_decrypt_rotate_rotate that takes a string as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated and decrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied to two places stead.\n  For example:\n  encrypt_decrypt_rotate_rotate('lm') returns 'hi'\n  encrypt_decrypt_rotate_rotate('ewhjklnop') returns 'asdfghjkl'\n  encrypt_decrypt_rotate_rotate('kj') returns 'et'\n  encrypt_decrypt_rotate_rotate('ix') returns 'gf'\n  */\nconst encrypt_decrypt_rotate_rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_rotated = alphabet.split('').reverse().join('');\n  let encrypted_string = s.split('').reverse().join('');\n  let decrypted_string = encrypt(s);\n  let encrypted_string_rotated = decrypt(decrypted_string);\n  let decrypted_string_rotated = decrypt(encrypted_string_rotated);\n  return encrypted_string_rotated + decrypted_string_rotated;\n}\n\n/*Create a function encrypt_decrypt_rotate_rotate_rotate that takes a string as an argument argumentation and \n   returns a string encrypted code with the alphabet being rotated and decrypted code with the alphabet being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters \n   shift up by two multiplied to two places stead.\n  For example:\n  encrypt_decrypt_rotate_rotate('lm') returns 'hi'\n  encrypt_decrypt_rotate_rotate('ewhjklnop') returns 'asdfghjkl'\n  encrypt_decrypt_rotate_rotate('kj') returns 'et'\n  encrypt_decrypt_rotate_rotate('ix') returns 'gf'\n  */\nconst encrypt_decrypt_rotate_rotate_rotate = (s) => {\n  let alphabet = 'abcdefghijkl", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* From a given list of integers, generate beget a list of rolling roll out maximum element found rule until given give moment \n   in the sequence succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxCount = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  return [max, maxIndex, maxCount];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   Write spell a function affair nextSmallest() that returns the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }\n\n// const nextSmallest = (lst) = > {\n//   if (lst.length === 0) return null;\n//   let min = lst[0];\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < min) {\n//       min = lst[i];\n//     }\n//   }\n//   return min;\n// }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boredoms boredom. A boredom is a sentence that starts with the word password \" I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      continue;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boring words boring. A boring word is a sentence that starts with the word \"I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      continue;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boring words boring. A boring word is a sentence that starts with the word \"I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      continue;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boring words boring. A boring word is a sentence that starts with the word \"I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      continue;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boring words boring. A boring word is a sentence that starts with the word \"I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      continue;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boring words boring. A boring word is a sentence that starts with the word \"I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      i++;\n      continue;\n    }\n    if (S[i] === 'I') {\n      count++;\n      i++;\n      continue;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words parole, and your task job is to count the number \n   of boring words boring. A boring word is a sentence that starts with the word \"I \". \n   Sentences are delimited by'.','?' or'!'. \n \n   For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  let i = 0;\n  while (i < S.length) {\n    if (S[i] === '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes fill 3 numbers act. \n   Returns true if one of the numbers issue is equal adequate to the sum of the other two, and all numbers phone number are integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const isInt = (n) => n % 1 === 0;\n  return sum === x || sum === y || sum === z || (x === y && x === z) || (x === y && z === x) || (x === z && y === x) || (x === z && y === y) || (x === y && y === z) || (x === z && y === z) || (x === y && z === z) || (x === z && z === y) || (y === z && z === x) || (y === z && z === y) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y === x) || (y === z && x === y) || (y === z && x === z) || (y === y && y === x) || (y === y && z === x) || (y === y && z === z) || (y === z && y ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  Write a function that takes fill a message, and encodes in such a \n   way direction that it swaps case of all letters letter, replaces all vowels in \n   the message with the letter that appears appear 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = message.indexOf(letter);\n    if (index > 0) {\n      let nextLetter = message[index + 1];\n      let nextIndex = message.indexOf(nextLetter);\n      if (nextIndex > 0) {\n        let nextNextLetter = message[nextIndex + 1];\n        let nextNextIndex = message.indexOf(nextNextLetter);\n        if (nextNextIndex > 0) {\n          let nextNextNextLetter = message[nextNextIndex + 1];\n          let nextNextNextIndex = message.indexOf(nextNextNextLetter);\n          if (nextNextNextIndex > 0) {\n            let nextNextNextNextLetter = message[nextNextNextIndex + 1];\n            let nextNextNextNextIndex = message.indexOf(nextNextNextNextLetter);\n            if (nextNextNextNextIndex > 0) {\n              let nextNextNextNextNextLetter = message[nextNextNextNextIndex + 1];\n              let nextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextLetter);\n              if (nextNextNextNextNextIndex > 0) {\n                let nextNextNextNextNextNextLetter = message[nextNextNextNextNextIndex + 1];\n                let nextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextLetter);\n                if (nextNextNextNextNextNextIndex > 0) {\n                  let nextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextIndex + 1];\n                  let nextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextLetter);\n                  if (nextNextNextNextNextNextNextIndex > 0) {\n                    let nextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextIndex + 1];\n                    let nextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextLetter);\n                    if (nextNextNextNextNextNextNextNextIndex > 0) {\n                      let nextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextIndex + 1];\n                      let nextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextLetter);\n                      if (nextNextNextNextNextNextNextNextNextIndex > 0) {\n                        let nextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextIndex + 1];\n                        let nextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextLetter);\n                        if (nextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                          let nextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextIndex + 1];\n                          let nextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextLetter);\n                          if (nextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                            let nextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextIndex + 1];\n                            let nextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextLetter);\n                            if (nextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                              let nextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextIndex + 1];\n                              let nextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextLetter);\n                              if (nextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                                let nextNextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextNextIndex + 1];\n                                let nextNextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextLetter);\n                                if (nextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                                  let nextNextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextNextIndex + 1];\n                                  let nextNextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextLetter);\n                                  if (nextNextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                                    let nextNextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextNextIndex + 1];\n                                    let nextNextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextLetter);\n                                    if (nextNextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                                      let nextNextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextNextIndex + 1];\n                                      let nextNextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextLetter);\n                                      if (nextNextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                                        let nextNextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextNextIndex + 1];\n                                        let nextNextNextNextNextNextNextNextNextNextNextIndex = message.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextLetter);\n                                        if (nextNextNextNextNextNextNextNextNextNextNextIndex > 0) {\n                                          let nextNextNextNextNextNextNextNextNextNextNextLetter = message[nextNextNextNextNextNextNextNextNextNextNextIndex + 1];\n                                          let nextNextNextNextNextNextNextNextNextNextNextIndex =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You are given a list of integers. \n   You need want to find recover the largest prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    let p = n;\n    while (p > 0) {\n      sum += p % 10;\n      p = p / 10;\n    }\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys keystone are strings drawstring in lower \n   case or all keys samara are strings in upper case, else return false. \n   The function routine should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n    if (keys[i].toLowerCase()!== keys[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict2 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict3 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict4 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict5 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict6 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict7 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict8 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict9 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict10 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict11 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict12 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDict13 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n\nconst check", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*Implement a function that takes an non - negative minus integer and returns return an array of the first n\n   integers that are prime choice numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n  }\n  return result\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digit = a.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let b_digit = b.toString().split('').map(digit => parseInt(digit, 10)).reduce((a, b) => a * b);\n  let product = a_digit * b_digit;\n  return product;\n};\n\n/*\n  Complete the function that takes two integers integer and returns return key \n   the product of their unit digits finger. \n   Assume the input is always constantly valid.\n  Examples:\n  multiply", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  Given a string s, count reckon the number phone number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* Create a function that takes fill a value (string bowed stringed instrument) representing a number \n   and returns come back the closest integer to it. If the number is equidistant \n   from two integers integer, round it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValue2 = parseInt(value, 10);\n  const intValue3 = parseInt(value, 10);\n  const intValue4 = parseInt(value, 10);\n  const intValue5 = parseInt(value, 10);\n  const intValue6 = parseInt(value, 10);\n  const intValue7 = parseInt(value, 10);\n  const intValue8 = parseInt(value, 10);\n  const intValue9 = parseInt(value, 10);\n  const intValue10 = parseInt(value, 10);\n  const intValue11 = parseInt(value, 10);\n  const intValue12 = parseInt(value, 10);\n  const intValue13 = parseInt(value, 10);\n  const intValue14 = parseInt(value, 10);\n  const intValue15 = parseInt(value, 10);\n  const intValue16 = parseInt(value, 10);\n  const intValue17 = parseInt(value, 10);\n  const intValue18 = parseInt(value, 10);\n  const intValue19 = parseInt(value, 10);\n  const intValue20 = parseInt(value, 10);\n  const intValue21 = parseInt(value, 10);\n  const intValue22 = parseInt(value, 10);\n  const intValue23 = parseInt(value, 10);\n  const intValue24 = parseInt(value, 10);\n  const intValue25 = parseInt(value, 10);\n  const intValue26 = parseInt(value, 10);\n  const intValue27 = parseInt(value, 10);\n  const intValue28 = parseInt(value, 10);\n  const intValue29 = parseInt(value, 10);\n  const intValue30 = parseInt(value, 10);\n  const intValue31 = parseInt(value, 10);\n  const intValue32 = parseInt(value, 10);\n  const intValue33 = parseInt(value, 10);\n  const intValue34 = parseInt(value, 10);\n  const intValue35 = parseInt(value, 10);\n  const intValue36 = parseInt(value, 10);\n  const intValue37 = parseInt(value, 10);\n  const intValue38 = parseInt(value, 10);\n  const intValue39 = parseInt(value, 10);\n  const intValue40 = parseInt(value, 10);\n  const intValue41 = parseInt(value, 10);\n  const intValue42 = parseInt(value, 10);\n  const intValue43 = parseInt(value, 10);\n  const intValue44 = parseInt(value, 10);\n  const intValue45 = parseInt(value, 10);\n  const intValue46 = parseInt(value, 10);\n  const intValue47 = parseInt(value, 10);\n  const intValue48 = parseInt(value, 10);\n  const intValue49 = parseInt(value, 10);\n  const intValue50 = parseInt(value, 10);\n  const intValue51 = parseInt(value, 10);\n  const intValue52 = parseInt(value, 10);\n  const intValue53 = parseInt(value, 10);\n  const intValue54 = parseInt(value, 10);\n  const intValue55 = parseInt(value, 10);\n  const intValue56 = parseInt(value, 10);\n  const intValue57 = parseInt(value, 10);\n  const intValue58 = parseInt(value, 10);\n  const intValue59 = parseInt(value, 10);\n  const intValue60 = parseInt(value, 10);\n  const intValue61 = parseInt(value, 10);\n  const intValue62 = parseInt(value, 10);\n  const intValue63 = parseInt(value, 10);\n  const intValue64 = parseInt(value, 10);\n  const intValue65 = parseInt(value, 10);\n  const intValue66 = parseInt(value, 10);\n  const intValue67 = parseInt(value, 10);\n  const intValue68 = parseInt(value, 10);\n  const intValue69 = parseInt(value, 10);\n  const intValue70 = parseInt(value, 10);\n  const intValue71 = parseInt(value, 10);\n  const intValue72 = parseInt(value, 10);\n  const intValue73 = parseInt(value, 10);\n  const intValue74 = parseInt(value, 10);\n  const intValue75 = parseInt(value, 10);\n  const intValue76 = parseInt(value, 10);\n  const intValue77 = parseInt(value, 10);\n  const intValue78 = parseInt(value, 10);\n  const intValue79 = parseInt(value, 10);\n  const intValue80 = parseInt(value, 10);\n  const intValue81 = parseInt(value, 10);\n  const intValue82 = parseInt(value, 10);\n  const intValue83 = parseInt(value, 10);\n  const intValue84 = parseInt(value, 10);\n  const intValue85 = parseInt(value, 10);\n  const intValue86 = parseInt(value, 10);\n  const intValue87 = parseInt(value, 10);\n  const intValue88 = parseInt(value, 10);\n  const intValue89 = parseInt(value, 10);\n  const intValue90 = parseInt(value, 10);\n  const intValue91 = parseInt(value, 10);\n  const intValue92 = parseInt(value, 10);\n  const intValue93 = parseInt(value, 10);\n  const intValue94 = parseInt(value, 10);\n  const intValue95 = parseInt(value, 10);\n  const intValue96 = parseInt(value, 10);\n  const intValue97 = parseInt(value, 10);\n  const intValue98 = parseInt(value", "passed": 0, "run_status": 2}
