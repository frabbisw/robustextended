{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = numbers.slice().sort();\n  const lastNumber = sortedNumbers[sortedNumbers.length - 1];\n  const lastIndex = sortedNumbers.length - 1;\n  const lastIndexPlusOne = sortedNumbers.length;\n  for (let i = 0; i < lastIndex; i++) {\n    const number = sortedNumbers[i];\n    const nextNumber = sortedNumbers[i + 1];\n    if (Math.abs(number - nextNumber) > threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_string_array = paren_string.split('');\n  const paren_string_array_length = paren_string_array.length;\n  const paren_string_array_index = 0;\n  const paren_string_array_index_end = paren_string_array_index + 1;\n  const paren_string_array_index_end_end = paren_string_array_index_end + 1;\n  const paren_string_array_index_end_end_end = paren_string_array_index_end_end + 1;\n  const paren_string_array_index_end_end_end_end = paren_string_array_index_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end = paren_string_array_index_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_end_end_end + 1;\n  const paren_string_array_index_end_end_end_end_end_end_end = paren_string_array_index_end_end_end_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const reversed = string.split('').reverse().join('');\n  const prefix = reversed.substring(0, longestPalindrome.length);\n  const suffix = reversed.substring(longestPalindrome.length);\n  return prefix + suffix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('')\n  ''\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cata')\n  'cata'\n  */\nconst longestPalindrome = (string) => {\n  let longest = 0;\n  let current = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      longest = current + 1;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    current = i - j;\n  }\n  return string.substring(0, longest);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cata')\n  'cata'\n  */\nconst longestPalindrome = (string) => {\n  let longest = 0;\n  let current = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      longest = current + 1;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    current = i - j;\n  }\n  return string.substring(0, longest);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cata')\n  'cata'\n  */\nconst longestPalindrome = (string) => {\n  let longest = 0;\n  let current = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      longest = current + 1;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    current = i - j;\n  }\n  return string.substring(0, longest);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cata')\n  'cata'\n  */\nconst longestPalindrome = (string) => {\n  let longest = 0;\n  let current = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      longest = current + 1;\n      i++;\n      j--;\n    } else if (string[i] < string[j]) {\n      i++;\n    } else {\n      j--;\n    }\n    current = i - j;\n  }\n  return string.substring(0, longest);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cata')\n  'cata'\n  */\nconst longestPalindrome = (string) => {\n  let longest = 0;\n  let current = 0;\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      longest = current + 1;\n      i++;\n      j--;\n    } else if (string[i] < string[j])", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i < y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return -1;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const roundedAvg = Math.ceil(avg)\n  const binary = roundedAvg.toString(2)\n  return binary\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = x.toString().split('').filter(digit =>!digit.startsWith('0'));\n  const sorted = digits.sort((a, b) => a - b);\n  const unique = sorted.filter(digit =>!digit.startsWith('0'));\n  return unique;\n};\n\nconsole.log(uniqueDigits(15));\nconsole.log(uniqueDigits(152));\nconsole.log(uniqueDigits(323));\nconsole.log(uniqueDigits(1422));\nconsole.log(uniqueDigits(10));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength2 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength3 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength4 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength5 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength6 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength7 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength8 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength9 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength10 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength11 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength12 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength13 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength14 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength15 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength16 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength17 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength18 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength19 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a.length - b.length)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => x.toString())\n  return names\n}\n\nconst byLength20 = (arr) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(1)\n    } else {\n      factorials.push(i)\n    }\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f22 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f23 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f24 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f25 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    let s = String(i);\n    if (s.length % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n};\n\nconst evenOddPalindrome = (n) => {\n  let odd = 0, even = 0;\n  for (let i = 1; i <= n; i++) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let sum = 0;\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([1, 2, 3]));\nconsole.log(countNums([-1, -2, -3]));\nconsole.log(countNums([-1, -2, -3, -4]));\nconsole.log(countNums([-1, -2, -3, -4, -5]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]));\nconsole.log(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr[i + 1] = max;\n  return moveOneBall(arr);\n};\n\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) return true;\n  if (len === 1) return true;\n  const max = arr[len - 1];\n  let i = len - 2;\n  while (i >= 0) {\n    if (arr[i] > max) {\n      arr[i + 1] = arr[i];\n      i--;\n    } else {\n      break;\n    }\n  }\n  arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nmodule.exports = stringXor;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n\n  const lst1_even = lst1.filter(x => x % 2 === 0);\n  const lst2_even = lst2.filter(x => x % 2 === 0);\n\n  if (lst1_even.length === 0 || lst2_even.length === 0) {\n    return false;\n  }\n\n  const lst1_odd = lst1.filter(x => x % 2!== 0);\n  const lst2_odd = lst2.filter(x => x % 2!== 0);\n\n  if (lst1_odd.length === 0 || lst2_odd.length === 0) {\n    return false;\n  }\n\n  return lst1_even.every(x => lst2_even.indexOf(x)!== -1) ||\n    lst1_odd.every(x => lst2_odd.indexOf(x)!== -1);\n};\n\nexport default exchange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase().split(' ')\n  const histogram = {}\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1\n    } else {\n      histogram[test[i]]++\n    }\n  }\n  return histogram\n}\n\n/*\n  GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return [result.reverse().join(''), result.length === 0];\n};\n\nconst test = (s, c) => {\n  const [result, isPalindrome] = reverseDelete(s, c);\n  console.log(`${s} -> ${result}`);\n  console.log(`${s} is ${isPalindrome? 'palindrome' : 'not palindrome'}`);\n};\n\ntest('abcde', 'ae');\ntest('abcdef', 'b');\ntest('abcdedcba', 'ab');\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  };\n  return lst.map(oddCount);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = Math.min(sum, 0);\n  const subArrays = [];\n  const subArraySum = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      subArrays.push(nums.slice(start, end + 1));\n    }\n    return sum;\n  };\n  const subArraySumLengthLengthLengthLength = (nums, start, end) => {\n    const sum = nums.reduce((acc, num, i) => acc + num, 0);\n    if (sum === minSum) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = capacity;\n        count++;\n      }\n    }\n  }\n  let result = 0;\n  while (count > 0) {\n    let min = Infinity;\n    let minIndex = -1;\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        if (buckets[i][j] < min) {\n          min = buckets[i][j];\n          minIndex = i;\n        }\n      }\n    }\n    buckets[minIndex][minIndex] = 0;\n    count--;\n    result++;\n  }\n  return result;\n};\n\nconst grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\nconst capacity = 1;\nconsole.log(maxFill(grid, capacity));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a === b) return 0;\n    if (a < b) return -1;\n    return 1;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns a list of all words from string s that contain exactly n consonants, \nin order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let i = 0;\n  while (i < len) {\n    const word = s.slice(i, i + n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '';\n  let consonant = '';\n  let index = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/*\n  Given a string S, return the number of open brackets in S.\n  Examples:\n  countOpenBrackets('()())') == 1\n  countOpenBrackets('()())') == 2\n  countOpenBrackets('()())') == 3\n  countOpenBrackets('()())') == 4\n  countOpenBrackets('()())') == 5\n  countOpenBrackets('()())') == 6\n  countOpenBrackets('()())') == 7\n  countOpenBrackets('()())') == 8\n  countOpenBrackets('()())') == 9\n  countOpenBrackets('()())') == 10\n  countOpenBrackets('()())') == 11\n  countOpenBrackets('()())') == 12\n  countOpenBrackets('()())') == 13\n  countOpenBrackets('()())') == 14\n  countOpenBrackets('()())') == 15\n  countOpenBrackets('()())') == 16\n  countOpenBrackets('()())') == 17\n  countOpenBrackets('()())') == 18\n  countOpenBrackets('()())') == 19\n  countOpenBrackets('()())') == 20\n  countOpenBrackets('()())') == 21\n  countOpenBrackets('()())') == 22\n  countOpenBrackets('()())') == 23\n  countOpenBrackets('()())') == 24\n  countOpenBrackets('()())') == 25\n  countOpenBrackets('()())') == 26\n  countOpenBrackets('()())') == 27\n  countOpenBrackets('()())') == 28\n  countOpenBrackets('()())') == 29\n  countOpenBrackets('()())') == 30\n  countOpenBrackets('()())') == 31\n  countOpenBrackets('()())') == 32\n  countOpenBrackets('()())') == 33\n  countOpenBrackets('()())') == 34\n  countOpenBrackets('()())') == 35\n  countOpenBrackets('()())') == 36\n  countOpenBrackets('()())') == 37\n  countOpenBrackets('()())') == 38\n  countOpenBrackets('()())') == 39\n  countOpenBrackets('()())') == 40\n  countOpenBrackets('()())') == 41\n  countOpenBrackets('()())') == 42\n  countOpenBrackets('()())') == 43\n  countOpenBrackets('()())') == 44\n  countOpenBrackets('()())') == 45\n  countOpenBrackets('()())') == 46\n  countOpenBrackets('()())') == 47\n  countOpenBrackets('()())') == 48\n  countOpenBrackets('()())') == 49\n  countOpenBrackets('()())') == 50\n  countOpenBrackets('()())') == 51\n  countOpenBrackets('()())') == 52\n  countOpenBrackets('()())') == 53\n  countOpenBrackets('()())') == 54\n  countOpenBrackets('()())') == 55\n  countOpenBrackets('()())') == 56\n  countOpenBrackets('()())') == 57\n  countOpenBrackets('()())') == 58\n  countOpenBrackets('()())') == 59\n  countOpenBrackets('()())') == 60\n  countOpenBrackets('()())') == 61\n  countOpenBrackets('()())') == 62\n  countOpenBrackets('()())') == 63\n  countOpenBrackets('()())') == 64\n  countOpenBrackets('()())') == 65\n  countOpenBrackets('()())') == 66\n  countOpenBrackets('()())') == 67\n  countOpenBrackets('()())') == 68\n  countOpenBrackets('()())') == 69\n  countOpenBrackets('()())') == 70\n  countOpenBrackets('()())') == 71\n  countOpenBrackets('()())') == 72\n  countOpenBrackets('()())') == 73\n  countOpenBrackets('()())') == 74\n  countOpenBrackets('()())') == 75\n  countOpenBrackets('()())') == 76\n  countOpenBrackets('()())') == 77\n  countOpenBrackets('()())') == 78\n  countOpenBrackets('()())') == 79\n  countOpenBrackets('()())') == 80\n  countOpenBrackets('()())') == 81\n  countOpenBrackets('()())') == 82\n  countOpenBrackets('()())') == 83\n  countOpenBrackets('()())') == 84\n  countOpenBrackets('()())') == 85\n  countOpenBrackets('()())') == 86\n  countOpenBrackets('()())') == 87\n  countOpenBrackets('()())') == 88\n  countOpenBrackets('()())') == 89\n  countOpenBrackets('()())') == 90\n  countOpenBrackets('()())') == 91\n  countOpenBrackets('()())') == 92\n  countOpenBrackets('()())') == 93\n  countOpenBrackets('()())') == 94\n  countOpenBrackets('()())') == 95\n  countOpenBrackets('()())') == 96\n  countOpenBrackets('()())') == 97\n  countOpenBrackets('()())') == 98\n  countOpenBrackets('()())') == 99\n  countOpenBrackets('()())') == 100\n  countOpenBrackets('()())') == 101\n  countOpenBr", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = 0;\n  strings.forEach((string) => {\n    if (string.length > longest) {\n      longest = string.length;\n    }\n  });\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0];\n  let i = 1;\n  while (i < k) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  return max;\n};\n\nexport default maximum;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements2 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements3 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements4 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements5 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements6 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements7 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements8 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements9 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements10 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.join('');\n};\n\nconst addElements11 = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  let sum = 0;\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum > 9) {\n      sum = sum % 10;\n      result.push(sum);\n      sum = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = [],\n    i = 1;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      odd.push(i);\n    }\n    i = getCollatz(i);\n  }\n  return odd;\n};\n\nconst getCollatz = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return getCollatz(n / 2);\n  }\n  return 3 * getCollatz(n / 2) + 1;\n};\n\nconst test = () => {\n  const n = 5;\n  console.log(getOddCollatz(n));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n\n  if (month < 1 || month > 12) return false\n  if (day < 1 || day > 31) return false\n  if (month === 2 && day > 29) return false\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false\n  } else {\n    if (day < 1 || day > 31) return false\n  }\n  if (year < 1 || year > 2040) return false\n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate2 = (date) => {\n  if (date === '') return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n\n  if (month < 1 || month > 12) return false\n  if (day < 1 || day > 31) return false\n  if (month === 2 && day > 29) return false\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false\n  } else {\n    if (day < 1 || day > 31) return false\n  }\n  if (year < 1 || year > 2040) return false\n  return true\n}\n\nconst validDate3 = (date) => {\n  if (date === '') return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n\n  if (month < 1 || month > 12) return false\n  if (day < 1 || day > 31) return false\n  if (month === 2 && day > 29) return false\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false\n  } else {\n    if (day < 1 || day > 31) return false\n  }\n  if (year < 1 || year > 2040) return false\n  return true\n}\n\nconst validDate4 = (date) => {\n  if (date === '') return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n\n  if (month < 1 || month > 12) return false\n  if (day < 1 || day > 31) return false\n  if (month === 2 && day > 29) return false\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false\n  } else {\n    if (day < 1 || day > 31) return false\n  }\n  if (year < 1 || year > 2040) return false\n  return true\n}\n\nconst validDate5 = (date) => {\n  if (date === '') return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n\n  if (month < 1 || month > 12) return false\n  if (day < 1 || day > 31) return false\n  if (month === 2 && day > 29) return false\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false\n  } else {\n    if (day < 1 || day > 31) return false\n  }\n  if (year < 1 || year > 2040) return false\n  return true\n}\n\nconst validDate6 = (date) => {\n  if (date === '') return false\n  const dateArray = date.split('-')\n  const month = parseInt(dateArray[1])\n  const day = parseInt(dateArray[2])\n  const year = parseInt(dateArray[0])\n\n  if (month < 1 || month > 12", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const odd = words.filter(w => w.length % 2 === 1);\n  const even = words.filter(w => w.length % 2 === 0);\n  return [odd, even];\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLength = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => w.length);\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOdd = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOddAndEven = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1, len % 2 === 0];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOddAndEvenAndOdd = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1, len % 2 === 0, len % 2 === 1];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOddAndEvenAndOdd = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1, len % 2 === 0, len % 2 === 1, len % 2 === 0];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOddAndEvenAndOddAndEven = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1, len % 2 === 0, len % 2 === 1, len % 2 === 0, len % 2 === 1];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOddAndEvenAndOddAndEven = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1, len % 2 === 0, len % 2 === 1, len % 2 === 0, len % 2 === 1];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == [\"abcdef\"]\n  */\nconst splitWordsByLengthAndOddAndEvenAndOddAndEven = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(w => {\n    const len = w.length;\n    return [w, len % 2 === 1, len % 2 === 0, len % 2 === 1, len % 2 === 0, len % 2 === 1];\n  });\n};\n\n/*\n  Given a string, return a list of the words in the string.\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\",", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.length === sorted.length && lst.every(a => a === sorted[0]);\n};\n\nexport { isSorted };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      sign = 0;\n      break;\n    }\n    if (arr[i] === -1) {\n      sign = -1;\n      break;\n    }\n    if (arr[i] === 1) {\n      sign = 1;\n      break;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n    product *= arr[i];\n  }\n  return sign * product;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n);\n  dp[0] = grid[0];\n  dp[1] = grid[1];\n  dp[2] = grid[2];\n  for (let i = 3; i < n; i++) {\n    dp[i] = [...dp[i - 1],...grid[i]];\n  }\n  const dp_k = dp[k - 1];\n  const dp_k_length = dp_k.length;\n  const dp_k_index = dp_k.findIndex((v) => v < dp_k[dp_k_length - 1]);\n  const dp_k_next = dp_k[dp_k_index + 1];\n  const dp_k_next_length = dp_k_next.length;\n  const dp_k_next_index = dp_k_next.findIndex((v) => v < dp_k_next[dp_k_next_length - 1]);\n  const dp_k_next_next = dp_k_next[dp_k_next_index + 1];\n  const dp_k_next_next_length = dp_k_next_next.length;\n  const dp_k_next_next_index = dp_k_next_next.findIndex((v) => v < dp_k_next_next[dp_k_next_next_length - 1]);\n  const dp_k_next_next_next = dp_k_next_next[dp_k_next_next_index + 1];\n  const dp_k_next_next_next_length = dp_k_next_next_next.length;\n  const dp_k_next_next_next_index = dp_k_next_next_next.findIndex((v) => v < dp_k_next_next_next[dp_k_next_next_next_length - 1]);\n  const dp_k_next_next_next_next = dp_k_next_next_next[dp_k_next_next_next_index + 1];\n  const min_path = dp_k_next_next_next[dp_k_next_next_next_index + 1];\n  return min_path;\n};\n\nconsole.log(minPath([[1,2,3], [4,5,6], [7,8,9]], 3));\nconsole.log(minPath([[5,9,3], [4,1,6], [7,8,2]], 1));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a === b) {\n    return a;\n  }\n  while (a!== 1) {\n    if (a % b === 0) {\n      return b;\n    }\n    a = a % b;\n  }\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(a)\n    a = b\n    b = c\n    c = a + b\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\nconsole.log(sumSquares([1,2,3])); // 14\nconsole.log(sumSquares([1,4,9])); // 98\nconsole.log(sumSquares([1,3,5,7])); // 84\nconsole.log(sumSquares([1.4,4.2,0])); // 29\nconsole.log(sumSquares([-2.4,1,1])); // 6\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  return isAlpha(lastChar) &&!isAlphaNumeric(lastChar);\n};\n\n/* Create a function that returns true if the last two characters in a given string are both alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2);\n  return isAlpha(lastTwoChars[0]) && isAlpha(lastTwoChars[1]) &&!isAlphaNumeric(lastTwoChars[0]) &&!isAlphaNumeric(lastTwoChars[1]);\n};\n\n/* Create a function that returns true if the last three characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3);\n  return isAlpha(lastThreeChars[0]) && isAlpha(lastThreeChars[1]) && isAlpha(lastThreeChars[2]) &&!isAlphaNumeric(lastThreeChars[0]) &&!isAlphaNumeric(lastThreeChars[1]) &&!isAlphaNumeric(lastThreeChars[2]);\n};\n\n/* Create a function that returns true if the last four characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4);\n  return isAlpha(lastFourChars[0]) && isAlpha(lastFourChars[1]) && isAlpha(lastFourChars[2]) && isAlpha(lastFourChars[3]) &&!isAlphaNumeric(lastFourChars[0]) &&!isAlphaNumeric(lastFourChars[1]) &&!isAlphaNumeric(lastFourChars[2]) &&!isAlphaNumeric(lastFourChars[3]);\n};\n\n/* Create a function that returns true if the last five characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5);\n  return isAlpha(lastFiveChars[0]) && isAlpha(lastFiveChars[1]) && isAlpha(lastFiveChars[2]) && isAlpha(lastFiveChars[3]) && isAlpha(lastFiveChars[4]) &&!isAlphaNumeric(lastFiveChars[0]) &&!isAlphaNumeric(lastFiveChars[1]) &&!isAlphaNumeric(lastFiveChars[2]) &&!isAlphaNumeric(lastFiveChars[3]) &&!isAlphaNumeric(lastFiveChars[4]);\n};\n\n/* Create a function that returns true if the last six characters in a given string are all alphabetic characters and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6);\n  return isAlpha(lastSixChars[0]) && isAlpha(lastSixChars[1]) && isAlpha(lastSixChars[2]) && isAlpha(lastSixChars[3]) && isAlpha(lastSixChars[4]) && isAlpha(lastSixChars[5]) &&!isAlphaNumeric(lastSixChars[0]) &&!isAlphaNumeric(lastSixChars[1]) &&!isAlphaNumeric(lastSixChars[2]) &&!isAlphaNumeric(lastSixChars[3]) &&!isAlphaNumeric(lastSixChars[4]) &&!isAlphaNumeric(lastSixChars[5]);\n};\n\n/* Create a function that returns true if the last seven characters in a given string are all", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let max = -1;\n  while (i <= j) {\n    if (arr[i] < arr[j]) {\n      max = i;\n      i++;\n    } else if (arr[i] > arr[j]) {\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return max;\n};\n\n/*\n  canArrange([1,2,3,4,5,6,7,8,9,10]) = 4\n  canArrange([1,2,3,4,5,6,7,8,9,10,11]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) = -1\n  canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) = -1\n  canArrange", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 || min > 0) {\n    return (null, 0);\n  }\n  return (max, min);\n};\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  Examples:\n  largestNumber([1, 2, 3]) == 3\n  largestNumber([1, 2, 3, 4]) == 4\n  largestNumber([1, 2, 3, 4, 5]) == 5\n  largestNumber([1, 2, 3, 4, 5, 6]) == 6\n  largestNumber([1, 2, 3, 4, 5, 6, 7]) == 7\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 11\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 14\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 15\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 16\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 17\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 18\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 19\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 21\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 22\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 23\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 24\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 25\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 26\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 27\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 28\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 29\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 30\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 31\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 32\n  largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger variable.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger variable.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"5,1\"\n  compareThree(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger variable.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"5,1\"\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables and returns the larger variable.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"5,1\"\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string')", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 0\n}\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 1\n}\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 2\n}\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 3\n}\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 2\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 3\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 2\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 3\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 4 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst is", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial20", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substring(i, stringLength)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes2 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes3 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes4 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes5 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes6 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes7 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes8 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes9 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst allPrefixesAndSuffixes10 = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return [prefixes, suffixes]\n}\n\n/* Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'b', 'c'], ['ab', 'bc'], ['abc']]\n  */\nconst all", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces2 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces3 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces4 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces5 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces6 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces7 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces8 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces9 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces10 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example 1\"\n  fixSpaces(\"_Example_2\") == \"Example 2\"\n  fixSpaces(\"_Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces11 = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  For a string text, replace all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9.]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9.]*\\./;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9.]*\\.txt$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9.]*\\.exe$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9.]*\\.dll$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9.]*\\.zip$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9.]*\\.rar$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9.]*\\.tar\\.gz$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9.]*\\.tar\\.bz2$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9.]*\\.tar\\.xz$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9.]*\\.gz$/;\n  const regex12 = /^[a-zA-Z][a-zA-Z0-9.]*\\.bz2$/;\n  const regex13 = /^[a-zA-Z][a-zA-Z0-9.]*\\.7z$/;\n  const regex14 = /^[a-zA-Z][a-zA-Z0-9.]*\\.cab$/;\n  const regex15 = /^[a-zA-Z][a-zA-Z0-9.]*\\.iso$/;\n  const regex16 = /^[a-zA-Z][a-zA-Z0-9.]*\\.iso$/;\n  const regex17 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex18 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex19 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex20 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex21 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex22 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex23 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex24 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex25 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex26 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex27 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex28 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex29 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex30 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex31 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex32 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex33 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex34 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex35 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex36 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex37 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex38 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex39 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex40 = /^[a-zA-Z][a-zA-Z0-9.]*\\.img$/;\n  const regex41 = /^[a-zA-Z][", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const index = primes.indexOf(word.length)\n    if (index === -1) {\n      newWords.push(word)\n    } else {\n      newWords.push(words[i].substr(0, index))\n      newWords.push(words[i].substr(index))\n    }\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = parse(x);\n  const [numerator2, denominator2] = parse(n);\n  const denominator1 = denominator2;\n  const numerator1 = numerator2;\n  if (numerator1 === 0) {\n    return false;\n  }\n  if (numerator1 === 1) {\n    return true;\n  }\n  if (numerator1 === -1) {\n    return false;\n  }\n  if (numerator1 === numerator2) {\n    return true;\n  }\n  if (numerator1 === -numerator2) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 1) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 1) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 2) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 2) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 3) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 3) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 4) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 4) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 5) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 5) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 6) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 6) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 7) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 7) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 8) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 8) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 9) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 9) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 10) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 10) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 11) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 11) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 12) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 12) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 13) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 13) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 14) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 14) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 15) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 15) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 16) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 16) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 17) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 17) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 18) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 18) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 19) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 19) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 20) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 20) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 21) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 21) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 22) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 22) {\n    return false;\n  }\n  if (numerator1 === -numerator2 + 23) {\n    return true;\n  }\n  if (numerator1 === -numerator2 - 23) {\n    return false;\n  }\n  if (numerator", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const sortedBySum = [];\n  const sortedByIndex = [];\n  const sortedByIndexBySum = [];\n  const sortedByIndexBySumByIndex = [];\n  const sortedBySumByIndex = [];\n  const sortedBySumByIndexByIndex = [];\n  const sortedBySumByIndexBySum = [];\n  const sortedBySumByIndexBySumByIndex = [];\n  const sortedBySumBySumByIndex = [];\n  const sortedBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumByIndexBySumByIndex = [];\n  const sortedBySumBySumBySumByIndex = [];\n  const sortedBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumByIndexBySumByIndex = [];\n  const sortedBySumBySumBySumBySumByIndex = [];\n  const sortedBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumByIndexBySumByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndexBySumByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndexBySumByIndex = [];\n  const sortedBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndexBySumByIndexByIndex = [];\n  const sortedBySumBySumBySumBySumBySumBySumByIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = nums.filter(x => x % 2 === 1);\n  const first = odd.filter(x => x % 10 === 1);\n  const last = odd.filter(x => x % 10 === 9);\n  return first.length + last.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples2 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples3 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples4 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples5 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples6 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples7 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          triples.push([arr[i], arr[j], arr[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getMaxTriples8 = (n) => {\n  const arr = new Array(n)\n  for (let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = getOrbit(planet1);\n  const planet2Orbit = getOrbit(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitStart = planet1Orbit.indexOf(planet1OrbitLength - 1);\n  const planet2OrbitStart = planet2Orbit.indexOf(planet2OrbitLength - 1);\n  const planet1OrbitEnd = planet1Orbit.indexOf(0, planet1OrbitStart + 1);\n  const planet2OrbitEnd = planet2Orbit.indexOf(0, planet2OrbitStart + 1);\n  const planet1OrbitEndLength = planet1OrbitEnd - planet1OrbitStart;\n  const planet2OrbitEndLength = planet2OrbitEnd - planet2OrbitStart;\n  const planet1OrbitStartLength = planet1OrbitStart - planet1OrbitEnd;\n  const planet2OrbitStartLength = planet2OrbitStart - planet2OrbitEnd;\n  const planet1OrbitStartIndex = planet1Orbit.indexOf(planet1OrbitStartLength - 1);\n  const planet2OrbitStartIndex = planet2Orbit.indexOf(planet2OrbitStartLength - 1);\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(0, planet1OrbitEnd + 1);\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(0, planet2OrbitEnd + 1);\n  const planet1OrbitEndIndexLength = planet1OrbitEndIndex - planet1OrbitStartIndex;\n  const planet2OrbitEndIndexLength = planet2OrbitEndIndex - planet2OrbitStartIndex;\n  const planet1OrbitStartIndexLength = planet1OrbitStartIndex - planet1OrbitEndIndex;\n  const planet2OrbitStartIndexLength = planet2OrbitStartIndex - planet2OrbitEndIndex;\n  const planet1OrbitStartIndexLengthLength = planet1OrbitStartIndexLength - planet1OrbitEndIndexLength;\n  const planet2OrbitStartIndexLengthLength = planet2OrbitStartIndexLength - planet2OrbitEndIndexLength;\n  const planet1OrbitStartIndexLengthLengthLength = planet1OrbitStartIndexLengthLength - planet1OrbitEndIndexLengthLength;\n  const planet2OrbitStartIndexLengthLengthLength = planet2OrbitStartIndexLengthLength - planet2OrbitEndIndexLengthLength;\n  const planet1OrbitStartIndexLengthLengthLengthLength = planet1OrbitStartIndexLengthLengthLength - planet1OrbitEndIndexLengthLengthLength;\n  const planet2OrbitStartIndexLengthLengthLengthLength = planet2OrbitStartIndexLengthLengthLength - planet2OrbitEndIndexLengthLengthLength;\n  const planet1OrbitStartIndexLengthLengthLengthLengthLength = planet1OrbitStartIndexLengthLengthLengthLength - planet1OrbitEndIndexLengthLengthLengthLength;\n  const planet2OrbitStartIndexLengthLengthLengthLengthLength = planet2OrbitStartIndexLengthLengthLengthLength - planet2OrbitEndIndexLengthLengthLengthLengthLength;\n  const planet1OrbitStartIndexLengthLengthLengthLengthLengthLength = planet1OrbitStartIndexLengthLengthLengthLengthLength - planet1OrbitEndIndexLengthLengthLengthLengthLengthLength;\n  const planet2OrbitStartIndexLengthLengthLengthLengthLengthLength = planet2OrbitStartIndexLengthLengthLengthLengthLengthLength - planet2OrbitEndIndexLengthLengthLengthLengthLengthLengthLength;\n  const planet1OrbitStartIndexLengthLengthLengthLengthLengthLengthLength = planet1OrbitStartIndexLengthLengthLengthLengthLengthLengthLength - planet1OrbitEndIndexLengthLengthLengthLengthLengthLengthLengthLength;\n  const planet2OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLength = planet2OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLength - planet2OrbitEndIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const planet1OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLength = planet1OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLength - planet1OrbitEndIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const planet2OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = planet2OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength - planet2OrbitEndIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const planet1OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = planet1OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength - planet1OrbitEndIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength;\n  const planet2OrbitStartIndexLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort2 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort3 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort4 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort5 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort6 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort7 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort8 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort9 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort10 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort11 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort12 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort13 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort14 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort15 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort16 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive,\n  with the first n characters of the string 'prefix'\n  appended to the end.\n  >>> stringSequence(0, 'foo')\n  'foo'\n  >>> stringSequence(5, 'foo')\n  'foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix) => {\n  let s = prefix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive,\n  with the first n characters of the string 'prefix'\n  appended to the end, and the first n characters of the string'suffix'\n  appended to the beginning.\n  >>> stringSequence(0, 'foo', 'bar')\n  'foo bar'\n  >>> stringSequence(5, 'foo', 'bar')\n  'bar foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, suffix) => {\n  let s = prefix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += suffix;\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive,\n  with the first n characters of the string 'prefix'\n  appended to the end, and the first n characters of the string'suffix'\n  appended to the beginning, and the first n characters of the string'middle'\n  appended to the beginning and the end.\n  >>> stringSequence(0, 'foo', 'bar', 'baz')\n  'foo bar baz'\n  >>> stringSequence(5, 'foo', 'bar', 'baz')\n  'bar baz foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, suffix, middle) => {\n  let s = prefix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += suffix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += middle;\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive,\n  with the first n characters of the string 'prefix'\n  appended to the end, and the first n characters of the string'suffix'\n  appended to the beginning, and the first n characters of the string'middle'\n  appended to the beginning and the end.\n  The first n characters of the string'middle' are repeated n times.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'baz')\n  'foo bar baz baz'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'baz')\n  'bar baz baz foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, suffix, middle, repeat) => {\n  let s = prefix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += suffix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += middle;\n  for (let i = 0; i < repeat; i++) {\n    s += middle;\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive,\n  with the first n characters of the string 'prefix'\n  appended to the end, and the first n characters of the string'suffix'\n  appended to the beginning, and the first n characters of the string'middle'\n  appended to the beginning and the end.\n  The first n characters of the string'middle' are repeated n times.\n  The first n characters of the string'suffix' are repeated n times.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'baz', 'baz')\n  'foo bar baz baz baz baz'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'baz', 'baz')\n  'bar baz baz baz foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, suffix, middle, repeat, repeat2) => {\n  let s = prefix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += suffix;\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  s += middle;\n  for (let i = 0; i < repeat; i++) {\n    s += middle;\n  }\n  for (let i = 0; i < repeat2; i++) {\n    s += suffix;\n  }\n  return s;\n};\n\n/* Returns a string containing spaces from 0 to n inclusive,\n  with the first n characters of the string 'prefix'\n  appended to the end, and the first n characters of the string'suffix'\n  appended to the beginning, and the first n characters of the string'middle'\n  appended to the beginning and the end.\n  The first n characters of the string'middle' are repeated n times.\n  The first n characters of the string'suffix' are repeated n times.\n  The first n characters of the string 'prefix' are repeated n times.\n  >>> stringSequence(0, 'foo', 'bar', 'baz', 'baz', 'baz', 'baz')\n  'foo bar baz baz baz baz baz'\n  >>> stringSequence(5, 'foo', 'bar', 'baz', 'baz', 'baz', 'baz')\n  'bar baz baz baz foo 0 1 2 3 4 5'\n  */\nconst stringSequence = (n, prefix, suffix, middle, repeat, repeat2, repeat3) => {\n  let s = prefix;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  } else if (n === 2) {\n    return true;\n  } else if (n % 2 === 0) {\n    return false;\n  } else {\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => acc + num * num, 0);\n  return sum;\n};\n\nexport default doubleTheDifference;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const result = []\n  for (let i = 0; i < gameLength; i++) {\n    const score = game[i]\n    const guess = guess[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.replace(/\\W/g, '').length;\n    const sm = class_name.replace(/\\W/g, '').length;\n    return (cap - sm) / cap;\n  }, -1);\n  return class_name + '.' + extensions[Math.max(0, Math.min(extensions.length - 1, strength))];\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  const a_substr = a.substr(0, b_length);\n  const b_substr = b.substr(0, a_length);\n  if (a_substr === b_substr) {\n    return true;\n  }\n  for (let i = 0; i < a_length; i++) {\n    if (a_substr === b_substr.substr(i, a_length - i)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the substring \"a\" are replaced with \"b\".\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"\n  replace(\"abcd\", \"a\", \"b\") => \"bbcd\"", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let isOdd = false;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            isOdd =!isOdd;\n        }\n        num = num / 2;\n    }\n    return [count, isOdd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += roman[number % 10]\n      number = number / 10\n    } else {\n      result += roman[number % 10]\n      number = number / 10\n      result += roman[number % 10]\n      number = number / 10\n    }\n    i += 1\n  }\n  return result.toLowerCase()\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += roman[number % 10]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n    }\n    i += 1\n  }\n  return result.toUpperCase()\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in mixed case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += roman[number % 10]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n      result += roman[number % 10].toLowerCase()\n      number = number / 10\n    }\n    i += 1\n  }\n  return result.toUpperCase()\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in upper case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += roman[number % 10]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n      result += roman[number % 10].toLowerCase()\n      number = number / 10\n    }\n    i += 1\n  }\n  return result.toUpperCase()\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lower case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += roman[number % 10]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toLowerCase()\n      number = number / 10\n      result += roman[number % 10].toLowerCase()\n      number = number / 10\n    }\n    i += 1\n  }\n  return result.toLowerCase()\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in mixed case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n  const roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n  let result = ''\n  let i = 0\n  while (number > 0) {\n    if (number % 10 === 0) {\n      result += roman[number % 10]\n      number = number / 10\n    } else {\n      result += roman[number % 10].toLowerCase()\n      number = number / 10\n      result += roman[number % 10].toUpperCase()\n      number = number / 10\n    }\n    i += 1\n  }\n  return result.toUpperCase()\n}\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in upper case letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - c)) ||\n    (Math.abs(a - b) <= Math.abs(b - c) && Math.abs(a - c) <= Math.abs(b - c)) ||\n    (Math.abs(a - b) <= Math.abs(c - b) && Math.abs(b - c) <= Math.abs(c - b)) ||\n    (Math.abs(a - c) <= Math.abs(b - c) && Math.abs(c - b) <= Math.abs(b - c)) ||\n    (Math.abs(a - c) <= Math.abs(c - b) && Math.abs(b - c) <= Math.abs(a - b)) ||\n    (Math.abs(a - b) <= Math.abs(c - a) && Math.abs(c - b) <= Math.abs(a - b)) ||\n    (Math.abs(b - c) <= Math.abs(a - c) && Math.abs(a - b) <= Math.abs(b - c)) ||\n    (Math.abs(b - c) <= Math.abs(c - a) && Math.abs(a - b) <= Math.abs(c - b)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(b - c) <= Math.abs(a - b)) ||\n    (Math.abs(c - b) <= Math.abs(b - a) && Math.abs(a - c) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(b - c) && Math.abs(c - b) <= Math.abs(a - b)) ||\n    (Math.abs(c - a) <= Math.abs(a - b) && Math.abs(b - c) <= Math.abs(a - b)) ||\n    (Math.abs(c - a) <= Math.abs(b - c) && Math.abs(c - b) <= Math.abs(b - a)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(b - a) <= Math.abs(c - a)) ||\n    (Math.abs(c - b) <= Math.abs(b - a) && Math.abs(a - c) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(a - b) && Math.abs(b - a) <= Math.abs(c - b)) ||\n    (Math.abs(c - a) <= Math.abs(b - c) && Math.abs(a - b) <= Math.abs(c - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(c - b)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(b - a) <= Math.abs(c - a)) ||\n    (Math.abs(c - b) <= Math.abs(b - a) && Math.abs(a - c) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(a - b)) ||\n    (Math.abs(c - a) <= Math.abs(b - c) && Math.abs(a - b) <= Math.abs(c - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(a - b)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(b - a) <= Math.abs(c - a)) ||\n    (Math.abs(c - b) <= Math.abs(b - a) && Math.abs(a - c) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(a - b)) ||\n    (Math.abs(c - a) <= Math.abs(b - c) && Math.abs(a - b) <= Math.abs(c - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(a - b)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(b - a) <= Math.abs(c - a)) ||\n    (Math.abs(c - b) <= Math.abs(b - a) && Math.abs(a - c) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(a - b)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(c - a) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(b - c) && Math.abs(a - b) <= Math.abs(c - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b - a) <= Math.abs(a - b)) ||\n    (Math.abs(c - b) <= Math.abs(a - c) && Math.abs(b - a) <= Math.abs(c - a)) ||\n    (Math.abs(c - b) <= Math.abs(b - a) && Math.abs(a - c) <= Math.abs(b - a)) ||\n    (Math.abs(c - a) <= Math.abs(c - b) && Math.abs(b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  const maxCount = words.length;\n  const count = words.reduce((acc, word) => {\n    const wordCount = word.length;\n    const wordLength = word.length;\n    const wordLengthDiff = wordLength - max.length;\n    const diff = wordLengthDiff * wordLengthDiff;\n    const diffCount = wordCount - maxCount;\n    const diffCountDiff = diffCount * diffCount;\n    const diffCountDiffDiff = diffCountDiff - maxCount * maxCount;\n    const diffCountDiffDiffDiff = diffCountDiffDiff - maxCount * maxCount * maxCount;\n    const diffCountDiffDiffDiffDiff = diffCountDiffDiffDiff - maxCount * maxCount * maxCount * maxCount;\n    if (wordLengthDiff > maxLengthDiff) {\n      if (wordCount > maxCount) {\n        max = word;\n        maxCount = wordCount;\n      }\n    } else if (diff > maxDiff) {\n      if (diffCount > maxCount) {\n        max = word;\n        maxCount = wordCount;\n      }\n    } else if (diffCountDiff > maxCount * maxCount) {\n      if (diffCountDiffDiff > maxCount * maxCount * maxCount) {\n        max = word;\n        maxCount = wordCount;\n      }\n    }\n    return acc + wordCount;\n  }, 0);\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, need - number];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test28 = [\n  [5,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters11 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters12 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters13 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters14 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) > 32? 1 : 0;\n  }\n  return charCount;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters15 = (string) => {\n  let char", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    const operatorValue = operator[i]\n    const operandValue = operand[j]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    i++\n    j++\n  }\n  return result\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const operatorLength =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  let reversed_char = reversed.split(\"\").reverse().join(\"\");\n  return reversed_char;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592c0758b5f2a7e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf78827a408a47e67c40f7a8443b9fcf7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits.length % 2 === 0) {\n        result.push(parseInt(digits));\n      }\n    }\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const number = i.toString();\n    const index = number.indexOf('.');\n    if (index > -1) {\n      const digits = number.slice(0, index);\n      if (digits", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o|') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      beats.push(1);\n    } else if (notes[i] === 'o | ') {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j) === substring.charAt(j)) {\n          count++;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find out how often a substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ');\n  const sortedNumbers = [];\n  for (let i = 0; i < numbersArray.length; i++) {\n    const number = parseInt(numbersArray[i]);\n    sortedNumbers.push(number);\n  }\n  return sortedNumbers.join(' ');\n};\n\n/*\n  Question 2\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLetters = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toUpperCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 3\n  Write a function that takes a string as input and returns a string with all the lowercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'hello world'\n  */\nconst sortLettersLowercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toLowerCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 4\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLettersUppercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toUpperCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 5\n  Write a function that takes a string as input and returns a string with all the lowercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'hello world'\n  */\nconst sortLettersLowercaseUppercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toLowerCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 6\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLettersUppercaseLowercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toUpperCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 7\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLettersUppercaseLowercaseUppercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toUpperCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 8\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLettersLowercaseUppercaseLowercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toLowerCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 9\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLettersLowercaseLowercaseUppercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toLowerCase());\n  }\n  return sortedLetters.join('');\n};\n\n/*\n  Question 10\n  Write a function that takes a string as input and returns a string with all the uppercase letters in the string.\n  Example:\n  >>> sortLetters('Hello world')\n  'HELLO WORLD'\n  */\nconst sortLettersLowercaseLowercaseLowercase = (string) => {\n  const lettersArray = string.split('');\n  const sortedLetters = [];\n  for (let i = 0; i < lettersArray.length; i++) {\n    const letter = lettersArray[i];\n    sortedLetters.push(letter.toLowerCase());\n  }\n  return sortedLetters", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsString = number.toString();\n  const integerPart = numberAsString.substring(0, numberAsString.indexOf('.'));\n  const decimalPart = numberAsString.substring(numberAsString.indexOf('.') + 1);\n  const integerPartAsNumber = parseInt(integerPart, 10);\n  const decimalPartAsNumber = parseFloat(decimalPart);\n  const truncatedNumber = integerPartAsNumber + (decimalPartAsNumber / 10);\n  return truncatedNumber;\n};\n\n/*\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  0.5\n  >>> truncateNumber(3.5)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[0]);\n    if (diff < Math.abs(numbers[i] - closest[1])) {\n      closest = [numbers[i], numbers[i]];\n    } else {\n      closest = [numbers[i], closest[1]];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[0]);\n    if (diff < Math.abs(numbers[i] - closest[1])) {\n      closest = [numbers[i], numbers[i]];\n    } else {\n      closest = [numbers[i], closest[1]];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[0]);\n    if (diff < Math.abs(numbers[i] - closest[1])) {\n      closest = [numbers[i], numbers[i]];\n    } else {\n      closest = [numbers[i], closest[1]];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[0]);\n    if (diff < Math.abs(numbers[i] - closest[1])) {\n      closest = [numbers[i], numbers[i]];\n    } else {\n      closest = [numbers[i], closest[1]];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[0]);\n    if (diff < Math.abs(numbers[i] - closest[1])) {\n      closest = [numbers[i], numbers[i]];\n    } else {\n      closest = [numbers[i], closest[1]];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements6 = (numbers) => {\n  const closest = [numbers[0], numbers[1]];\n  for (let i = 2; i < numbers.length; i++) {\n    const diff = Math.abs(numbers[i] - closest[0]);\n    if (diff < Math.abs(numbers[i] - closest[1])) {\n      closest = [numbers[i], numbers[i]];\n    } else {\n      closest = [numbers[i], closest[1]];\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitArray = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitList = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitSet = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitSetArray = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitSetList = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitSetSet = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitSetSetArray = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    min / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    (max - min) / (max - min),\n    1.0\n  ]\n}\n\n/**\n  * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  * @param {Array} numbers - The list of numbers to rescale.\n  * @returns {Array} The list of rescaled numbers.\n  */\nconst rescaleToUnitSetSetList = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for strings only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of strings\n  * @example\n  * // Filters the specified list of arbitrary Python values for strings only\n  * filterStrings(['a', 3.14, 5])\n  * // -> ['a', '3.14', '5']\n  * @example\n  * // Filters the specified list of arbitrary Python values for strings only\n  * filterStrings([1, 2, 3, 'abc', {}, []])\n  * // -> ['1', '2', '3', 'abc', '{}', '[]]']\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for objects only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of objects\n  * @example\n  * // Filters the specified list of arbitrary Python values for objects only\n  * filterObjects(['a', 3.14, 5])\n  * // -> ['a', 3.14, 5]\n  * @example\n  * // Filters the specified list of arbitrary Python values for objects only\n  * filterObjects([1, 2, 3, 'abc', {}, []])\n  * // -> [1, 2, 3, 'abc', '{}', '[]]']\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for lists only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of lists\n  * @example\n  * // Filters the specified list of arbitrary Python values for lists only\n  * filterLists(['a', 3.14, 5])\n  * // -> [['a', 3.14, 5]]\n  * @example\n  * // Filters the specified list of arbitrary Python values for lists only\n  * filterLists([1, 2, 3, 'abc', {}, []])\n  * // -> [[1, 2, 3], ['abc'], ['{}'], []]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v.constructor === Array);\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for dictionaries only\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of dictionaries\n  * @example\n  * // Filters the specified list of arbitrary Python values for dictionaries only\n  * filterDictionaries(['a', 3.14, 5])\n  * // -> [{'a': 'a', '3.14': '3.14', '5': '5'}]\n  * @example\n  * // Filters the specified list of arbitrary Python values for dictionaries only\n  * filterDictionaries([1, 2, 3, 'abc', {}, []])\n  * // -> [{}, {}, {}, {}, []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' && v.constructor === Object);\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for all types\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of all types\n  * @example\n  * // Filters the specified list of arbitrary Python values for all types\n  * filterAll(['a', 3.14, 5])\n  * // -> ['a', 3.14, 5, 'a', 3.14, 5, 'a', 3.14, 5]\n  * @example\n  * // Filters the specified list of arbitrary Python values for all types\n  * filterAll([1, 2, 3, 'abc', {}, []])\n  * // -> [1, 2, 3, 'abc', '{}', '[]]', 1, 2, 3, 'abc', '{}', '[]]']\n  */\nconst filterAll = (values) => {\n  return values.filter(v => typeof v === 'object' || typeof v === 'number' || typeof v ==='string');\n};\n\n/**\n  * Filters the specified list of arbitrary Python values for all types\n  * @param {Array} values - The list of values to filter\n  * @returns {Array} - The list of all types\n  * @example\n  * // Filters the specified list of arbitrary Python values for all types\n  * filterAll(['a', 3.14, 5])\n  * // -> ['a', 3.14, 5, 'a', 3.14, 5, 'a', 3.14, 5]\n  * @example\n  * // Filters the specified list of arbitrary Python values for all types\n  * filterAll([1, 2, 3, 'abc', {}, []])\n  * // -> [1, 2, 3, 'abc', '{}', '[]]', 1, 2, 3, 'abc', '{}', '[]]']\n  */\nconst filterAllValues = (values) => {\n  return values.filter(v => typeof v === 'object' || typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean');\n};\n\nexport {\n  filterIntegers,\n  filterStrings,\n  filterObjects,\n  filterLists,\n  filterDictionaries,\n  filterAll,\n  filterAllValues\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Returns the character at the given index\n  *\n  * @param {string} string\n  * @param {number} index\n  * @return {string}\n  * @example\n  *\n  * strchar('')\n  * // => ''\n  *\n  * strchar('abc', 0)\n  * // => 'a'\n  *\n  * strchar('abc', 1)\n  * // => 'b'\n  *\n  * strchar('abc', 2)\n  * // => 'c'\n  *\n  * strchar('abc', 3)\n  * // => ''\n  *\n  * strchar('abc', 4)\n  * // => ''\n  *\n  * strchar('abc', -1)\n  * // => ''\n  *\n  * strchar('abc', -2)\n  * // => ''\n  *\n  * strchar('abc', -3)\n  * // => ''\n  *\n  * strchar('abc', -4)\n  * // => ''\n  *\n  * strchar('abc', -5)\n  * // => ''\n  *\n  * strchar('abc', -6)\n  * // => ''\n  *\n  * strchar('abc', -7)\n  * // => ''\n  *\n  * strchar('abc', -8)\n  * // => ''\n  *\n  * strchar('abc', -9)\n  * // => ''\n  *\n  * strchar('abc', -10)\n  * // => ''\n  *\n  * strchar('abc', -11)\n  * // => ''\n  *\n  * strchar('abc', -12)\n  * // => ''\n  *\n  * strchar('abc', -13)\n  * // => ''\n  *\n  * strchar('abc', -14)\n  * // => ''\n  *\n  * strchar('abc', -15)\n  * // => ''\n  *\n  * strchar('abc', -16)\n  * // => ''\n  *\n  * strchar('abc', -17)\n  * // => ''\n  *\n  * strchar('abc', -18)\n  * // => ''\n  *\n  * strchar('abc', -19)\n  * // => ''\n  *\n  * strchar('abc', -20)\n  * // => ''\n  *\n  * strchar('abc', -21)\n  * // => ''\n  *\n  * strchar('abc', -22)\n  * // => ''\n  *\n  * strchar('abc', -23)\n  * // => ''\n  *\n  * strchar('abc', -24)\n  * // => ''\n  *\n  * strchar('abc', -25)\n  * // => ''\n  *\n  * strchar('abc', -26)\n  * // => ''\n  *\n  * strchar('abc', -27)\n  * // => ''\n  *\n  * strchar('abc', -28)\n  * // => ''\n  *\n  * strchar('abc', -29)\n  * // => ''\n  *\n  * strchar('abc', -30)\n  * // => ''\n  *\n  * strchar('abc', -31)\n  * // => ''\n  *\n  * strchar('abc', -32)\n  * // => ''\n  *\n  * strchar('abc', -33)\n  * // => ''\n  *\n  * strchar('abc', -34)\n  * // => ''\n  *\n  * strchar('abc', -35)\n  * // => ''\n  *\n  * strchar('abc', -36)\n  * // => ''\n  *\n  * strchar('abc', -37)\n  * // => ''\n  *\n  * strchar('abc', -38)\n  * // => ''\n  *\n  * strchar('abc', -39)\n  * // => ''\n  *\n  * strchar('abc', -40)\n  * // => ''\n  *\n  * strchar('abc', -41)\n  * // => ''\n  *\n  * strchar('abc', -42)\n  * // => ''\n  *\n  * strchar('abc', -43)\n  * // => ''\n  *\n  * strchar('abc', -44)\n  * // => ''\n  *\n  * strchar('abc', -45)\n  * // => ''\n  *\n  * strchar('abc', -46)\n  * // => ''\n  *\n  * strchar('abc', -47)\n  * // => ''\n  *\n  * strchar('abc', -48)\n  * // => ''\n  *\n  * strchar('abc', -49)\n  * // => ''\n  *\n  * strchar('abc', -50)\n  * // => ''\n  *\n  * strchar('abc', -51)\n  * // => ''\n  *\n  * strchar('abc', -52)\n  * // => ''\n  *\n  * strchar('abc', -53)\n  * // => ''\n  *\n  * strchar('abc', -54)\n  * // => ''\n  *\n  * strchar('abc', -55)\n  * // => ''\n  *\n  * strchar('abc', -56)\n  * // => ''\n  *\n  * strchar('abc', -57)\n  * // => ''\n  *\n  * strchar('abc', -58)\n  * // => ''\n  *\n  * strchar('abc', -59)\n  * // => ''\n  *\n  * strchar('abc', -60)\n  * // => ''\n  *\n  * strchar('abc', -61)\n  * // => ''\n  *\n  * strchar('abc', -62)\n  * // => ''\n  *\n  * strchar('abc', -63)\n  * // => ''\n  *\n  * strchar('abc', -64)\n  * // => ''\n  *\n  * strchar('abc', -65)\n  * // => ''\n  *\n  * strchar('abc', -66)\n  * // =>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let largest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let i = 1;\n  let smallest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n    }\n    i++;\n  }\n  return smallest;\n};\n\n/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let i = 1;\n  let largest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor2 = (n) => {\n  let i = 1;\n  let smallest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n    }\n    i++;\n  }\n  return smallest;\n};\n\n/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let i = 1;\n  let largest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor3 = (n) => {\n  let i = 1;\n  let smallest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n    }\n    i++;\n  }\n  return smallest;\n};\n\n/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let i = 1;\n  let largest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor4 = (n) => {\n  let i = 1;\n  let smallest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n    }\n    i++;\n  }\n  return smallest;\n};\n\n/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let i = 1;\n  let largest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor5 = (n) => {\n  let i = 1;\n  let smallest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i < smallest) {\n        smallest = i;\n      }\n    }\n    i++;\n  }\n  return smallest;\n};\n\n/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let i = 1;\n  let largest = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i < n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/* Find for a given number n the smallest number dividing n equally, less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDiv", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = 2; i <= factors_length; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Returns the prime factors of a given integer in order from the largest to the smallest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = factors_length; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize_reverse = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = 2; i <= factors_length; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Returns the prime factors of a given integer in order from the largest to the smallest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize_reverse_reverse = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = factors_length; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize_reverse_reverse_reverse = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = 2; i <= factors_length; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Returns the prime factors of a given integer in order from the largest to the smallest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize_reverse_reverse_reverse_reverse = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = factors_length; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize_reverse_reverse_reverse_reverse = (n) => {\n  const factors = []\n  const factors_length = Math.floor(Math.sqrt(n))\n  for (let i = 2; i <=", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf(numbers[i]) === -1) {\n      uniqueNumbersIndex.push(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const uniqueNumbers = [];\n  const uniqueNumbersIndex = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbersIndex.indexOf", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.toLowerCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.toUpperCase().replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase22 = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate2 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate3 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate4 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate5 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate6 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate7 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate8 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate9 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate10 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate11 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate12 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate13 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate14 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate15 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate16 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate17 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate18 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  */\nconst concatenate19 = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for strings not starting with a certain prefix.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {string} prefix - The prefix to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for strings not starting with a certain prefix.\n  * >>> filterByPrefix([], 'a')\n  * []\n  * >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings only for strings starting with a certain prefix.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {string} prefix - The prefix to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for strings starting with a certain prefix.\n  * >>> filterByPrefix([], 'a')\n  * []\n  * >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['abc', 'array']\n  */\nconst filterByPrefixAndNot = (strings, prefix) => {\n  return filterByPrefix(strings, prefix).concat(filterByPrefixNot(strings, prefix));\n};\n\n/**\n  * Filter an input list of strings only for strings not starting with a certain prefix.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {string} prefix - The prefix to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for strings not starting with a certain prefix.\n  * >>> filterByPrefix([], 'a')\n  * []\n  * >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotAndNot = (strings, prefix) => {\n  return filterByPrefixNot(strings, prefix).concat(filterByPrefixNot(strings, prefix));\n};\n\n/**\n  * Filter an input list of strings only for strings starting with a certain prefix.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {string} prefix - The prefix to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for strings starting with a certain prefix.\n  * >>> filterByPrefix([], 'a')\n  * []\n  * >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['abc', 'array']\n  */\nconst filterByPrefixAndNotAndNot = (strings, prefix) => {\n  return filterByPrefixAndNot(strings, prefix).concat(filterByPrefixNotAndNot(strings, prefix));\n};\n\n/**\n  * Filter an input list of strings only for strings not starting with a certain prefix.\n  * @param {Array} strings - The list of strings to filter.\n  * @param {string} prefix - The prefix to filter for.\n  * @returns {Array} The filtered list of strings.\n  * @example\n  * // Filter an input list of strings only for strings not starting with a certain prefix.\n  * >>> filterByPrefix([], 'a')\n  * []\n  * >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByPrefixNotAndNotAndNot = (strings, prefix) => {\n  return filterByPrefixNotAndNot(strings, prefix).concat(filterByPrefixNotAndNot(strings, prefix));\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixNot,\n  filterByPrefixAndNot,\n  filterByPrefixNotAndNot,\n  filterByPrefixAndNotAndNot,\n  filterByPrefixNotAndNotAndNot,\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.reduce((acc, curr) => {\n    if (acc === false) {\n      return false\n    }\n    if (curr < 0) {\n      return true\n    }\n    return acc\n  }, false)\n  return result\n}\n\nexport default belowZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(0)\n  0\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  2\n  >>> countPrimes(5)\n  3\n  >>> countPrimes(6)\n  3\n  >>> countPrimes(7)\n  3\n  >>> countPrimes(8)\n  4\n  >>> countPrimes(9)\n  4\n  >>> countPrimes(10)\n  4\n  >>> countPrimes(11)\n  5\n  >>> countPrimes(12)\n  5\n  >>> countPrimes(13)\n  5\n  >>> countPrimes(14)\n  5\n  >>> countPrimes(15)\n  6\n  >>> countPrimes(16)\n  6\n  >>> countPrimes(17)\n  6\n  >>> countPrimes(18)\n  6\n  >>> countPrimes(19)\n  6\n  >>> countPrimes(20)\n  6\n  >>> countPrimes(21)\n  6\n  >>> countPrimes(22)\n  7\n  >>> countPrimes(23)\n  7\n  >>> countPrimes(24)\n  7\n  >>> countPrimes(25)\n  7\n  >>> countPrimes(26)\n  7\n  >>> countPrimes(27)\n  7\n  >>> countPrimes(28)\n  7\n  >>> countPrimes(29)\n  7\n  >>> countPrimes(30)\n  7\n  >>> countPrimes(31)\n  7\n  >>> countPrimes(32)\n  7\n  >>> countPrimes(33)\n  7\n  >>> countPrimes(34)\n  7\n  >>> countPrimes(35)\n  7\n  >>> countPrimes(36)\n  7\n  >>> countPrimes(37)\n  7\n  >>> countPrimes(38)\n  7\n  >>> countPrimes(39)\n  7\n  >>> countPrimes(40)\n  7\n  >>> countPrimes(41)\n  7\n  >>> countPrimes(42)\n  7\n  >>> countPrimes(43)\n  7\n  >>> countPrimes(44)\n  7\n  >>> countPrimes(45)\n  7\n  >>> countPrimes(46)\n  7\n  >>> countPrimes(47)\n  7\n  >>> countPrimes(48)\n  7\n  >>> countPrimes(49)\n  7\n  >>> countPrimes(50)\n  7\n  >>> countPrimes(51)\n  7\n  >>> countPrimes(52)\n  7\n  >>> countPrimes(53)\n  7\n  >>> countPrimes(54)\n  7\n  >>> countPrimes(55)\n  7\n  >>> countPrimes(56)\n  7\n  >>> countPrimes(57)\n  7\n  >>> countPrimes(58)\n  7\n  >>> countPrimes(59)\n  7\n  >>> countPrimes(60)\n  7\n  >>> countPrimes(61)\n  7\n  >>> countPrimes(62)\n  7\n  >>> countPrimes(63)\n  7\n  >>> countPrimes(64)\n  7\n  >>> countPrimes(65)\n  7\n  >>> countPrimes(66)\n  7\n  >>> countPrimes(67)\n  7\n  >>> countPrimes(68)\n  7\n  >>> countPrimes(69)\n  7\n  >>> countPrimes(70)\n  7\n  >>> countPrimes(71)\n  7\n  >>> countPrimes(72)\n  7\n  >>> countPrimes(73)\n  7\n  >>> countPrimes(74)\n  7\n  >>> countPrimes(75)\n  7\n  >>> countPrimes(76)\n  7\n  >>> countPrimes(77)\n  7\n  >>> countPrimes(78)\n  7\n  >>> countPrimes(79)\n  7\n  >>> countPrimes(80)\n  7\n  >>> countPrimes(81)\n  7\n  >>> countPrimes(82)\n  7\n  >>> countPrimes(83)\n  7\n  >>> countPrimes(84)\n  7\n  >>> countPrimes(85)\n  7\n  >>> countPrimes(86)\n  7\n  >>> countPrimes(87)\n  7\n  >>> countPrimes(88)\n  7\n  >>> countPrimes(89)\n  7\n  >>> countPrimes(90)\n  7\n  >>> countPrimes(91)\n  7\n  >>> countPrimes(92)\n  7\n  >>> countPrimes(93)\n  7\n  >>> countPrimes(94)\n  7\n  >>> countPrimes(95)\n  7\n  >>> countPrimes(96)\n  7\n  >>> countPrimes(97)\n  7\n  >>> countPrimes(98)\n  7\n  >>> countPrimes(99)\n  7\n  >>> countPrimes(100)\n  7\n  >>> countPrimes(101)\n  7\n  >>> countPrimes(102)\n  7\n  >>> countPrimes(103)\n  7\n  >>> countPrimes(104)\n  7\n  >>> countPrimes(105)\n  7\n  >>> countPrimes(106)\n  7\n  >>> countPrimes(107)\n  7\n  >>> countPrimes(108)\n  7\n  >>> countPrimes(109)\n  7\n  >>> countPrimes(110)\n  7\n  >>> countPrimes(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (x === 0) {\n      return x;\n    }\n  }\n  const x = findZero(xs.slice(0, n / 2));\n  const y = findZero(xs.slice(n / 2));\n  return x - y;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (x === 0) {\n      return x;\n    }\n  }\n  const x = findZero2(xs.slice(0, n / 2));\n  const y = findZero2(xs.slice(n / 2));\n  return x - y;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (x === 0) {\n      return x;\n    }\n  }\n  const x = findZero3(xs.slice(0, n / 2));\n  const y = findZero3(xs.slice(n / 2));\n  return x - y;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (x === 0) {\n      return x;\n    }\n  }\n  const x = findZero4(xs.slice(0, n / 2));\n  const y = findZero4(xs.slice(n / 2));\n  return x - y;\n}\n\n/*\n  Evaluates po", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  const sortedIndex = []\n  const sortedIndex2 = []\n  const sortedIndex3 = []\n  const sortedIndex4 = []\n  const sortedIndex5 = []\n  const sortedIndex6 = []\n  const sortedIndex7 = []\n  const sortedIndex8 = []\n  const sortedIndex9 = []\n  const sortedIndex10 = []\n  const sortedIndex11 = []\n  const sortedIndex12 = []\n  const sortedIndex13 = []\n  const sortedIndex14 = []\n  const sortedIndex15 = []\n  const sortedIndex16 = []\n  const sortedIndex17 = []\n  const sortedIndex18 = []\n  const sortedIndex19 = []\n  const sortedIndex20 = []\n  const sortedIndex21 = []\n  const sortedIndex22 = []\n  const sortedIndex23 = []\n  const sortedIndex24 = []\n  const sortedIndex25 = []\n  const sortedIndex26 = []\n  const sortedIndex27 = []\n  const sortedIndex28 = []\n  const sortedIndex29 = []\n  const sortedIndex30 = []\n  const sortedIndex31 = []\n  const sortedIndex32 = []\n  const sortedIndex33 = []\n  const sortedIndex34 = []\n  const sortedIndex35 = []\n  const sortedIndex36 = []\n  const sortedIndex37 = []\n  const sortedIndex38 = []\n  const sortedIndex39 = []\n  const sortedIndex40 = []\n  const sortedIndex41 = []\n  const sortedIndex42 = []\n  const sortedIndex43 = []\n  const sortedIndex44 = []\n  const sortedIndex45 = []\n  const sortedIndex46 = []\n  const sortedIndex47 = []\n  const sortedIndex48 = []\n  const sortedIndex49 = []\n  const sortedIndex50 = []\n  const sortedIndex51 = []\n  const sortedIndex52 = []\n  const sortedIndex53 = []\n  const sortedIndex54 = []\n  const sortedIndex55 = []\n  const sortedIndex56 = []\n  const sortedIndex57 = []\n  const sortedIndex58 = []\n  const sortedIndex59 = []\n  const sortedIndex60 = []\n  const sortedIndex61 = []\n  const sortedIndex62 = []\n  const sortedIndex63 = []\n  const sortedIndex64 = []\n  const sortedIndex65 = []\n  const sortedIndex66 = []\n  const sortedIndex67 = []\n  const sortedIndex68 = []\n  const sortedIndex69 = []\n  const sortedIndex70 = []\n  const sortedIndex71 = []\n  const sortedIndex72 = []\n  const sortedIndex73 = []\n  const sortedIndex74 = []\n  const sortedIndex75 = []\n  const sortedIndex76 = []\n  const sortedIndex77 = []\n  const sortedIndex78 = []\n  const sortedIndex79 = []\n  const sortedIndex80 = []\n  const sortedIndex81 = []\n  const sortedIndex82 = []\n  const sortedIndex83 = []\n  const sortedIndex84 = []\n  const sortedIndex85 = []\n  const sortedIndex86 = []\n  const sortedIndex87 = []\n  const sortedIndex88 = []\n  const sortedIndex89 = []\n  const sortedIndex90 = []\n  const sortedIndex91 = []\n  const sortedIndex92 = []\n  const sortedIndex93 = []\n  const sortedIndex94 = []\n  const sortedIndex95 = []\n  const sortedIndex96 = []\n  const sortedIndex97 = []\n  const sortedIndex98 = []\n  const sortedIndex99 = []\n  const sortedIndex100 = []\n  const sortedIndex101 = []\n  const sortedIndex102 = []\n  const sortedIndex103 = []\n  const sortedIndex104 = []\n  const sortedIndex105 = []\n  const sortedIndex106 = []\n  const sortedIndex107 = []\n  const sortedIndex108 = []\n  const sortedIndex109 = []\n  const sortedIndex110 = []\n  const sortedIndex111 = []\n  const sortedIndex112 = []\n  const sortedIndex113 = []\n  const sortedIndex114 = []\n  const sortedIndex115 = []\n  const sortedIndex116 = []\n  const sortedIndex117 = []\n  const sortedIndex118 = []\n  const sortedIndex119 = []\n  const sortedIndex120 = []\n  const sortedIndex121 = []\n  const sortedIndex122 = []\n  const sortedIndex123 = []\n  const sortedIndex124 = []\n  const sortedIndex125 = []\n  const sortedIndex126 = []\n  const sortedIndex127 = []\n  const sortedIndex128 = []\n  const sortedIndex129 = []\n  const sortedIndex130 = []\n  const sortedIndex131 = []\n  const sortedIndex132 = []\n  const sortedIndex133 = []\n  const sortedIndex134 = []\n  const sortedIndex135 = []\n  const sortedIndex136 = []\n  const sortedIndex137 = []\n  const sortedIndex138 = []\n  const sortedIndex139 = []\n  const sortedIndex140 = []\n  const sortedIndex141 = []\n  const sortedIndex142 = []\n  const sortedIndex143 = []\n  const sortedIndex144 = []\n  const sortedIndex145 = []\n  const sortedIndex146 = []\n  const sortedIndex147 = []\n  const sortedIndex148 = []\n  const sortedIndex149 = []\n  const sortedIndex150 = []\n  const sortedIndex151 = []\n  const sortedIndex152 = []\n  const sortedIndex153 = []\n  const sortedIndex154 = []\n  const sortedIndex155 = []\n  const sortedIndex156 = []\n  const sortedIndex157 = []\n  const sortedIndex158 = []\n  const sortedIndex159 = []\n  const sortedIndex160 = []\n  const sortedIndex161 = []\n  const sortedIndex162 = []\n  const sortedIndex163 = []\n  const sortedIndex164 = []\n  const sortedIndex165 = []\n  const sortedIndex166 = []\n  const sortedIndex167 = []\n  const sortedIndex168 = []\n  const sortedIndex169 = []\n  const sortedIndex170 = []\n  const sortedIndex171 = []\n  const sortedIndex172 = []\n  const sortedIndex173 = []\n  const sortedIndex174 = []\n  const sortedIndex175 = []\n  const sortedIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKey = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 'value')\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeyValueValueValueValue = (l, key) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i][key]) === -1) {\n      unique", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Rreturns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Rreturns the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Rreturns the median of the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  const sorted = sortedArray(l);\n  if (sorted.length % 2 === 0) {\n    return (sorted[(sorted.length / 2) - 1] + sorted[sorted.length / 2]) / 2;\n  } else {\n    return sorted[(sorted.length / 2)];\n  }\n};\n\n/*Rreturns the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = sorted[sorted.length - 1];\n  let maxIndex = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      maxIndex = i;\n    }\n  }\n  return sorted[maxIndex];\n};\n\n/*Rreturns the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = sorted[sorted.length - 1];\n  let maxIndex = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      maxIndex = i;\n    }\n  }\n  return sorted[maxIndex];\n};\n\n/*Rreturns the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = sorted[sorted.length - 1];\n  let maxIndex = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      maxIndex = i;\n    }\n  }\n  return sorted[maxIndex];\n};\n\n/*Rreturns the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = sorted[sorted.length - 1];\n  let maxIndex = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      maxIndex = i;\n    }\n  }\n  return sorted[maxIndex];\n};\n\n/*Rreturns the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = sorted[sorted.length - 1];\n  let maxIndex = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      maxIndex = i;\n    }\n  }\n  return sorted[maxIndex];\n};\n\n/*Rreturns the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const sorted = sortedArray(l);\n  const max = sorted[sorted.length - 1];\n  let maxIndex = 0;\n  for (let i = 0; i < sorted.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizz++;\n    }\n    if (i % 3 === 0) {\n      buzz++;\n    }\n    if (i % 5 === 0) {\n      fizz++;\n    }\n    if (i % 3 === 0 && i % 5 === 0) {\n      buzz++;\n    }\n  }\n  return [fizz, buzz];\n};\n\n/*\n  Routines to print the numbers from 1 to n.\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  1\n  >>> fizzBuzz(3)\n  1\n  >>> fizzBuzz(4)\n  2\n  >>> fizzBuzz(5)\n  2\n  >>> fizzBuzz(6)\n  2\n  >>> fizzBuzz(7)\n  3\n  >>> fizzBuzz(8)\n  3\n  >>> fizzBuzz(9)\n  3\n  >>> fizzBuzz(10)\n  4\n  >>> fizzBuzz(11)\n  4\n  >>> fizzBuzz(12)\n  4\n  >>> fizzBuzz(13)\n  5\n  >>> fizzBuzz(14)\n  5\n  >>> fizzBuzz(15)\n  5\n  >>> fizzBuzz(16)\n  6\n  >>> fizzBuzz(17)\n  6\n  >>> fizzBuzz(18)\n  6\n  >>> fizzBuzz(19)\n  7\n  >>> fizzBuzz(20)\n  7\n  >>> fizzBuzz(21)\n  7\n  >>> fizzBuzz(22)\n  8\n  >>> fizzBuzz(23)\n  8\n  >>> fizzBuzz(24)\n  8\n  >>> fizzBuzz(25)\n  9\n  >>> fizzBuzz(26)\n  9\n  >>> fizzBuzz(27)\n  9\n  >>> fizzBuzz(28)\n  10\n  >>> fizzBuzz(29)\n  10\n  >>> fizzBuzz(30)\n  10\n  >>> fizzBuzz(31)\n  11\n  >>> fizzBuzz(32)\n  11\n  >>> fizzBuzz(33)\n  11\n  >>> fizzBuzz(34)\n  12\n  >>> fizzBuzz(35)\n  12\n  >>> fizzBuzz(36)\n  12\n  >>> fizzBuzz(37)\n  13\n  >>> fizzBuzz(38)\n  13\n  >>> fizzBuzz(39)\n  13\n  >>> fizzBuzz(40)\n  14\n  >>> fizzBuzz(41)\n  14\n  >>> fizzBuzz(42)\n  14\n  >>> fizzBuzz(43)\n  15\n  >>> fizzBuzz(44)\n  15\n  >>> fizzBuzz(45)\n  15\n  >>> fizzBuzz(46)\n  16\n  >>> fizzBuzz(47)\n  16\n  >>> fizzBuzz(48)\n  16\n  >>> fizzBuzz(49)\n  17\n  >>> fizzBuzz(50)\n  17\n  >>> fizzBuzz(51)\n  17\n  >>> fizzBuzz(52)\n  18\n  >>> fizzBuzz(53)\n  18\n  >>> fizzBuzz(54)\n  18\n  >>> fizzBuzz(55)\n  19\n  >>> fizzBuzz(56)\n  19\n  >>> fizzBuzz(57)\n  19\n  >>> fizzBuzz(58)\n  20\n  >>> fizzBuzz(59)\n  20\n  >>> fizzBuzz(60)\n  20\n  >>> fizzBuzz(61)\n  21\n  >>> fizzBuzz(62)\n  21\n  >>> fizzBuzz(63)\n  21\n  >>> fizzBuzz(64)\n  22\n  >>> fizzBuzz(65)\n  22\n  >>> fizzBuzz(66)\n  22\n  >>> fizzBuzz(67)\n  23\n  >>> fizzBuzz(68)\n  23\n  >>> fizzBuzz(69)\n  23\n  >>> fizzBuzz(70)\n  24\n  >>> fizzBuzz(71)\n  24\n  >>> fizzBuzz(72)\n  24\n  >>> fizzBuzz(73)\n  25\n  >>> fizzBuzz(74)\n  25\n  >>> fizzBuzz(75)\n  25\n  >>> fizzBuzz(76)\n  26\n  >>> fizzBuzz(77)\n  26\n  >>> fizzBuzz(78)\n  26\n  >>> fizzBuzz(79)\n  27\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0, buzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizz++;\n    }\n    if (i % 3 === 0) {\n      buzz++;\n    }\n    if (i % 5 === 0) {\n      fizz++;\n    }\n    if (i % 3 === 0 && i % 5 === 0) {\n      buzz++;\n    }\n  }\n  return [fizz, buzz];\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortBy = (l, f) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByDesc = (l, f) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByAsc = (l, f) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByDescAsc = (l, f) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByDescAscDesc = (l, f) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n    even.push(l[i + 1]);\n  }\n  return [odd, even];\n};\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortByDescDesc = (l, f", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the median of this dataset. The median is the number in the middle of the list.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  const mode = sortedNumbers[half];\n  const count = numbers.filter((x) => x === mode).length;\n  return mode;\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this dataset. The standard deviation is the square root of the average of the squared deviations from the mean.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the variance of this dataset. The variance is the average of the squared deviations from the mean.\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the skewness of this dataset. The skewness is the ratio of the standard deviation to the mean.\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const standardDeviation = standardDeviation(numbers);\n  const mean = mean(numbers);\n  return standardDeviation / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis of this dataset. The kurtosis is the ratio of the variance to the mean squared.\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst kurtosis = (numbers) => {\n  const variance = variance(numbers);\n  const mean = mean(numbers);\n  return variance / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the range of this dataset. The range is the difference between the highest and lowest number in the dataset.\n  >>> range([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst range = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  return max - min;\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the number that occurs the most in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the median of this dataset. The median is the number in the middle of the list.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the number that occurs the most in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the number that occurs the most in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the number that occurs the most in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const half = Math.floor(numbers.length / 2);\n  return sortedNumbers[half];\n};\n\n/*\n  For a given list of input numbers, calculate the mode of this dataset. The mode is the number that occurs the most in the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set(l)\n  const sum = l.reduce((a, b) => a + b, 0)\n  return unique.size === 3 && sum === 0\n}\n\nexport default triplesSumToZero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  cars.sort((a, b) => b.y - a.y)\n  const collisions = 0\n  for (let i = 0; i < n - 1; i++) {\n    const car = cars[i]\n    for (let j = i + 1; j < n; j++) {\n      const otherCar = cars[j]\n      if (car.x < otherCar.x + otherCar.speed && car.x > otherCar.x - otherCar.speed) {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRace = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  cars.sort((a, b) => b.y - a.y)\n  const collisions = 0\n  for (let i = 0; i < n - 1; i++) {\n    const car = cars[i]\n    for (let j = i + 1; j < n; j++) {\n      const otherCar = cars[j]\n      if (car.x < otherCar.x + otherCar.speed && car.x > otherCar.x - otherCar.speed) {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRace2 = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  cars.sort((a, b) => b.y - a.y)\n  const collisions = 0\n  for (let i = 0; i < n - 1; i++) {\n    const car = cars[i]\n    for (let j = i + 1; j < n; j++) {\n      const otherCar = cars[j]\n      if (car.x < otherCar.x + otherCar.speed && car.x > otherCar.x - otherCar.speed) {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRace3 = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  cars.sort((a, b) => b.y - a.y)\n  const collisions = 0\n  for (let i = 0; i < n - 1; i++) {\n    const car = cars[i]\n    for (let j = i + 1; j < n; j++) {\n      const otherCar = cars[j]\n      if (car.x < otherCar.x + otherCar.speed && car.x > otherCar.x - otherCar.speed) {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRace4 = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  cars.sort((a, b) => b.y - a.y)\n  const collisions = 0\n  for (let i = 0; i < n - 1; i++) {\n    const car = cars[i]\n    for (let j = i + 1; j < n; j++) {\n      const otherCar = cars[j]\n      if (car.x < otherCar.x + otherCar.speed && car.x > otherCar.x - otherCar.speed) {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRace5 = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      speed: Math.random() * 10\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  cars.sort((a, b) => b.y - a.y)\n  const collisions = 0\n  for (let i = 0; i < n - 1; i++) {\n    const car = cars[i]\n    for (let j = i + 1; j < n; j++) {\n      const otherCar = cars[j]\n      if (car.x < otherCar.x + otherCar.speed && car.x > otherCar.x - otherCar.speed) {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconst carRace6 = (n) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 8, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n};\n\n/*\n  pairsSumToZero2 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero2([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n};\n\n/*\n  pairsSumToZero3 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero3([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero3([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero3([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero3([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n};\n\n/*\n  pairsSumToZero4 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero4([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero4([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero4([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero4([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n};\n\n/*\n  pairsSumToZero5 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero5([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero5([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero5([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero5([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n};\n\n/*\n  pairsSumToZero6 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero6([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero6([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero6([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero6([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  const pairs = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        pairs.push([l[i], l[j]]);\n      }\n    }\n  }\n  return pairs.length > 1;\n};\n\n/*\n  pairsSumTo", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const result = [];\n  let i = x;\n  while (i > 0) {\n    result.unshift(i % base);\n    i = Math.floor(i / base);\n  }\n  return result.join('');\n};\n\n/*Cconvert a number to a string.\n  >>> convertToString(8)\n  '8'\n  >>> convertToString(8.5)\n  '8.5'\n  >>> convertToString(8.5, 2)\n  '10'\n  >>> convertToString(8.5, 3)\n  '12.5'\n  >>> convertToString(8.5, 4)\n  '16.25'\n  >>> convertToString(8.5, 5)\n  '20.125'\n  >>> convertToString(8.5, 6)\n  '24.0625'\n  >>> convertToString(8.5, 7)\n  '28.125'\n  >>> convertToString(8.5, 8)\n  '32.0625'\n  >>> convertToString(8.5, 9)\n  '36.25'\n  >>> convertToString(8.5, 10)\n  '40.125'\n  >>> convertToString(8.5, 11)\n  '44.0625'\n  >>> convertToString(8.5, 12)\n  '48.125'\n  >>> convertToString(8.5, 13)\n  '52.0625'\n  >>> convertToString(8.5, 14)\n  '56.25'\n  >>> convertToString(8.5, 15)\n  '60.125'\n  >>> convertToString(8.5, 16)\n  '64.0625'\n  >>> convertToString(8.5, 17)\n  '68.125'\n  >>> convertToString(8.5, 18)\n  '72.0625'\n  >>> convertToString(8.5, 19)\n  '76.25'\n  >>> convertToString(8.5, 20)\n  '80.125'\n  >>> convertToString(8.5, 21)\n  '84.0625'\n  >>> convertToString(8.5, 22)\n  '88.125'\n  >>> convertToString(8.5, 23)\n  '92.0625'\n  >>> convertToString(8.5, 24)\n  '96.25'\n  >>> convertToString(8.5, 25)\n  '100.125'\n  >>> convertToString(8.5, 26)\n  '104.0625'\n  >>> convertToString(8.5, 27)\n  '108.125'\n  >>> convertToString(8.5, 28)\n  '112.0625'\n  >>> convertToString(8.5, 29)\n  '116.25'\n  >>> convertToString(8.5, 30)\n  '120.125'\n  >>> convertToString(8.5, 31)\n  '124.0625'\n  >>> convertToString(8.5, 32)\n  '128.125'\n  >>> convertToString(8.5, 33)\n  '132.0625'\n  >>> convertToString(8.5, 34)\n  '136.25'\n  >>> convertToString(8.5, 35)\n  '140.125'\n  >>> convertToString(8.5, 36)\n  '144.0625'\n  >>> convertToString(8.5, 37)\n  '148.125'\n  >>> convertToString(8.5, 38)\n  '152.0625'\n  >>> convertToString(8.5, 39)\n  '156.25'\n  >>> convertToString(8.5, 40)\n  '160.125'\n  >>> convertToString(8.5, 41)\n  '164.0625'\n  >>> convertToString(8.5, 42)\n  '168.125'\n  >>> convertToString(8.5, 43)\n  '172.0625'\n  >>> convertToString(8.5, 44)\n  '176.25'\n  >>> convertToString(8.5, 45)\n  '180.125'\n  >>> convertToString(8.5, 46)\n  '184.0625'\n  >>> convertToString(8.5, 47)\n  '188.125'\n  >>> convertToString(8.5, 48)\n  '192.0625'\n  >>> convertToString(8.5, 49)\n  '196.25'\n  >>> convertToString(8.5, 50)\n  '200.125'\n  >>> convertToString(8.5, 51)\n  '204.0625'\n  >>> convertToString(8.5, 52)\n  '208.125'\n  >>> convertToString(8.5, 53)\n  '212.0625'\n  >>> convertToString(8.5, 54)\n  '216.25'\n  >>> convertToString(8.5, 55)\n  '220.125'\n  >>> convertToString(8.5, 56)\n  '224.0625'\n  >>> convertToString(8.5, 57)\n  '228.125'\n  >>> convertToString(8.5, 58)\n  '232.0625'\n  >>> convertToString(8.5, 59)\n  '236.25'\n  >>> convertToString(8.5, 60)\n  '240.125'\n  >>> convertToString(8.5, 61)\n  '244.0625'\n  >>> convertToString(8.5, 62)\n  '248.125'\n  >>> convertToString(8.5, 63)\n  '252.0625'\n  >>> convertToString(8.5, 64)\n  '256.25'\n  >>> convertToString(8.5, 65)\n  '260.125'\n  >>> convertToString(8.5, 66)\n  '264.0625'\n  >>> convertToString(8.5, 67)\n  '268.125'\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea27 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea28 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea29 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea30 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea31 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea32 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  1\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  3\n  >>> fib4(4)\n  5\n  >>> fib4(5)\n  8\n  >>> fib4(6)\n  13\n  >>> fib4(7)\n  21\n  */\n\n/*\n  >>> fib4(8)\n  21\n  >>> fib4(9)\n  34\n  >>> fib4(10)\n  55\n  >>> fib4(11)\n  89\n  >>> fib4(12)\n  144\n  >>> fib4(13)\n  233\n  >>> fib4(14)\n  377\n  >>> fib4(15)\n  610\n  >>> fib4(16)\n  987\n  >>> fib4(17)\n  1597\n  >>> fib4(18)\n  2584\n  >>> fib4(19)\n  4181\n  >>> fib4(20)\n  6765\n  >>> fib4(21)\n  10946\n  >>> fib4(22)\n  17711\n  >>> fib4(23)\n  28657\n  >>> fib4(24)\n  46368\n  >>> fib4(25)\n  75025\n  >>> fib4(26)\n  121393\n  >>> fib4(27)\n  196418\n  >>> fib4(28)\n  317811\n  >>> fib4(29)\n  514229\n  >>> fib4(30)\n  832040\n  >>> fib4(31)\n  1346269\n  >>> fib4(32)\n  2178309\n  >>> fib4(33)\n  3524578\n  >>> fib4(34)\n  5702887\n  >>> fib4(35)\n  9227465\n  >>> fib4(36)\n  14930352\n  >>> fib4(37)\n  24157817\n  >>> fib4(38)\n  39088169\n  >>> fib4(39)\n  63245986\n  >>> fib4(40)\n  124633287\n  >>> fib4(41)\n  196418269\n  >>> fib4(42)\n  317811579\n  >>> fib4(43)\n  519698797\n  >>> fib4(44)\n  847363562\n  >>> fib4(45)\n  1307674177\n  >>> fib4(46)\n  2111527225\n  >>> fib4(47)\n  3243f6a88\n  >>> fib4(48)\n  46ffd7a5\n  >>> fib4(49)\n  7a6a9c1d\n  >>> fib4(50)\n  125862690\n  >>> fib4(51)\n  1d3d2604\n  >>> fib4(52)\n  24462445\n  >>> fib4(53)\n  3950269\n  >>> fib4(54)\n  6d29feb\n  >>> fib4(55)\n  a0b466b\n  >>> fib4(56)\n  c5b8c7b\n  >>> fib4(57)\n  e8b7f0d\n  >>> fib4(58)\n  f9cae67\n  >>> fib4(59)\n  f6cae67\n  >>> fib4(60)\n  f6cae67\n  >>> fib4(61)\n  f9cae67\n  >>> fib4(62)\n  f9cae67\n  >>> fib4(63)\n  f9cae67\n  >>> fib4(64)\n  f9cae67\n  >>> fib4(65)\n  f9cae67\n  >>> fib4(66)\n  f9cae67\n  >>> fib4(67)\n  f9cae67\n  >>> fib4(68)\n  f9cae67\n  >>> fib4(69)\n  f9cae67\n  >>> fib4(70)\n  f9cae67\n  >>> fib4(71)\n  f9cae67\n  >>> fib4(72)\n  f9cae67\n  >>> fib4(73)\n  f9cae67\n  >>> fib4(74)\n  f9cae67\n  >>> fib4(75)\n  f9cae67\n  >>> fib4(76)\n  f9cae67\n  >>> fib4(77)\n  f9cae67\n  >>> fib4(78)\n  f9cae67\n  >>> fib4(79)\n  f9cae67\n  >>> fib4(80)\n  f9cae67\n  >>> fib4(81)\n  f9cae67\n  >>> fib4(82)\n  f9cae67\n  >>> fib4(83)\n  f9cae67\n  >>> fib4(84)\n  f9cae67\n  >>> fib4(85)\n  f9cae67\n  >>> fib4(86)\n  f9cae67\n  >>> fib4(87)\n  f9cae67\n  >>> fib4(88)\n  f9cae67\n  >>> fib4(89)\n  f9cae67\n  >>> fib4(90)\n  f9cae67\n  >>> fib4(91)\n  f9cae67\n  >>> fib4(92)\n  f9cae67\n  >>> fib4(93)\n  f9cae67\n  >>> fib4(94)\n  f9cae67\n  >>> fib4(95)\n  f9cae67\n  >>> fib4(96)\n  f9cae67\n  >>> fib4(97)\n  f", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const middle = sorted[half];\n  if (sorted.length % 2) {\n    return middle;\n  } else {\n    return (middle + sorted[half - 1]) / 2;\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  const textLength = text.length\n  if (textLength === 0) {\n    return true\n  }\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  3\n  >>> gcd(3, 5)\n  3\n  >>> gcd(3, 6)\n  3\n  >>> gcd(3, 7)\n  3\n  >>> gcd(3, 8)\n  3\n  >>> gcd(3, 9)\n  3\n  >>> gcd(3, 10)\n  3\n  >>> gcd(3, 11)\n  3\n  >>> gcd(3, 12)\n  3\n  >>> gcd(3, 13)\n  3\n  >>> gcd(3, 14)\n  3\n  >>> gcd(3, 15)\n  3\n  >>> gcd(3, 16)\n  3\n  >>> gcd(3, 17)\n  3\n  >>> gcd(3, 18)\n  3\n  >>> gcd(3, 19)\n  3\n  >>> gcd(3, 20)\n  3\n  >>> gcd(3, 21)\n  3\n  >>> gcd(3, 22)\n  3\n  >>> gcd(3, 23)\n  3\n  >>> gcd(3, 24)\n  3\n  >>> gcd(3, 25)\n  3\n  >>> gcd(3, 26)\n  3\n  >>> gcd(3, 27)\n  3\n  >>> gcd(3, 28)\n  3\n  >>> gcd(3, 29)\n  3\n  >>> gcd(3, 30)\n  3\n  >>> gcd(3, 31)\n  3\n  >>> gcd(3, 32)\n  3\n  >>> gcd(3, 33)\n  3\n  >>> gcd(3, 34)\n  3\n  >>> gcd(3, 35)\n  3\n  >>> gcd(3, 36)\n  3\n  >>> gcd(3, 37)\n  3\n  >>> gcd(3, 38)\n  3\n  >>> gcd(3, 39)\n  3\n  >>> gcd(3, 40)\n  3\n  >>> gcd(3, 41)\n  3\n  >>> gcd(3, 42)\n  3\n  >>> gcd(3, 43)\n  3\n  >>> gcd(3, 44)\n  3\n  >>> gcd(3, 45)\n  3\n  >>> gcd(3, 46)\n  3\n  >>> gcd(3, 47)\n  3\n  >>> gcd(3, 48)\n  3\n  >>> gcd(3, 49)\n  3\n  >>> gcd(3, 50)\n  3\n  >>> gcd(3, 51)\n  3\n  >>> gcd(3, 52)\n  3\n  >>> gcd(3, 53)\n  3\n  >>> gcd(3, 54)\n  3\n  >>> gcd(3, 55)\n  3\n  >>> gcd(3, 56)\n  3\n  >>> gcd(3, 57)\n  3\n  >>> gcd(3, 58)\n  3\n  >>> gcd(3, 59)\n  3\n  >>> gcd(3, 60)\n  3\n  >>> gcd(3, 61)\n  3\n  >>> gcd(3, 62)\n  3\n  >>> gcd(3, 63)\n  3\n  >>> gcd(3, 64)\n  3\n  >>> gcd(3, 65)\n  3\n  >>> gcd(3, 66)\n  3\n  >>> gcd(3, 67)\n  3\n  >>> gcd(3, 68)\n  3\n  >>> gcd(3, 69)\n  3\n  >>> gcd(3, 70)\n  3\n  >>> gcd(3, 71)\n  3\n  >>> gcd(3, 72)\n  3\n  >>> gcd(3, 73)\n  3\n  >>> gcd(3, 74)\n  3\n  >>> gcd(3, 75)\n  3\n  >>> gcd(3, 76)\n  3\n  >>> gcd(3, 77)\n  3\n  >>> gcd(3, 78)\n  3\n  >>> gcd(3, 79)\n  3\n  >>> gcd(3, 80)\n  3\n  >>> gcd(3, 81)\n  3\n  >>> gcd(3, 82)\n  3\n  >>> gcd(3, 83)\n  3\n  >>> gcd(3, 84)\n  3\n  >>> gcd(3, 85)\n  3\n  >>> gcd(3, 86)\n  3\n  >>> gcd(3, 87)\n  3\n  >>> gcd(3, 88)\n  3\n  >>> gcd(3, 89)\n  3\n  >>> gcd(3, 90)\n  3\n  >>> gcd(3, 91)\n  3\n  >>> gcd(3, 92)\n  3\n  >>> gcd(3, 93)\n  3\n  >>> gcd(3, 94)\n  3\n  >>> gcd(3, 95)\n  3\n  >>> gcd(3, 96)\n  3\n  >>> gcd(3, 97)\n  3\n  >>> gcd(3, 98)\n  3\n  >>> gcd(3, 99)\n  3\n  >>> gcd(3, 100)\n  3\n  >>> gcd(3, 101)\n  3\n  >>> gcd(3, 102)\n  3\n  >>> gcd(3, 103)\n  3\n  >>> gcd(3, 104)\n  3\n  >>> gcd(3, 105)\n  3\n  >>> gcd(3, 106)\n  3\n  >>> gcd(3, 107)\n  3\n  >>> gcd(3, 108)\n  3\n  >>> gcd(3, 109)\n  3\n  >>> gcd(3, 110)\n  3\n  >>> gcd(3, 111)\n  3\n  >>> gcd(3, 112)\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[aeiouAEIOU]/g, '');\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aB'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\"', '%', '$', '*', '(', ')', '{', '}', '[', ']', '|', '\\\\', '/', '+', '=', '&', '^', '~', '`passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] > t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are above the t threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15)\n  true\n  >>> betweenThreshold([1, 2, 4, 10], 5, 20)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 15, 20)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 5)\n  false\n  */\nconst betweenThreshold = (l, t, u) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15, 20)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15, 20)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15, 20)\n  false\n  >>> betweenThreshold([1, 2, 4, 10], 5, 15, 20)\n  false\n  */\nconst betweenThresholds = (l, t, u) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThresholds([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholds([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholds([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholds([1, 2, 4, 10], 5, 15, 20)\n  true\n  */\nconst betweenThresholdsAnd = (l, t, u) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThresholdsAnd([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAnd([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAnd([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAnd([1, 2, 4, 10], 5, 15, 20)\n  true\n  */\nconst betweenThresholdsAndOr = (l, t, u) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThresholdsAndOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  */\nconst betweenThresholdsAndOrOr = (l, t, u) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  */\nconst betweenThresholdsAndOrOr = (l, t, u) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < t || l[i] > u) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in list l are between the t and u thresholds.\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOrOr([1, 2, 4, 10], 5, 15, 20)\n  true\n  >>> betweenThresholdsAndOrOr([", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.8333333333333333\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * > sumOfSquares(1, 4)\n  * 25\n  * > sumOfSquares(1, 5)\n  * 55\n  * > sumOfSquares(1, 6)\n  * 66\n  * > sumOfSquares(1, 7)\n  * 77\n  * > sumOfSquares(1, 8)\n  * 88\n  * > sumOfSquares(1, 9)\n  * 99\n  * > sumOfSquares(1, 10)\n  * 100\n  * > sumOfSquares(1, 11)\n  * 111\n  * > sumOfSquares(1, 12)\n  * 112\n  * > sumOfSquares(1, 13)\n  * 113\n  * > sumOfSquares(1, 14)\n  * 114\n  * > sumOfSquares(1, 15)\n  * 115\n  * > sumOfSquares(1, 16)\n  * 116\n  * > sumOfSquares(1, 17)\n  * 117\n  * > sumOfSquares(1, 18)\n  * 118\n  * > sumOfSquares(1, 19)\n  * 119\n  * > sumOfSquares(1, 20)\n  * 120\n  * > sumOfSquares(1, 21)\n  * 121\n  * > sumOfSquares(1, 22)\n  * 122\n  * > sumOfSquares(1, 23)\n  * 123\n  * > sumOfSquares(1, 24)\n  * 124\n  * > sumOfSquares(1, 25)\n  * 125\n  * > sumOfSquares(1, 26)\n  * 126\n  * > sumOfSquares(1, 27)\n  * 127\n  * > sumOfSquares(1, 28)\n  * 128\n  * > sumOfSquares(1, 29)\n  * 129\n  * > sumOfSquares(1, 30)\n  * 130\n  * > sumOfSquares(1, 31)\n  * 131\n  * > sumOfSquares(1, 32)\n  * 132\n  * > sumOfSquares(1, 33)\n  * 133\n  * > sumOfSquares(1, 34)\n  * 134\n  * > sumOfSquares(1, 35)\n  * 135\n  * > sumOfSquares(1, 36)\n  * 136\n  * > sumOfSquares(1, 37)\n  * 137\n  * > sumOfSquares(1, 38)\n  * 138\n  * > sumOfSquares(1, 39)\n  * 139\n  * > sumOfSquares(1, 40)\n  * 140\n  * > sumOfSquares(1, 41)\n  * 141\n  * > sumOfSquares(1, 42)\n  * 142\n  * > sumOfSquares(1, 43)\n  * 143\n  * > sumOfSquares(1, 44)\n  * 144\n  * > sumOfSquares(1, 45)\n  * 145\n  * > sumOfSquares(1, 46)\n  * 146\n  * > sumOfSquares(1, 47)\n  * 147\n  * > sumOfSquares(1, 48)\n  * 148\n  * > sumOfSquares(1, 49)\n  * 149\n  * > sumOfSquares(1, 50)\n  * 150\n  * > sumOfSquares(1, 51)\n  * 151\n  * > sumOfSquares(1, 52)\n  * 152\n  * > sumOfSquares(1, 53)\n  * 153\n  * > sumOfSquares(1, 54)\n  * 154\n  * > sumOfSquares(1, 55)\n  * 155\n  * > sumOfSquares(1, 56)\n  * 156\n  * > sumOfSquares(1, 57)\n  * 157\n  * > sumOfSquares(1, 58)\n  * 158\n  * > sumOfSquares(1, 59)\n  * 159\n  * > sumOfSquares(1, 60)\n  * 160\n  * > sumOfSquares(1, 61)\n  * 161\n  * > sumOfSquares(1, 62)\n  * 162\n  * > sumOfSquares(1, 63)\n  * 163\n  * > sumOfSquares(1, 64)\n  * 164\n  * > sumOfSquares(1, 65)\n  * 165\n  * > sumOfSquares(1, 66)\n  * 166\n  * > sumOfSquares(1, 67)\n  * 167\n  * > sumOfSquares(1, 68)\n  * 168\n  * > sumOfSquares(1, 69)\n  * 169\n  * > sumOfSquares(1, 70)\n  * 170\n  * > sumOfSquares(1, 71)\n  * 171\n  * > sumOfSquares(1, 72)\n  * 172\n  * > sumOfSquares(1, 73)\n  * 173\n  * > sumOfSquares(1, 74)\n  * 174\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars3 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars4 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars5 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars6 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars7 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars8 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars9 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars10 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars11 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\nconst sameChars12 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) return false;\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i])", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\")\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets2 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets3 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets4 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets5 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets6 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets7 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets8 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets9 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets10 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets11 = (brackets) => {\n  let count = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count++\n    } else if (brackets[i] === \">\") {\n      count--\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  The brackets are counted as < and >.\n  */\nconst countBrackets12 = (br", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are unique.\n  >>> unique([1, 2, 3, 4, 5])\n  true\n  >>> unique([1, 2, 2, 4, 5])\n  false\n  >>> unique([1, 2, 3, 4, 5, 5])\n  false\n  >>> unique([1, 2, 3, 4, 5, 6])\n  true\n  */\nconst unique = (l) => {\n  let seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]]) {\n      return false;\n    }\n    seen[l[i]] = true;\n  }\n  return true;\n};\n\n/*RIt is true that list elements are sorted.\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  >>> sorted([1, 2, 3, 4, 5, 6])\n  false\n  >>> sorted([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst sorted = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are distinct.\n  >>> distinct([1, 2, 3, 4, 5])\n  true\n  >>> distinct([1, 2, 3, 4, 5, 6])\n  false\n  >>> distinct([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst distinct = (l) => {\n  let seen = {};\n  for (let i = 0; i < l.length; i++) {\n    if (seen[l[i]]) {\n      return false;\n    }\n    seen[l[i]] = true;\n  }\n  return true;\n};\n\n/*RIt is true that list elements are in increasing order.\n  >>> increasing([1, 2, 3, 4, 5])\n  true\n  >>> increasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> increasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst increasing = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are in decreasing order.\n  >>> decreasing([1, 2, 3, 4, 5])\n  true\n  >>> decreasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> decreasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst decreasing = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are in increasing order.\n  >>> increasing([1, 2, 3, 4, 5])\n  true\n  >>> increasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> increasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst increasing = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are in decreasing order.\n  >>> decreasing([1, 2, 3, 4, 5])\n  true\n  >>> decreasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> decreasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst decreasing = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are in increasing order.\n  >>> increasing([1, 2, 3, 4, 5])\n  true\n  >>> increasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> increasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst increasing = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\n/*RIt is true that list elements are in decreasing order.\n  >>> decreasing([1, 2, 3, 4, 5])\n  true\n  >>> decreasing([1, 2, 3, 4, 5, 6])\n  false\n  >>> decreasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst decreasing = (l) => {\n  let prev = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n};\n\nmodule.exports =", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.values());\n  const intersection_len = intersection.size;\n  const intersection_set = new Set(intersection);\n  const intersection_set_len = intersection_set.size;\n  const intersection_set_values = intersection_set.values();\n  const intersection_set_values_len = intersection_set_values.length;\n  const l1_set_values = l1_set.values();\n  const l1_set_values_len = l1_set_values.length;\n  const l2_set_values = l2_set.values();\n  const l2_set_values_len = l2_set_values.length;\n  const l1_set_values_index = new Map(l1_set_values.map(x => [x, l1_set.indexOf(x)]));\n  const l2_set_values_index = new Map(l2_set_values.map(x => [x, l2_set.indexOf(x)]));\n  const l1_set_values_index_len = l1_set_values_index.size;\n  const l2_set_values_index_len = l2_set_values_index.size;\n  const l1_set_values_index_values = l1_set_values_index.values();\n  const l2_set_values_index_values = l2_set_values_index.values();\n  const l1_set_values_index_values_len = l1_set_values_index_values.length;\n  const l2_set_values_index_values_len = l2_set_values_index_values.length;\n  const l1_set_values_index_values_index = new Map(l1_set_values_index_values.map(x => [x, l1_set_values_index.get(x)]));\n  const l2_set_values_index_values_index = new Map(l2_set_values_index_values.map(x => [x, l2_set_values_index.get(x)]));\n  const l1_set_values_index_values_index_len = l1_set_values_index_values_index.size;\n  const l2_set_values_index_values_index_len = l2_set_values_index_values_index.size;\n  const l1_set_values_index_values_index_values = l1_set_values_index_values_index.values();\n  const l2_set_values_index_values_index_values = l2_set_values_index_values_index.values();\n  const l1_set_values_index_values_index_values_len = l1_set_values_index_values_index_values.length;\n  const l2_set_values_index_values_index_values_len = l2_set_values_index_values_index_values.length;\n  const l1_set_values_index_values_index_values_index = new Map(l1_set_values_index_values_index_values.map(x => [x, l1_set_values_index_values_index.get(x)]));\n  const l2_set_values_index_values_index_values_index = new Map(l2_set_values_index_values_index_values.map(x => [x, l2_set_values_index_values_index.get(x)]));\n  const l1_set_values_index_values_index_values_index_len = l1_set_values_index_values_index_values_index.size;\n  const l2_set_values_index_values_index_values_index_len = l2_set_values_index_values_index_values_index.size;\n  const l1_set_values_index_values_index_values_index_values = l1_set_values_index_values_index_values_index.values();\n  const l2_set_values_index_values_index_values_index_values = l2_set_values_index_values_index_values_index.values();\n  const l1_set_values_index_values_index_values_index_values_len = l1_set_values_index_values_index_values_index_values.length;\n  const l2_set_values_index_values_index_values_index_values_len = l2_set_values_index_values_index_values_index_values.length;\n  const l1_set_values_index_values_index_values_index_values_index = new Map(l1_set_values_index_values_index_values_index_values.map(x => [x, l1_set_values_index_values_index_values_index.get(x)]));\n  const l2_set_values_index_values_index_values_index_values_index = new Map(l2_set_values_index_values_index_values_index_values.map(x => [x, l2_set_values_index_values_index_values_index.get(x)]));\n  const l1_set_values_index_values_index_values_index_values_index_len = l1_set_values_index_values_index_values_index_values_index.size;\n  const l2_set_values_index_values_index_values_index_values_index_len = l2_set_values_index_values_index_values_index_values_index.size;\n  const l1_set_values_index_values_index_values_index_values_index_values = l1_set_values_index_values_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  if (n > 1) factors.push(n)\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  if (n > 1) factors.push(n)\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return Math.max.apply(Math, factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  if (n === 1) return 1\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_length = paren_stack.length;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let level = 0;\n  let paren_stack_level = 0;\n  let paren_stack_level_length = paren_stack_level.length;\n  let paren_stack_level_length_length = paren_stack_level_length.length;\n  let paren_stack_level_length_length_length = paren_stack_level_length_length.length;\n  let paren_stack_level_length_length_length_length = paren_stack_level_length_length_length.length;\n  while (i < paren_string_length) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i);\n      level++;\n    } else if (paren_string[i] === ')') {\n      if (level === 0) {\n        paren_stack.pop();\n      } else {\n        level--;\n      }\n    }\n    i++;\n  }\n  if (level!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  paren_stack_level = paren_stack.slice(0);\n  paren_stack_level_length = paren_stack_level.length;\n  paren_stack_level_length_length = paren_stack_level_length.length;\n  paren_stack_level_length_length_length = paren_stack_level_length_length.length;\n  paren_stack_level_length_length_length_length = paren_stack_level_length_length_length.length;\n  return [paren_stack_level_length, paren_stack_level_length_length, paren_stack_level_length_length_length, paren_stack_level_length_length_length_length];\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i]\n    if (c === \"(\" || c === \")\") {\n      stack.push(c)\n    } else if (stack.length === 0) {\n      return false\n    } else {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = [0]\n  for (let i = 1; i < len; i++) {\n    d[i] = d[i - 1] + xs[i]\n  }\n  return d\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  49\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  63\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  70\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  77\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  84\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  91\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  98\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  105\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  112\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  119\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  133\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  140\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  147\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  154\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  161\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  168\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  175\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  182\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  189\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  196\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  203\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string as input and returns the number of consonants in the string. In this case, consonants are \"b,\" \"c,\" \"d,\" \"f,\" \"g,\" \"h,\" \"j,\" \"k,\" \"l,\" \"m,\" \"n,\" \"p,\" \"q,\" \"r,\" \"s,\" \"t,\" \"v,\" \"w,\" \"x,\" \"y.\" Again, \"z\" is a consonant, but only if it is at the end of the given word. Example:\n  >>> consonantsCount(\"abcde\")\n  2\n  >>> consonantsCount(\"ACEDY\")\n  3\n  */\nconst consonantsCount = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const n = x.toString().length;\n  const s = shift % n;\n  const r = x.toString().substr(0, s);\n  const l = x.toString().substr(s, n - s);\n  return r + l;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse2 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse3 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse4 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse5 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse6 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse7 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse8 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse9 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse10 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i] = s[l - i - 1];\n  }\n  return r.join(\"\");\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  >>> reverse(\"Hello\")\n  \"Hello\"\n  */\nconst reverse11 = (s) => {\n  const l = s.length;\n  const r = new Array(l);\n  for (let i = 0; i < l; i++) {\n    r[i]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of the upper letters of 'ASCII codes.\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const apple = s.match(/apple/i)\n  const orange = s.match(/orange/i)\n  const mango = s.match(/mango/i)\n\n  const appleCount = apple? apple.length : 0\n  const orangeCount = orange? orange.length : 0\n  const mangoCount = mango? mango.length : 0\n\n  return n - appleCount - orangeCount - mangoCount\n}\n\nmodule.exports = fruitDistribution\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = (x) => x % 2 === 0;\n  const min = (a, b) => a < b? a : b;\n  const minIndex = (a, b) => a < b? a : b;\n\n  const result = [];\n  const [ minValue, minIndex ] = arr.reduce((acc, x) => {\n    if (even(x)) {\n      acc.push([x, minIndex(acc[0][0], x)]);\n    }\n    return acc;\n  }, [[0, 0]]);\n\n  if (even(minValue)) {\n    return [minValue, minIndex];\n  }\n\n  return result;\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [];\n  const min = Math.min.apply(Math, lst);\n  const max = Math.max.apply(Math, lst);\n  const sorted = lst.slice();\n  sorted.sort((a, b) => {\n    if (a < min) {\n      return 1;\n    } else if (b < min) {\n      return -1;\n    } else if (a > max) {\n      return 1;\n    } else if (b > max) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return round(area, 2)\n}\n\nconst triangleArea18 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) return -1\n  const area = Math.sqrt(s * (s - a) * (s - b) * (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qLen = q.length\n  const qSum = sum(q)\n  if (qLen === 0) {\n    return false\n  }\n  if (qSum > w) {\n    return false\n  }\n  if (qSum === w) {\n    return true\n  }\n  if (qLen === 1) {\n    return q[0] <= w\n  }\n  if (qSum === w - 1) {\n    return q[0] === q[qLen - 1] && q.every((x, i) => x <= w - i)\n  }\n  return q.every((x, i) => x <= w - i)\n}\n\nconst sum = (q) => {\n  let sum = 0\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i]\n  }\n  return sum\n}\n\nconsole.log(willItFly([3, 2, 3], 9))\nconsole.log(willItFly([3, 2, 3], 5))\nconsole.log(willItFly([3], 5))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let result = 0;\n  let min = arr[0];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === min) {\n      result = arr[i] - arr[index];\n      break;\n    }\n  }\n  return result;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i].length === lst2[j].length) {\n        result.push(lst1[i]);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const isPrime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const isPrime2 = (n) => {\n    let i = 2;\n    while (i <= Math.sqrt(n)) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 5 === 0) {\n    return false;\n  }\n  if (a % 7 === 0) {\n    return false;\n  }\n  if (a % 11 === 0) {\n    return false;\n  }\n  if (a % 13 === 0) {\n    return false;\n  }\n  if (a % 17 === 0) {\n    return false;\n  }\n  if (a % 19 === 0) {\n    return false;\n  }\n  if (a % 23 === 0) {\n    return false;\n  }\n  if (a % 29 === 0) {\n    return false;\n  }\n  if (a % 31 === 0) {\n    return false;\n  }\n  if (a % 37 === 0) {\n    return false;\n  }\n  if (a % 41 === 0) {\n    return false;\n  }\n  if (a % 43 === 0) {\n    return false;\n  }\n  if (a % 47 === 0) {\n    return false;\n  }\n  if (a % 53 === 0) {\n    return false;\n  }\n  if (a % 59 === 0) {\n    return false;\n  }\n  if (a % 61 === 0) {\n    return false;\n  }\n  if (a % 67 === 0) {\n    return false;\n  }\n  if (a % 71 === 0) {\n    return false;\n  }\n  if (a % 73 === 0) {\n    return false;\n  }\n  if (a % 79 === 0) {\n    return false;\n  }\n  if (a % 83 === 0) {\n    return false;\n  }\n  if (a % 89 === 0) {\n    return false;\n  }\n  if (a % 97 === 0) {\n    return false;\n  }\n  if (a % 101 === 0) {\n    return false;\n  }\n  if (a % 103 === 0) {\n    return false;\n  }\n  if (a % 107 === 0) {\n    return false;\n  }\n  if (a % 109 === 0) {\n    return false;\n  }\n  if (a % 113 === 0) {\n    return false;\n  }\n  if (a % 127 === 0) {\n    return false;\n  }\n  if (a % 131 === 0) {\n    return false;\n  }\n  if (a % 137 === 0) {\n    return false;\n  }\n  if (a % 139 === 0) {\n    return false;\n  }\n  if (a % 149 === 0) {\n    return false;\n  }\n  if (a % 151 === 0) {\n    return false;\n  }\n  if (a % 157 === 0) {\n    return false;\n  }\n  if (a % 163 === 0) {\n    return false;\n  }\n  if (a % 167 === 0) {\n    return false;\n  }\n  if (a % 179 === 0) {\n    return false;\n  }\n  if (a % 181 === 0) {\n    return false;\n  }\n  if (a % 191 === 0) {\n    return false;\n  }\n  if (a % 193 === 0) {\n    return false;\n  }\n  if (a % 197 === 0) {\n    return false;\n  }\n  if (a % 199 === 0) {\n    return false;\n  }\n  if (a % 211 === 0) {\n    return false;\n  }\n  if (a % 223 === 0) {\n    return false;\n  }\n  if (a % 227 === 0) {\n    return false;\n  }\n  if (a % 229 === 0) {\n    return false;\n  }\n  if (a % 233 === 0) {\n    return false;\n  }\n  if (a % 239 === 0) {\n    return false;\n  }\n  if (a % 241 === 0) {\n    return false;\n  }\n  if (a % 251 === 0) {\n    return false;\n  }\n  if (a % 257 === 0) {\n    return false;\n  }\n  if (a % 263 === 0) {\n    return false;\n  }\n  if (a % 269 === 0) {\n    return false;\n  }\n  if (a % 271 === 0) {\n    return false;\n  }\n  if (a % 277 === 0) {\n    return false;\n  }\n  if (a % 281 === 0) {\n    return false;\n  }\n  if (a % 283 === 0) {\n    return false;\n  }\n  if (a % 293 === 0) {\n    return false;\n  }\n  if (a % 307 === 0) {\n    return false;\n  }\n  if (a % 311 === 0) {\n    return false;\n  }\n  if (a % 313 === 0) {\n    return false;\n  }\n  if (a % 317 === 0) {\n    return false;\n  }\n  if (a % 331 === 0) {\n    return false;\n  }\n  if (a % 337 === 0) {\n    return false;\n  }\n  if (a % 347 === 0) {\n    return false;\n  }\n  if (a % 349 === 0) {\n    return false;\n  }\n  if (a % 353 === 0) {\n    return false;\n  }\n  if (a %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower22 = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\nconst isSimplePower23 = (x, n) => {\n  if (x === 0) return false\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a % 6 === 0 && a % 8 === 0 && a % 9 === 0)\n}\n\nconst iscube2 = (a) => {\n  return (a % 6 === 0 && a % 8 === 0)\n}\n\nconst iscube3 = (a) => {\n  return (a % 6 === 0 && a % 9 === 0)\n}\n\nconst iscube4 = (a) => {\n  return (a % 8 === 0 && a % 9 === 0)\n}\n\nconst iscube5 = (a) => {\n  return (a % 9 === 0)\n}\n\nconst iscube6 = (a) => {\n  return (a % 8 === 0)\n}\n\nconst iscube7 = (a) => {\n  return (a % 6 === 0)\n}\n\nconst iscube8 = (a) => {\n  return (a % 9 === 0)\n}\n\nconst iscube9 = (a) => {\n  return (a % 5 === 0)\n}\n\nconst iscube10 = (a) => {\n  return (a % 4 === 0)\n}\n\nconst iscube11 = (a) => {\n  return (a % 3 === 0)\n}\n\nconst iscube12 = (a) => {\n  return (a % 2 === 0)\n}\n\nconst iscube13 = (a) => {\n  return (a % 1 === 0)\n}\n\nconst iscube14 = (a) => {\n  return (a % 0 === 0)\n}\n\nconst iscube15 = (a) => {\n  return (a % -1 === 0)\n}\n\nconst iscube16 = (a) => {\n  return (a % -2 === 0)\n}\n\nconst iscube17 = (a) => {\n  return (a % -3 === 0)\n}\n\nconst iscube18 = (a) => {\n  return (a % -4 === 0)\n}\n\nconst iscube19 = (a) => {\n  return (a % -5 === 0)\n}\n\nconst iscube20 = (a) => {\n  return (a % -6 === 0)\n}\n\nconst iscube21 = (a) => {\n  return (a % -7 === 0)\n}\n\nconst iscube22 = (a) => {\n  return (a % -8 === 0)\n}\n\nconst iscube23 = (a) => {\n  return (a % -9 === 0)\n}\n\nconst iscube24 = (a) => {\n  return (a % -10 === 0)\n}\n\nconst iscube25 = (a) => {\n  return (a % -11 === 0)\n}\n\nconst iscube26 = (a) => {\n  return (a % -12 === 0)\n}\n\nconst iscube27 = (a) => {\n  return (a % -13 === 0)\n}\n\nconst iscube28 = (a) => {\n  return (a % -14 === 0)\n}\n\nconst iscube29 = (a) => {\n  return (a % -15 === 0)\n}\n\nconst iscube30 = (a) => {\n  return (a % -16 === 0)\n}\n\nconst iscube31 = (a) => {\n  return (a % -17 === 0)\n}\n\nconst iscube32 = (a) => {\n  return (a % -18 === 0)\n}\n\nconst iscube33 = (a) => {\n  return (a % -19 === 0)\n}\n\nconst iscube34 = (a) => {\n  return (a % -20 === 0)\n}\n\nconst iscube35 = (a) => {\n  return (a % -21 === 0)\n}\n\nconst iscube36 = (a) => {\n  return (a % -22 === 0)\n}\n\nconst iscube37 = (a) => {\n  return (a % -23 === 0)\n}\n\nconst iscube38 = (a) => {\n  return (a % -24 === 0)\n}\n\nconst iscube39 = (a) => {\n  return (a % -25 === 0)\n}\n\nconst iscube40 = (a) => {\n  return (a % -26 === 0)\n}\n\nconst iscube41 = (a) => {\n  return (a % -27 === 0)\n}\n\nconst iscube42 = (a) => {\n  return (a % -28 === 0)\n}\n\nconst iscube43 = (a) => {\n  return (a % -29 === 0)\n}\n\nconst iscube44 = (a) => {\n  return (a % -30 === 0)\n}\n\nconst iscube45 = (a) => {\n  return (a % -31 === 0)\n}\n\nconst iscube46 = (a) => {\n  return (a % -32 === 0)\n}\n\nconst iscube47 = (a) => {\n  return (a % -33 === 0)\n}\n\nconst iscube48 = (a) => {\n  return (a % -34 === 0)\n}\n\nconst iscube49 = (a) => {\n  return (a % -35 === 0)\n}\n\nconst iscube50 = (a) => {\n  return (a % -36 === 0)\n}\n\nconst iscube51 = (a) => {\n  return (a % -37 === 0)\n}\n\nconst iscube52 = (a) => {\n  return (a % -38 === 0)\n}\n\nconst iscube53 = (a) => {\n  return (a % -39 === 0)\n}\n\nconst iscube54 = (a) => {\n  return (a % -40 === 0)\n}\n\nconst iscube55 = (a) => {\n  return (a % -41 === 0)\n}\n\nconst iscube56 = (a) => {\n  return (a % -42 === 0)\n}\n\nconst iscube57 = (a) => {\n  return (a %", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.split('');\n  let count = 0;\n  for (let i = 0; i < hex.length; i++) {\n    if (isPrime(parseInt(hex[i], 16))) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst isPrime = (num) => {\n  if (num === 1) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return `db${binary}db`;\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst test = () => {\n  const test1 = decimalToBinary(15);\n  console.log(test1);\n  const test2 = binaryToDecimal(test1);\n  console.log(test2);\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of the sum of every two numbers in the list.\n  >>> sumTwo([1, 2, 3, 4])\n  [2, 4, 6, 8]\n  >>> sumTwo([1, 2, 3, 4, 5])\n  [2, 4, 6, 8, 10]\n  >>> sumTwo([1, 2, 3, 4, 5, 6])\n  [2, 4, 6, 8, 10, 12]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6, 8, 10, 12, 14, 16]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]\n  >>> sumTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let i = 0;\n  while (isHappy && i < s.length) {\n    let sum = 0;\n    for (let j = i; j < i + 3; j++) {\n      sum += s[j];\n    }\n    if (sum % 7!= 0) {\n      isHappy = false;\n    }\n    i += 3;\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  const length = sorted.length;\n  const grade = [];\n  for (let i = 0; i < length; i++) {\n    const grade = sorted[i];\n    if (grade >= 3.7) {\n      grade = 'A';\n    } else if (grade >= 3.3) {\n      grade = 'A-';\n    } else if (grade >= 3.0) {\n      grade = 'B+';\n    } else if (grade >= 2.7) {\n      grade = 'B';\n    } else if (grade >= 2.3) {\n      grade = 'B-';\n    } else if (grade >= 2.0) {\n      grade = 'C+';\n    } else if (grade >= 1.7) {\n      grade = 'C';\n    } else if (grade >= 1.3) {\n      grade = 'C-';\n    } else if (grade >= 1.0) {\n      grade = 'D+';\n    } else if (grade >= 0.7) {\n      grade = 'D';\n    } else if (grade >= 0.0) {\n      grade = 'D-';\n    } else {\n      grade = 'E';\n    }\n    grade.push(sorted[i]);\n  }\n  return grade;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]*$/;\n  const length = string.length;\n  const i = 0;\n  while (i < length) {\n    if (prime.test(string[i]) === false) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  isPrime is a function that takes a number and returns true if the number is prime or otherwise wrong\n  Examples\n  isPrime(2) == true\n  isPrime(3) == true\n  isPrime(4) == false\n  isPrime(5) == true\n  isPrime(6) == true\n  isPrime(7) == true\n  isPrime(8) == false\n  isPrime(9) == false\n  isPrime(10) == true\n  isPrime(11) == true\n  isPrime(12) == true\n  isPrime(13) == true\n  isPrime(14) == true\n  isPrime(15) == true\n  isPrime(16) == true\n  isPrime(17) == true\n  isPrime(18) == true\n  isPrime(19) == true\n  isPrime(20) == true\n  isPrime(21) == true\n  isPrime(22) == true\n  isPrime(23) == true\n  isPrime(24) == true\n  isPrime(25) == true\n  isPrime(26) == true\n  isPrime(27) == true\n  isPrime(28) == true\n  isPrime(29) == true\n  isPrime(30) == true\n  isPrime(31) == true\n  isPrime(32) == true\n  isPrime(33) == true\n  isPrime(34) == true\n  isPrime(35) == true\n  isPrime(36) == true\n  isPrime(37) == true\n  isPrime(38) == true\n  isPrime(39) == true\n  isPrime(40) == true\n  isPrime(41) == true\n  isPrime(42) == true\n  isPrime(43) == true\n  isPrime(44) == true\n  isPrime(45) == true\n  isPrime(46) == true\n  isPrime(47) == true\n  isPrime(48) == true\n  isPrime(49) == true\n  isPrime(50) == true\n  isPrime(51) == true\n  isPrime(52) == true\n  isPrime(53) == true\n  isPrime(54) == true\n  isPrime(55) == true\n  isPrime(56) == true\n  isPrime(57) == true\n  isPrime(58) == true\n  isPrime(59) == true\n  isPrime(60) == true\n  isPrime(61) == true\n  isPrime(62) == true\n  isPrime(63) == true\n  isPrime(64) == true\n  isPrime(65) == true\n  isPrime(66) == true\n  isPrime(67) == true\n  isPrime(68) == true\n  isPrime(69) == true\n  isPrime(70) == true\n  isPrime(71) == true\n  isPrime(72) == true\n  isPrime(73) == true\n  isPrime(74) == true\n  isPrime(75) == true\n  isPrime(76) == true\n  isPrime(77) == true\n  isPrime(78) == true\n  isPrime(79) == true\n  isPrime(80) == true\n  isPrime(81) == true\n  isPrime(82) == true\n  isPrime(83) == true\n  isPrime(84) == true\n  isPrime(85) == true\n  isPrime(86) == true\n  isPrime(87) == true\n  isPrime(88) == true\n  isPrime(89) == true\n  isPrime(90) == true\n  isPrime(91) == true\n  isPrime(92) == true\n  isPrime(93) == true\n  isPrime(94) == true\n  isPrime(95) == true\n  isPrime(96) == true\n  isPrime(97) == true\n  isPrime(98) == true\n  isPrime(99) == true\n  isPrime(100) == true\n  isPrime(101) == true\n  isPrime(102) == true\n  isPrime(103) == true\n  isPrime(104) == true\n  isPrime(105) == true\n  isPrime(106) == true\n  isPrime(107) == true\n  isPrime(108) == true\n  isPrime(109) == true\n  isPrime(110) == true\n  isPrime(111) == true\n  isPrime(112) == true\n  isPrime(113) == true\n  isPrime(114) == true\n  isPrime(115) == true\n  isPrime(116) == true\n  isPrime(117) == true\n  isPrime(118) == true\n  isPrime(119) == true\n  isPrime(120) == true\n  isPrime(121) == true\n  isPrime(122) == true\n  isPrime(123) == true\n  isPrime(124) == true\n  isPrime(125) == true\n  isPrime(126) == true\n  isPrime(127) == true\n  isPrime(128) == true\n  isPrime(129) == true\n  isPrime(130) == true\n  isPrime(131) == true\n  isPrime(132) == true\n  isPrime(133) == true\n  isPrime(134) == true\n  isPrime(135) == true\n  isPrime(136) == true\n  isPrime(137) == true\n  isPrime(138) == true\n  isPrime(139) == true\n  isPrime(140) == true\n  isPrime(141) == true\n  isPrime(142) == true\n  isPrime(143) == true\n  isPrime(144) == true\n  isPrime(145) == true\n  isPrime(146) == true\n  isPrime(147) == true\n  isPrime(148) == true\n  isPrime(149) == true\n  isPrime(150) == true\n  isPrime(151) == true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n    return count;\n  }\n  const startsOneEnds = (n) = > {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++;\n      }\n    }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nexport default solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const newChar = char\n      if (newWord.length > 0) {\n        newChar = newWord.charAt(newWord.length - 1) + char\n      }\n      newWord += newChar\n    }\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst[x][i])\n  }\n  const sortedRow = row.sort((a, b) => a - b)\n  const sortedCol = col.sort((a, b) => b - a)\n  return [...sortedRow,...sortedCol]\n}\n\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  const rowLength = lst.length\n  const colLength = lst[0].length\n  for (let i = 0; i < rowLength; i++) {\n    row.push(lst[i][x])\n  }\n  for (let i = 0; i < colLength; i++) {\n    col.push(lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice().sort((a, b) => {\n    const sum = a + b;\n    return sum % 2 === 0? sum : -sum;\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    let index = (i + 2) % s.length;\n    result += s[index];\n  }\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhj", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxCount = 1;\n  let current = numbers[0];\n  let currentIndex = 0;\n  let currentCount = 1;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n    if (numbers[i] > current) {\n      current = numbers[i];\n      currentIndex = i;\n      currentCount = 1;\n    } else if (numbers[i] === current) {\n      currentCount++;\n    }\n  }\n  return [max, maxIndex, maxCount, current, currentIndex, currentCount];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n\nnextSmallest([1, 2, 3, 4, 5])\nnextSmallest([5, 1, 4, 3, 2])\nnextSmallest([])\nnextSmallest([1, 1])\n*/\n\nfunction nextSmallest(lst) {\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] < secondSmallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n}\n\nnextSmallest([1, 2, 3, 4, 5])\nnextSmallest([5, 1, 4, 3, 2])\nnextSmallest([])\nnextSmallest([1, 1])\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I\\s*(?:(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?\\s*)|(?:,?", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y + z && x === z + y && x === y - z && x === z - y && x === y * z && x === z * y && x === y / z && x === z / y && x === y % z && x === z % y;\n};\n\n/*\n  Returns the sum of all the numbers in the array.\n  Examples\n  sum([1, 2, 3, 4, 5]) ➞ 15\n  sum([1, 2, 3, 4, 5, 6]) ➞ 21\n  sum([1, 2, 3, 4, 5, 6, 7]) ➞ 42\n  sum([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 56\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 81\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 100\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 121\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 132\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 153\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 168\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 189\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 210\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 231\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 252\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 273\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 294\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 315\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 336\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 357\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 378\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 399\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 420\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 441\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 462\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 483\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ➞ 504\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) ➞ 515\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) ➞ 536\n  sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageArray = message.split('');\n  const messageArrayLength = messageArray.length;\n  const encodedMessage = '';\n  for (let i = 0; i < messageArrayLength; i++) {\n    if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[i].toUpperCase();\n    } else if (messageArray[i].match(/[a-z]/)) {\n      encodedMessage += messageArray[i].toLowerCase();\n    } else if (messageArray[i].match(/[A-Z]/)) {\n      encodedMessage += messageArray[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum / max;\n};\n\nconst test = (lst) => {\n  console.log(skjkasdkd(lst));\n};\n\ntest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]);\ntest([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]);\ntest([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]);\ntest([0,724,32,71,99,32,6,0,5,91,83,0,5,6]);\ntest([0,81,12,3,1,21]);\ntest([0,8,1,2,1,7]);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  return Object.keys(dict).every(key => {\n    return key.toLowerCase() === key.toUpperCase();\n  });\n};\n\n/*\n  If you specify a list, you return true if all elements are lowercase or all elements are uppercase, otherwise you return false. If the specified list is empty, the function should return false.\n  Examples:\n  checkListCase([\"a\",\"apple\", \"b\",\"banana\"]) should return true.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"B\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return false.\n  checkListCase([\"Name\",\"John\", \"Age\",\"36\", \"City\",\"Houston\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\" ]) should return true.\n  */\nconst checkListCase = (list) => {\n  if (list.length === 0) {\n    return false;\n  }\n  return list.every(element => {\n    return element.toLowerCase() === element.toUpperCase();\n  });\n};\n\n/*\n  If you specify a string, you return true if all characters are lowercase or all characters are uppercase, otherwise you return false. If the specified string is empty, the function should return false.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"a\") should return true", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let result = 0;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      result += a_digits[i] * b_digits[j];\n    }\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two strings and returns the product of their digits.\n  Examples:\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'efg') should return 'abcdef", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd2 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd3 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd4 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const nums = [num, num + 1, num - 1];\n  const closest = nums.find((n) => Math.abs(num - n) < Math.abs(num - nums[0]));\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
