{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = Math.abs(numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const nextDiff = Math.abs(numbers[i] - numbers[i - 1])\n    if (nextDiff > diff + threshold) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a list of numbers, return the median.\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  6.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  7.0\n  */\nconst median = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return undefined\n  }\n  const sorted = numbers.slice().sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  }\n  return sorted[half]\n}\n\n/*\n  Given a list of numbers, return the mode.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return undefined\n  }\n  const sorted = numbers.slice().sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  }\n  return sorted[half]\n}\n\n/*\n  Given a list of numbers, return the mode.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return undefined\n  }\n  const sorted = numbers.slice().sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  }\n  return sorted[half]\n}\n\n/*\n  Given a list of numbers, return the mode.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return undefined\n  }\n  const sorted = numbers.slice().sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  }\n  return sorted[half]\n}\n\n/*\n  Given a list of numbers, return the mode.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return undefined\n  }\n  const sorted = numbers.slice().sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  }\n  return sorted[half]\n}\n\n/*\n  Given a list of numbers, return the mode.\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  7\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return undefined\n  }\n  const sorted = numbers.slice().sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('(');\n  const paren_list_length = paren_list.length;\n  const paren_list_length_minus_one = paren_list_length - 1;\n  const paren_list_length_minus_two = paren_list_length - 2;\n  const paren_list_length_minus_three = paren_list_length - 3;\n  const paren_list_length_minus_four = paren_list_length - 4;\n  const paren_list_length_minus_five = paren_list_length - 5;\n  const paren_list_length_minus_six = paren_list_length - 6;\n  const paren_list_length_minus_seven = paren_list_length - 7;\n  const paren_list_length_minus_eight = paren_list_length - 8;\n  const paren_list_length_minus_nine = paren_list_length - 9;\n  const paren_list_length_minus_ten = paren_list_length - 10;\n  const paren_list_length_minus_eleven = paren_list_length - 11;\n  const paren_list_length_minus_twelve = paren_list_length - 12;\n  const paren_list_length_minus_thirteen = paren_list_length - 13;\n  const paren_list_length_minus_fourteen = paren_list_length - 14;\n  const paren_list_length_minus_fifteen = paren_list_length - 15;\n  const paren_list_length_minus_sixteen = paren_list_length - 16;\n  const paren_list_length_minus_seventeen = paren_list_length - 17;\n  const paren_list_length_minus_eighteen = paren_list_length - 18;\n  const paren_list_length_minus_nineteen = paren_list_length - 19;\n  const paren_list_length_minus_twenty = paren_list_length - 20;\n  const paren_list_length_minus_twenty_one = paren_list_length - 21;\n  const paren_list_length_minus_twenty_two = paren_list_length - 22;\n  const paren_list_length_minus_twenty_three = paren_list_length - 23;\n  const paren_list_length_minus_twenty_four = paren_list_length - 24;\n  const paren_list_length_minus_twenty_five = paren_list_length - 25;\n  const paren_list_length_minus_twenty_six = paren_list_length - 26;\n  const paren_list_length_minus_twenty_seven = paren_list_length - 27;\n  const paren_list_length_minus_twenty_eight = paren_list_length - 28;\n  const paren_list_length_minus_twenty_nine = paren_list_length - 29;\n  const paren_list_length_minus_thirty = paren_list_length - 30;\n  const paren_list_length_minus_thirty_one = paren_list_length - 31;\n  const paren_list_length_minus_thirty_two = paren_list_length - 32;\n  const paren_list_length_minus_thirty_three = paren_list_length - 33;\n  const paren_list_length_minus_thirty_four = paren_list_length - 34;\n  const paren_list_length_minus_thirty_five = paren_list_length - 35;\n  const paren_list_length_minus_thirty_six = paren_list_length - 36;\n  const paren_list_length_minus_thirty_seven = paren_list_length - 37;\n  const paren_list_length_minus_thirty_eight = paren_list_length - 38;\n  const paren_list_length_minus_thirty_nine = paren_list_length - 39;\n  const paren_list_length_minus_thirty_ten = paren_list_length - 40;\n  const paren_list_length_minus_thirty_eleven = paren_list_length - 41;\n  const paren_list_length_minus_thirty_twelve = paren_list_length - 42;\n  const paren_list_length_minus_thirty_thirteen = paren_list_length - 43;\n  const paren_list_length_minus_thirty_fourteen = paren_list_length - 44;\n  const paren_list_length_minus_thirty_fifteen = paren_list_length - 45;\n  const paren_list_length_minus_thirty_sixteen = paren_list_length - 46;\n  const paren_list_length_minus_thirty_seventeen = paren_list_length - 47;\n  const paren_list_length_minus_thirty_eighteen = paren_list_length - 48;\n  const paren_list_length_minus_thirty_nineteen = paren_list_length - 49;\n  const paren_list_length_minus_thirty_twenty = paren_list_length - 50;\n  const paren_list_length_minus_thirty_twenty_one = paren_list_length - 51;\n  const paren_list_length_minus_thirty_twenty_two = paren_list_length - 52;\n  const paren_list_length_minus_thirty_twenty_three = paren_list_length - 53;\n  const paren_list_length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('');\n  let strLen = str.length;\n  let suffix = '';\n  let prefix = '';\n  let i = 0;\n  let j = strLen - 1;\n  while (i < j) {\n    if (str[i]!= str[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == j) {\n    return string;\n  }\n  suffix = str.slice(i, j + 1).join('');\n  prefix = str.slice(0, i + 1).join('');\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome  */\nc onst isPalindrome = (string) => {\n  return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the longest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('');\n  let strLen = str.length;\n  let suffix = '';\n  let prefix = '';\n  let i = 0;\n  let j = strLen - 1;\n  while (i < j) {\n    if (str[i]!= str[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == j) {\n    return string;\n  }\n  suffix = str.slice(i, j + 1).join('');\n  prefix = str.slice(0, i + 1).join('');\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome  */\nc onst isPalindrome = (string) => {\n  return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the longest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('');\n  let strLen = str.length;\n  let suffix = '';\n  let prefix = '';\n  let i = 0;\n  let j = strLen - 1;\n  while (i < j) {\n    if (str[i]!= str[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == j) {\n    return string;\n  }\n  suffix = str.slice(i, j + 1).join('');\n  prefix = str.slice(0, i + 1).join('');\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome  */\nc onst isPalindrome = (string) => {\n  return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the longest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let str = string.split('');\n  let strLen = str.length;\n  let suffix = '';\n  let prefix = '';\n  let i = 0;\n  let j = strLen - 1;\n  while (i < j) {\n    if (str[i]!= str[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == j) {\n    return string;\n  }\n  suffix = str.slice(i, j + 1).join('');\n  prefix = str.slice(0, i + 1).join('');\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome  */\nc onst isPalindrome = (string) => {\n  return string == string.split('').re verse ().join ( '');\n}\n\n/* Find the longest palindrome that  be gins with a su pplied string.\n  Algorithm", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile14 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile15 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile16 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile17 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile18 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile19 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile20 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile21 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile22 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile23 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile24 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile25 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile26 = (n) => {\n  let pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  Given an array of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsArray(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (s) => {\n  const words = s.map(w => w.trim());\n  return words.join(', ');\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words.join(', ');\n}\n\n/*\n  Given an array of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsArray(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (s) => {\n  const words = s.map(w => w.trim());\n  return words.join(', ');\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words.join(', ');\n}\n\n/*\n  Given an array of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsArray(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (s) => {\n  const words = s.map(w => w.trim());\n  return words.join(', ');\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words.join(', ');\n}\n\n/*\n  Given an array of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsArray(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (s) => {\n  const words = s.map(w => w.trim());\n  return words.join(', ');\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words.join(', ');\n}\n\n/*\n  Given an array of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsArray(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (s) => {\n  const words = s.map(w => w.trim());\n  return words.join(', ');\n}\n\n/*\n  Given a string of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsString(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words.join(', ');\n}\n\n/*\n  Given an array of words, return a string of the words, separated by commas or spaces.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == \"Hi, my name is John\"\n  wordsArray(\"One, two, three, four, five, six\") == \"One, two, three, four, five, six\"\n  */\nconst wordsArray = (s) => {\n  const words = s.map(w => w.trim());\n  return words.join(', ');\n}\n\n/*\n  Given a string of", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return chooseNum2(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return chooseNum3(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return chooseNum4(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return chooseNum5(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return chooseNum6(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return chooseNum7(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return chooseNum8(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return chooseNum9(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return chooseNum10(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return chooseNum11(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return chooseNum12(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return chooseNum13(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return chooseNum14(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x < y) {\n    return chooseNum15(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x < y) {\n    return chooseNum16(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x < y) {\n    return chooseNum17(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const roundedAvg = Math.round(avg)\n  const binaryAvg = roundedAvg.toString(2)\n  return binaryAvg\n}\n\nexport default roundedAvg\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let n = x[i];\n    let d = n % 10;\n    if (d % 2 === 0) {\n      result.push(n);\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byLengthThenNameThenLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLength = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLengthThenName = (arr) => {\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const result = sorted.map((num, index) => {\n    if (index === 0) {\n      return num\n    }\n    const name = reversed[index - 1]\n    return `${name} ${num}`\n  })\n  return result\n}\n\nconst byNameThenLengthThenNameThenLengthThen", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f2 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g2 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h2 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f3 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g3 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h3 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f4 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g4 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h4 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f5 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g5 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h5 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f6 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g6 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h6 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f7 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g7 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst h7 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst f8 = (n) => {\n  let factorial = [1];\n  for (let i = 2; i <= n; i++) {\n    factorial.push(i * factorial[i - 1]);\n  }\n  return factorial;\n};\n\nconst g8 = (n) => {\n  let factorial = [1];\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  let i = 1;\n  while (i <= n) {\n    let num = i;\n    let str = num.toString();\n    let reversed = str.split('').reverse().join('');\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = arr[i];\n    while (sum > 0) {\n      if (sum % 10 > 0) {\n        count++;\n      }\n      sum = sum / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 5", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall2 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall3 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall4 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall5 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall6 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall7 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall8 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall9 = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return true;\n};\n\nconst moveOneBall10 = (arr)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result;\n};\n\nexport default stringXor;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n  let lst1Length = lst1.length;\n  let lst2Length = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  while (i < lst1Length && j < lst2Length) {\n    if (lst1[i] === lst2[j]) {\n      temp = lst1[i];\n      lst1[i] = lst2[j];\n      lst2[j] = temp;\n      i++;\n      j++;\n    } else if (lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i === lst1Length) {\n    return false;\n  }\n  if (j === lst2Length) {\n    return false;\n  }\n  return true;\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); // true\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5]); // true\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4]); // false\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]); // true\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]); // false\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]); // true\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]); // false\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]); // false\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]); // false\nexchange([1, 2, 3, 4, 5, 6,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let count = 0;\n  let letter = '';\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let count = 0;\n  let letter = '';\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let count = 0;\n  let letter = '';\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let count = 0;\n  let letter = '';\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  let count = 0;\n  let letter = '';\n  for (let i = 0; i < test.length; i++) {\n    letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    count++;\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') ==", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return result.join('');\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n];\n\ntest.forEach(t => {\n  const [s, c] = t;\n  console.log(reverseDelete(s, c));\n});\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (s) => {\n    const oddCount = (s) => {\n      const oddCount = (s) => {\n        const oddCount = (s) => {\n          const oddCount = (s) => {\n            const oddCount = (s) => {\n              const oddCount = (s) => {\n                const oddCount = (s) => {\n                  const oddCount = (s) => {\n                    const oddCount = (s) => {\n                      const oddCount = (s) => {\n                        const oddCount = (s) => {\n                          const oddCount = (s) => {\n                            const oddCount = (s) => {\n                              const oddCount = (s) => {\n                                const oddCount = (s) => {\n                                  const oddCount = (s) => {\n                                    const oddCount = (s) => {\n                                      const oddCount = (s) => {\n                                        const oddCount = (s) => {\n                                          const oddCount = (s) => {\n                                            const oddCount = (s) => {\n                                              const oddCount = (s) => {\n                                                const oddCount = (s) => {\n                                                  const oddCount = (s) => {\n                                                    const oddCount = (s) => {\n                                                      const oddCount = (s) => {\n                                                        const oddCount = (s) => {\n                                                          const oddCount = (s) => {\n                                                           const oddCount = (s) => {\n                                                            const oddCount = (s) => {\n                                                              const oddCount = (s) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return oddCount(lst)\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum2 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum3 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum4 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum5 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum6 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum7 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum8 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum9 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum10 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum11 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum12 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum13 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum14 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays = nums.reduce((a, b) => Math.min(a, b), sum)\n  return minSumOfSubArrays === sum? sum : minSum\n}\n\nconst minSubArraySum15 = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumOfSubArrays =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(n);\n  for (let i = 0; i < n; i++) {\n    buckets[i] = new Array(m);\n    for (let j = 0; j < m; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = capacity;\n        count++;\n      }\n    }\n  }\n  let curr = 0;\n  while (count > 0) {\n    let curr_row = 0;\n    let curr_col = 0;\n    let curr_bucket = 0;\n    while (curr_bucket < buckets[curr_row].length) {\n      if (buckets[curr_row][curr_col] > 0) {\n        curr_bucket++;\n      } else {\n        curr_bucket = 0;\n        curr_col++;\n        if (curr_col >= buckets[curr_row].length) {\n          curr_col = 0;\n          curr_row++;\n        }\n      }\n    }\n    count--;\n    curr++;\n  }\n  return count;\n};\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst capacity = 1;\nconsole.log(maxFill(grid, capacity));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    return aInt.length - bInt.length;\n  });\n  return sorted;\n};\n\nconst sortArray = (arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  let i = 0;\n  while (i < s.length) {\n    let j = i;\n    while (j < s.length && s[j]!=='') {\n      j++;\n    }\n    if (j - i === n) {\n      words.push(s.slice(i, j));\n    }\n    i = j + 1;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement a function that returns a list of all the positions of p in the string s.\n\nNote: p may contain the character ‘?’ which can be any character.\n\nExamples:\n\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"John? John? John?\", \"John\") ==> [0, 4, 9]\nselectPositions(\"", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const wordLength = word.length;\n  let closestVowel = '';\n  let closestDistance = Infinity;\n  for (let i = wordLength - 1; i >= 0; i--) {\n    let vowel = word[i];\n    if (vowels.indexOf(vowel)!== -1) {\n      let distance = Math.abs(wordLength - i);\n      if (distance < closestDistance) {\n        closestVowel = vowel;\n        closestDistance = distance;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel('ab'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconst matchParens11 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return [...new Array(k - 1), max,...new Array(k - 1).fill(arr[index])];\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter(x => x % 2 === 1);\n  const even = lst.filter(x => x % 2 === 0);\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return [n, collatz(n / 2)];\n    return [n, collatz(3 * n + 1)];\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    if (n % 2 === 0) return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst validDateString = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst validDateString = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[0], 10);\n  const year = parseInt(dateArray[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst longWords = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst shortWords = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length < 3);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWords = (txt) => {\n  const words = splitWords(txt);\n  return words;\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allShortWords = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length < 3);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allLongWords = (txt) => {\n  const words = splitWords(txt);\n  return words;\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWordsWithOddOrder = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3 && word.length % 2 === 1);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWordsWithEvenOrder = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3 && word.length % 2 === 0);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWordsWithOddAndEvenOrder = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3 && word.length % 2 === 1);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWordsWithOddAndEvenOrder2 = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3 && word.length % 2 === 0);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWordsWithOddAndEvenOrder3 = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3 && word.length % 2 === 0);\n};\n\n/*\n  Given a string of words, return a list of words that are longer than 3 letters\n  Examples\n  longWords(\"Hello world!\") ➞ [\"Hello world!\"]\n  longWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  longWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst allWordsWithOddAndEvenOrder4 = (txt) => {\n  const words = splitWords(txt);\n  return words.filter(word => word.length > 3 && word.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort();\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\n/*\n  Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted3 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted4 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted5 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted6 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted7 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted8 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted9 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted10 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted11 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted12 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted13 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted14 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted15 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted16 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted17 = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.every(x => sorted.indexOf(x) === sorted.lastIndexOf(x));\n};\n\nconst isSorted18", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr) return null\n  const sign = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num\n  }\n  const signSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProduct = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  const signProductSumSumSumSumSumSumSumSum = (num) => {\n    if (num === 0) return 0\n    if (num === 1) return 1\n    if (num === -1) return -1\n    return num * sign(num)\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = grid[0][0]\n  dp[1] = grid[0][1]\n  dp[2] = grid[0][2]\n  dp[3] = grid[1][0]\n  dp[4] = grid[1][1]\n  dp[5] = grid[1][2]\n  dp[6] = grid[2][0]\n  dp[7] = grid[2][1]\n  dp[8] = grid[2][2]\n  for (let i = 3; i < n; i++) {\n    dp[i] = dp[i - 1] + grid[i][0]\n  }\n  let min = dp[0]\n  let min_index = 0\n  for (let i = 1; i < n; i++) {\n    if (dp[i] < min) {\n      min = dp[i]\n      min_index = i\n    }\n  }\n  let path = []\n  let curr = min_index\n  while (curr >= 0) {\n    path.push(grid[curr][0])\n    curr = dp[curr] - grid[curr][0]\n  }\n  return path\n}\n\nconst test = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n  console.log(minPath(grid, 1))\n  console.log(minPath(grid, 2))\n  console.log(minPath(grid, 3))\n  console.log(minPath(grid, 4))\n  console.log(minPath(grid, 5))\n  console.log(minPath(grid, 6))\n  console.log(minPath(grid, 7))\n  console.log(minPath(grid, 8))\n  console.log(minPath(grid, 9))\n  console.log(minPath(grid, 10))\n  console.log(minPath(grid, 11))\n  console.log(minPath(grid, 12))\n  console.log(minPath(grid, 13))\n  console.log(minPath(grid, 14))\n  console.log(minPath(grid, 15))\n  console.log(minPath(grid, 16))\n  console.log(minPath(grid, 17))\n  console.log(minPath(grid, 18))\n  console.log(minPath(grid, 19))\n  console.log(minPath(grid, 20))\n  console.log(minPath(grid, 21))\n  console.log(minPath(grid, 22))\n  console.log(minPath(grid, 23))\n  console.log(minPath(grid, 24))\n  console.log(minPath(grid, 25))\n  console.log(minPath(grid, 26))\n  console.log(minPath(grid, 27))\n  console.log(minPath(grid, 28))\n  console.log(minPath(grid, 29))\n  console.log(minPath(grid, 30))\n  console.log(minPath(grid, 31))\n  console.log(minPath(grid, 32))\n  console.log(minPath(grid, 33))\n  console.log(minPath(grid, 34))\n  console.log(minPath(grid, 35))\n  console.log(minPath(grid, 36))\n  console.log(minPath(grid, 37))\n  console.log(minPath(grid, 38))\n  console.log(minPath(grid, 39))\n  console.log(minPath(grid, 40))\n  console.log(minPath(grid, 41))\n  console.log(minPath(grid, 42))\n  console.log(minPath(grid, 43))\n  console.log(minPath(grid, 44))\n  console.log(minPath(grid, 45))\n  console.log(minPath(grid, 46))\n  console.log(minPath(grid, 47))\n  console.log(minPath(grid, 48))\n  console.log(minPath(grid, 49))\n  console.log(minPath(grid, 50))\n  console.log(minPath(grid, 51))\n  console.log(minPath(grid", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b\n  if (b === 0) return a\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return greatestCommonDivisor(a % b, b)\n}\n\n/* Return a least common multiple of two i ntegers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  25\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b)\n}\n\n/* Return a greatest common divisor of two i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b\n  if (b === 0) return a\n  if (a < b) {\n    return gcd(b, a)\n  }\n  return gcd(a % b, b)\n}\n\n/* Return a least common multiple of two i ntegers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  25\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\n/* Return the number of digits in the number n\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1234)\n  4\n  >>> numberOfDigits(12345)\n  5\n  >>> numberOfDigits(123456)\n  6\n  >>> numberOfDigits(1234567)\n  7\n  >>> numberOfDigits(12345678)\n  8\n  >>> numberOfDigits(123456789)\n  9\n  >>> numberOfDigits(1234567890)\n  10\n  */\nconst numberOfDigits = (n) => {\n  let count = 0\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/* Return the number of digits in the number n\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1234)\n  4\n  >>> numberOfDigits(12345)\n  5\n  >>> numberOfDigits(123456)\n  6\n  >>> numberOfDigits(1234567)\n  7\n  >>> numberOfDigits(12345678)\n  8\n  >>> numberOfDigits(123456789)\n  9\n  >>> numberOfDigits(1234567890)\n  10\n  */\nconst numberOfDigits = (n) => {\n  let count = 0\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/* Return the number of digits in the number n\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1234)\n  4\n  >>> numberOfDigits(12345)\n  5\n  >>> numberOfDigits(123456)\n  6\n  >>> numberOfDigits(1234567)\n  7\n  >>> numberOfDigits(12345678)\n  8\n  >>> numberOfDigits(123456789)\n  9\n  >>> numberOfDigits(1234567890)\n  10\n  */\nconst numberOfDigits = (n) => {\n  let count = 0\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/* Return the number of digits in the number n\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1234)\n  4\n  >>> numberOfDigits(12345)\n  5\n  >>> numberOfDigits(123456)\n  6\n  >>> numberOfDigits(1234567)\n  7\n  >>> numberOfDigits(12345678)\n  8\n  >>> numberOfDigits(123456789)\n  9\n  >>> numberOfDigits(1234567890)\n  10\n  */\nconst numberOfDigits = (n) => {\n  let count = 0\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/* Return the number of digits in the number n\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1234)\n  4\n  >>> numberOfDigits(12345)\n  5\n  >>> numberOfDigits(123456)\n  6\n  >>> numberOfDigits(1234567)\n  7\n  >>> numberOfDigits(12345678)\n  8\n  >>> numberOfDigits(123456789)\n  9\n  >>> numberOfDigits(1234567890)\n  10\n  */\nconst numberOfDigits = (n) => {\n  let count = 0\n  while (n > 0) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/* Return the number of digits in the number n\n  >>> numberOfDigits(12)\n  2\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1234)\n  4\n  >>> numberOfDigits(12345)\n  5\n  >>> numberOfDigits(123456)\n  6\n  >>> numberOfDigits(1234567)\n  7\n  >>> numberOfDigits(12345678)\n  8\n  >>> numberOfDigits(123456789)\n  9\n  >>> numberOfDigits(1234567890)\n  10\n  */\nconst numberOfDigits = (n) => {\n  let count = 0\n  while (n >", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(a + b + c)\n    c = b\n    b = a\n    a = res[i]\n  }\n  return res\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  const arr = str.split('')\n  const len = arr.length\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w = 0\n  const x = 0\n  const y = 0\n  const z = 0\n  const a = 0\n  const b = 0\n  const c = 0\n  const d = 0\n  const e = 0\n  const f = 0\n  const g = 0\n  const h = 0\n  const i = 0\n  const j = 0\n  const k = 0\n  const l = 0\n  const m = 0\n  const n = 0\n  const o = 0\n  const p = 0\n  const q = 0\n  const r = 0\n  const s = 0\n  const t = 0\n  const u = 0\n  const v = 0\n  const w =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const squaredSum = sum * sum;\n  return squaredSum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter &&!isALetter.indexOf(\" \");\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a letter and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetter = lastChar.match(/[a-zA-Z]/);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a number and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isANumber = lastChar.match(/[0-9]/);\n  return isANumber;\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a digit and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isADigit = lastChar.match(/[0-9]/);\n  return isADigit;\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a space and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isASpace = lastChar.match(/\\s/);\n  return isASpace;\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a punctuation mark and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsAPunctuation = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAPunctuation = lastChar.match(/[!@#$%^&*()_+\\-=?;:'\",<.>\\/|{}\\\\]/);\n  return isAPunctuation;\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a letter or a number and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/);\n  return isALetterOrANumber;\n};\n\n/*\n  Create a function that returns true if the last character of a given string is a letter or a number or a space and false otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrASpace = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isALetterOrANumberOrASpace = last", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    let k = (i + j) / 2;\n    if (arr[k] < arr[j]) {\n      i = k + 1;\n    } else {\n      j = k;\n    }\n  }\n  if (arr[i] < arr[j]) {\n    return i;\n  } else {\n    return -1;\n  }\n};\n\nconsole.log(canArrange([1,2,3,4,5]));\nconsole.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => {\n    if (lst.length === 0) return null;\n    const [a, b] = lst;\n    return largest(a, largestSmallest(lst.slice(1)));\n  };\n  return largestSmallest(lst);\n};\n\nconst largestSmallestIntegers = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([]));\nconsole.log(largestSmallestIntegers([0]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compareOne = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compareTwo = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compareThree = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compareFour = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compareFive = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    if (a > b) return a;\n    return b;\n  }\n  return null;\n}\n\nconst compareSix = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) return a;\n    return b;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 || sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 || sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 || sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 || sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 || sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 || sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 0 || sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 || sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOddOddEven = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 || sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddOddOdd = (n) => {\n  const sum = n * (n + 1) / 2;\n  return sum % 2 === 1 || sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOddOddOddOdd = (n) => {\n  const sum = n * (n + 1", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n\n/*The Catalan number is defined as :\n  c razilian_catalan(n) = n * (n-1) * (n-2) *... * 3 * 2 * 1\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialCatalan = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialCatalan(n - 1) * specialCatalan(n - 2) * specialCatalan(n - 3) * specialCatalan(n - 4) * specialCatalan(n - 5);\n};\n\n/*The Harmonic number is defined as :\n  h razilian_harmonic(n) = n * (n+1) * (n+2) *... * 1\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialHarmonic = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialHarmonic(n + 1) * specialHarmonic(n + 2) * specialHarmonic(n + 3) * specialHarmonic(n + 4) * specialHarmonic(n + 5);\n};\n\n/*The Euler number is defined as :\n  e razilian_euler(n) = n * (n+1) * (n+2) *... * 3 * 2 * 1\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialEuler = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialEuler(n + 1) * specialEuler(n + 2) * specialEuler(n + 3) * specialEuler(n + 4) * specialEuler(n + 5);\n};\n\n/*The Golden ratio is defined as :\n  g razilian_golden_ratio(n) = n * (n+1) * (n+2) *... * 5 * 4 * 3 * 2 * 1\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialGoldenRatio = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialGoldenRatio(n + 1) * specialGoldenRatio(n + 2) * specialGoldenRatio(n + 3) * specialGoldenRatio(n + 4) * specialGoldenRatio(n + 5);\n};\n\n/*The Fibonacci number is defined as :\n  f razilian_fibonacci(n) = n * (n+1) * (n+2) *... * 1\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFibonacci = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFibonacci(n + 1) * specialFibonacci(n + 2);\n};\n\n/*The Lattice path is defined as :\n  l razilian_lattice_path(n) = n * (n+1) * (n+2) *... * (n+n)\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialLatticePath = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialLatticePath(n + 1) * specialLatticePath(n + 2) * specialLatticePath(n + 3) * specialLatticePath(n + 4) * specialLatticePath(n + 5);\n};\n\n/*The Mersenne prime is defined as :\n  m razilian_mersenne_prime(n) = n * (n+1) * (n+2) *... * (n+n)\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialMersennePrime = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialMersennePrime(n + 1) * specialMersennePrime(n + 2) * specialMersennePrime(n + 3) * specialMersennePrime(n + 4) * specialMersennePrime(n + 5);\n};\n\n/*The Mersenne number is defined as :\n  m razilian_mersenne_number(n) = n * (n+1) * (n+2) *... * (n+n)\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialMersenneNumber = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialMersenneNumber(n + 1) *", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i, stringLength)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text = text.replace(/([A-Z])\\s+([A-Z])/g, '$1_$2')\n  const text = text.replace(/([A-Z])\\s+([A-Z])\\s+([A-Z])/g, '$1_$2_$3')\n  return text\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text = text.replace(/([A-Z])\\s+([A-Z])/g, '$1_$2')\n  const text = text.replace(/([A-Z])\\s+([A-Z])\\s+([A-Z])/g, '$1_$2_$3')\n  return text\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces3 = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text = text.replace(/([A-Z])\\s+([A-Z])/g, '$1_$2')\n  const text = text.replace(/([A-Z])\\s+([A-Z])\\s+([A-Z])/g, '$1_$2_$3')\n  return text\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces4 = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text = text.replace(/([A-Z])\\s+([A-Z])/g, '$1_$2')\n  const text = text.replace(/([A-Z])\\s+([A-Z])\\s+([A-Z])/g, '$1_$2_$3')\n  return text\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces5 = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text = text.replace(/([A-Z])\\s+([A-Z])/g, '$1_$2')\n  const text = text.replace(/([A-Z])\\s+([A-Z])\\s+([A-Z])/g, '$1_$2_$3')\n  return text\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces6 = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text = text.replace(/([A-Z])\\s+([A-Z])/g, '$1_$2')\n  const text = text.replace(/([A-Z])\\s+([A-Z])\\s+([A-Z])/g, '$1_$2_$3')\n  return text\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces7 = (text) => {\n  const text = text.replace(/\\s+/g, '_')\n  const text =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*$/;\n  const regex2 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex5 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex6 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex7 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex8 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex9 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex10 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex11 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex12 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex13 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex14 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex15 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex16 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex17 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex18 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex19 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex20 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex21 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex22 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex23 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex24 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex25 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex26 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex27 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex28 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.dll$/;\n  const regex29 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.txt$/;\n  const regex30 = /^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+[0-9]*\\.exe$/;\n  const regex31 = /", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 6 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 6 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 8 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 6 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 8 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 10 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 6 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 8 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 10 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 12 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 6 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 8 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 10 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 12 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 14 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      if (isPrime(char)) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(' '))\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n  if (num === 1) return false\n  if (num === 2) return true\n  if (num % 2 === 0) return false\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) return false\n  }\n  return true\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n    let xs = x.split(\"/\");\n    let nn = n.split(\"/\");\n    let xs_len = xs.length;\n    let nn_len = nn.length;\n    if (xs_len!= nn_len) {\n        return false;\n    }\n    let xs_sum = 0;\n    let nn_sum = 0;\n    for (let i = 0; i < xs_len; i++) {\n        xs_sum += parseInt(xs[i]);\n        nn_sum += parseInt(nn[i]);\n    }\n    if (xs_sum == nn_sum) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7 /1 0\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in descending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in descending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in descending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted\n}\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in descending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(num => {\n    return (num % 10 === 1 || num % 10 === 3 || num % 10 === 5 || num % 10 === 7 || num % 10 === 9);\n  });\n  return arr.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] === x * x);\n  return triples.length;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\n    \"mercury\",\n    \"venus\",\n    \"earth\",\n    \"mars\",\n    \"jupiter\",\n    \"saturn\",\n    \"uranus\",\n    \"neptune\"\n  ];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const planet1Orbit = planet1Index - planet2Index;\n  const planet2Orbit = planet2Index - planet1Index;\n  const planet1OrbitLength = Math.abs(planet1Orbit);\n  const planet2OrbitLength = Math.abs(planet2Orbit);\n  const planet1OrbitLengthIsLonger = planet1OrbitLength > planet2OrbitLength;\n  const planet2OrbitLengthIsLonger = planet2OrbitLength > planet1OrbitLength;\n  const planet1OrbitIsLonger = planet1OrbitLengthIsLonger && planet1Orbit > 0;\n  const planet2OrbitIsLonger = planet2OrbitLengthIsLonger && planet2Orbit > 0;\n  const planet1OrbitIsShort = planet1OrbitLengthIsLonger && planet1Orbit < 0;\n  const planet2OrbitIsShort = planet2OrbitLengthIsLonger && planet2Orbit < 0;\n  const planet1OrbitIsShorter = planet1OrbitLengthIsLonger && planet1Orbit < 0;\n  const planet2OrbitIsShorter = planet2OrbitLengthIsLonger && planet2Orbit < 0;\n  const planet1OrbitIsEqual = planet1OrbitLengthIsLonger && planet1Orbit === 0;\n  const planet2OrbitIsEqual = planet2OrbitLengthIsLonger && planet2Orbit === 0;\n  const planet1OrbitIsEqualOrShorter = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorter = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrLonger = planet1OrbitLengthIsLonger && planet1Orbit >= 0;\n  const planet2OrbitIsEqualOrLonger = planet2OrbitLengthIsLonger && planet2Orbit >= 0;\n  const planet1OrbitIsEqualOrShorterOrLonger = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLonger = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqual = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqual = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqualOrShorter = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqualOrShorter = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLonger = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLonger = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqual = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqual = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorter = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorter = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorterOrLonger = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqual = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorter = planet1OrbitLengthIsLonger && planet1Orbit <= 0;\n  const planet2OrbitIsEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorterOrLongerOrEqualOrShorterOrLonger = planet2OrbitLengthIsLonger && planet2Orbit <= 0;\n  const planet1OrbitIs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst list_sort = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst list_sort_by_length = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res;\n};\n\nconst list_sort_by_length_desc = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse_reverse = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse_reverse_reverse = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse_reverse_reverse_reverse = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse_reverse_reverse_reverse = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse_reverse_reverse_reverse = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      sum += lst[i].charAt(j);\n    }\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n  }\n  return res.reverse();\n};\n\nconst list_sort_by_length_desc_reverse_reverse_reverse_reverse = (lst) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\nexport default stringSequence;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  const  difference = (a, b) => a - b;\n  const  doubleTheDifference = (lst) => lst.reduce((acc, x) => acc + difference(x, acc), 0);\n  return doubleTheDifference(lst);\n};\n\nconsole.log(doubleTheDifference([1,3,2, 0]));\nconsole.log(doubleTheDifference([- 1,-2, 0]));\nconsole.log(doubleTheDifference([9,  -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare2 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare3 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare4 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare5 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare6 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare7 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare8 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare9 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare10 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare11 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare12 = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let guess = game[i];\n    let diff = Math.abs(guess - guess);\n    if (guess === guess) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\nconst compare13 = (game, guess) => {\n  let result = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const extensions_length = extensions.length;\n  const class_name_length = class_name.length;\n  const class_name_characters = class_name.split('');\n  const extensions_characters = extensions.split('');\n  for (let i = 0; i < class_name_length; i++) {\n    strength[class_name_characters[i]] = 0;\n  }\n  for (let i = 0; i < extensions_length; i++) {\n    strength[extensions_characters[i]] = -1;\n  }\n  for (let i = 0; i < class_name_length; i++) {\n    for (let j = 0; j < extensions_length; j++) {\n      if (strength[class_name_characters[i]] < strength[extensions_characters[j]]) {\n        strength[class_name_characters[i]] = strength[extensions_characters[j]];\n      }\n    }\n  }\n  for (let i = 0; i < class_name_length; i++) {\n    if (strength[class_name_characters[i]] === -1) {\n      return class_name;\n    }\n  }\n  return class_name + '.' + extensions[0];\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else if (j === bLen) {\n      return false;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isSubstring = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isRotated = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclic = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern2 = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern3 = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern4 = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern5 = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern6 = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i < aLen) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n      if (i === aLen && j === bLen) return true;\n    } else {\n      j = 0;\n    }\n  }\n  return false;\n}\n\nconst isCyclicPattern7 = (a, b) => {\n  let aLen = a.length, bLen = b.length;\n  if (aLen!== bLen) return false;\n  let i = 0, j = 0;\n  while (i <", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(12345));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const numeral = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    result.push(numeral[num % 10]);\n    num = Math.floor(num / 10);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right-angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle3 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle4 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle5 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle6 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle7 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle8 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle9 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle10 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle11 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle12 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle13 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle14 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle15 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle16 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle17 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle18 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle19 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle20 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle21 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle22 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle23 = (a, b, c) => {\n  if (a + b > c && a + c > b && b + c > a) {\n    return true;\n  }\n  return false;\n};\n\nconst rightAngleTriangle24 = (a, b, c", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    }\n  }\n  return map.values().sort((a, b) => b - a)[0];\n};\n\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const char = word.charAt(0);\n    if (map.has(char)) {\n      map.set(char, map.get(char) + 1);\n    } else {\n      map.set(char, 1);\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, remaining];\n  } else {\n    return [0, number];\n  }\n};\n\nconst main = () => {\n  const [number, need, remaining] = eat(5, 6, 10);\n  console.log(`${number} carrots left after your meal.`);\n  console.log(`You need ${need} more carrots to be happy.`);\n  console.log(`You have ${remaining} remaining carrots.`);\n};\n\nmain();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const counts = {}\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counts[char] === undefined) {\n      counts[char] = 1\n    } else {\n      counts[char]++\n    }\n  }\n  return Object.keys(counts).length\n}\n\n/*\n  Given a string, find", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const operandValue = operand[i]\n    if (operatorValue === '+') {\n      result.push(operandValue + operand[i + 1])\n    } else if (operatorValue === '-') {\n      result.push(operandValue - operand[i + 1])\n    } else if (operatorValue === '*') {\n      result.push(operandValue * operand[i + 1])\n    } else if (operatorValue === '/') {\n      result.push(operandValue / operand[i + 1])\n    } else if (operatorValue === '**') {\n      result.push(Math.pow(operandValue, operand[i + 1]))\n    }\n  }\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const result = []\n  for (let i = 0; i < operatorLength; i++) {\n    const operatorValue = operator[i]\n    const oper", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      res += s[i].toUpperCase();\n    } else {\n      res += s[i].toLowerCase();\n    }\n  }\n  return res;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(2);\n    } else if (notes[i] === 'o') {\n      beats.push(1);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the original string.\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg')\n  'abcdefg'\n  >>> longestSubstring", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedArray.push(parseInt(numbersArray[i]))\n  }\n  sortedArray.sort((a, b) => a - b)\n  return sortedArray.join(' ')\n}\n\n/*\n  Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = number.toFixed(0);\n  const decimalPart = number.toFixed(1);\n  const integerPartLength = integerPart.length;\n  const decimalPartLength = decimalPart.length;\n  const integerPartLengthDifference = integerPartLength - decimalPartLength;\n  const integerPartLengthDifferenceIsGreaterThanOne = integerPartLengthDifference > 1;\n  const integerPartLengthDifferenceIsLessThanOne = integerPartLengthDifference < 1;\n  const integerPartIsZero = integerPart === '0';\n  const integerPartIsOne = integerPart === '1';\n  const integerPartIsGreaterThanOne = integerPart > 1;\n  const integerPartIsLessThanOne = integerPart < 1;\n  const integerPartIsNotZero = integerPart!== '0';\n  const integerPartIsNotOne = integerPart!== '1';\n  const integerPartIsNotGreaterThanOne = integerPart!> 1;\n  const integerPartIsNotLessThanOne = integerPart!< 1;\n  const integerPartIsNotZeroOrOne = integerPart!== '0' || integerPart!== '1';\n  const integerPartIsNotZeroOrOne = integerPart!== '0' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1';\n  const integerPartIsNotZeroOrOneOrOneOrOneOrOne = integerPart!== '0' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '1' || integerPart!== '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length;\n  if (len < 2) {\n    return;\n  }\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const minIndex = numbers.indexOf(min);\n  const maxIndex = numbers.indexOf(max);\n  const minDiff = Math.abs(minIndex - maxIndex);\n  const maxDiff = Math.abs(minIndex - maxIndex);\n  const minDiffIndex = minIndex < maxIndex? minIndex : maxIndex;\n  const maxDiffIndex = minIndex < maxIndex? maxIndex : minIndex;\n  return [numbers[minDiffIndex], numbers[maxDiffIndex]];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (n - min) / (max - min),\n    (n - min) / (max - min),\n    (n - min) / (max - min),\n    (n - min) / (max - min),\n    (n - min) / (max - min),\n  ]\n}\n\n/* Given a list of numbers, return the list of their logarithms */\nconst log = (numbers) => {\n  return numbers.map((n) => Math.log(n))\n}\n\n/* Given a list of numbers, return the list of their exponents */\nconst exp = (numbers) => {\n  return numbers.map((n) => Math.exp(n))\n}\n\n/* Given a list of numbers, return the list of their square roots */\nconst sqrt = (numbers) => {\n  return numbers.map((n) => Math.sqrt(n))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot = (numbers) => {\n  return numbers.map((n) => Math.pow(n, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootLog = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.log(n), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootExp = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.exp(n), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootSqrt = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.sqrt(n), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRoot = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(n, 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootLog = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.log(n), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootExp = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.exp(n), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootSqrt = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.sqrt(n), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRoot = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(n, 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootLog = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.log(n), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootExp = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.exp(n), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootSqrt = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.sqrt(n), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootCubeRoot = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.pow(n, 1 / 3), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootCubeRootLog = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.pow(Math.log(n), 1 / 3), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootCubeRootExp = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.pow(Math.exp(n), 1 / 3), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootCubeRootSqrt = (numbers) => {\n  return numbers.map((n) => Math.pow(Math.pow(Math.pow(Math.pow(Math.sqrt(n), 1 / 3), 1 / 3), 1 / 3), 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRootCubeRootCubeRootCubeRootCubeRoot = (numbers) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter given list of any python valu es on ly for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter given list of any python valu es on ly for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter given list of any python valu es on ly for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/* Filter given list of any python valu es on ly for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter given list of any python valu es on ly for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter given list of any python valu es on ly for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/* Filter given list of any python valu es on ly for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/* Filter given list of any python valu es on ly for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/* Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/* Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/* Filter given list of any python valu es on ly for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return the index of the first occurrence of a character in a string\n  >>> strindex('')\n  -1\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'z')\n  -1\n  */\nconst strindex = (string, char) => {\n  return string.indexOf(char);\n};\n\n/* Return the index of the last occurrence of a character in a string\n  >>> strlastindex('')\n  -1\n  >>> strlastindex('abc', 'a')\n  2\n  >>> strlastindex('abc', 'z')\n  -1\n  */\nconst strlastindex = (string, char) => {\n  return string.lastIndexOf(char);\n};\n\n/* Return the index of the first occurrence of a substring in a string\n  >>> strindex('', '', 0)\n  -1\n  >>> strindex('abc', '', 0)\n  0\n  >>> strindex('abc', '', 1)\n  -1\n  >>> strindex('abc', '', 2)\n  -1\n  >>> strindex('abc', '', 3)\n  -1\n  >>> strindex('abc', '', 4)\n  -1\n  >>> strindex('abc', '', 5)\n  -1\n  >>> strindex('abc', '', 6)\n  -1\n  >>> strindex('abc', '', 7)\n  -1\n  >>> strindex('abc', '', 8)\n  -1\n  >>> strindex('abc', '', 9)\n  -1\n  >>> strindex('abc', '', 10)\n  -1\n  >>> strindex('abc', '', 11)\n  -1\n  >>> strindex('abc', '', 12)\n  -1\n  >>> strindex('abc', '', 13)\n  -1\n  >>> strindex('abc', '', 14)\n  -1\n  >>> strindex('abc', '', 15)\n  -1\n  >>> strindex('abc', '', 16)\n  -1\n  >>> strindex('abc', '', 17)\n  -1\n  >>> strindex('abc', '', 18)\n  -1\n  >>> strindex('abc', '', 19)\n  -1\n  >>> strindex('abc', '', 20)\n  -1\n  >>> strindex('abc', '', 21)\n  -1\n  >>> strindex('abc', '', 22)\n  -1\n  >>> strindex('abc', '', 23)\n  -1\n  >>> strindex('abc', '', 24)\n  -1\n  >>> strindex('abc', '', 25)\n  -1\n  >>> strindex('abc', '', 26)\n  -1\n  >>> strindex('abc', '', 27)\n  -1\n  >>> strindex('abc', '', 28)\n  -1\n  >>> strindex('abc', '', 29)\n  -1\n  >>> strindex('abc', '', 30)\n  -1\n  >>> strindex('abc', '', 31)\n  -1\n  >>> strindex('abc', '', 32)\n  -1\n  >>> strindex('abc', '', 33)\n  -1\n  >>> strindex('abc', '', 34)\n  -1\n  >>> strindex('abc', '', 35)\n  -1\n  >>> strindex('abc', '', 36)\n  -1\n  >>> strindex('abc', '', 37)\n  -1\n  >>> strindex('abc', '', 38)\n  -1\n  >>> strindex('abc', '', 39)\n  -1\n  >>> strindex('abc', '', 40)\n  -1\n  >>> strindex('abc', '', 41)\n  -1\n  >>> strindex('abc', '', 42)\n  -1\n  >>> strindex('abc', '', 43)\n  -1\n  >>> strindex('abc', '', 44)\n  -1\n  >>> strindex('abc', '', 45)\n  -1\n  >>> strindex('abc', '', 46)\n  -1\n  >>> strindex('abc', '', 47)\n  -1\n  >>> strindex('abc', '', 48)\n  -1\n  >>> strindex('abc', '', 49)\n  -1\n  >>> strindex('abc', '', 50)\n  -1\n  >>> strindex('abc', '', 51)\n  -1\n  >>> strindex('abc', '', 52)\n  -1\n  >>> strindex('abc', '', 53)\n  -1\n  >>> strindex('abc', '', 54)\n  -1\n  >>> strindex('abc', '', 55)\n  -1\n  >>> strindex('abc', '', 56)\n  -1\n  >>> strindex('abc', '', 57)\n  -1\n  >>> strindex('abc', '', 58)\n  -1\n  >>> strindex('abc', '', 59)\n  -1\n  >>> strindex('abc', '', 60)\n  -1\n  >>> strindex('abc', '', 61)\n  -1\n  >>> strindex('abc', '', 62)\n  -1\n  >>> strindex('abc', '', 63)\n  -1\n  >>> strindex('abc', '', 64)\n  -1\n  >>> strindex('abc', '', 65)\n  -1\n  >>> strindex('abc', '', 66)\n  -1\n  >>> strindex('abc', '', 67)\n  -1\n  >>> strindex('abc', '', 68)\n  -1\n  >>> strindex('abc', '', 69)\n  -1\n  >>> strindex('abc', '', 70)\n  -1\n  >>> strindex('abc', '', 71)\n  -1\n  >>> strindex('abc', '', 72)\n  -1\n  >>> strindex('abc', '', 73)\n  -1\n  >>> strindex('abc', '', 74)\n  -1\n  >>> strindex('abc', '', 75)\n  -1\n  >>> strindex('abc', '', 76)\n  -1\n  >>> strindex('abc', '', 77)\n  -1\n  >>> strindex('abc', '', 78)\n  -1\n  >>> strindex('abc', '', 79)\n  -1\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let result = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  >>> largestDivisor(30)\n  15\n  >>> largestDivisor(40)\n  20\n  >>> largestDivisor(50)\n  25\n  >>> largestDivisor(60)\n  30\n  >>> largestDivisor(70)\n  35\n  >>> largestDivisor(80)\n  40\n  >>> largestDivisor(90)\n  45\n  >>> largestDivisor(100)\n  50\n  >>> largestDivisor(110)\n  55\n  >>> largestDivisor(120)\n  60\n  >>> largestDivisor(130)\n  65\n  >>> largestDivisor(140)\n  70\n  >>> largestDivisor(150)\n  75\n  >>> largestDivisor(160)\n  80\n  >>> largestDivisor(170)\n  85\n  >>> largestDivisor(180)\n  90\n  >>> largestDivisor(190)\n  95\n  >>> largestDivisor(200)\n  100\n  >>> largestDivisor(210)\n  105\n  >>> largestDivisor(220)\n  110\n  >>> largestDivisor(230)\n  115\n  >>> largestDivisor(240)\n  120\n  >>> largestDivisor(250)\n  125\n  >>> largestDivisor(260)\n  130\n  >>> largestDivisor(270)\n  135\n  >>> largestDivisor(280)\n  140\n  >>> largestDivisor(290)\n  145\n  >>> largestDivisor(300)\n  150\n  >>> largestDivisor(310)\n  155\n  >>> largestDivisor(320)\n  160\n  >>> largestDivisor(330)\n  165\n  >>> largestDivisor(340)\n  170\n  >>> largestDivisor(350)\n  175\n  >>> largestDivisor(360)\n  180\n  >>> largestDivisor(370)\n  185\n  >>> largestDivisor(380)\n  190\n  >>> largestDivisor(390)\n  195\n  >>> largestDivisor(400)\n  200\n  >>> largestDivisor(410)\n  205\n  >>> largestDivisor(420)\n  210\n  >>> largestDivisor(430)\n  215\n  >>> largestDivisor(440)\n  220\n  >>> largestDivisor(450)\n  225\n  >>> largestDivisor(460)\n  230\n  >>> largestDivisor(470)\n  235\n  >>> largestDivisor(480)\n  240\n  >>> largestDivisor(490)\n  245\n  >>> largestDivisor(500)\n  250\n  >>> largestDivisor(510)\n  255\n  >>> largestDivisor(520)\n  260\n  >>> largestDivisor(530)\n  265\n  >>> largestDivisor(540)\n  270\n  >>> largestDivisor(550)\n  275\n  >>> largestDivisor(560)\n  280\n  >>> largestDivisor(570)\n  285\n  >>> largestDivisor(580)\n  290\n  >>> largestDivisor(590)\n  295\n  >>> largestDivisor(600)\n  300\n  >>> largestDivisor(610)\n  305\n  >>> largestDivisor(620)\n  310\n  >>> largestDivisor(630)\n  315\n  >>> largestDivisor(640)\n  320\n  >>> largestDivisor(650)\n  325\n  >>> largestDivisor(660)\n  330\n  >>> largestDivisor(670)\n  335\n  >>> largestDivisor(680)\n  340\n  >>> largestDivisor(690)\n  345\n  >>> largestDivisor(700)\n  350\n  >>> largestDivisor(710)\n  355\n  >>> largestDivisor(720)\n  360\n  >>> largestDivisor(730)\n  365\n  >>> largestDivisor(740)\n  370\n  >>> largestDivisor(750)\n  375\n  >>> largestDivisor(760)\n  380\n  >>> largestDivisor(770)\n  385\n  >>> largestDivisor(780)\n  390\n  >>> largestDivisor(790)\n  395\n  >>> largestDivisor(800)\n  400\n  >>> largestDivisor(810)\n  405\n  >>> largestDivisor(820)\n  410\n  >>> largestDivisor(830)\n  415\n  >>> largestDivisor(840)\n  420\n  >>> largestDivisor(850)\n  425\n  >>> largestDivisor(860)\n  430\n  >>> largestDivisor(870)\n  435\n  >>> largestDivisor(880)\n  440\n  >>> largestDivisor(890)\n  445\n  >>> largestDivisor(900)\n  450\n  >>> largestDivisor(910)\n  455\n  >>> largestDivisor(920)\n  460\n  >>> largestDivisor(930)\n  465\n  >>> largestDivisor(940)\n  470\n  >>> largestDivisor(950)\n  475\n  >>> largestDivisor(960)\n  480\n  >>> largestDivisor(970)\n  485\n  >>> largestDivisor(980)\n  490\n  >>> largestDivisor(990)\n  495\n  >>> largestDivisor(1000)\n  500\n  >>> largestDivisor(1010)\n  505\n  >>> largestDivisor(1020)\n  510\n  >>> largestDivisor(1030)\n  515\n  >>> largestDivisor(1040)\n  520\n  >>> largestDivisor(1050)\n  525\n  >>> largestDivisor(1060)\n  530\n  >>> largestDivisor(1070)\n  535\n  >>> largestDivisor(1080)\n  540\n  >>> largestDivisor(1090", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n// console.log(factorize(8));\n// console.log(factorize(25));\n// console.log(factorize(70));\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);\n// console.log(factors);\n\n// const factors = factorize(25);\n// console.log(factors);\n\n// const factors = factorize(70);\n// console.log(factors);\n\n// const factors = factorize(8);", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates12 = (numbers) => {\n  const unique = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen[numbers[i]]) {\n      seen[numbers[i]] = true;\n      unique.", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (c) => {\n    return c.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate([1, 2, 3],'')\n  '1 2 3'\n  >>> concatenate", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors(13441)\n  44\n  >>> countDivisors(61)\n  4\n  >>> countDivisors(4)\n  1\n  >>> countDivisors(1)\n  1\n  */\nconst countDivisors = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i * i <= n; i += 1) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  if (n % 2 === 0) {\n    count += 2\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors(13441)\n  44\n  >>> countDivisors(61)\n  4\n  >>> countDivisors(4)\n  1\n  >>> countDivisors(1)\n  1\n  */\nconst countDivisors2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i * i <= n; i += 1) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors(13441)\n  44\n  >>> countDivisors(61)\n  4\n  >>> countDivisors(4)\n  1\n  >>> countDivisors(1)\n  1\n  */\nconst countDivisors3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i * i <= n; i += 1) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors(13441)\n  44\n  >>> countDivisors(61)\n  4\n  >>> countDivisors(4)\n  1\n  >>> countDivisors(1)\n  1\n  */\nconst countDivisors4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i * i <= n; i += 1) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors(13441)\n  44\n  >>> countDivisors(61)\n  4\n  >>> countDivisors(4)\n  1\n  >>> countDivisors(1)\n  1\n  */\nconst countDivisors5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i * i <= n; i += 1) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors(13441)\n  44\n  >>> countDivisors(61)\n  4\n  >>> countDivisors(4)\n  1\n  >>> countDivisors(1)\n  1\n  */\nconst countDivisors6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let count = 1\n  for (let i = 2; i * i <= n; i += 1) {\n    if (n % i === 0) {\n      count += 1\n    }\n  }\n  if (n % 2 === 0) {\n    count += 1\n  }\n  return count\n}\n\n/*Return the number of divisors of a given number.\n  >>> countDivisors(6)\n  3\n  >>> countDivisors(101)\n  10\n  >>> countDivisors(11)\n  2\n  >>> countDivisors", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const x = xs[0];\n  const p = xs[1];\n  const q = xs[2];\n  const r = xs[3];\n  const d = xs[4];\n  const d2 = xs[5];\n  const d3 = xs[6];\n  const d4 = xs[7];\n  const d5 = xs[8];\n  const d6 = xs[9];\n  const d7 = xs[10];\n  const d8 = xs[11];\n  const d9 = xs[12];\n  const d10 = xs[13];\n  const d11 = xs[14];\n  const d12 = xs[15];\n  const d13 = xs[16];\n  const d14 = xs[17];\n  const d15 = xs[18];\n  const d16 = xs[19];\n  const d17 = xs[20];\n  const d18 = xs[21];\n  const d19 = xs[22];\n  const d20 = xs[23];\n  const d21 = xs[24];\n  const d22 = xs[25];\n  const d23 = xs[26];\n  const d24 = xs[27];\n  const d25 = xs[28];\n  const d26 = xs[29];\n  const d27 = xs[30];\n  const d28 = xs[31];\n  const d29 = xs[32];\n  const d30 = xs[33];\n  const d31 = xs[34];\n  const d32 = xs[35];\n  const d33 = xs[36];\n  const d34 = xs[37];\n  const d35 = xs[38];\n  const d36 = xs[39];\n  const d37 = xs[40];\n  const d38 = xs[41];\n  const d39 = xs[42];\n  const d40 = xs[43];\n  const d41 = xs[44];\n  const d42 = xs[45];\n  const d43 = xs[46];\n  const d44 = xs[47];\n  const d45 = xs[48];\n  const d46 = xs[49];\n  const d47 = xs[50];\n  const d48 = xs[51];\n  const d49 = xs[52];\n  const d50 = xs[53];\n  const d51 = xs[54];\n  const d52 = xs[55];\n  const d53 = xs[56];\n  const d54 = xs[57];\n  const d55 = xs[58];\n  const d56 = xs[59];\n  const d57 = xs[60];\n  const d58 = xs[61];\n  const d59 = xs[62];\n  const d60 = xs[63];\n  const d61 = xs[64];\n  const d62 = xs[65];\n  const d63 = xs[66];\n  const d64 = xs[67];\n  const d65 = xs[68];\n  const d66 = xs[69];\n  const d67 = xs[70];\n  const d68 = xs[71];\n  const d69 = xs[72];\n  const d70 = xs[73];\n  const d71 = xs[74];\n  const d72 = xs[75];\n  const d73 = xs[76];\n  const d74 = xs[77];\n  const d75 = xs[78];\n  const d76 = xs[79];\n  const d77 = xs[80];\n  const d78 = xs[81];\n  const d79 = xs[82];\n  const d80 = xs[83];\n  const d81 = xs[84];\n  const d82 = xs[85];\n  const d83 = xs[86];\n  const d84 = xs[87];\n  const d85 = xs[88];\n  const d86 = xs[89];\n  const d87 = xs[90];\n  const d88 = xs[91];\n  const d89 = xs[92];\n  const d90 = xs[93];\n  const d91 = xs[94];\n  const d92 = xs[95];\n  const d93 = xs[96];\n  const d94 = xs[97];\n  const d95 = xs[98];\n  const d96 = xs[99];\n  const d97 = xs[100];\n  const d98 = xs[101];\n  const d99 = xs[102];\n  const d100 = xs[103];\n  const d101 = xs[104];\n  const d102 = xs[105];\n  const d103 = xs[106];\n  const d104 = xs[107];\n  const d105 = xs[108];\n  const d106 = xs[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const sorted = [];\n    const sortedIndex = [];\n    const sortedValue = [];\n    const sortedIndexValue = [];\n    const sortedIndexValueIndex = [];\n    const sortedIndexValueIndexIndex = [];\n    const sortedIndexValueIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    const sortedIndexValueIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\t * @param {number} index\n\t * @param {number} value\n\t * @returns {number}\n\t */\n\tfunction getIndex(index, value) {\n\t  return this.index[index];\n\t}\n\t\n\t/**\n\t * @param {number} index\n\t * @returns {number}\n\t */\n\tfunction getIndex(index) {\n\t  return this.index[index];\n\t}\n\t\n\t/**", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\n/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = divisors[Math.floor(Math.random() * divisors.length)]\n  const divisorCount = Math.floor(n / divisor)\n  const remainder = n % divisor\n  const remainderCount = remainder? Math.floor(remainder / divisor) : 0\n  return divisorCount + remainderCount\n}\n\n/*\n  >>> fizzBuzz(0)\n  0\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizzBuzz(23)\n  23\n  >>> fizzBuzz(24)\n  24\n  >>> fizzBuzz(25)\n  25\n  >>> fizzBuzz(26)\n  26\n  >>> fizzBuzz(27)\n  27\n  >>> fizzBuzz(28)\n  28\n  >>> fizzBuzz(29)\n  29\n  >>> fizzBuzz(30)\n  30\n  >>> fizzBuzz(31)\n  31\n  >>> fizzBuzz(32)\n  32\n  >>> fizzBuzz(33)\n  33\n  >>> fizzBuzz(34)\n  34\n  >>> fizzBuzz(35)\n  35\n  >>> fizzBuzz(36)\n  36\n  >>> fizzBuzz(37)\n  37\n  >>> fizzBuzz(38)\n  38\n  >>> fizzBuzz(39)\n  39\n  >>> fizzBuzz(40)\n  40\n  >>> fizzBuzz(41)\n  41\n  >>> fizzBuzz(42)\n  42\n  >>> fizzBuzz(43)\n  43\n  >>> fizzBuzz(44)\n  44\n  >>> fizzBuzz(45)\n  45\n  >>> fizzBuzz(46)\n  46\n  >>> fizzBuzz(47)\n  47\n  >>> fizzBuzz(48)\n  48\n  >>> fizzBuzz(49)\n  49\n  >>> fizzBuzz(50)\n  50\n  >>> fizzBuzz(51)\n  51\n  >>> fizzBuzz(52)\n  52\n  >>> fizzBuzz(53)\n  53\n  >>> fizzBuzz(54)\n  54\n  >>> fizzBuzz(55)\n  55\n  >>> fizzBuzz(56)\n  56\n  >>> fizzBuzz(57)\n  57\n  >>> fizzBuzz(58)\n  58\n  >>> fizzBuzz(59)\n  59\n  >>> fizzBuzz(60)\n  60\n  >>> fizzBuzz(61)\n  61\n  >>> fizzBuzz(62)\n  62\n  >>> fizzBuzz(63)\n  63\n  >>> fizzBuzz(64)\n  64\n  >>> fizzBuzz(65)\n  65\n  >>> fizzBuzz(66)\n  66\n  >>> fizzBuzz(67)\n  67\n  >>> fizzBuzz(68)\n  68\n  >>> fizzBuzz(69)\n  69\n  >>> fizzBuzz(70)\n  70\n  >>> fizzBuzz(71)\n  71\n  >>> fizzBuzz(72)\n  72\n  >>> fizzBuzz(73)\n  73\n  >>> fizzBuzz(74)\n  74\n  >>> fizzBuzz(75)\n  75\n  >>> fizzBuzz(76)\n  76\n  >>> fizzBuzz(77)\n  77\n  >>> fizzBuzz(78)\n  78\n  >>> fizzBuzz(79)\n  79\n  */\nconst fizzBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = divisors[Math.floor(Math.random() * divisors.length)]\n  const divisorCount = Math.floor(n / divisor)\n  const remainder = n % divisor\n  const remainderCount = remainder? Math.floor(remainder / divisor) : 0\n  return divisorCount + remainderCount\n}\n\n/*\n  >>> fizzBuzz(0)\n  0\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(2)\n  2\n  >>> fizzBuzz(3)\n  3\n  >>> fizzBuzz(4)\n  4\n  >>> fizzBuzz(5)\n  5\n  >>> fizzBuzz(6)\n  6\n  >>> fizzBuzz(7)\n  7\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(9)\n  9\n  >>> fizzBuzz(10)\n  10\n  >>> fizzBuzz(11)\n  11\n  >>> fizzBuzz(12)\n  12\n  >>> fizzBuzz(13)\n  13\n  >>> fizzBuzz(14)\n  14\n  >>> fizzBuzz(15)\n  15\n  >>> fizzBuzz(16)\n  16\n  >>> fizzBuzz(17)\n  17\n  >>> fizzBuzz(18)\n  18\n  >>> fizzBuzz(19)\n  19\n  >>> fizzBuzz(20)\n  20\n  >>> fizzBuzz(21)\n  21\n  >>> fizzBuzz(22)\n  22\n  >>> fizz", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    even.push(l[i]);\n    odd.push(l[i + 1]);\n  }\n  return [even, odd];\n};\n\nexport default sortEven;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic2 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic3 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic4 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic5 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic6 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic7 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic8 = (s) =>{\n  var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (numbers) => {\n    return (numbers.map(x => Math.abs(x - mean)))\n  };\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbs", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    int collisions = 0;\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j < n; j++) {\n        if (carRaceCollision(i, j)) {\n          collisions++;\n        }\n      }\n    }\n    return collisions;\n  }\n  */\n}\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\n/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero4 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero5 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero6 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero7 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero8 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero9 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero10 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero11 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return (diff === 0)? false : true;\n};\n\nconst pairsSumToZero12 = (l) => {\n  const lst = l.slice();\n  const len = lst.length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const diff = lst.reduce((a, b) => a - b, 0);\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase11 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase12 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase13 = (x, base) => {\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase14 = (x,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of elements in the list  l.\n  >>> median([3, 1, 2", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  const textLength = text.length\n  let i = 0\n  let j = textLength - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  const", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*Return n^2 modulo p (be aware of nume rics).\n  >>> modp2(3, 5)\n  9\n  >>> modp2(1101, 101)\n  1\n  >>> modp2(0, 101)\n  1\n  >>> modp2(3, 11)\n  8\n  >>> modp2(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return (n * n) % p\n}\n\n/*Return n^3 modulo p (be aware of nume rics).\n  >>> modp3(3, 5)\n  2\n  >>> modp3(1101, 101)\n  1\n  >>> modp3(0, 101)\n  1\n  >>> modp3(3, 11)\n  8\n  >>> modp3(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return (n * n * n) % p\n}\n\n/*Return n^4 modulo p (be aware of nume rics).\n  >>> modp4(3, 5)\n  1\n  >>> modp4(1101, 101)\n  1\n  >>> modp4(0, 101)\n  1\n  >>> modp4(3, 11)\n  8\n  >>> modp4(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return (n * n * n * n) % p\n}\n\n/*Return n^5 modulo p (be aware of nume rics).\n  >>> modp5(3, 5)\n  1\n  >>> modp5(1101, 101)\n  1\n  >>> modp5(0, 101)\n  1\n  >>> modp5(3, 11)\n  8\n  >>> modp5(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return (n * n * n * n * n) % p\n}\n\n/*Return n^6 modulo p (be aware of nume rics).\n  >>> modp6(3, 5)\n  1\n  >>> modp6(1101, 101)\n  1\n  >>> modp6(0, 101)\n  1\n  >>> modp6(3, 11)\n  8\n  >>> modp6(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return (n * n * n * n * n * n) % p\n}\n\n/*Return n^7 modulo p (be aware of nume rics).\n  >>> modp7(3, 5)\n  1\n  >>> modp7(1101, 101)\n  1\n  >>> modp7(0, 101)\n  1\n  >>> modp7(3, 11)\n  8\n  >>> modp7(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return (n * n * n * n * n * n * n) % p\n}\n\n/*Return n^8 modulo p (be aware of nume rics).\n  >>> modp8(3, 5)\n  1\n  >>> modp8(1101, 101)\n  1\n  >>> modp8(0, 101)\n  1\n  >>> modp8(3, 11)\n  8\n  >>> modp8(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return (n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^9 modulo p (be aware of nume rics).\n  >>> modp9(3, 5)\n  1\n  >>> modp9(1101, 101)\n  1\n  >>> modp9(0, 101)\n  1\n  >>> modp9(3, 11)\n  8\n  >>> modp9(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^10 modulo p (be aware of nume rics).\n  >>> modp10(3, 5)\n  1\n  >>> modp10(1101, 101)\n  1\n  >>> modp10(0, 101)\n  1\n  >>> modp10(3, 11)\n  8\n  >>> modp10(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^11 modulo p (be aware of nume rics).\n  >>> modp11(3, 5)\n  1\n  >>> modp11(1101, 101)\n  1\n  >>> modp11(0, 101)\n  1\n  >>> modp11(3, 11)\n  8\n  >>> modp11(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^12 modulo p (be aware of nume rics).\n  >>> modp12(3, 5)\n  1\n  >>> modp12(1101, 101)\n  1\n  >>> modp12(0, 101)\n  1\n  >>> modp12(3, 11)\n  8\n  >>> modp12(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return (n * n * n * n * n * n * n * n * n * n) % p\n}\n\n/*Return n^13 modulo p (be aware of nume", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let output = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      output.push(numbers[i]);\n      i++;\n    } else {\n      output.push(numbers[i]);\n      output.push(delimeter);\n      i++;\n    }\n    j++;\n  }\n  return output;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift2 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift2= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift3 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift3= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift4 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift4= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift5 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift5= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift6 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift6= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift7 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift7= (s) =>{\n  return s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\n/*\n  removePunctuation is a function that take s str ing and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['.', ',', ':', ';', '!', '?', '-', '_', '\\'', '\"', '%', '$', '*', '(', ')', '{', '}', '[', ']', '|', '\\\\', '/', '+', '=', '@', '#', '$', '^', '&', '~'];\n  const result = text.replace(/[\\.,\\,\\:\\;\\!\\?\\-\\_\\'\\\"\\%\\$\\*\\(\\)\\{\\}\\[\\]\\|\\\\\\/\\+\\=\\@\\#\\$\\^\\&\\~]/g, '');\n  return result;\n};\n\n/*\n  removeWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  const whitespace = [' ', '\\n', '\\t', '\\r'];\n  const result = text.replace(/[\\s\\n\\t\\r]/g, '');\n  return result;\n};\n\n/*\n  removeAllPunctuation is a function that take s str ing and returns string without punctuation and whitespace.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdef'\n  >>> removeAllPunctuation('aaaaa')\n  ''\n  >>> removeAllPunctuation('aaBAA')\n  'BAA'\n  >>> removeAllPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuation = (text) => {\n  const punctuation = ['.', ',', ':', ';', '!', '?', '-', '_', '\\'', '\"', '%', '$', '*', '(', ')', '{', '}', '[', ']', '|', '\\\\', '/', '+', '=', '@', '#', '$', '^', '&', '~'];\n  const whitespace = [' ', '\\n', '\\t', '\\r'];\n  const result = text.replace(/[\\s\\n\\t\\r]/g, '').replace(/[\\.,\\,\\:\\;\\!\\?\\-\\_\\'\\\"\\%\\$\\*\\(\\)\\{\\}\\[\\]\\|\\\\\\/\\+\\=\\@\\#\\$\\^\\&\\~]/g, '');\n  return result;\n};\n\n/*\n  removeAllWhitespace is a function that take s str ing and returns string without whitespace.\n  >>> removeAllWhitespace('')\n  ''\n  >>> removeAllWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllWhitespace('abcdef')\n  'abcdef'\n  >>> removeAllWhitespace('aaaaa')\n  ''\n  >>> removeAllWhitespace('aaBAA')\n  'BAA'\n  >>> removeAllWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeAllWhitespace = (text) => {\n  const whitespace = [' ', '\\n', '\\t', '\\r'];\n  const result = text.replace(/[\\s\\n\\t\\r]/g, '');\n  return result;\n};\n\n/*\n  removeAllVowels is a function that take s str ing and returns string without vowels.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  ''\n  >>> removeAllVowels('aaBAA')\n  'BAA'\n  >>> removeAllVowels('zbcd')\n  'zbcd'\n  */\nconst removeAllVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\n/*\n  removeAllPunctuation is a function that take s str", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const lis = l.slice().sort((a, b) => a - b);\n  const lisLength = lis.length;\n  let i = 0;\n  while (i < lisLength && lis[i] <= t) {\n    i++;\n  }\n  return i === lisLength;\n};\n\nexport default belowThreshold;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  *   >>> sum_of_squares(1, 10)\n  *   55\n  *   >>> sum_of_squares(1, 100)\n  *   5500\n  *   >>> sum_of_squares(1, 1000)\n  *   5000000\n  *   >>> sum_of_squares(1, 10000)\n  *   500000000\n  *   >>> sum_of_squares(1, 10000000)\n  *   50000000000\n  *   >>> sum_of_squares(1, 100000000)\n  *   5000000000000000000\n  *   >>> sum_of_squares(1, 1000000000)\n  *   5000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000)\n  *   50000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000)\n  *   5000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  *   500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  *   >>> sum_of_squares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const len = s0.length;\n    if (len!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same = (s0, s1) => {\n    const len = s0.length;\n    if (len!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same2 = (s0, s1) => {\n    const len = s0.length;\n    if (len!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same3 = (s0, s1) => {\n    const len = s0.length;\n    if (len!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same4 = (s0, s1) => {\n    const len = s0.length;\n    if (len!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same5 = (s0, s1) => {\n    const len = s0.length;\n    if (len!== s1.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddd", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length;\n  const bracketsOpening = brackets.charAt(0);\n  const bracketsClosing = brackets.charAt(bracketsLength - 1);\n  const bracketsOpeningLength = bracketsOpening.length;\n  const bracketsClosingLength = bracketsClosing.length;\n  const bracketsOpeningIndex = brackets.indexOf(bracketsOpening);\n  const bracketsClosingIndex = brackets.indexOf(bracketsClosing);\n  const bracketsOpeningIndexLength = bracketsOpeningIndex + bracketsOpeningLength;\n  const bracketsClosingIndexLength = bracketsClosingIndex + bracketsClosingLength;\n  if (bracketsOpeningIndexLength > bracketsClosingIndexLength) {\n    return false;\n  }\n  for (let i = bracketsOpeningIndexLength; i < bracketsClosingIndexLength; i++) {\n    if (brackets[i]!== bracketsOpening) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return a new string with all the brackets removed. \n  Brackets are defined as \"<\" and \">\". \n\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>'\n  >>> removeBrackets(\"<>\")\n  '<>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const last = sorted[sorted.length - 1];\n  return sorted.every((x) => x === last);\n};\n\nmodule.exports = monotonic;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_len = l1.length;\n  const l2_len = l2.length;\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.values());\n  const intersection_len = intersection.size;\n  const intersection_set = new Set(intersection);\n  const intersection_set_len = intersection_set.size;\n  const union = new Set(l1_set.values());\n  const union_len = union.size;\n  const union_set = new Set(union);\n  const union_set_len = union_set.size;\n  const result = [];\n  for (let i = 0; i < l1_len; i++) {\n    const item = l1[i];\n    if (l2_set.has(item)) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  if (n === 3) return 3\n  if (n === 4) return 2\n  if (n === 5) return 5\n  if (n === 6) return 3\n  if (n === 7) return 7\n  if (n === 8) return 2\n  if (n === 9) return 3\n  if (n === 10) return 5\n  if (n === 11) return 11\n  if (n === 12) return 3\n  if (n === 13) return 5\n  if (n === 14) return 7\n  if (n === 15) return 3\n  if (n === 16) return 3\n  if (n === 17) return 5\n  if (n === 18) return 3\n  if (n === 19) return 7\n  if (n === 20) return 5\n  if (n === 21) return 7\n  if (n === 22) return 11\n  if (n === 23) return 3\n  if (n === 24) return 3\n  if (n === 25) return 5\n  if (n === 26) return 7\n  if (n === 27) return 11\n  if (n === 28) return 3\n  if (n === 29) return 3\n  if (n === 30) return 5\n  if (n === 31) return 7\n  if (n === 32) return 3\n  if (n === 33) return 3\n  if (n === 34) return 7\n  if (n === 35) return 11\n  if (n === 36) return 3\n  if (n === 37) return 3\n  if (n === 38) return 7\n  if (n === 39) return 11\n  if (n === 40) return 3\n  if (n === 41) return 3\n  if (n === 42) return 7\n  if (n === 43) return 11\n  if (n === 44) return 3\n  if (n === 45) return 3\n  if (n === 46) return 7\n  if (n === 47) return 11\n  if (n === 48) return 3\n  if (n === 49) return 3\n  if (n === 50) return 7\n  if (n === 51) return 11\n  if (n === 52) return 3\n  if (n === 53) return 3\n  if (n === 54) return 7\n  if (n === 55) return 11\n  if (n === 56) return 3\n  if (n === 57) return 3\n  if (n === 58) return 7\n  if (n === 59) return 11\n  if (n === 60) return 3\n  if (n === 61) return 3\n  if (n === 62) return 7\n  if (n === 63) return 11\n  if (n === 64) return 3\n  if (n === 65) return 3\n  if (n === 66) return 7\n  if (n === 67) return 11\n  if (n === 68) return 3\n  if (n === 69) return 3\n  if (n === 70) return 7\n  if (n === 71) return 11\n  if (n === 72) return 3\n  if (n === 73) return 3\n  if (n === 74) return 7\n  if (n === 75) return 11\n  if (n === 76) return 3\n  if (n === 77) return 3\n  if (n === 78) return 7\n  if (n === 79) return 11\n  if (n === 80) return 3\n  if (n === 81) return 3\n  if (n === 82) return 7\n  if (n === 83) return 11\n  if (n === 84) return 3\n  if (n === 85) return 3\n  if (n === 86) return 7\n  if (n === 87) return 11\n  if (n === 88) return 3\n  if (n === 89) return 3\n  if (n === 90) return 7\n  if (n === 91) return 11\n  if (n === 92) return 3\n  if (n === 93) return 3\n  if (n === 94) return 7\n  if (n === 95) return 11\n  if (n === 96) return 3\n  if (n === 97) return 3\n  if (n === 98) return 7\n  if (n === 99) return 11\n  if (n === 100) return 3\n  if (n === 101) return 3\n  if (n === 102) return 7\n  if (n === 103) return 11\n  if (n === 104) return 3\n  if (n === 105) return 3\n  if (n === 106) return 7\n  if (n === 107) return 11\n  if (n === 108) return 3\n  if (n === 109) return 3\n  if (n === 110) return 7\n  if (n === 111) return 11\n  if (n === 112) return 3\n  if (n === 113) return 3\n  if (n === 114) return 7\n  if (n === 115) return 11\n  if (n === 116) return 3\n  if (n === 117) return 3\n  if (n === 118) return 7\n  if (n === 119) return 11\n  if (n === 120) return 3\n  if (n === 121) return 3\n  if (n === 122) return 7\n  if (n === 123) return 11\n  if (n === 124) return 3\n  if (n === 125) return 3\n  if (n === 126) return 7\n  if (n === 127) return 11\n  if (n === 128) return 3\n  if (n === 129) return 3\n  if (n === 130) return 7\n  if (n === 131) return 11\n  if (n === 132) return 3\n  if (n === 133) return 3\n  if (n === 134) return 7\n  if (n === 135) return 11\n  if (n === 136) return 3\n  if (n === 137) return 3\n  if (n === 138) return 7\n  if (n === 139) return 11\n  if (n === 140) return 3\n  if (n === 141) return 3\n  if (n === 142) return 7\n  if (n === 143) return 11\n  if (n === 144) return 3\n  if (n === 145) return 3\n  if (n === 146) return 7\n  if (n === 147) return 11\n  if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      paren_stack.push(i);\n    } else if (current_char === ')') {\n      const top_index = paren_stack.pop();\n      const next_index = paren_stack.pop();\n      if (top_index === next_index) {\n        paren_stack.pop();\n      } else {\n        paren_stack.push(next_index);\n      }\n    }\n    i++;\n  }\n  return paren_stack;\n};\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(`Test ${test_number} failed: ${message}`);\n  }\n}\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 1',\n  1\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 2',\n  2\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 3',\n  3\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 4',\n  4\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 5',\n  5\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 6',\n  6\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 7',\n  7\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 8',\n  8\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 9',\n  9\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 10',\n  10\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 11',\n  11\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 12',\n  12\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 13',\n  13\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 14',\n  14\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 15',\n  15\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 16',\n  16\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 17',\n  17\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 18',\n  18\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 19',\n  19\n);\n\nassert(\n  (parseNestedParens('(()()) ((())) () ((())()())')).length === 3,\n  'parseNestedParens 20',\n  20\n);\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeSpaces = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removePunctuation = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllPunctuation = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllSpaces = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespace = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/\\s+/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllPunctuationAndSpaces = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuation = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpaces = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpacesAndQuotes = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpacesAndQuotesAndQuotes = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpacesAndQuotesAndQuotesAndQuotes = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpacesAndQuotesAndQuotesAndQuotesAndQuotes = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpacesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotes = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  return str.replace(/[^a-zA-Z0-9 ]/g, \"\")\n}\n\n/*\n  Given a string, return a new string with all the spaces removed.\n  If the string is empty, return an empty string.\n  */\nconst removeAllWhitespaceAndPunctuationAndSpacesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotesAndQuotes = (str) => {\n  if (str.length", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots([1, 2, 3])\n  []\n  */\nconst roots = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      roots.push(p[i])\n    } else {\n      roots.push(-(p[i] - d[i] / p[i]) / d[i])\n    }\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots([1, 2, 3])\n  []\n  */\nconst roots2 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      roots.push(p[i])\n    } else {\n      roots.push(-(p[i] - d[i] / p[i]) / d[i])\n    }\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots([1, 2, 3])\n  []\n  */\nconst roots3 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      roots.push(p[i])\n    } else {\n      roots.push(-(p[i] - d[i] / p[i]) / d[i])\n    }\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots([1, 2, 3])\n  []\n  */\nconst roots4 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      roots.push(p[i])\n    } else {\n      roots.push(-(p[i] - d[i] / p[i]) / d[i])\n    }\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots([1, 2, 3])\n  []\n  */\nconst roots5 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      roots.push(p[i])\n    } else {\n      roots.push(-(p[i] - d[i] / p[i]) / d[i])\n    }\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots([1, 2, 3])\n  []\n  */\nconst roots6 = (p) => {\n  const len = p.length\n  const d = derivative(p)\n  const n = d.length\n  const roots = []\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      roots.push(p[i])\n    } else {\n      roots.push(-(p[i] - d[i] / p[i]) / d[i])\n    }\n  }\n  return roots\n}\n\n/*\n  Given a polynomial p(x) = a_0 + a_1 * x + a_2 * x^2 +...\n  Return the roots of this polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [1.0, 2.0]\n  >>> roots", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2]);\n  }\n  return fib;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[(len - 1) - i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift13 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[i])\n  }\n  return result.reverse().join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift14 = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    let [a, b, c] = s.split(\" \");\n    let [x, y, z] = n.split(\" \");\n    let [x1, y1, z1] = a.split(\" \");\n    let [x2, y2, z2] = b.split(\" \");\n    let [x3, y3, z3] = c.split(\" \");\n    let [x4, y4, z4] = x.split(\" \");\n    let [x5, y5, z5] = y.split(\" \");\n    let [x6, y6, z6] = z.split(\" \");\n    let [x7, y7, z7] = x1.split(\" \");\n    let [x8, y8, z8] = y1.split(\" \");\n    let [x9, y9, z9] = z1.split(\" \");\n    let [x10, y10, z10] = x2.split(\" \");\n    let [x11, y11, z11] = y2.split(\" \");\n    let [x12, y12, z12] = z2.split(\" \");\n    let [x13, y13, z13] = x3.split(\" \");\n    let [x14, y14, z14] = y3.split(\" \");\n    let [x15, y15, z15] = z3.split(\" \");\n    let [x16, y16, z16] = x4.split(\" \");\n    let [x17, y17, z17] = y4.split(\" \");\n    let [x18, y18, z18] = z4.split(\" \");\n    let [x19, y19, z19] = x5.split(\" \");\n    let [x20, y20, z20] = y5.split(\" \");\n    let [x21, y21, z21] = z5.split(\" \");\n    let [x22, y22, z22] = x6.split(\" \");\n    let [x23, y23, z23] = y6.split(\" \");\n    let [x24, y24, z24] = z6.split(\" \");\n    let [x25, y25, z25] = x7.split(\" \");\n    let [x26, y26, z26] = y7.split(\" \");\n    let [x27, y27, z27] = z7.split(\" \");\n    let [x28, y28, z28] = x8.split(\" \");\n    let [x29, y29, z29] = y8.split(\" \");\n    let [x30, y30, z30] = z8.split(\" \");\n    let [x31, y31, z31] = x9.split(\" \");\n    let [x32, y32, z32] = y9.split(\" \");\n    let [x33, y33, z33] = z9.split(\" \");\n    let [x34, y34, z34] = x10.split(\" \");\n    let [x35, y35, z35] = y10.split(\" \");\n    let [x36, y36, z36] = z10.split(\" \");\n    let [x37, y37, z37] = x11.split(\" \");\n    let [x38, y38, z38] = y11.split(\" \");\n    let [x39, y39, z39] = z11.split(\" \");\n    let [x40, y40, z40] = x12.split(\" \");\n    let [x41, y41, z41] = y12.split(\" \");\n    let [x42, y42, z42] = z12.split(\" \");\n    let [x43, y43, z43] = x13.split(\" \");\n    let [x44, y44, z44] = y13.split(\" \");\n    let [x45, y45, z45] = z13.split(\" \");\n    let [x46, y46, z46] = x14.split(\" \");\n    let [x47, y47, z47] = y14.split(\" \");\n    let [x48, y48, z48] = z14.split(\" \");\n    let [x49, y49, z49] = x15.split(\" \");\n    let [x50, y50, z50] = y15.split(\" \");\n    let [x51, y51, z51] = z15.split(\" \");\n    let [x52, y52, z52] = x16.split(\" \");\n    let [x53, y53, z53] = y16.split(\" \");\n    let [x54, y54, z54] = z16.split(\" \");\n    let [x55, y55, z55] = x17.split(\" \");\n    let [x56, y56, z56] = y17.split(\" \");\n    let [x57, y57, z57] = z17.split(\" \");\n    let [x58, y58, z58] = x18.split(\" \");\n    let [x59, y59, z59] = y18.split(\" \");\n    let [x60, y60, z60] = z18.split(\" \");\n    let [x61, y61,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let result = [];\n    let min = arr[0];\n    let minIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (arr[i] < min) {\n                min = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n    result.push([min, minIndex]);\n    return result;\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring15", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  const sortedList = [];\n  for (let i = min; i <= max; i++) {\n    sortedList.push(i);\n  }\n  return sortedList;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea10 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea11 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea12 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea13 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea14 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea15 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea16 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea17 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (s - a) * (s - b) * (s - c) / 6)\n  }\n  return -1\n}\n\nconst triangleArea18 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s % 2 === 0) {\n    return Math.round(s * (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly6 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly7 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly8 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly9 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly10 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly11 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly12 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly13 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly14 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly15 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly16 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly17 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst willItFly18 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nconst", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let min_index = 0;\n  let max_index = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let change = 0;\n  let min_change = 0;\n  let max_change = 0;\n\n  for (i = 0; i < len; i++) {\n    min = Math.min(arr[i], min);\n    max = Math.max(arr[i], max);\n  }\n\n  for (i = 0; i < len; i++) {\n    if (arr[i] === min) {\n      min_index = i;\n      break;\n    }\n  }\n\n  for (i = 0; i < len; i++) {\n    if (arr[i] === max) {\n      max_index = i;\n      break;\n    }\n  }\n\n  if (min_index === max_index) {\n    return 0;\n  }\n\n  for (i = min_index; i < max_index; i++) {\n    for (j = i + 1; j < max_index; j++) {\n      if (arr[i] === arr[j]) {\n        change = arr[i] - arr[j];\n        if (change < min_change) {\n          min_change = change;\n          min_index = i;\n          max_index = j;\n        }\n      }\n    }\n  }\n\n  return max_index - min_index;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  if (len1 > len2) {\n    return lst1\n  }\n  if (len1 < len2) {\n    return lst2\n  }\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeNumbers.filter((n) => n > a)\n  const count = prime.length\n  const result = prime.reduce((acc, n) => {\n    return acc + n\n  }, 0)\n  return result === a\n}\n\nconst primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\nconsole.log(isMultiplyPrime(30))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return x === 1;\n  if (n === 2) return x === 2;\n  if (n === 3) return x === 3;\n  if (n === 4) return x === 4;\n  if (n === 5) return x === 5;\n  if (n === 6) return x === 6;\n  if (n === 7) return x === 7;\n  if (n === 8) return x === 8;\n  if (n === 9) return x === 9;\n  if (n === 10) return x === 10;\n  if (n === 11) return x === 11;\n  if (n === 12) return x === 12;\n  if (n === 13) return x === 13;\n  if (n === 14) return x === 14;\n  if (n === 15) return x === 15;\n  if (n === 16) return x === 16;\n  if (n === 17) return x === 17;\n  if (n === 18) return x === 18;\n  if (n === 19) return x === 19;\n  if (n === 20) return x === 20;\n  if (n === 21) return x === 21;\n  if (n === 22) return x === 22;\n  if (n === 23) return x === 23;\n  if (n === 24) return x === 24;\n  if (n === 25) return x === 25;\n  if (n === 26) return x === 26;\n  if (n === 27) return x === 27;\n  if (n === 28) return x === 28;\n  if (n === 29) return x === 29;\n  if (n === 30) return x === 30;\n  if (n === 31) return x === 31;\n  if (n === 32) return x === 32;\n  if (n === 33) return x === 33;\n  if (n === 34) return x === 34;\n  if (n === 35) return x === 35;\n  if (n === 36) return x === 36;\n  if (n === 37) return x === 37;\n  if (n === 38) return x === 38;\n  if (n === 39) return x === 39;\n  if (n === 40) return x === 40;\n  if (n === 41) return x === 41;\n  if (n === 42) return x === 42;\n  if (n === 43) return x === 43;\n  if (n === 44) return x === 44;\n  if (n === 45) return x === 45;\n  if (n === 46) return x === 46;\n  if (n === 47) return x === 47;\n  if (n === 48) return x === 48;\n  if (n === 49) return x === 49;\n  if (n === 50) return x === 50;\n  if (n === 51) return x === 51;\n  if (n === 52) return x === 52;\n  if (n === 53) return x === 53;\n  if (n === 54) return x === 54;\n  if (n === 55) return x === 55;\n  if (n === 56) return x === 56;\n  if (n === 57) return x === 57;\n  if (n === 58) return x === 58;\n  if (n === 59) return x === 59;\n  if (n === 60) return x === 60;\n  if (n === 61) return x === 61;\n  if (n === 62) return x === 62;\n  if (n === 63) return x === 63;\n  if (n === 64) return x === 64;\n  if (n === 65) return x === 65;\n  if (n === 66) return x === 66;\n  if (n === 67) return x === 67;\n  if (n === 68) return x === 68;\n  if (n === 69) return x === 69;\n  if (n === 70) return x === 70;\n  if (n === 71) return x === 71;\n  if (n === 72) return x === 72;\n  if (n === 73) return x === 73;\n  if (n === 74) return x === 74;\n  if (n === 75) return x === 75;\n  if (n === 76) return x === 76;\n  if (n === 77) return x === 77;\n  if (n === 78) return x === 78;\n  if (n === 79) return x === 79;\n  if (n === 80) return x === 80;\n  if (n === 81) return x === 81;\n  if (n === 82) return x === 82;\n  if (n === 83) return x === 83;\n  if (n === 84) return x === 84;\n  if (n === 85) return x === 85;\n  if (n === 86) return x === 86;\n  if (n === 87) return x === 87;\n  if (n === 88) return x === 88;\n  if (n === 89) return x === 89;\n  if (n === 90) return x === 90;\n  if (n === 91) return x === 91;\n  if (n === 92) return x === 92;\n  if (n === 93) return x === 93;\n  if (n === 94) return x === 94;\n  if (n === 95) return x === 95;\n  if (n === 96) return x === 96;\n  if (n === 97) return x === 97;\n  if (n === 98) return x === 98;\n  if (n === 99) return x === 99;\n  if (n === 100) return x === 100;\n  if (n === 101) return x === 101;\n  if (n === 102) return x === 102;\n  if (n === 103) return x === 103;\n  if (n === 104) return x === 104;\n  if (n === 105) return x === 105;\n  if (n === 106) return x === 106;\n  if (n === 107) return x === 107", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube2 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube3 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube4 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube5 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube6 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube7 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube8 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube9 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube10 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube11 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube12 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube13 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube14 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube15 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube16 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube17 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube18 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube19 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube20 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube21 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube22 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube23 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube24 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube25 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube26 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube27 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube28 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube29 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube30 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube31 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube32 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube33 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube34 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst iscube35 = (a) => {\n  if (a % 3 === 0) {\n    return true\n  } else", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return `${binary}db`;\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal2 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal3 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal4 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal5 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal6 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal7 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal8 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal9 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal10 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal11 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal12 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal13 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal14 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal15 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal16 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal17 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal18 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal19 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal20 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(binary[i] === '1');\n  }\n  return decimal;\n};\n\nconst binaryToDecimal21 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    decimal.push(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const product = numbers.reduce((acc, curr) => acc * curr, 1)\n  return [sum, product]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct2 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct3 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct4 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct5 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct6 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct7 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 120)]\n  */\nconst sumProduct8 = (numbers) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers[i]\n    const product = numbers[i]\n    sums.push(sum)\n    products.push(product)\n  }\n  return [sums, products]\n}\n\n/*\n  Given a list of numbers, return a list of tuples, each tuple consisting of a sum and a product of all the numbers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([1, 2, 3, 4", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length\n  let count = 0\n  let i = 0\n  while (i < len) {\n    let j = i + 1\n    while (j < len) {\n      if (s[i] === s[j]) {\n        count++\n        j++\n      } else {\n        break\n      }\n    }\n    i++\n  }\n  return count >= 3\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade2 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade3 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade4 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade5 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade6 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade7 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade8 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;\n};\n\nconst letterGrade9 = (grades) => {\n  const letterGrades = grades.map(grade => {\n    const letterGrade = grade.toFixed(1);\n    const letterGradeNumber = parseFloat(letterGrade);\n    const letterGradeLetter = letterGrade.charAt(0);\n    const letterGradeLetterNumber = parseInt(letterGradeLetter);\n    const letterGradeNumber = letterGradeNumber - letterGradeLetterNumber;\n    return `${letterGradeLetter}${letterGradeNumber}`;\n  });\n  return letterGrades;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]{1,}$/;\n  return prime.test(string);\n};\n\nconst isPrime = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber = (number) => {\n  return isPrime(number);\n};\n\nconst isPrimeNumber2 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber3 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber4 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber5 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber6 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber7 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber8 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber9 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber10 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber11 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber12 = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number === 2) {\n    return true;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= number; i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber13 = (number) => {\n  if (number < 2) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t end sOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let start = n\n  let end = 1\n  let count = 0\n  while (start <= end) {\n    if (end.toString().length === n) {\n      count += 1\n    }\n    end -= 1\n  }\n  return count\n}\n\ncon s t startOneEnds= (n) => {\n  let start = 1\n  let end = n\n  let count = 0\n  while (start <= end) {\n    if (start.toString().length === n) {\n      count += 1\n    }\n    start += 1\n  }\n  return count\n}\n\ncon s t endOneEnds= (n) => {\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((digit) => N % 2? digit : 0);\n  const sum = digits.reduce((sum, digit) => sum + digit, 0);\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(' ')\n  let arr2 = []\n  let arr3 = []\n  let arr4 = []\n  let arr5 = []\n  let arr6 = []\n  let arr7 = []\n  let arr8 = []\n  let arr9 = []\n  let arr10 = []\n  let arr11 = []\n  let arr12 = []\n  let arr13 = []\n  let arr14 = []\n  let arr15 = []\n  let arr16 = []\n  let arr17 = []\n  let arr18 = []\n  let arr19 = []\n  let arr20 = []\n  let arr21 = []\n  let arr22 = []\n  let arr23 = []\n  let arr24 = []\n  let arr25 = []\n  let arr26 = []\n  let arr27 = []\n  let arr28 = []\n  let arr29 = []\n  let arr30 = []\n  let arr31 = []\n  let arr32 = []\n  let arr33 = []\n  let arr34 = []\n  let arr35 = []\n  let arr36 = []\n  let arr37 = []\n  let arr38 = []\n  let arr39 = []\n  let arr40 = []\n  let arr41 = []\n  let arr42 = []\n  let arr43 = []\n  let arr44 = []\n  let arr45 = []\n  let arr46 = []\n  let arr47 = []\n  let arr48 = []\n  let arr49 = []\n  let arr50 = []\n  let arr51 = []\n  let arr52 = []\n  let arr53 = []\n  let arr54 = []\n  let arr55 = []\n  let arr56 = []\n  let arr57 = []\n  let arr58 = []\n  let arr59 = []\n  let arr60 = []\n  let arr61 = []\n  let arr62 = []\n  let arr63 = []\n  let arr64 = []\n  let arr65 = []\n  let arr66 = []\n  let arr67 = []\n  let arr68 = []\n  let arr69 = []\n  let arr70 = []\n  let arr71 = []\n  let arr72 = []\n  let arr73 = []\n  let arr74 = []\n  let arr75 = []\n  let arr76 = []\n  let arr77 = []\n  let arr78 = []\n  let arr79 = []\n  let arr80 = []\n  let arr81 = []\n  let arr82 = []\n  let arr83 = []\n  let arr84 = []\n  let arr85 = []\n  let arr86 = []\n  let arr87 = []\n  let arr88 = []\n  let arr89 = []\n  let arr90 = []\n  let arr91 = []\n  let arr92 = []\n  let arr93 = []\n  let arr94 = []\n  let arr95 = []\n  let arr96 = []\n  let arr97 = []\n  let arr98 = []\n  let arr99 = []\n  let arr100 = []\n  let arr101 = []\n  let arr102 = []\n  let arr103 = []\n  let arr104 = []\n  let arr105 = []\n  let arr106 = []\n  let arr107 = []\n  let arr108 = []\n  let arr109 = []\n  let arr110 = []\n  let arr111 = []\n  let arr112 = []\n  let arr113 = []\n  let arr114 = []\n  let arr115 = []\n  let arr116 = []\n  let arr117 = []\n  let arr118 = []\n  let arr119 = []\n  let arr120 = []\n  let arr121 = []\n  let arr122 = []\n  let arr123 = []\n  let arr124 = []\n  let arr125 = []\n  let arr126 = []\n  let arr127 = []\n  let arr128 = []\n  let arr129 = []\n  let arr130 = []\n  let arr131 = []\n  let arr132 = []\n  let arr133 = []\n  let arr134 = []\n  let arr135 = []\n  let arr136 = []\n  let arr137 = []\n  let arr138 = []\n  let arr139 = []\n  let arr140 = []\n  let arr141 = []\n  let arr142 = []\n  let arr143 = []\n  let arr144 = []\n  let arr145 = []\n  let arr146 = []\n  let arr147 = []\n  let arr148 = []\n  let arr149 = []\n  let arr150 = []\n  let arr151 = []\n  let arr152 = []\n  let arr153 = []\n  let arr154 = []\n  let arr155 = []\n  let arr156 = []\n  let arr157 = []\n  let arr158 = []\n  let arr159 = []\n  let arr160 = []\n  let arr161 = []\n  let arr162 = []\n  let arr163 = []\n  let arr164 = []\n  let arr165 = []\n  let arr166 = []\n  let arr167 = []\n  let arr168 = []\n  let arr169 = []\n  let arr170 = []\n  let arr171 = []\n  let arr172 = []\n  let arr173 = []\n  let arr174 = []\n  let arr175 = []\n  let arr176 = []\n  let arr177 = []\n  let arr178 = []\n  let arr179 = []\n  let arr180 = []\n  let arr181 = []\n  let arr182 = []\n  let arr183 = []\n  let arr184 = []\n  let arr185 = []\n  let arr186 = []\n  let arr187 = []\n  let arr188 = []\n  let arr189 = []\n  let arr190 = []\n  let arr191 = []\n  let arr192 = []\n  let arr193 = []\n  let arr194 = []\n  let arr195 = []\n  let arr196 = []", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [row, col] = lst.length === 0? [0, 0] : [lst.length - 1, lst[lst.length - 1].length - 1];\n  const [row2, col2] = [row, col];\n  const [row3, col3] = [row2, col2];\n  const [row4, col4] = [row3, col3];\n  const [row5, col5] = [row4, col4];\n  const [row6, col6] = [row5, col5];\n  const [row7, col7] = [row6, col6];\n  const [row8, col8] = [row7, col7];\n  const [row9, col9] = [row8, col8];\n  const [row10, col10] = [row9, col9];\n  const [row11, col11] = [row10, col10];\n  const [row12, col12] = [row11, col11];\n  const [row13, col13] = [row12, col12];\n  const [row14, col14] = [row13, col13];\n  const [row15, col15] = [row14, col14];\n  const [row16, col16] = [row15, col15];\n  const [row17, col17] = [row16, col16];\n  const [row18, col18] = [row17, col17];\n  const [row19, col19] = [row18, col18];\n  const [row20, col20] = [row19, col19];\n  const [row21, col21] = [row20, col20];\n  const [row22, col22] = [row21, col21];\n  const [row23, col23] = [row22, col22];\n  const [row24, col24] = [row23, col23];\n  const [row25, col25] = [row24, col24];\n  const [row26, col26] = [row25, col25];\n  const [row27, col27] = [row26, col26];\n  const [row28, col28] = [row27, col27];\n  const [row29, col29] = [row28, col28];\n  const [row30, col30] = [row29, col29];\n  const [row31, col31] = [row30, col30];\n  const [row32, col32] = [row31, col31];\n  const [row33, col33] = [row32, col32];\n  const [row34, col34] = [row33, col33];\n  const [row35, col35] = [row34, col34];\n  const [row36, col36] = [row35, col35];\n  const [row37, col37] = [row36, col36];\n  const [row38, col38] = [row37, col37];\n  const [row39, col39] = [row38, col38];\n  const [row40, col40] = [row39, col39];\n  const [row41, col41] = [row40, col40];\n  const [row42, col42] = [row41, col41];\n  const [row43, col43] = [row42, col42];\n  const [row44, col44] = [row43, col43];\n  const [row45, col45] = [row44, col44];\n  const [row46, col46] = [row45, col45];\n  const [row47, col47] = [row46, col46];\n  const [row48, col48] = [row47, col47];\n  const [row49, col49] = [row48, col48];\n  const [row50, col50] = [row49, col49];\n  const [row51, col51] = [row50, col50];\n  const [row52, col52] = [row51, col51];\n  const [row53, col53] = [row52, col52];\n  const [row54, col54] = [row53, col53];\n  const [row55, col55] = [row54, col54];\n  const [row56, col56] = [row55, col55];\n  const [row57, col57] = [row56, col56];\n  const [row58, col58] = [row57, col57];\n  const [row59, col59] = [row58, col58];\n  const [row60, col60] = [row59, col59];\n  const [row61, col61] = [row60, col60];\n  const [row62, col62] = [row61, col61];\n  const [row63, col63] = [row62, col62];\n  const [row64, col64] = [row63, col63];\n  const [row65, col65] = [row64, col64];\n  const [row66, col66] = [row65, col65];\n  const [row67, col67] = [row66, col66];\n  const [row68, col68] = [row", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  let i = 0;\n  let j = len - 1;\n  let tmp = 0;\n  let flag = 0;\n  while (i < j) {\n    if (array[i] > array[j]) {\n      tmp = array[i];\n      array[i] = array[j];\n      array[j] = tmp;\n      flag = 1;\n    }\n    if (array[i] < array[j]) {\n      tmp = array[i];\n      array[i] = array[j];\n      array[j] = tmp;\n      flag = -1;\n    }\n    i++;\n    j--;\n  }\n  if (flag === 0) {\n    return array;\n  }\n  return array.sort((a, b) => {\n    return a - b;\n  });\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let alphabet_len = alphabet.length;\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const len = lst.length\n  let min = lst[0]\n  let minIndex = 0\n  for (let i = 1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const words = S.split(/[.,!?\\s]/)\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boring words. A boring word is a sentence th at st arts wi t h the w ord \"I\". \n \n  For exam ple:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) {\n    return true;\n  }\n  if (x === y - z) {\n    return true;\n  }\n  if (x === z + y) {\n    return true;\n  }\n  if (x === z - y) {\n    return true;\n  }\n  if (x === y * z) {\n    return true;\n  }\n  if (x === y / z) {\n    return true;\n  }\n  if (x === z * y) {\n    return true;\n  }\n  if (x === z / y) {\n    return true;\n  }\n  if (x === y % z) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {\n    return true;\n  }\n  if (x === y ** z) {\n    return true;\n  }\n  if (x === z ** y) {\n    return true;\n  }\n  if (x === z ** z) {\n    return true;\n  }\n  if (x === y % y) {\n    return true;\n  }\n  if (x === y ** y) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = message.indexOf(letter);\n    const nextLetter = message[index + 1];\n    if (nextLetter === letter) {\n      encoded += letter;\n    } else {\n      encoded += letter.toUpperCase();\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  const message = message.toUpperCase();\n  const decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    const index = message.indexOf(letter);\n    const nextLetter = message[index + 1];\n    if (nextLetter === letter) {\n      decoded += letter;\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst test = () => {\n  const message = 'This is a message';\n  const encoded = encode(message);\n  console.log(encoded);\n  const decoded = decode(encoded);\n  console.log(decoded);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i];\n    let prime = isPrime(curr);\n    if (prime) {\n      max = Math.max(max, curr);\n    }\n  }\n  return max;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict2 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict3 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict4 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict5 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict6 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict7 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict8 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict9 = (dict) => {\n  const keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] ==='string') {\n      if (keys[i].toUpperCase()!== keys[i].toLowerCase()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict10 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  let product = a_unit * b_unit;\n  let result = product % 10;\n  return result;\n};\n\n/*\n  Complete the function that takes two strings and returns their product.\n  Assume that the inputs are always valid.\n  Examples:\n  multiply(\"ab\", \"c\") should return \"abc\".\n  multiply(\"ab\", \"cd\") should return \"abcd\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"a\", \"aa\") should return \"aaaa\".\n  multiply(\"a\", \"aaa\") should return \"aaaa\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply(\"abc\", \"xyz\") should return \"abcxyz\".\n  multiply", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConson", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value);\n  const nums = [num, num + 1, num - 1];\n  const closest = nums.find((n) => Math.abs(num - n) < Math.abs(num - nums[0]));\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 2}
