{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    let hasClose = false\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let delta = numbers[i + 1] - numbers[i]\n        if (Math.abs(delta) < threshold) {\n            hasClose = true\n        }\n    }\n    return hasClose\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 1.0)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements1 = (numbers, threshold) => {\n    let hasClose = false\n    for (let i = 0; i < numbers.length - 1; i++) {\n        let delta = numbers[i + 1] - numbers[i]\n        if (Math.abs(delta) <= threshold) {\n            hasClose = true\n        }\n    }\n    return hasClose\n}\n\nmodule.exports = {\n    hasCloseElements,\n    hasCloseElements1\n}<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Use a stack to keep track of the parens and their level.\n  let stack = []\n  let result = []\n  let last_open = 0\n  paren_string.forEach((char, index) => {\n    // If the char is a '(' or ')', then we want to push the char onto the stack and increment the level.\n    if (char === '(' || char === ')') {\n      stack.push(char)\n      last_open = index\n    }\n    // If the char is a '(' and the level is 0, then we want to pop the stack and append the string between the last open\n    // and this open paren.\n    if (char === '(' && stack.length === 0) {\n      result.push(paren_string.slice(last_open + 1, index))\n      last_open = index\n    }\n    // If the char is a ')', then we want to pop the stack and append the string between the last open\n    // and this open paren.\n    if (char === ')') {\n      result.push(paren_string.slice(last_open + 1, index))\n      last_open = index\n    }\n  })\n  // If the stack is empty, then we have the result. Else we pop the last item off the stack and append the remaining\n  // parens.\n  if (stack.length === 0) {\n    result.push(paren_string.slice(last_open + 1))\n  } else {\n    result.push(paren_string.slice(last_open + 1, paren_string.length))\n  }\n  return result\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n/*\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(`${message} Test #${test_number} failed!`);\n  }\n}\nassert(\n  (() => {\n    let stack = []\n    let result = []\n    let last_open = 0\n    paren_string.forEach((char, index) => {\n      // If the char is a '(' or ')', then we want to push the char onto the stack and increment the level.\n      if (char === '(' || char === ')') {\n        stack.push(char)\n        last_open = index\n      }\n      // If the char is a '(' and the level is 0, then we want to pop the stack and append the string between the last open\n      // and this open paren.\n      if (char === '(' && stack.length === 0) {\n        result.push(paren_string.slice(last_open + 1, index))\n        last_open = index\n      }\n      // If the char is a ')', then we want to pop the stack and append the string between the last open\n      // and this open paren.\n      if (char === ')') {\n        result.push(paren_string.slice(last_open + 1, index))\n        last_open = index\n      }\n    })\n    // If the stack is empty, then we have the result. Else we pop the last item off the stack and append the remaining\n    // parens.\n    if (stack.length === 0) {\n      result.push(paren_string.slice(last_open + 1))\n    } else {\n      result.push(paren_string.slice(last_open + 1, paren_string.length))\n    }\n    return result\n  })()\n  ),\n  'First test',\n  1\n);\n\nassert(\n  (() => {\n    let stack = []\n    let result = []\n    let last_open = 0\n    paren_string.forEach((char, index) => {\n      // If the char is a '(' or ')', then we want to push the char onto the stack and increment the level.\n      if (char === '(' || char === ')') {\n        stack.push(char)\n        last_open = index\n      }\n      // If the char is a '(' and the level is 0, then we want to pop the stack and append the string between the last open\n      // and this open paren.\n      if (char === '(' && stack.length === 0) {\n        result.push(paren_string.slice(last_open + 1, index))\n        last_open = index\n      }\n      // If the char is a ')', then we want to pop the stack and append the string between the last open\n      // and this open paren.\n      if (char === ')') {\n        result.push(paren_string.slice(last_open + 1, index))\n        last_open = index\n      }\n    })\n    // If the stack is empty, then we have the result. Else we pop the last item off the stack and append the remaining\n    // parens.\n    if (stack.length === 0) {\n      result.push(paren_string.slice(last_open + 1))\n    } else {\n      result.push(paren_string.slice(last_open + 1, paren_string.length))\n    }\n    return result\n  })()\n ,\n  'Second test',\n  2\n);\n\nassert(\n  (() => {\n    let stack = []\n    let result = []\n    let last_open = 0\n    paren_string.forEach((char, index) => {\n      // If the char is a '(' or ')', then we want to push the char onto the stack and increment the level.\n      if (char === '(' || char === ')') {\n        stack.push(char)\n        last_open = index\n      }\n      // If the char is a '(' and the level is 0, then we want to pop the stack and append the string between the last open\n      // and this open paren.\n      if (char === '(' && stack.length === 0) {\n        result.push(paren_string.slice(last_open + 1, index))\n        last_open = index\n      }\n      // If the char is"}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    var x = Math.trunc(number);\n    return (number - x).toFixed(0);\n};\n\n/*\n  >>> truncateNumber(2.5)\n  '2.5'\n  >>> truncateNumber(2.25)\n  '2.25'\n  >>> truncateNumber(2.5, 1)\n  '2.5'\n  >>> truncateNumber(2.25, 1)\n  '2.2'\n  >>> truncateNumber(2.5, 2)\n  '2.5'\n  >>> truncateNumber(2.25, 2)\n  '2.2'\n  >>> truncateNumber(2.5, 3)\n  '2.5'\n  >>> truncateNumber(2.25, 3)\n  '2.2'\n  >>> truncateNumber(2.5, 4)\n  '2.5'\n  >>> truncateNumber(2.25, 4)\n  '2.2'\n  >>> truncateNumber(2.5, 5)\n  '2.5'\n  >>> truncateNumber(2.25, 5)\n  '2.2'\n  >>> truncateNumber(2.5, 6)\n  '2.5'\n  >>> truncateNumber(2.25, 6)\n  '2.2'\n  >>> truncateNumber(2.5, 7)\n  '2.5'\n  >>> truncateNumber(2.25, 7)\n  '2.2'\n  >>> truncateNumber(2.5, 8)\n  '2.5'\n  >>> truncateNumber(2.25, 8)\n  '2.2'\n  >>> truncateNumber(2.5, 9)\n  '2.5'\n  >>> truncateNumber(2.25, 9)\n  '2.2'\n  >>> truncateNumber(2.5, 10)\n  '2.5'\n  >>> truncateNumber(2.25, 10)\n  '2.2'\n  >>> truncateNumber(2.5, 11)\n  '2.5'\n  >>> truncateNumber(2.25, 11)\n  '2.2'\n  >>> truncateNumber(2.5, 12)\n  '2.5'\n  >>> truncateNumber(2.25, 12)\n  '2.2'\n  >>> truncateNumber(2.5, 13)\n  '2.5'\n  >>> truncateNumber(2.25, 13)\n  '2.2'\n  >>> truncateNumber(2.5, 14)\n  '2.5'\n  >>> truncateNumber(2.25, 14)\n  '2.2'\n  >>> truncateNumber(2.5, 15)\n  '2.5'\n  >>> truncateNumber(2.25, 15)\n  '2.2'\n  >>> truncateNumber(2.5, 16)\n  '2.5'\n  >>> truncateNumber(2.25, 16)\n  '2.2'\n  >>> truncateNumber(2.5, 17)\n  '2.5'\n  >>> truncateNumber(2.25, 17)\n  '2.2'\n  >>> truncateNumber(2.5, 18)\n  '2.5'\n  >>> truncateNumber(2.25, 18)\n  '2.2'\n  >>> truncateNumber(2.5, 19)\n  '2.5'\n  >>> truncateNumber(2.25, 19)\n  '2.2'\n  >>> truncateNumber(2.5, 20)\n  '2.5'\n  >>> truncateNumber(2.25, 20)\n  '2.2'\n  >>> truncateNumber(2.5, 21)\n  '2.5'\n  >>> truncateNumber(2.25, 21)\n  '2.2'\n  >>> truncateNumber(2.5, 22)\n  '2.5'\n  >>> truncateNumber(2.25, 22)\n  '2.2'\n  >>> truncateNumber(2.5, 23)\n  '2.5'\n  >>> truncateNumber(2.25, 23)\n  '2.2'\n  >>> truncateNumber(2.5, 24)\n  '2.5'\n  >>> truncateNumber(2.25, 24)\n  '2.2'\n  >>> truncateNumber(2.5, 25)\n  '2.5'\n  >>> truncateNumber(2.25, 25)\n  '2.2'\n  >>> truncateNumber(2.5, 26)\n  '2.5'\n  >>> truncateNumber(2.25, 26)\n  '2.2'\n  >>> truncateNumber(2.5, 27)\n  '2.5'\n  >>> truncateNumber(2.25, 27)\n  '2.2'\n  >>> truncateNumber(2.5, 28)\n  '2.5'\n  >>> truncateNumber(2.25, 28)\n  '2.2'\n  >>> truncateNumber(2.5, 29)\n  '2.5'\n  >>> truncateNumber(2.25, 29)\n  '2.2'\n  >>> truncateNumber(2.5, 30)\n  '2.5'\n  >>> truncateNumber(2.25, 30)\n  '2.2'\n  >>> truncateNumber(2.5, 31)\n  '2.5'\n  >>> truncateNumber(2.25, 31)\n  '2.2'\n  >>> truncateNumber(2.5, 32)\n  '2.5'\n  >>> truncateNumber(2.25, 32)\n  '2.2'\n  >>> truncateNumber(2.5, 33)\n  '2.5'\n  >>> truncateNumber(2.25, 33)\n  '2.2'\n  >>> truncateNumber(2.5, 34)\n  '2.5'\n  >>> truncateNumber(2.25, 34)\n  '2.2'\n  >>> truncateNumber(2.5, 35)\n  '2.5'\n  >>> truncateNumber(2.25, 35)\n  '2.2'"}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    if (operation.op === 'deposit') {\n      sum += operation.amount;\n      balance += operation.amount;\n    } else if (operation.op === 'withdraw') {\n      balance -= operation.amount;\n    }\n  }\n  return balance < 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = average(numbers)\n  let diffs = []\n  for (let i = 0; i < numbers.length; i++) {\n    diffs.push(Math.abs(numbers[i] - mean))\n  }\n  return sum(diffs) / numbers.length\n}\n\n// [3, 5, 8, 9, 13, 14] -> [5.0, 8.0, 9.0]\nconst sumArray = (array) => array.reduce((acc, val) => acc + val)\n\n/*\n  Given a list of numbers, find the largest deviation from the mean value of the dataset. The mean deviation is the mean difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst largestDeviation = (numbers) => {\n  let mean = average(numbers)\n  let diffs = []\n  for (let i = 0; i < numbers.length; i++) {\n    diffs.push(Math.abs(numbers[i] - mean))\n  }\n  return max(diffs)\n}\n\n/*\n  Find the mean deviation of the dataset. The mean deviation is the mean difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanDeviation = (numbers) => {\n  return average(numbers)\n}\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  largestDeviation,\n  meanDeviation,\n  sumArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let index = 0;\n\n  while (index < len) {\n    result.push(numbers[index]);\n    if (index < len - 1) {\n      result.push(delimeter);\n    }\n    index++;\n  }\n\n  return result;\n};\n\n// END_OF_FILE\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const arr = [];\n  let stack = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === ')') {\n      stack--;\n      if (stack === 0) {\n        arr.push(stack);\n      }\n    } else if (paren_string[i] === '(') {\n      stack++;\n      if (stack === 0) {\n        arr.push(stack);\n      }\n    }\n  }\n  return arr;\n};\n\n// Test function\nconst test_parseNestedParens = (paren_string, result) => {\n  const result_parsed = parseNestedParens(paren_string);\n  expect(result_parsed).toEqual(result);\n};\n\n// Test cases\ntest_parseNestedParens('(()()) ((())) () ((())()())', [2, 3, 1, 3]);\ntest_parseNestedParens('(()()) ((())) () ((())()())', [2, 3, 1, 3]);\ntest_parseNestedParens('()()) ((())()) () ((())()())', [2, 3, 1, 3]);\ntest_parseNestedParens('()()) () () ()', [1, 2, 1, 2]);\ntest_parseNestedParens('()()()()', [1]);\ntest_parseNestedParens('()()()', [1]);\ntest_parseNestedParens('()()()', [1]);\ntest_parseNestedParens('()()()()', [1]);\ntest_parseNestedParens('(())()())', [2, 1]);\ntest_parseNestedParens('()()())', [1, 1]);\ntest_parseNestedParens('(())())', [1, 1]);\ntest_parseNestedParens('()()', [1]);\ntest_parseNestedParens('()()', [1]);\ntest_parseNestedParens('()()', [1]);\ntest_parseNestedParens('()()()', [1]);\ntest_parseNestedParens('()()()()', [1]);\ntest_parseNestedParens('()()()()()', [1]);\ntest_parseNestedParens('()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()()()()()()', [1]);\ntest_parseNestedParens('()()()()()()()()()()()()()()()()()()()()()()()', [1]);\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const list = strings.slice();\n  const index = list.indexOf(substring);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Filter a list of numbers only for numbers that are less than a given number\n  >>> filterLessThan(1, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> filterLessThan(1, [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  */\nconst filterLessThan = (number, numbers) => {\n  const list = numbers.slice();\n  const index = list.indexOf(number);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Filter a list of numbers only for numbers that are less than or equal to a given number\n  >>> filterLessThanEqualTo(1, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> filterLessThanEqualTo(1, [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  >>> filterLessThanEqualTo(6, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst filterLessThanEqualTo = (number, numbers) => {\n  const list = numbers.slice();\n  const index = list.indexOf(number);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Filter a list of numbers only for numbers that are greater than a given number\n  >>> filterGreaterThan(6, [1, 2, 3, 4, 5])\n  [5, 6]\n  >>> filterGreaterThan(6, [1, 2, 3, 4, 5, 6])\n  [5, 6]\n  >>> filterGreaterThan(1, [1, 2, 3, 4, 5, 6])\n  [5, 6]\n  */\nconst filterGreaterThan = (number, numbers) => {\n  const list = numbers.slice();\n  const index = list.indexOf(number);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Filter a list of numbers only for numbers that are greater than or equal to a given number\n  >>> filterGreaterThanEqualTo(1, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> filterGreaterThanEqualTo(1, [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  >>> filterGreaterThanEqualTo(6, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst filterGreaterThanEqualTo = (number, numbers) => {\n  const list = numbers.slice();\n  const index = list.indexOf(number);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Filter a list of numbers only for numbers that are equal to a given number\n  >>> filterEqualTo(6, [1, 2, 3, 4, 5])\n  [6]\n  >>> filterEqualTo(6, [1, 2, 3, 4, 5, 6])\n  [6]\n  >>> filterEqualTo(1, [1, 2, 3, 4, 5, 6])\n  [6]\n  */\nconst filterEqualTo = (number, numbers) => {\n  const list = numbers.slice();\n  const index = list.indexOf(number);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n\n/* Filter a list of numbers only for numbers that are not equal to a given number\n  >>> filterNotEqualTo(6, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> filterNotEqualTo(6, [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  >>> filterNotEqualTo(1, [1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst filterNotEqualTo = (number, numbers) => {\n  const list = numbers.slice();\n  const index = list.indexOf(number);\n  if (index!== -1) {\n    list.splice(index, 1);\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if(!numbers ||!numbers.length) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for(let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nmodule.exports = sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = [];\n  let maxIndex = 0;\n\n  // Find the maximum\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > maxes[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n\n  // Generate the rolling maximums\n  let maxesGenerated = [];\n  let j = 0;\n  let maxIndexGenerated = 0;\n\n  while (maxIndexGenerated < maxIndex) {\n    maxesGenerated.push(numbers[j]);\n    j++;\n\n    if (j > maxIndex) {\n      j = 0;\n    }\n\n    maxIndexGenerated++;\n  }\n\n  return maxesGenerated;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('') + string.split('').reverse().join('');\n}\n\n/* Find the longest prefix that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cat')\n  'cat'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('') + string.split('').join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('') + string.split('').join('');\n}\n\n/* Find the longest prefix that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').join('') + string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that starts with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').join('') + string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').join('') + string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that starts with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string prefix that comes after the palindromic prefix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('') + string.split('').join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalind"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    const aArray = a.split('');\n    const bArray = b.split('');\n\n    const aLength = aArray.length;\n    const bLength = bArray.length;\n    const result = [];\n\n    for (let i = 0; i < aLength; i += 1) {\n        const aChar = aArray[i];\n        const bChar = bArray[i];\n\n        result.push(aChar ^ bChar);\n    }\n\n    return result.join('');\n};\n\nexport default stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = 0;\n  strings.forEach((string) => {\n    if (string.length > longest) {\n      longest = string.length;\n    }\n  });\n  return longest === 0? '0' : strings.find((string) => string.length === longest);\n};\n\n/* Returns the shortest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  let shortest = 0;\n  strings.forEach((string) => {\n    if (string.length < shortest) {\n      shortest = string.length;\n    }\n  });\n  return shortest === 0? '0' : strings.find((string) => string.length === shortest);\n};\n\nexport default {\n  longest,\n  shortest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    while (b > 0) {\n        const tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return a;\n}\n\n/*\n  Returns the least common multiple of two integers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n    return (a * b) / greatestCommonDivisor(a, b);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigits(25)\n  10\n  >>> sumDigits(35)\n  7\n  */\nconst sumDigits = (n) => {\n    let sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigits(10)\n  10\n  >>> sumDigits(7)\n  7\n  >>> sumDigits(10)\n  10\n  >>> sumDigits(11)\n  11\n  >>> sumDigits(5)\n  5\n  >>> sumDigits(0)\n  0\n  */\nconst sumDigitsRecursive = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return sumDigitsRecursive(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive(10)\n  10\n  >>> sumDigitsRecursive(7)\n  7\n  >>> sumDigitsRecursive(10)\n  10\n  >>> sumDigitsRecursive(11)\n  11\n  >>> sumDigitsRecursive(5)\n  5\n  >>> sumDigitsRecursive(0)\n  0\n  */\nconst sumDigitsRecursive2 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n + sumDigitsRecursive2(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive2(10)\n  10\n  >>> sumDigitsRecursive2(7)\n  7\n  >>> sumDigitsRecursive2(10)\n  10\n  >>> sumDigitsRecursive2(11)\n  11\n  >>> sumDigitsRecursive2(5)\n  5\n  >>> sumDigitsRecursive2(0)\n  0\n  */\nconst sumDigitsRecursive3 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n * sumDigitsRecursive3(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive3(10)\n  10\n  >>> sumDigitsRecursive3(7)\n  7\n  >>> sumDigitsRecursive3(10)\n  10\n  >>> sumDigitsRecursive3(11)\n  11\n  >>> sumDigitsRecursive3(5)\n  5\n  >>> sumDigitsRecursive3(0)\n  0\n  */\nconst sumDigitsRecursive4 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n * sumDigitsRecursive4(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive4(10)\n  10\n  >>> sumDigitsRecursive4(7)\n  7\n  >>> sumDigitsRecursive4(10)\n  10\n  >>> sumDigitsRecursive4(11)\n  11\n  >>> sumDigitsRecursive4(5)\n  5\n  >>> sumDigitsRecursive4(0)\n  0\n  */\nconst sumDigitsRecursive5 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n * sumDigitsRecursive5(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive5(10)\n  10\n  >>> sumDigitsRecursive5(7)\n  7\n  >>> sumDigitsRecursive5(10)\n  10\n  >>> sumDigitsRecursive5(11)\n  11\n  >>> sumDigitsRecursive5(5)\n  5\n  >>> sumDigitsRecursive5(0)\n  0\n  */\nconst sumDigitsRecursive6 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n * sumDigitsRecursive6(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive6(10)\n  10\n  >>> sumDigitsRecursive6(7)\n  7\n  >>> sumDigitsRecursive6(10)\n  10\n  >>> sumDigitsRecursive6(11)\n  11\n  >>> sumDigitsRecursive6(5)\n  5\n  >>> sumDigitsRecursive6(0)\n  0\n  */\nconst sumDigitsRecursive7 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n * sumDigitsRecursive7(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive7(10)\n  10\n  >>> sumDigitsRecursive7(7)\n  7\n  >>> sumDigitsRecursive7(10)\n  10\n  >>> sumDigitsRecursive7(11)\n  11\n  >>> sumDigitsRecursive7(5)\n  5\n  >>> sumDigitsRecursive7(0)\n  0\n  */\nconst sumDigitsRecursive8 = (n) => {\n    if (n == 0) {\n        return 0;\n    }\n    return n * sumDigitsRecursive8(n % 10);\n}\n\n/*\n  Returns the sum of all the digits of an integer\n  >>> sumDigitsRecursive8(10)\n"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const output = [];\n\n  const getAllPrefixes = (string, output) => {\n    const i = string.length;\n    let prefix = string;\n\n    while (i--) {\n      const subString = string.slice(0, i + 1);\n      if (output.indexOf(subString) < 0) {\n        output.push(subString);\n      }\n    }\n\n    return output;\n  };\n\n  return getAllPrefixes(string, output);\n};\n\nexport { allPrefixes };\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/* Returns a string containing a sequence of a and b, separated by spaces.\n  >>> pairSequence(0, 1)\n  '0 1'\n  >>> pairSequence(2, 3)\n  '0 1 2 3'\n  */\nconst pairSequence = (a, b) => {\n  let s = '';\n  for (let i = 0; i < a; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < b; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Returns a string containing a sequence of a, b, and c, separated by spaces.\n  >>> tripleSequence(0, 1, 2)\n  '0 1 2'\n  >>> tripleSequence(3, 4, 5)\n  '0 1 2 3 4 5'\n  */\nconst tripleSequence = (a, b, c) => {\n  let s = '';\n  for (let i = 0; i < a; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < b; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < c; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Returns a string containing a sequence of a, b, c, and d, separated by spaces.\n  >>> quadSequence(0, 1, 2, 3)\n  '0 1 2 3'\n  >>> quadSequence(4, 5, 6, 7)\n  '0 1 2 3 4 5 6 7'\n  */\nconst quadSequence = (a, b, c, d) => {\n  let s = '';\n  for (let i = 0; i < a; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < b; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < c; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < d; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Returns a string containing a sequence of a, b, c, d, and e, separated by spaces.\n  >>> quintSequence(0, 1, 2, 3, 4)\n  '0 1 2 3 4'\n  >>> quintSequence(5, 6, 7, 8, 9)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst quintSequence = (a, b, c, d, e) => {\n  let s = '';\n  for (let i = 0; i < a; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < b; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < c; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < d; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < e; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Returns a string containing a sequence of a, b, c, d, e, and f, separated by spaces.\n  >>> sextSequence(0, 1, 2, 3, 4, 5)\n  '0 1 2 3 4 5'\n  >>> sextSequence(6, 7, 8, 9, 10, 11)\n  '0 1 2 3 4 5 6 7 8 9 10 11'\n  */\nconst sextSequence = (a, b, c, d, e, f) => {\n  let s = '';\n  for (let i = 0; i < a; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < b; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < c; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < d; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < e; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < f; i++) {\n    s += `${i + 1} `;\n  }\n  return s;\n};\n\n/* Returns a string containing a sequence of a, b, c, d, e, f, g, and h, separated by spaces.\n  >>> octSequence(0, 1, 2, 3, 4, 5, 6)\n  '0 1 2 3 4 5 6'\n  >>> octSequence(7, 8, 9, 10, 11, 12, 13, 14)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n  */\nconst octSequence = (a, b, c, d, e, f, g, h) => {\n  let s = '';\n  for (let i = 0; i < a; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < b; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < c; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < d; i++) {\n    s += `${i + 1} `;\n  }\n  for (let i = 0; i < e; i++) {"}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('');\n  const counter = {};\n  for (const char of charArray) {\n    if (!counter[char.toLowerCase()]) {\n      counter[char.toLowerCase()] = 0;\n    }\n    counter[char.toLowerCase()]++;\n  }\n  return Object.keys(counter).length;\n};\n\n/**\n  * @method countCharacters\n  * @param {string} string\n  * @return {number}\n  * @description Count the number of occurrences of each character in a string.\n  * For example, count the occurrences of 'x' in 'abcxyz'.\n  * >>> countCharacters('abcxyz')\n  * {\n  *   'a': 2,\n  *   'b': 1,\n  *   'c': 1,\n  *   'x': 2,\n  *   'y': 1,\n  *   'z': 1\n  * }\n  * */\nconst countCharacters = (string) => {\n  const counter = {};\n  const charArray = string.split('');\n  for (const char of charArray) {\n    if (!counter[char]) {\n      counter[char] = 0;\n    }\n    counter[char]++;\n  }\n  return counter;\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countCharacters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    const beat_list = [];\n    const current_beat = 0;\n    let beat_length = 0;\n    const beat_counter = 0;\n    let beat_start = 0;\n    let beat_end = 0;\n    for (let i = 0; i < music_string.length; i++) {\n        if (music_string[i] === 'o') {\n            beat_start = beat_counter;\n            beat_end = beat_counter + 1;\n            beat_list.push(beat_length);\n            beat_length = 0;\n            beat_counter++;\n        } else {\n            beat_length++;\n        }\n    }\n    beat_list.push(beat_length);\n    return beat_list;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        let start = i;\n        while (start < string.length && string[start] === substring[0]) {\n            count += 1;\n            start += 1;\n        }\n    }\n    return count;\n}\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const list = numbers.split(' ');\n  const newList = [];\n  list.forEach(number => {\n    const number = parseInt(number, 10);\n    newList.push(number);\n  });\n  newList.sort();\n  return newList.join(' ');\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n\n  return [min, max];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[0] - min) / (max - min),\n    (numbers[1] - min) / (max - min),\n    (numbers[2] - min) / (max - min),\n    (numbers[3] - min) / (max - min),\n    (numbers[4] - min) / (max - min),\n    (numbers[5] - min) / (max - min)\n  ]\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a non-linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitNonLinear = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[0] - min) / (max - min),\n    (numbers[1] - min) / (max - min),\n    (numbers[2] - min) / (max - min),\n    (numbers[3] - min) / (max - min),\n    (numbers[4] - min) / (max - min),\n    (numbers[5] - min) / (max - min)\n  ]\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a non-linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitNonLinearNonLinear = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[0] - min) / (max - min),\n    (numbers[1] - min) / (max - min),\n    (numbers[2] - min) / (max - min),\n    (numbers[3] - min) / (max - min),\n    (numbers[4] - min) / (max - min),\n    (numbers[5] - min) / (max - min)\n  ]\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitNonLinearLinear = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[0] - min) / (max - min),\n    (numbers[1] - min) / (max - min),\n    (numbers[2] - min) / (max - min),\n    (numbers[3] - min) / (max - min),\n    (numbers[4] - min) / (max - min),\n    (numbers[5] - min) / (max - min)\n  ]\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a non-linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitLinear = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[0] - min) / (max - min),\n    (numbers[1] - min) / (max - min),\n    (numbers[2] - min) / (max - min),\n    (numbers[3] - min) / (max - min),\n    (numbers[4] - min) / (max - min),\n    (numbers[5] - min) / (max - min)\n  ]\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a non-linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitLinearNonLinear = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    (numbers[0] - min) / (max - min),\n    (numbers[1] - min) / (max - min),\n    (numbers[2] - min) / (max - min),\n    (numbers[3] - min) / (max - min),\n    (numbers[4] - min) / (max - min),\n    (numbers[5] - min) / (max - min)\n  ]\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnitNonLinear,\n  rescaleToUnitNonLinearNonLinear,\n  rescaleToUnitNonLinearLinear,\n  rescaleToUnitLinear,\n  rescale"}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/*\n  Filters the specified list of strings by removing all those which do not\n  match the specified regular expression\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]+/)\n  ['123abc', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[^a-z]/)\n  ['123abc', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[^a-z]/)\n  ['123abc', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterStrings(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]/)\n  ['abc', 'abc123', 'abcabc']\n  */\nconst filterStrings = (values, pattern) => {\n  const result = [];\n  values.forEach(value => {\n    if (pattern.test(value)) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/*\n  Filters the specified list of lists by removing all those which do not match\n  the specified regular expression\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]+/)\n  ['123abc', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[^a-z]/)\n  ['123abc', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[^a-z]/)\n  ['123abc', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterLists(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]/)\n  ['abc', 'abc123', 'abcabc']\n  */\nconst filterLists = (values, pattern) => {\n  const result = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      value.forEach(v => {\n        if (pattern.test(v)) {\n          result.push(v);\n        }\n      });\n    }\n  });\n  return result;\n};\n\n/*\n  Filters the specified list of dictionaries by removing all those which do not\n  match the specified regular expression\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]+/)\n  ['123abc', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[^a-z]/)\n  ['123abc', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[0-9]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[^a-z]/)\n  ['123abc', 'abcabc']\n  >>> filterDicts(['a', 'abc', 'abc123', '123abc', 'abcabc'], /[a-z]/)\n  ['abc', 'abc123', 'abcabc"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n// This is the function that will be called when the string length is called\nconst strlen_func = (string) => {\n    return strlen(string);\n};\n\n// This is the actual function that will be called\nconst function_strlen = strlen_func;\n\n// This is the function that will be called when the string length is called\nconst function_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func = strlen_func;\n\n// This is the actual function that will be called\nconst function_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_strlen_func_"}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors.sort()[divisors.length - 1];\n};\n\n/* Find for a given number n the largest number dividing n evenly, less than n\n  >>> largestEvenDivisor(15)\n  3\n  */\nconst largestEvenDivisor = (n) => {\n  let i = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 1; i < sqrt; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Find for a given number n the smallest number that divides n and is also prime\n  >>> smallestPrimeDivisor(15)\n  3\n  */\nconst smallestPrimeDivisor = (n) => {\n  let i = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  return i;\n};\n\nconst isPrimeFast = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 6; i < sqrt; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Find for a given number n the smallest number that divides n evenly and is also prime\n  >>> smallestEvenPrimeDivisor(15)\n  3\n  */\nconst smallestEvenPrimeDivisor = (n) => {\n  let i = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = {\n  largestDivisor,\n  largestEvenDivisor,\n  isPrime,\n  smallestPrimeDivisor,\n  smallestEvenPrimeDivisor,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let x = n;\n  while (x > 1) {\n    for (let i = 2; i * i <= x; i++) {\n      if (x % i === 0) {\n        factors.push(i);\n        x = x / i;\n      }\n    }\n  }\n  return factors;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors = (n) => {\n  let count = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count = count + 1;\n    }\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors2 = (n) => {\n  let count = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count = count + 1;\n    }\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors3 = (n) => {\n  let count = 1;\n  let x = n;\n  while (x > 1) {\n    for (let i = 2; i <= x; i++) {\n      if (x % i === 0) {\n        count = count + 1;\n      }\n    }\n    x = x / 2;\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors4 = (n) => {\n  let count = 1;\n  let x = n;\n  while (x > 1) {\n    for (let i = 2; i <= x; i++) {\n      if (x % i === 0) {\n        count = count + 1;\n      }\n    }\n    x = x / 2;\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors5 = (n) => {\n  let count = 1;\n  let x = n;\n  while (x > 1) {\n    for (let i = 3; i <= x; i = i + 2) {\n      if (x % i === 0) {\n        count = count + 1;\n      }\n    }\n    x = x / 2;\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors6 = (n) => {\n  let count = 1;\n  let x = n;\n  while (x > 1) {\n    for (let i = 3; i <= x; i = i + 2) {\n      if (x % i === 0) {\n        count = count + 1;\n      }\n    }\n    x = x / 2;\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors7 = (n) => {\n  let count = 1;\n  let x = n;\n  while (x > 1) {\n    for (let i = 3; i <= x; i = i + 2) {\n      if (x % i === 0) {\n        count = count + 1;\n      }\n    }\n    x = x / 2;\n  }\n  return count;\n}\n\n/*\n  * Returns the number of divisors for a given number. Input number should correspond to the product of all divisors.\n  *\n  * Note: this method is a recursive solution.\n  *\n  * Input: 20\n  * Output: 6\n  *\n  * Note: this method uses recursion.\n  */\nconst numberOfDivisors8 = (n) => {\n  let count = 1;\n  let x = n;\n  while (x > 1) {\n    for (let i = 3; i <= x; i = i + 2) {\n      if (x % i === 0) {\n        count = count + 1;\n      }\n    }\n    x = x / 2;\n"}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqNums = []\n  let number = 0\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers.indexOf(number) === -1) {\n      uniqNums.push(number)\n    }\n    number = numbers[i]\n  }\n  return uniqNums\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  >>> removeDuplicates([1, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 7, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let uniqNums = []\n  let i = 0\n  while (i < numbers.length) {\n    if (uniqNums.indexOf(numbers[i]) === -1) {\n      uniqNums.push(numbers[i])\n    }\n    i += 1\n  }\n  return uniqNums\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  >>> removeDuplicates([1, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 7, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let uniqNums = []\n  let i = 0\n  while (i < numbers.length) {\n    if (uniqNums.indexOf(numbers[i]) === -1) {\n      uniqNums.push(numbers[i])\n      i += 1\n    } else {\n      i += 1\n    }\n  }\n  return uniqNums\n}\n\nmodule.exports = {\n  removeDuplicates,\n  removeDuplicates2,\n  removeDuplicates3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    let newStr = string;\n\n    for (let i = 0; i < newStr.length; i++) {\n        if (newStr[i] === string[i].toLowerCase()) {\n            newStr = newStr.toUpperCase();\n        } else {\n            newStr = newStr.toLowerCase();\n        }\n    }\n\n    return newStr;\n};\n\n/*\n  # Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  #\n  # @param {String} string\n  # @return {String}\n  #\n  # @example\n  #\n  #     flipCase('hello')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'hello'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'heLLo'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('hello')\n  #     //=> 'hello'\n  #\n  #     flipCase('hello')\n  #     //=> 'hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('hello')\n  #     //=> 'hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'heLLo'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'heLLo'\n  #\n  #     flipCase('hello')\n  #     //=> 'hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('HELLO')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('heLLo')\n  #     //=> 'HELLO'\n  #\n  #     flipCase('Hello')\n  #     //=> 'Hello'\n  #\n  #     "}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) return ''\n\n  let joined = ''\n  strings.forEach(s => joined += s)\n\n  return joined\n}\n\n/* Converts a list of words into a list of words with one space in between each word.\n  >>> convertWordsToWords('hello world')\n  ['hello', 'world']\n  */\nconst convertWordsToWords = (words) => {\n  return words.split(' ').map(word => { return word.trim() })\n}\n\n/* Splits a string into a list of words.\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  >>> split('a b c ')\n  ['a', 'b', 'c']\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (text) => {\n  let words = text.split(' ')\n  let trimmedWords = words.map(word => { return word.trim() })\n\n  return trimmedWords\n}\n\n/* Remove all spaces and return a string\n  >>> removeSpaces('hello world')\n  'hello world'\n  */\nconst removeSpaces = (text) => {\n  return text.replace(/\\s+/g, '')\n}\n\n/* Return the length of a string.\n  >>> len('hello world')\n  11\n  */\nconst len = (text) => {\n  return text.length\n}\n\n/* Returns the string representation of an array.\n  >>> toString([1, 2, 3])\n  '1,2,3'\n  >>> toString([1, 2, 3, 4, 5])\n  '1,2,3,4,5'\n  */\nconst toString = (arr) => {\n  if (Array.isArray(arr)) {\n    return arr.join(', ')\n  } else {\n    return `${arr}`\n  }\n}\n\n/* Return a string representation of the characters in a string.\n  >>> charString('hello world')\n  'hello world'\n  >>> charString('abc')\n  'abc'\n  */\nconst charString = (text) => {\n  return text.split('').map(char => char.toString()).join('')\n}\n\n/* Return the number of times a character appears in a string.\n  >>> count('abcabc', 'a')\n  2\n  >>> count('abcabc', 'b')\n  1\n  >>> count('abcabc', 'b')\n  2\n  */\nconst count = (text, char) => {\n  return text.split(char).length - 1\n}\n\n/* Return a string with all the characters in the alphabet in the order they appear in the string.\n  >>> alphabet('hello world')\n  'hello world'\n  >>> alphabet('abc')\n  'abc'\n  >>> alphabet('abcabc')\n  'abcabc'\n  */\nconst alphabet = (text) => {\n  return text.split('').sort().join('')\n}\n\n/* Return a string with all the characters in the alphabet in reverse order.\n  >>> reverse(alphabet('hello world'))\n  'orldhello'\n  >>> reverse(alphabet('abc'))\n  'cba'\n  >>> reverse(alphabet('abcabc'))\n  'cbaab'\n  */\nconst reverse = (text) => {\n  return text.split('').reverse().join('')\n}\n\n/* Return a string that contains all the characters of the original string in random order.\n  >>> shuffle('abc')\n  'acb'\n  >>> shuffle('abcdefg')\n  'fgeabcd'\n  */\nconst shuffle = (text) => {\n  let alphabet = ''\n  for (let i = 0; i < text.length; i++) {\n    alphabet += text[i]\n  }\n\n  return alphabet.split('').sort().join('')\n}\n\n/* Return a string that contains all the characters of the original string in random order.\n  >>> shuffleAlpha('abc')\n  'cba'\n  >>> shuffleAlpha('abcdefg')\n  'efgabcd'\n  */\nconst shuffleAlpha = (text) => {\n  let alphabet = ''\n  for (let i = 0; i < text.length; i++) {\n    alphabet += text[i]\n  }\n\n  return alphabet.split('').sort().join('')\n}\n\n/* Return the index of the first occurence of the character in the string.\n  >>> indexOf('hello world', 'hello')\n  2\n  >>> indexOf('hello world', 'hello world')\n  2\n  >>> indexOf('hello world', 'hello world world')\n  -1\n  >>> indexOf('hello world', 'world hello')\n  -1\n  >>> indexOf('hello world', 'hello world ')\n  2\n  >>> indexOf('hello world', 'hello worldhello')\n  -1\n  >>> indexOf('hello world', 'hello worldhello world')\n  -1\n  >>> indexOf('hello world', 'hello worldhello worldhello')\n  -1\n  */\nconst indexOf = (text, char) => {\n  let index = text.indexOf(char)\n\n  if (index === -1) {\n    index = text.indexOf(char.toLowerCase())\n  }\n\n  if (index === -1) {\n    index = text.indexOf(char.toUpperCase())\n  }\n\n  return index\n}\n\n/* Return the index of the first occurence of the character in the string.\n  >>> indexOfAlpha('hello world', 'hello')\n  2\n  >>> indexOfAlpha('hello world', 'hello world')\n  2\n  >>> indexOfAlpha('hello world', 'hello world world')\n  -1\n  >>> indexOfAlpha('hello world', 'hello world hello')\n  -1\n  >>> indexOfAlpha('hello world', 'hello worldhello world')\n  -1\n  */\nconst indexOfAlpha = (text, char) => {\n  let index = text.indexOf(char)\n\n  if (index === -1) {\n    index = text.indexOf(char.toLowerCase())\n  }\n\n  if (index === -1) {\n    index = text.indexOf(char.toUpper"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (s.startsWith(prefix)) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of strings, but only for strings that are of a certain type.\n  >>> filterByType([],'string')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'],'string')\n  ['abc', 'array']\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'int')\n  []\n  */\nconst filterByType = (strings, type) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (typeof s === type) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of numbers, but only for numbers that are not less than a certain threshold.\n  >>> filterLessThan(['abc', 'bcd', 'cde', 'array'], 3)\n  []\n  >>> filterLessThan(['abc', 'bcd', 'cde', 'array'], 0)\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filterLessThan(['abc', 'bcd', 'cde', 'array'], 3)\n  ['array']\n  */\nconst filterLessThan = (strings, threshold) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (s > threshold) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of numbers, but only for numbers that are not greater than a certain threshold.\n  >>> filterGreaterThan(['abc', 'bcd', 'cde', 'array'], 3)\n  []\n  >>> filterGreaterThan(['abc', 'bcd', 'cde', 'array'], 0)\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filterGreaterThan(['abc', 'bcd', 'cde', 'array'], 3)\n  ['array']\n  */\nconst filterGreaterThan = (strings, threshold) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (s < threshold) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of numbers, but only for numbers that are between a certain threshold.\n  >>> filterBetween(['abc', 'bcd', 'cde', 'array'], 0, 4)\n  []\n  >>> filterBetween(['abc', 'bcd', 'cde', 'array'], 3, 6)\n  ['array']\n  >>> filterBetween(['abc', 'bcd', 'cde', 'array'], 3, 4)\n  []\n  */\nconst filterBetween = (strings, start, end) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (s >= start && s <= end) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of numbers, but only for numbers that are between a certain threshold and a certain threshold.\n  >>> filterBetween2(['abc', 'bcd', 'cde', 'array'], 0, 4, 6)\n  []\n  >>> filterBetween2(['abc', 'bcd', 'cde', 'array'], 3, 4, 6)\n  ['array']\n  >>> filterBetween2(['abc', 'bcd', 'cde', 'array'], 3, 4, 5)\n  []\n  */\nconst filterBetween2 = (strings, start, end, threshold) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (s >= start && s <= end && s > threshold) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of numbers, but only for numbers that are in a certain range.\n  >>> filterInRange(['abc', 'bcd', 'cde', 'array'], [0, 3, 6])\n  []\n  >>> filterInRange(['abc', 'bcd', 'cde', 'array'], [0, 4, 6])\n  ['array']\n  >>> filterInRange(['abc', 'bcd', 'cde', 'array'], [2, 4, 6])\n  []\n  */\nconst filterInRange = (strings, range) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (range.indexOf(s) >= 0) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\n/* Filter an input list of strings, but only for strings that are in a certain range.\n  >>> filterInRange(['abc', 'bcd', 'cde', 'array'], [0, 3, 6])\n  []\n  >>> filterInRange(['abc', 'bcd', 'cde', 'array'], [0, 4, 6])\n  ['array']\n  >>> filterInRange(['abc', 'bcd', 'cde', 'array'], [2, 4, 6])\n  []\n  */\nconst filterInRangeStrings = (strings, range) => {\n    const ret = [];\n    strings.forEach(s => {\n        if (range.indexOf(s) >= 0) {\n            ret.push(s);\n        }\n    });\n    return ret;\n};\n\nmodule.exports = {\n    filterByPrefix,\n    filterByType,\n    filterLessThan,\n    filterGreaterThan,\n    filterBetween,\n    filterBetween2,\n    filterInRange,\n    filterInRangeStrings\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getNegative([1, 2, 3, 4, 5])\n  [-1, -2, -3, -4, -5]\n  >>> getNegative([-1, -2, -3, -4, -5])\n  [-5, -4, -3, -2, -1]\n  >>> getNegative([1, -2, -3, 4, -5])\n  [-5, -4, -3, -2, -1]\n  >>> getNegative([-1, -2, 3, -4, 5])\n  [-5, -4, -3, -2, -1]\n  >>> getNegative([1, 2, -4, 5, 6])\n  [-1, -2, -3, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -1, -10]\n  */\nconst getNegative = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getOdd([1, 2, 3, 4, 5])\n  [1, 3, 5]\n  >>> getOdd([-1, -2, -3, -4, -5])\n  [-3, -1, -5]\n  >>> getOdd([1, -2, -3, 4, -5])\n  [-3, -1, -5]\n  >>> getOdd([1, 2, -4, 5, 6])\n  [1, 3, 5]\n  >>> getOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [1, 3, 5, 9, 123, 1]\n  */\nconst getOdd = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5])\n  []\n  >>> getEven([-1, -2, -3, -4, -5])\n  []\n  >>> getEven([1, -2, -3, 4, -5])\n  []\n  >>> getEven([1, 2, -4, 5, 6])\n  []\n  >>> getEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEven = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\nexport { getPositive, getNegative, getOdd, getEven };\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if(n == 1) return false\n    if(n == 2) return true\n    if(n % 2 == 0) return false\n    for(let i = 3; i < n; i += 2) {\n        if(n % i == 0) return false\n    }\n    return true\n}\n\n/**\n  * Return the next prime number after n.\n  * If n is not prime, returns the next prime after n.\n  * If n is prime, returns the next prime number after n.\n  *\n  * Note that the next prime number after n will not be less than n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The next prime number.\n  *\n  * Example:\n  *   >>> nextPrime(3)\n  *   5\n  *   >>> nextPrime(10)\n  *   13\n  *   >>> nextPrime(15)\n  *   17\n  *   >>> nextPrime(19)\n  *   23\n  *\n  * */\nconst nextPrime = (n) => {\n    let p = n + 1\n    while(!isPrime(p)) {\n        p += 1\n    }\n    return p\n}\n\n/**\n  * Return the sum of the numbers 1 to n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The sum of the numbers 1 to n.\n  *\n  * Example:\n  *   >>> sum(1)\n  *   1\n  *   >>> sum(3)\n  *   6\n  *   >>> sum(10)\n  *   55\n  *\n  * */\nconst sum = (n) => {\n    let s = 0\n    while(n > 0) {\n        s += n\n        n -= 1\n    }\n    return s\n}\n\n/**\n  * Return the difference of the numbers 1 to n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The difference of the numbers 1 to n.\n  *\n  * Example:\n  *   >>> diff(1)\n  *   0\n  *   >>> diff(3)\n  *   1\n  *   >>> diff(10)\n  *   9\n  *\n  * */\nconst diff = (n) => {\n    let d = 0\n    while(n > 0) {\n        d += n\n        n -= 1\n    }\n    return d\n}\n\n/**\n  * Return the product of the numbers 1 to n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The product of the numbers 1 to n.\n  *\n  * Example:\n  *   >>> prod(1)\n  *   1\n  *   >>> prod(3)\n  *   9\n  *   >>> prod(10)\n  *   10\n  *\n  * */\nconst prod = (n) => {\n    let p = 1\n    while(n > 0) {\n        p *= n\n        n -= 1\n    }\n    return p\n}\n\n/**\n  * Return the number of times the number n is repeated in the set of numbers 1 to n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The number of times the number n is repeated in the set of numbers 1 to n.\n  *\n  * Example:\n  *   >>> repeat(1)\n  *   1\n  *   >>> repeat(3)\n  *   3\n  *   >>> repeat(10)\n  *   10\n  *\n  * */\nconst repeat = (n) => {\n    let r = 1\n    while(n > 0) {\n        r *= n\n        n -= 1\n    }\n    return r\n}\n\n/**\n  * Return the number of times the number n is repeated in the set of numbers 1 to n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The number of times the number n is repeated in the set of numbers 1 to n.\n  *\n  * Example:\n  *   >>> count(1)\n  *   1\n  *   >>> count(3)\n  *   2\n  *   >>> count(10)\n  *   5\n  *\n  * */\nconst count = (n) => {\n    let c = 0\n    while(n > 0) {\n        c += 1\n        n -= 1\n    }\n    return c\n}\n\n/**\n  * Return the number of primes in the set of numbers 1 to n.\n  *\n  * @param {number} n - The start number.\n  * @return {number} The number of primes in the set of numbers 1 to n.\n  *\n  * Example:\n  *   >>> prime(1)\n  *   0\n  *   >>> prime(3)\n  *   1\n  *   >>> prime(10)\n  *   2\n  *\n  * */\nconst prime = (n) => {\n    let p = 0\n    while(n > 0) {\n        p += isPrime(n)\n        n -= 1\n    }\n    return p\n}\n\nmodule.exports = {\n    nextPrime,\n    sum,\n    diff,\n    prod,\n    repeat,\n    count,\n    prime\n}<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const xs_len = xs.length;\n  const xs_cnt = xs_len / 2;\n  const first_non_zero = xs[xs_cnt];\n  const last_non_zero = xs[xs_cnt + xs_cnt];\n  const last_two_non_zero = xs[xs_cnt + xs_cnt + 1];\n  const last_three_non_zero = xs[xs_cnt + xs_cnt + 2];\n  const last_four_non_zero = xs[xs_cnt + xs_cnt + 3];\n  const last_five_non_zero = xs[xs_cnt + xs_cnt + 4];\n  if (first_non_zero === 0) {\n    return -last_two_non_zero / last_three_non_zero;\n  }\n  if (first_non_zero === last_non_zero) {\n    return -last_four_non_zero / last_five_non_zero;\n  }\n  if (last_two_non_zero === 0) {\n    return first_non_zero / last_three_non_zero;\n  }\n  if (last_four_non_zero === 0) {\n    return first_non_zero / last_five_non_zero;\n  }\n  if (last_three_non_zero === 0) {\n    return last_two_non_zero / last_five_non_zero;\n  }\n  if (last_five_non_zero === 0) {\n    return last_two_non_zero / last_three_non_zero;\n  }\n  if (last_four_non_zero === last_five_non_zero) {\n    return -last_two_non_zero / last_three_non_zero;\n  }\n  return undefined;\n}\n\nconst sum = (xs, x) => {\n  const xs_len = xs.length;\n  const sum_len = xs_len;\n  const sum = xs_len;\n  for (let i = sum_len - 1; i >= 0; i--) {\n    sum = xs[i] + sum;\n  }\n  return sum;\n}\n\nconst calc_diff = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const diff = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    diff = xs[i] - x;\n  }\n  return diff;\n}\n\nconst calc_diff_sum = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const diff = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    diff = xs[i] - x + diff;\n  }\n  return diff;\n}\n\nconst calc_poly = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const poly = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    poly = poly * x + xs[i];\n  }\n  return poly;\n}\n\nconst calc_poly_sum = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const poly = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    poly = poly * x + xs[i] + poly;\n  }\n  return poly;\n}\n\nconst calc_poly_diff = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const poly = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    poly = poly * (x - i) + xs[i];\n  }\n  return poly;\n}\n\nconst calc_poly_diff_sum = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const poly = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    poly = poly * (x - i) + xs[i] + poly;\n  }\n  return poly;\n}\n\nconst calc_poly_sum_diff = (xs, x) => {\n  const xs_len = xs.length;\n  const x_len = xs_len;\n  const poly = xs_len;\n  for (let i = x_len - 1; i >= 0; i--) {\n    poly = poly * (x - i) + xs[i] + poly;\n  }\n  return poly;\n}\n\nconst main = () => {\n  const xs = [1, 2, 3];\n  const x = -"}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let sorted = l.slice();\n  for (let i = 0; i < sorted.length; i += 3) {\n    let index = sorted.indexOf(sorted[i]);\n    sorted.splice(index, 1, sorted[index + 1], sorted[index + 2]);\n  }\n  return sorted;\n};\n\n/*Tits function takes a list l and returns a list l' that is a copy of l with all elements except for the largest of each group of three elements having the same value.\n  >>> sortThird([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  let sorted = l.slice();\n  for (let i = 0; i < sorted.length; i += 3) {\n    let min = sorted[i];\n    let index = sorted.indexOf(min);\n    while (index < sorted.length - 2) {\n      if (sorted[index + 1] === min && sorted[index + 2] === min) {\n        sorted.splice(index + 1, 2, sorted[index + 3]);\n      }\n      index++;\n    }\n  }\n  return sorted;\n};\n\nconst sort = (l) => {\n  if (l.length % 3 === 0) {\n    return sortThird(l);\n  }\n  if (l.length % 3 === 2) {\n    return sortFourth(l);\n  }\n  return l;\n};\n\nconst sortBy = (l) => {\n  const sortFn = (a, b) => {\n    return a < b? -1 : a > b? 1 : 0;\n  };\n  return sort(l, sortFn);\n};\n\nexport default sortBy;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    const hash = {};\n    for (let i = 0; i < l.length; i++) {\n        if (!hash[l[i]]) {\n            hash[l[i]] = 1;\n        }\n    }\n    return Object.keys(hash).sort();\n};\n\n/*\n  * Return the intersection of two lists\n  *\n  * >>> intersection([1, 2, 3], [4, 5, 6])\n  * [4]\n  *\n  * >>> intersection([1, 2, 3], [4, 5, 6, 7])\n  * []\n  *\n  * >>> intersection([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  *\n  * >>> intersection([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst intersection = (l1, l2) => {\n    const result = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    find,\n    all,\n    any,\n    contains,\n    unique,\n    intersection\n};<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\n/*Rreturns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -46\n  */\nconst sum = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result;\n};\n\n/*Rreturns the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.9\n  */\nconst average = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += l[i];\n  }\n  return result / l.length;\n};\n\n/*Rreturns the sum of the squares of all elements in the list.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  907\n  */\nconst sumOfSquares = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += Math.pow(l[i], 2);\n  }\n  return result;\n};\n\n/*Rreturns the average of the squares of all elements in the list.\n  >>> averageOfSquares([1, 2, 3])\n  1\n  >>> averageOfSquares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.8\n  */\nconst averageOfSquares = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += Math.pow(l[i], 2);\n  }\n  return result / l.length;\n};\n\nexport {\n  maxElement,\n  minElement,\n  sum,\n  average,\n  sumOfSquares,\n  averageOfSquares,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let count = 0;\n  while (n > 0) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      n = n / 10;\n      console.log(`${digits[count]}`);\n      count++;\n    } else {\n      console.log(`${n}`);\n    }\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let n = l.length;\n  let arr = l;\n  let odd = [];\n  let even = [];\n  let i;\n  let j;\n  for (i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  odd.sort();\n  even.sort();\n  for (i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      arr[i] = even[i];\n    } else {\n      arr[i] = odd[i];\n    }\n  }\n  return arr;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  decodeCyclic2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    return Math.floor(Math.pow(2, n) + Math.pow(2, n - 2) - 1)\n}\n\nconst primeFibs = [\n    primeFib(1),\n    primeFib(2),\n    primeFib(3),\n    primeFib(4),\n    primeFib(5),\n    primeFib(6),\n    primeFib(7),\n    primeFib(8),\n    primeFib(9),\n    primeFib(10),\n    primeFib(11),\n    primeFib(12),\n    primeFib(13),\n    primeFib(14),\n    primeFib(15),\n    primeFib(16),\n    primeFib(17),\n    primeFib(18),\n    primeFib(19),\n    primeFib(20)\n]\n\nconst isPrime = (n) => {\n    if (n <= 1) return false\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false\n    }\n    return true\n}\n\nconst primeFibsToPrimes = (n) => {\n    let primes = []\n    for (let i = 1; i < primeFibs.length; i++) {\n        if (isPrime(primeFibs[i])) {\n            primes.push(primeFibs[i])\n        }\n    }\n    return primes\n}\n\nconst primesToFibs = (n) => {\n    let fibs = []\n    for (let i = 1; i < n; i++) {\n        fibs.push(primeFibs[i])\n    }\n    return fibs\n}\n\nconst test = () => {\n    const fibs = primesToFibs(20)\n    const primes = primeFibsToPrimes(fibs.length)\n\n    let result = fibs.reduce((acc, curr) => {\n        let currFib = curr + acc\n        let nextPrime = primes[Math.floor(currFib / curr)]\n        let currPrime = nextPrime + acc\n        return currPrime\n    }, 1)\n\n    console.log(fibs.length)\n    console.log(result)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const a = l.reduce((acc, num) => {\n    const current = acc.concat([num]);\n    const numAsInt = parseInt(num, 10);\n    const sum = current.reduce((acc, num) => acc + numAsInt, 0);\n    if (sum === 0) return current;\n    else return triplesSumToZero(current);\n  }, []);\n  return a.length === 1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  const cars = new Array(n);\n  let i;\n  for (i = 0; i < n; i++) {\n    cars[i] = {\n      x: i,\n      y: n - i,\n      dx: 1,\n      dy: 0\n    };\n  }\n  cars.forEach((car) => {\n    car.x = n - car.x;\n  });\n\n  return cars.reduce((collisions, car) => {\n    const nx = car.x + car.dx;\n    const ny = car.y + car.dy;\n\n    let collision = false;\n\n    if (nx >= n) {\n      collision = true;\n    }\n\n    for (i = 0; i < n; i++) {\n      if (cars[i].x + cars[i].dx < nx) {\n        collision = true;\n      }\n      if (cars[i].x + cars[i].dx > nx) {\n        collision = true;\n      }\n      if (cars[i].y + cars[i].dy < ny) {\n        collision = true;\n      }\n      if (cars[i].y + cars[i].dy > ny) {\n        collision = true;\n      }\n    }\n\n    if (collision) {\n      collisions++;\n    }\n\n    return collisions;\n  }, 0);\n};\n\nconsole.log(carRaceCollision(3));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incrList = (list) => {\n    const result = [];\n    const i = l - 1;\n    while (i >= 0) {\n      result.push(list[i]);\n      i--;\n    }\n    return result;\n  };\n  return incrList(l);\n};\n\n// ###############\n// ## MAIN EXEC ##\n// ###############\n\nconst args = process.argv.slice(2);\nif (args.length === 0) {\n  console.log('Usage:./run.js <input file>');\n} else {\n  const input = args[0];\n  const startTime = Date.now();\n  console.log(`Reading input file: ${input}`);\n  const output = parseFile(input);\n  const endTime = Date.now();\n  const timeTaken = endTime - startTime;\n  console.log(`Parsing took: ${timeTaken}ms`);\n  const transformed = output.map((x) => {\n    return incrList(x);\n  });\n  console.log(`Transformed list: ${transformed}`);\n  console.log(`Size of the list: ${transformed.length}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const dp = [0, 0];\n\n  l.forEach((a) => {\n    dp[0] = dp[0] + a;\n  });\n\n  l.forEach((a) => {\n    dp[1] = dp[1] + a;\n  });\n\n  return dp[0] == 0 && dp[1] == 0;\n};\n\n/*\n  findDuplicate takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> findDuplicate([1, 3, 5, 0])\n  false\n  >>> findDuplicate([1, 3, -2, 1])\n  false\n  >>> findDuplicate([1, 2, 3, 7])\n  false\n  >>> findDuplicate([2, 4, -5, 3, 5, 7])\n  true\n  >>> findDuplicate([1])\n  false\n  */\nconst findDuplicate = (l) => {\n  const dp = {};\n\n  l.forEach((a) => {\n    dp[a] = dp[a] + 1;\n  });\n\n  const isDuplicate = Object.keys(dp).every((key) => dp[key] == 1);\n\n  return!isDuplicate;\n};\n\n/*\n  partition takes a list of integers as input. It returns a list of lists of integers, where each list contains all the numbers that sum up to zero in the respective partition, and each partition contains all the remaining numbers.\n  >>> partition([1, 3, 5, 0])\n  [ [ 1, 3, 5 ], [ 0 ] ]\n  >>> partition([1, 3, -2, 1])\n  [ [ 1, 3 ], [ -2, 1 ] ]\n  >>> partition([1, 2, 3, 7])\n  [ [ 1, 2, 3 ], [ 7 ] ]\n  >>> partition([2, 4, -5, 3, 5, 7])\n  [ [ 2, 4, -5, 3, 5 ], [ 7 ] ]\n  >>> partition([1])\n  [ [ 1 ] ]\n  */\nconst partition = (l) => {\n  const dp = {};\n\n  l.forEach((a) => {\n    dp[a] = dp[a] + 1;\n  });\n\n  const res = [];\n\n  Object.keys(dp).forEach((key) => {\n    if (dp[key] == 1) {\n      res.push([key]);\n    }\n  });\n\n  return res;\n};\n\nmodule.exports = {\n  pairsSumToZero,\n  findDuplicate,\n  partition\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x.toString(base);\n  while (result.length < base) result = '0' + result;\n  return result;\n}\n\nexport default changeBase;\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(3, 2)\n  2.0\n  >>> triangleArea(1, 2)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3)\n  0.0\n  >>> triangleArea(1, 1)\n  0.0\n  */\nconst triangleArea = (a, b) => {\n  return a * b / 2;\n};\n\n/*\n  This function calculates the area of a triangle based on the length of the sides.\n\n  >>> triangleArea(2, 3)\n  1.0\n  >>> triangleArea(3, 4)\n  0.0\n  >>> triangleArea(1, 2)\n  0.0\n  >>> triangleArea(3, 3"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*TThe Fib5 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib5 (0) - > 0 fib5 (1) - > 0 fib5 (2) - > 3 fib5 (3) - > 1 fib5 (n-1) - > fib5 (n-2) + fib5 (n-3) + fib5 (n-4) + fib5 (n-5).\n  >>> fib5(5)\n  0\n  >>> fib5(6)\n  0\n  >>> fib5(7)\n  3\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5)\n}\n\n/*TThe Fib6 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib6 (0) - > 0 fib6 (1) - > 0 fib6 (2) - > 5 fib6 (3) - > 1 fib6 (n-1) - > fib6 (n-2) + fib6 (n-3) + fib6 (n-4) + fib6 (n-5) + fib6 (n-6).\n  >>> fib6(5)\n  0\n  >>> fib6(6)\n  0\n  >>> fib6(7)\n  5\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6)\n}\n\n/*TThe Fib7 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib7 (0) - > 0 fib7 (1) - > 0 fib7 (2) - > 8 fib7 (3) - > 1 fib7 (n-1) - > fib7 (n-2) + fib7 (n-3) + fib7 (n-4) + fib7 (n-5) + fib7 (n-6) + fib7 (n-7).\n  >>> fib7(5)\n  0\n  >>> fib7(6)\n  0\n  >>> fib7(7)\n  8\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7)\n}\n\n/*TThe Fib8 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib8 (0) - > 0 fib8 (1) - > 0 fib8 (2) - > 13 fib8 (3) - > 1 fib8 (n-1) - > fib8 (n-2) + fib8 (n-3) + fib8 (n-4) + fib8 (n-5) + fib8 (n-6) + fib8 (n-7) + fib8 (n-8).\n  >>> fib8(5)\n  0\n  >>> fib8(6)\n  0\n  >>> fib8(7)\n  13\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8)\n}\n\n/*TThe Fib9 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib9 (0) - > 0 fib9 (1) - > 0 fib9 (2) - > 21 fib9 (3) - > 1 fib9 (n-1) - > fib9 (n-2) + fib9 (n-3) + fib9 (n-4) + fib9 (n-5) + fib9 (n-6) + fib9 (n-7) + fib9 (n-8) + fib9 (n-9).\n  >>> fib9(5)\n  0\n  >>> fib9(6)\n  0\n  >>> fib9(7)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9)\n}\n\n/*TThe Fib10 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib10 (0) - > 0 fib10 (1) - > 0 fib10 (2) - > 34 fib10 (3) - > 1 fib10 (n-1) - > fib10 (n-2) + fib10 (n-3) + fib10 (n-4) + fib10 (n-5) + fib10 (n-6) + fib10 (n-7) + fib10 (n-8) + fib10 (n-9) + fib10 (n-10).\n  >>> fib10(5)\n  0\n  >>> fib10(6)\n  0\n  >>> fib10(7)\n  34\n  */\nconst"}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let total = 0;\n  let counter = 0;\n  for (let item of l) {\n    total += item;\n    counter += 1;\n  }\n  return total / counter;\n};\n\n/**\n  * @name sorted\n  * @type {Function}\n  * @param {Array} l - An array.\n  * @return {Array}\n  * RThe sorted list.\n  * @example\n  * sorted([3, 1, 2, 4, 5])\n  * // => [1, 2, 3, 4, 5]\n  * sorted([3, 1, 2, 4, 5, 6])\n  * // => [1, 2, 3, 4, 5, 6]\n  * sorted([-10, 4, 6, 1000, 10, 20])\n  * // => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  */\nconst sorted = (l) => {\n  let arr = l.slice();\n  let arr2 = l.slice();\n  let tmp = 0;\n  while (arr.length > 1) {\n    tmp = median(arr);\n    arr2.splice(arr2.indexOf(tmp), 1);\n    arr.splice(arr.indexOf(tmp), 1);\n  }\n  return arr2;\n};\n\nexport { median, sorted };\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length;\n  let start = 0;\n  let end = textLength - 1;\n\n  while (start <= end) {\n    if (text[start]!== text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n\n  return true;\n};\n\n// Tests if the given string is a palindrome\nconst isPalindrome2 = (text) => {\n  let textLength = text.length;\n  let start = 0;\n  let end = textLength - 1;\n  while (start <= end) {\n    if (text[start]!== text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;\n};\n\nconst isPalindrome3 = (text) => {\n  let textLength = text.length;\n  let start = 0;\n  let end = textLength - 1;\n  while (start <= end) {\n    if (text[start]!== text[end]) {\n      return false;\n    }\n    start++;\n    end--;\n  }\n  return true;\n};\n\nconst isPalindrome4 = (text) => {\n  let textLength = text.length;\n  let start = 0;\n  let end = textLength - 1;\n  while (start <= end) {\n    if (text[start]!== text[end]) {\n      return false;\n    }\n    if (text[start] === text[end]) {\n      if (start === end) {\n        return true;\n      }\n      start++;\n      end--;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome5 = (text) => {\n  let textLength = text.length;\n  let start = 0;\n  let end = textLength - 1;\n  while (start <= end) {\n    if (text[start]!== text[end]) {\n      return false;\n    }\n    if (text[start] === text[end]) {\n      if (start === end) {\n        return true;\n      }\n      if (text[start] === text[end]) {\n        if (start === end) {\n          return true;\n        }\n        start++;\n        end--;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  isPalindrome,\n  isPalindrome2,\n  isPalindrome3,\n  isPalindrome4,\n  isPalindrome5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1;\n  return (Math.pow(2, n) % p) | 0;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (parseInt(ch.charAt(0), 16) - 5) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nmodule.exports = {\n  encode: encodeShift,\n  decode: decodeShift\n}<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  findVowel is a function that takes strings and returns the position of the first vowel\n  >>> findVowel('')\n  0\n  >>> findVowel(\"abcdef\\nghijklm\")\n  7\n  >>> findVowel('abcdef')\n  0\n  >>> findVowel('aaaaa')\n  0\n  >>> findVowel('aaBAA')\n  1\n  >>> findVowel('zbcd')\n  4\n  */\nconst findVowel = (text) => {\n  let index = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[aeiouAEIOU]/)) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n\n/*\n  removeDuplicates is a function that takes strings and returns strings without duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"aabcc\")\n  'aaa'\n  >>> removeDuplicates(\"aaccc\")\n  'aac'\n  >>> removeDuplicates(\"aaBAA\")\n  'AA'\n  >>> removeDuplicates(\"bCdD\")\n  'bCD'\n  */\nconst removeDuplicates = (text) => {\n  let temp = {};\n  let index = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (temp[text[i]] === undefined) {\n      temp[text[i]] = true;\n      index = i;\n    }\n  }\n  return text.substring(0, index);\n}\n\n/*\n  removeDuplicates2 is a function that takes strings and returns strings without duplicates.\n  >>> removeDuplicates2('')\n  ''\n  >>> removeDuplicates2(\"aabcc\")\n  'aabcc'\n  >>> removeDuplicates2(\"aaccc\")\n  'aaccc'\n  >>> removeDuplicates2(\"aaBAA\")\n  'aaBAA'\n  >>> removeDuplicates2(\"bCdD\")\n  'bCdD'\n  */\nconst removeDuplicates2 = (text) => {\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (result.indexOf(text[i]) === -1) {\n      result = result + text[i];\n    }\n  }\n  return result;\n}\n\n/*\n  countVowels is a function that takes strings and returns the number of vowels\n  >>> countVowels('')\n  0\n  >>> countVowels(\"abcdef\\nghijklm\")\n  5\n  >>> countVowels('abcdef')\n  1\n  >>> countVowels('aaaaa')\n  0\n  >>> countVowels('aaBAA')\n  1\n  >>> countVowels('zbcd')\n  2\n  */\nconst countVowels = (text) => {\n  let result = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[aeiouAEIOU]/)) {\n      result++;\n    }\n  }\n  return result;\n}\n\n/*\n  countVowels2 is a function that takes strings and returns the number of vowels\n  >>> countVowels2('')\n  0\n  >>> countVowels2(\"abcdef\\nghijklm\")\n  5\n  >>> countVowels2('abcdef')\n  1\n  >>> countVowels2('aaaaa')\n  0\n  >>> countVowels2('aaBAA')\n  1\n  >>> countVowels2('zbcd')\n  2\n  */\nconst countVowels2 = (text) => {\n  let result = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n      result++;\n    }\n  }\n  return result;\n}\n\n/*\n  countVowels3 is a function that takes strings and returns the number of vowels\n  >>> countVowels3('')\n  0\n  >>> countVowels3(\"abcdef\\nghijklm\")\n  5\n  >>> countVowels3('abcdef')\n  1\n  >>> countVowels3('aaaaa')\n  0\n  >>> countVowels3('aaBAA')\n  1\n  >>> countVowels3('zbcd')\n  2\n  */\nconst countVowels3 = (text) => {\n  let result = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u' || text[i] === 'A' || text[i] === 'E' || text[i] === 'I' || text[i] === 'O' || text[i] === 'U') {\n      result++;\n    }\n  }\n  return result;\n}\n\n/*\n  main is the function that runs the program.\n  >>> main()\n  'bcd'\n  >>> main('abcdef\\nghijklm')\n  'ghijklm'\n  >>> main('aabcc')\n  'aabcc'\n  >>> main('aaBAA')\n  'aaBAA'\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const {length} = l\n  if (length === 0) return false\n  if (length === 1) return l[0] < t\n  let i = 0\n  let n = l[i]\n  while (i < length - 1) {\n    if (n < t) {\n      i++\n      n = l[i]\n    } else {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Exports\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0,\n    j = 0,\n    len0 = s0.length,\n    len1 = s1.length;\n\n  while (i < len0 && j < len1) {\n    if (s0[i] === s1[j]) {\n      i++;\n      j++;\n    } else {\n      break;\n    }\n  }\n\n  if (i === len0) {\n    return true;\n  }\n\n  return false;\n};\n\n/*\n  Count the number of unique letters in a word.\n  >>> countUniqueChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  3\n  >>> countUniqueChars('abcd', 'dddddddabc')\n  4\n  >>> countUniqueChars('dddddddabc', 'abcd')\n  4\n  >>> countUniqueChars('eabcd', 'dddddddabc')\n  2\n  >>> countUniqueChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  2\n  */\nconst countUniqueChars = (s, word) => {\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < word.length; j++) {\n      if (s[i] === word[j]) {\n        count++;\n      }\n    }\n  }\n\n  return count;\n};\n\n/*\n  Check if a word contains a substring that has the same letters\n  as the given string.\n  >>> containsSubstring('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> containsSubstring('abcd', 'dddddddabc')\n  true\n  >>> containsSubstring('dddddddabc', 'abcd')\n  true\n  >>> containsSubstring('eabcd', 'dddddddabc')\n  true\n  >>> containsSubstring('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  >>> containsSubstring('eabcdzzzz', 'dddzzzzzzzddddzzz')\n  false\n  */\nconst containsSubstring = (s, word) => {\n  let i = 0,\n    j = 0;\n\n  while (i < s.length) {\n    if (sameChars(s[i], word)) {\n      j = 0;\n      while (j < word.length) {\n        if (s[i] === word[j]) {\n          j++;\n        } else {\n          return false;\n        }\n      }\n      return true;\n    }\n    i++;\n  }\n\n  return false;\n};\n\nmodule.exports = {\n  sameChars,\n  countUniqueChars,\n  containsSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openCount = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      openCount++;\n    } else if (brackets[i] === \">\") {\n      openCount--;\n    }\n    if (openCount < 0) {\n      return false;\n    }\n  }\n  return openCount === 0;\n};\n\n/*\n  Given a string, print a table of the character frequency in the string.\n  The table should have one row for each character, and the value in each\n  cell should be the number of times that character appears in the string.\n  The frequency of the character is represented by a capital letter,\n  followed by a number. For example, 'A' appears three times, and 'B'\n  appears two times.\n  */\nconst showFrequencies = (string) => {\n  const frequencies = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (!frequencies[char]) {\n      frequencies[char] = 0;\n    }\n    frequencies[char]++;\n  }\n  for (let key in frequencies) {\n    const value = frequencies[key];\n    console.log(key, value);\n  }\n};\n\n/*\n  Given a string, print a table of the line length in the string.\n  The table should have one row for each line, and the value in each\n  cell should be the number of characters in the line.\n  */\nconst showLengths = (string) => {\n  const lengths = {};\n  for (let i = 0; i < string.length; i++) {\n    const line = string.slice(i);\n    if (!lengths[line]) {\n      lengths[line] = 0;\n    }\n    lengths[line]++;\n  }\n  for (let key in lengths) {\n    const value = lengths[key];\n    console.log(key, value);\n  }\n};\n\n/*\n  Given a string, print a table of the line length in the string.\n  The table should have one row for each line, and the value in each\n  cell should be the number of characters in the line.\n  */\nconst showLineLengths = (string) => {\n  const lengths = {};\n  for (let i = 0; i < string.length; i++) {\n    const line = string.slice(i);\n    if (!lengths[line]) {\n      lengths[line] = 0;\n    }\n    lengths[line]++;\n  }\n  for (let key in lengths) {\n    const value = lengths[key];\n    console.log(key, value);\n  }\n};\n\nconst showBrackets = (string) => {\n  const brackets = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"<\") {\n      brackets.push(\"<\");\n    } else if (char === \">\") {\n      brackets.push(\">\");\n    }\n  }\n  console.log(brackets);\n};\n\n/*\n  Given a string, print a table of the line length in the string.\n  The table should have one row for each line, and the value in each\n  cell should be the number of characters in the line.\n  */\nconst showCharFrequencies = (string) => {\n  const frequencies = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (!frequencies[char]) {\n      frequencies[char] = 0;\n    }\n    frequencies[char]++;\n  }\n  for (let key in frequencies) {\n    const value = frequencies[key];\n    console.log(key, value);\n  }\n};\n\n/*\n  Given a string, print a table of the line length in the string.\n  The table should have one row for each line, and the value in each\n  cell should be the number of characters in the line.\n  */\nconst showBracketFrequencies = (string) => {\n  const frequencies = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === \"<\") {\n      frequencies[\">\"] = 0;\n    } else if (char === \">\") {\n      frequencies[\"<\"] = 0;\n    }\n  }\n  for (let key in frequencies) {\n    const value = frequencies[key];\n    console.log(key, value);\n  }\n};\n\n/*\n  Given a string, print a table of the line length in the string.\n  The table should have one row for each line, and the value in each\n  cell should be the number of characters in the line.\n  */\nconst showLineLengthFrequencies = (string) => {\n  const frequencies = {};\n  for (let i = 0; i < string.length; i++) {\n    const line = string.slice(i);\n    if (!frequencies[line]) {\n      frequencies[line] = 0;\n    }\n    frequencies[line]++;\n  }\n  for (let key in frequencies) {\n    const value = frequencies[key];\n    console.log(key, value);\n  }\n};\n\n/*\n  Given a string, print a table of the line length in the string.\n  The table should have one row for each line, and the value in each\n  cell should be the number of characters in the line.\n  */\nconst showCharLengths = (string) => {\n  const lengths = {};\n  for (let i = 0; i < string.length; i++) {\n    const line = string.slice(i);\n    if (!lengths[line]) {\n      lengths[line] = 0;\n    }\n    lengths[line]++;\n  }\n  for (let key in lengths) {\n    const value = lengths[key];\n    "}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const result = [];\n\n  for (let i = 0; i < l.length; i++) {\n    if (i === 0) {\n      if (l[i] <= l[i + 1]) {\n        result.push(true);\n      } else {\n        result.push(false);\n      }\n    } else {\n      if (l[i - 1] <= l[i]) {\n        result.push(true);\n      } else {\n        result.push(false);\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const arr1 = l1.slice().sort();\n  const arr2 = l2.slice().sort();\n\n  const commonArr = [];\n\n  for (let i = 0; i < arr1.length; i++) {\n    let j = 0;\n    for (; j < arr2.length; j++) {\n      if (arr1[i] === arr2[j]) {\n        break;\n      }\n    }\n    if (j === arr2.length) {\n      commonArr.push(arr1[i]);\n    }\n  }\n  return commonArr;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let l = 0;\n  while (i <= n) {\n    if (n % i === 0) {\n      l = i;\n      while (n % i === 0) {\n        n /= i;\n      }\n    } else {\n      i += 1;\n    }\n  }\n  return l;\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 0;\n    while (sum < n) {\n        sum += 1;\n    }\n    return sum;\n}\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            count++;\n        } else if (brackets[i] === ')') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) return [1]\n\n  const x0 = xs[0]\n  let x1 = 1\n  let d = [1]\n  let d0 = 0\n  let d1 = 1\n  for (let i = 1; i < xs.length; i++) {\n    const xi = xs[i]\n    const diff = xi - x0\n    const d2 = d1\n    d1 = d0\n    d0 = d\n    d = [diff * d1 + d0[i] * xi, diff * d2 + d0[i] * xi * xi]\n  }\n  return d\n}\n\n/**\n  * Find xs of a polynomial that has the given derivative.\n  * @param {Array} dderivative\n  * @param {Number} x0\n  * @param {Number} x1\n  * @returns {Array}\n  */\nconst findPolynomial = (dderivative, x0, x1) => {\n  const n = dderivative.length\n  const coefficients = []\n  for (let i = n; i >= 1; i--) {\n    coefficients.push(dderivative[i] * x1 + dderivative[i - 1])\n  }\n  coefficients.push(dderivative[0])\n  return coefficients\n}\n\n/**\n  * Find the derivative of a polynomial by taking the derivative of the polynomial\n  * and replacing each term by the derivative of the previous term\n  * @param {Array} dderivative\n  * @param {Number} x0\n  * @param {Number} x1\n  * @returns {Array}\n  */\nconst derivativeByReverseApproximation = (dderivative, x0, x1) => {\n  const coefficients = findPolynomial(dderivative, x0, x1)\n  const n = coefficients.length\n  const derivative = [1]\n  for (let i = 1; i < n; i++) {\n    derivative = [coefficients[i] * derivative[i] + coefficients[i - 1] * x1]\n  }\n  return derivative\n}\n\n/**\n  * Find the xs of a polynomial that has the given derivative\n  * @param {Array} dderivative\n  * @param {Number} x0\n  * @param {Number} x1\n  * @returns {Array}\n  */\nconst findPolynomialFromDerivative = (dderivative, x0, x1) => {\n  const coefficients = findPolynomial(dderivative, x0, x1)\n  const n = coefficients.length\n  const xs = []\n  for (let i = n - 1; i >= 0; i--) {\n    xs.push(coefficients[i] / coefficients[i + 1])\n  }\n  return xs\n}\n\nexport { derivative, derivativeByReverseApproximation, findPolynomial, findPolynomialFromDerivative }\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2);\n};\n\nexport {fibfib};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let result = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/**\n*\n*\n* @param {string} s\n* @return {number}\n*/\nconst stringLength = (s) => {\n  return s.length;\n};\n\n/**\n*\n*\n* @param {string} s\n* @return {boolean}\n*/\nconst isPalindrome = (s) => {\n  let result = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      result = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return result;\n};\n\n/**\n*\n*\n* @param {string} s\n* @return {boolean}\n*/\nconst isVowel = (s) => {\n  let result = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      result = true;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  stringLength,\n  vowelsCount,\n  isPalindrome,\n  isVowel\n};<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let displacement = shift % x.length;\n  if (displacement < 0) {\n    displacement += x.length;\n  }\n  let shifted = x.slice();\n  shifted.splice(displacement, 1);\n  return shifted.join(\"\");\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    const sum = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        sum += s.charCodeAt(i) - 64;\n    }\n    return sum;\n}\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const split = s.split(\" \");\n  const fruits = split.length;\n  const oranges = split.findIndex(f => f === \"oranges\");\n  const apples = split.findIndex(f => f === \"apples\");\n  const mango = split.findIndex(f => f === \"mango\");\n\n  if(fruits === 1 && oranges === 1 && apples === 0 && mango === 0)\n    return 1;\n  return fruits * (n - apples) + oranges * (n - apples) + mango * (n - apples);\n};\n\nmodule.exports = fruitDistribution;<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n  const node = arr[0]\n  let min_even = node\n  let min_index = 0\n  let i = 1\n  while (i < len) {\n    const next = arr[i]\n    if (next % 2 === 0) {\n      min_even = next\n      min_index = i\n    }\n    i += 1\n  }\n  return [min_even, min_index]\n}\n\n/*\n  \"Given a list of numbers, return the largest and the smallest number in the list.\n\n  Example 1:\n      Input: [-1,2,3,0]\n      Output: [3,0]\n      Explanation: The largest number is 3, and the smallest number is 0.\n\n  Example 2:\n      Input: [-1,2,3,0,4,5]\n      Output: [5,4]\n      Explanation: The largest number is 5, and the smallest number is 4.\n\n  Constraints:\n      * 1 <= nums.length <= 10000\n      * -10^9 <= nums[i] <= 10^9\n*/\nconst find_min_max = (nums) => {\n  if (nums.length === 1) {\n    return [nums[0], nums[0]]\n  }\n  const max = nums[0]\n  const min = nums[0]\n  for (let i = 1; i < nums.length; i += 1) {\n    if (nums[i] > max) {\n      max = nums[i]\n    }\n    if (nums[i] < min) {\n      min = nums[i]\n    }\n  }\n  return [max, min]\n}\n\n/*\n  \"Given a sorted array of numbers, return the index of the first number\n  that is not present in the sorted array.\n\n  If it is present, return the index of the next element.\n\n  Example 1:\n      Input: [1,3,4,5,6,7]\n      Output: 2\n\n  Example 2:\n      Input: [1,2,3,4,5,6]\n      Output: 7\n\n  Constraints:\n      * 1 <= arr.length <= 100000\n      * -10^9 <= arr[i] <= 10^9\n*/\nconst find_missing_number = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i <= j) {\n    const mid = (i + j) >> 1\n    const k = arr[mid]\n    if (k >= arr[i] && k <= arr[j]) {\n      return mid + 1\n    } else if (k > arr[i]) {\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return i\n}\n\n/*\n  \"Given a sorted array of non-negative integers, return the index of the first number\n  that is not present in the sorted array.\n\n  If it is present, return the index of the next element.\n\n  Example 1:\n      Input: [1,3,4,5,6,7]\n      Output: 2\n\n  Example 2:\n      Input: [1,2,3,4,5,6]\n      Output: 7\n\n  Constraints:\n      * 1 <= arr.length <= 100000\n      * 0 <= arr[i] <= 10^9\n*/\nconst find_missing_number2 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i <= j) {\n    const mid = (i + j) >> 1\n    const k = arr[mid]\n    if (k >= arr[i] && k <= arr[j]) {\n      return mid + 1\n    } else if (k > arr[i]) {\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return i\n}\n\n/*\n  \"Given a sorted array of non-negative integers, return the index of the first number\n  that is not present in the sorted array.\n\n  If it is present, return the index of the next element.\n\n  Example 1:\n      Input: [1,3,4,5,6,7]\n      Output: 2\n\n  Example 2:\n      Input: [1,2,3,4,5,6]\n      Output: 7\n\n  Constraints:\n      * 1 <= arr.length <= 100000\n      * 0 <= arr[i] <= 10^9\n*/\nconst find_missing_number3 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  while (i <= j) {\n    const mid = (i + j) >> 1\n    const k = arr[mid]\n    if (k < arr[i] || k > arr[j]) {\n      return mid + 1\n    } else {\n      j = mid - 1\n    }\n  }\n  return i\n}\n\nexport {\n  pluck,\n  find_min_max,\n  find"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length;\n  const result = lst.reduce((acc, curr) => {\n    if (acc.length === 0) {\n      acc[curr] = 1;\n      return acc;\n    }\n    const maxIndex = findMaxIndex(acc);\n    if (maxIndex === -1) {\n      return [curr, 1];\n    }\n    const currentMax = acc[maxIndex];\n    if (curr > currentMax) {\n      acc[maxIndex] = curr;\n    }\n    return acc;\n  }, []);\n  return result.length > 0? result[0] : -1;\n};\n\nconst findMaxIndex = (arr) => {\n  const len = arr.length;\n  const max = arr[0];\n  let index = 0;\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      index = i;\n      max = arr[i];\n    }\n  }\n  return index;\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let arr = lst.slice();\n\n  arr.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n\n  return arr;\n}\n\nexport default strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (((a + b) * (c - a)) / 2).toFixed(2);\n  } else if (a + c > b) {\n    return (((a + c) * (b - a)) / 2).toFixed(2);\n  } else if (b + c > a) {\n    return (((b + c) * (a - b)) / 2).toFixed(2);\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the length of the two sides of a right triangle, return the length of the hypotenuse.\n  Example:\n  hypotenuse(3, 4) == 5\n  hypotenuse(9, 12) == 18\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n};\n\n/*\n  Given the length of the two sides of a right triangle, return the length of the opposite side.\n  Example:\n  opposite(3, 4) == 5\n  opposite(9, 12) == 9\n  */\nconst opposite = (a, b) => {\n  return Math.abs(a - b);\n};\n\n/*\n  Given the length of the hypotenuse and the opposite, return the area of the triangle.\n  Example:\n  area(3, 5, 9) == 18\n  area(9, 12, 15) == -1\n  area(18, 9, 5) == -1\n  */\nconst area = (hypotenuse, opposite) => {\n  if (opposite > hypotenuse) {\n    return -1;\n  } else {\n    return hypotenuse * opposite / 2;\n  }\n};\n\n/*\n  Given the area of a triangle, return the length of the hypotenuse.\n  Example:\n  hypotenuse(18, 9, 5) == 9\n  hypotenuse(9, 12, 15) == 9\n  hypotenuse(18, 9, 5) == 9\n  */\nconst hypotenuse = (area, a, b) => {\n  return (Math.pow(area, 2) / Math.pow(hypotenuse, 2)).toFixed(2);\n};\n\n/*\n  Given the length of the hypotenuse and the area, return the length of the opposite side.\n  Example:\n  opposite(9, 18, 3) == 5\n  opposite(9, 18, 3) == 5\n  opposite(9, 18, 3) == 5\n  */\nconst opposite = (area, hypotenuse, b) => {\n  return Math.abs(b - hypotenuse);\n};\n\n/*\n  Given the area of a triangle, return the length of the opposite side.\n  Example:\n  opposite(18, 9, 5) == 5\n  opposite(9, 12, 15) == 9\n  opposite(18, 9, 5) == 5\n  */\nconst opposite = (area, hypotenuse, a) => {\n  return Math.abs(a - hypotenuse);\n};\n\n/*\n  Given the area of a triangle, return the length of the hypotenuse.\n  Example:\n  hypotenuse(9, 18, 3) == 9\n  hypotenuse(9, 18, 3) == 9\n  hypotenuse(9, 18, 3) == 9\n  */\nconst hypotenuse = (area, a, b) => {\n  return Math.abs(a + b - area);\n};\n\n/*\n  Given the length of the hypotenuse and the area, return the length of the opposite side.\n  Example:\n  opposite(9, 18, 3) == 5\n  opposite(9, 18, 3) == 5\n  opposite(9, 18, 3) == 5\n  */\nconst opposite = (area, hypotenuse, a) => {\n  return Math.abs(a + hypotenuse - area);\n};\n\n/*\n  Given the area of a triangle, return the length of the opposite side.\n  Example:\n  opposite(18, 9, 5) == 5\n  opposite(9, 12, 15) == 9\n  opposite(18, 9, 5) == 5\n  */\nconst opposite = (area, hypotenuse, b) => {\n  return Math.abs(b + hypotenuse - area);\n};\n\n/*\n  Given the area of a triangle, return the length of the hypotenuse.\n  Example:\n  hypotenuse(9, 18, 3) == 9\n  hypotenuse(9, 18, 3) == 9\n  hypotenuse(9, 18, 3) == 9\n  */\nconst hypotenuse = (area, a, b) => {\n  return Math.abs(a + b + area - hypotenuse);\n};\n\n/*\n  Given the area of a triangle, return the length of the opposite side.\n  Example:\n  opposite(9, 18, 3) == 5\n  opposite(9, 18, 3) == 5\n  opposite(9, 18, 3) == 5\n  */\nconst opposite = (area, hypotenuse, a) => {\n  return Math.abs(a + hypotenuse + area - opposite);\n};\n\n/*\n  Given the area of a triangle, return the length of the opposite side.\n  Example:\n  opposite(18, 9, 5) == 5\n  opposite(9, 12, 15) == 9\n  opposite(18, 9, 5) == 5\n  */\nconst opposite = (area, hypotenuse, b) => {\n  return Math.abs(b + hypotenuse + area - opposite);\n};\n\n/*\n  Given the area of a triangle, return the length of the hypotenuse.\n  Example:\n  hypotenuse(9, 18, 3) == 9\n  hypotenuse(9, 18, 3) == 9\n  hypotenuse(9, 18, 3) == 9\n  */\nconst"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  let sum = 0\n  let x = q[0]\n  for (let i = 1; i < q.length; i++) {\n    sum += q[i]\n  }\n  if (sum > w) return false\n  let palindrom = q.concat(q.reverse())\n  if (palindrom.length === sum) return true\n  return false\n}\n\nexport default willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    const len = arr.length;\n    let change = 0;\n    for (let i = 0; i < len; i++) {\n        if (arr[i]!= arr[len - i - 1]) {\n            change = i + 1;\n            break;\n        }\n    }\n    return change;\n}\n\n/*\n  Given an array of length n, return the sum of the squares of the first n odd numbers.\n\n  For example:\n  oddSquares(1) == 1\n  oddSquares(2) == 1\n  oddSquares(3) == 4\n  oddSquares(4) == 9\n  oddSquares(5) == 16\n  */\nconst oddSquares = (n) => {\n    return (new Array(n)).fill(1).reduce((sum, num) => {\n        return sum + num * num;\n    });\n}\n\nmodule.exports = {\n    smallestChange,\n    oddSquares\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if(lst1.length === 0 && lst2.length === 0) return lst1;\n  if(lst1.length === 0) return lst2;\n  if(lst2.length === 0) return lst1;\n\n  let res = [];\n  let len = lst1.length;\n  for(let i = 0; i < len; i++){\n    if(lst1[i] === lst2[i]){\n      res.push(lst1[i]);\n    }\n  }\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primeList(a);\n  const list = prime.map(b => a * b);\n  const checkPrime = (n) => {\n    if (list.indexOf(n)!== -1) {\n      return true;\n    }\n    return false;\n  };\n  return list.every(checkPrime);\n};\n\nconst primeList = (a) => {\n  const prime = [];\n  let i = 2;\n  let primeCount = 0;\n  while (primeCount < a) {\n    if (isPrime(i)) {\n      prime.push(i);\n      primeCount++;\n    }\n    i++;\n  }\n  return prime;\n};\n\nconst isPrime = (n) => {\n  if (n < 1) {\n    return false;\n  }\n  if (n === 1) {\n    return false;\n  }\n  if (n < 4) {\n    return true;\n  }\n  const prime = primeList(n);\n  const isPrime = (x) => {\n    if (x === 1) {\n      return false;\n    }\n    if (x === 2) {\n      return true;\n    }\n    if (x % 2 === 0) {\n      return false;\n    }\n    if (x === prime[prime.length - 1]) {\n      return true;\n    }\n    return prime.every((y) => {\n      if (x % y === 0) {\n        return false;\n      }\n    });\n  };\n  return prime.every(isPrime);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const arr = []\n  const isArray = (n, m) => arr.indexOf(m) === -1\n  const isPowerOfN = (x, n) => arr.indexOf(x) === -1\n  return isArray(n, x) && isPowerOfN(x, n)\n}\n\n/*\n  For example:\n  isPowerOf2(4) => true\n  isPowerOf2(5) => false\n  isPowerOf2(8) => true\n  isPowerOf2(0) => false\n  isPowerOf2(-2) => false\n  isPowerOf2(2) => true\n  */\nconst isPowerOf2 = (x) => x &&!x.toString().includes('.') && x % 1 === 0\n\n/*\n  For example:\n  isPrime(4) => false\n  isPrime(5) => true\n  isPrime(8) => true\n  isPrime(0) => false\n  isPrime(-2) => false\n  isPrime(2) => false\n  */\nconst isPrime = (x) => {\n  const isPrime = n => {\n    if (n < 2) return false\n    const sqrt = Math.sqrt(n)\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  return x > 1 &&!isPrime(Math.floor(x / 2))\n}\n\n/*\n  For example:\n  isPalindrome(4) => true\n  isPalindrome(8) => true\n  isPalindrome(0) => false\n  isPalindrome(-2) => false\n  isPalindrome(2) => true\n  */\nconst isPalindrome = (x) => x && x.toString() === x.toString().split('').reverse().join('')\n\n/*\n  For example:\n  isAbundant(4) => false\n  isAbundant(8) => true\n  isAbundant(0) => true\n  isAbundant(-2) => false\n  isAbundant(2) => false\n  */\nconst isAbundant = (x) => {\n  const isAbundant = (n) => {\n    const arr = []\n    const isArray = (n, m) => arr.indexOf(m) === -1\n    const isAbundant = (n) => arr.indexOf(n) === -1\n    const isPowerOf2 = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    const isPrime = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    const isPalindrome = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    return isArray(n, x) && isAbundant(n) && isAbundant(n) && isAbundant(n) && isPrime(n) && isAbundant(n) && isAbundant(n) && isPalindrome(n)\n  }\n  return isAbundant(x)\n}\n\n/*\n  For example:\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  */\nconst isAbundant = (x) => {\n  const isAbundant = (n) => {\n    const arr = []\n    const isArray = (n, m) => arr.indexOf(m) === -1\n    const isAbundant = (n) => arr.indexOf(n) === -1\n    const isPrime = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    const isPalindrome = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    return isArray(n, x) && isAbundant(n) && isAbundant(n) && isAbundant(n) && isPrime(n) && isAbundant(n) && isAbundant(n) && isPalindrome(n)\n  }\n  return isAbundant(x)\n}\n\n/*\n  For example:\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  isAbundant(9) => true\n  */\nconst isAbundant = (x) => {\n  const isAbundant = (n) => {\n    const arr = []\n    const isArray = (n, m) => arr.indexOf(m) === -1\n    const isPrime = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    const isPalindrome = (n) => isAbundant(Math.floor(Math.pow(n, 2)))\n    return isArray(n, x) && isAbundant(n) && isAbundant("}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    return a % 6 === 0\n};\n\nconst iscube_in_range = (a) => {\n    return a % 6 === 0 && iscube(a);\n};\n\nmodule.exports = iscube_in_range;<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n  const digitsCount = num.length;\n  let prime = 2;\n  let count = 0;\n  for (let i = 0; i < digitsCount; i++) {\n    if (prime < Math.pow(10, i)) {\n      count += 1;\n    }\n    while (prime * prime <= num.charCodeAt(i)) {\n      prime++;\n    }\n  }\n  return count;\n};\n\nconst result = (num) => {\n  const count = hexKey(num);\n  const result = count / 2;\n  return result;\n};\n\nconsole.log(result(\"ABED1A33\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  // get the binary value of the number\n  const binary = decimal % 2;\n\n  // get the remaining decimal value and make it binary\n  const remaining = decimal - binary;\n  const remainderBinary = decimalToBinary(remaining);\n\n  // join the binary string and the remaining decimal\n  return `${binary}${remainderBinary}db`;\n};\n\nexport default decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let previous = s[0];\n  let current = s[1];\n  let i = 2;\n  while (i < s.length) {\n    let next = s[i];\n    if (previous === current && current === next) {\n      previous = next;\n      i++;\n      continue;\n    }\n    if (previous === current && previous === next) {\n      return false;\n    }\n    previous = current;\n    current = next;\n    i++;\n  }\n  return true;\n}\n\nconst tests = [\n  {\n    s: 'a',\n    happy: false\n  },\n  {\n    s: 'aa',\n    happy: false\n  },\n  {\n    s: 'abcd',\n    happy: true\n  },\n  {\n    s: 'aabb',\n    happy: false\n  },\n  {\n    s: 'adb',\n    happy: true\n  },\n  {\n    s: 'xyy',\n    happy: false\n  }\n];\n\ntests.forEach(test => {\n  console.log(`${test.s} is ${test.happy? 'happy' : 'not happy'}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesList = [];\n  let grade;\n  for (let i = 0; i < grades.length; i++) {\n    grade = grades[i];\n    gradesList.push(`${grade}`);\n  }\n  return gradesList;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])); // ['A+', 'B', 'C-', 'C', 'A-']\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = (x) => x === 1 || x % 2 === 0 && prime(x / 2);\n  const length = string.length;\n  for (let i = 3; i < length; i += 2) {\n    if (!prime(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function to return the sum of all the prime numbers below\n  a certain number. For example, sumPrimes(100) = 1429\n  */\nconst sumPrimes = (limit) => {\n  let prime = 1;\n  let sum = 0;\n  while (prime <= limit) {\n    if (primeLength(prime)) {\n      sum += prime;\n    }\n    prime += 2;\n  }\n  return sum;\n};\n\n/*\n  Write a function to return the sum of all the numbers that can be\n  written as the sum of two prime numbers. For example,\n  sumOfTwoPrimes(8) = 12\n  */\nconst sumOfTwoPrimes = (limit) => {\n  let prime = 1;\n  let sum = 0;\n  while (prime <= limit) {\n    if (primeLength(prime) && primeLength(prime + sum)) {\n      return prime + sum;\n    }\n    prime += 2;\n  }\n  return sum;\n};\n\n/*\n  Write a function to return the sum of all the numbers that can be\n  written as the sum of three prime numbers. For example,\n  sumOfThreePrimes(10) = 632\n  */\nconst sumOfThreePrimes = (limit) => {\n  let prime = 1;\n  let sum = 0;\n  while (prime <= limit) {\n    if (primeLength(prime) && primeLength(prime + sum) && primeLength(prime + sum + sum)) {\n      return prime + sum + sum;\n    }\n    prime += 2;\n  }\n  return sum;\n};\n\n/*\n  Write a function to return the sum of all the numbers that can be\n  written as the sum of five prime numbers. For example,\n  sumOfFivePrimes(100) = 1429\n  */\nconst sumOfFivePrimes = (limit) => {\n  let prime = 1;\n  let sum = 0;\n  while (prime <= limit) {\n    if (primeLength(prime) && primeLength(prime + sum) && primeLength(prime + sum + sum) &&\n        primeLength(prime + sum + sum + sum)) {\n      return prime + sum + sum + sum;\n    }\n    prime += 2;\n  }\n  return sum;\n};\n\n/*\n  Write a function to return the sum of all the numbers that can be\n  written as the sum of seven prime numbers. For example,\n  sumOfSevenPrimes(1000) = 16807\n  */\nconst sumOfSevenPrimes = (limit) => {\n  let prime = 1;\n  let sum = 0;\n  while (prime <= limit) {\n    if (primeLength(prime) && primeLength(prime + sum) && primeLength(prime + sum + sum) &&\n        primeLength(prime + sum + sum + sum) && primeLength(prime + sum + sum + sum + sum)) {\n      return prime + sum + sum + sum + sum;\n    }\n    prime += 2;\n  }\n  return sum;\n};\n\n/*\n  Write a function to return the sum of all the numbers that can be\n  written as the sum of ten prime numbers. For example,\n  sumOfTenPrimes(100) = 16777619\n  */\nconst sumOfTenPrimes = (limit) => {\n  let prime = 1;\n  let sum = 0;\n  while (prime <= limit) {\n    if (primeLength(prime) && primeLength(prime + sum) && primeLength(prime + sum + sum) &&\n        primeLength(prime + sum + sum + sum) && primeLength(prime + sum + sum + sum + sum) &&\n        primeLength(prime + sum + sum + sum + sum + sum)) {\n      return prime + sum + sum + sum + sum + sum;\n    }\n    prime += 2;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  sumPrimes,\n  sumOfTwoPrimes,\n  sumOfThreePrimes,\n  sumOfFivePrimes,\n  sumOfSevenPrimes,\n  sumOfTenPrimes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n      if (n < 2) return 0;\n      if (n == 2) return 1;\n      return startsOneEnds(n - 2) + endsOneEnds(n - 2);\n    }\n    const endsOneEnds = (n) = > {\n      if (n == 0) return 0;\n      if (n == 1) return 1;\n      return endsOneEnds(n - 1) + startsOneEnds(n - 1);\n    }\n    const startsOneEnds = (n) = > {\n      if (n == 1) return 1;\n      return startsOneEnds(n - 1) + endsOneEnds(n - 1);\n    }\n  */\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let binary = \"\";\n    for (let i = 1; i <= N; i++) {\n        binary += String(i);\n    }\n    return binary;\n};\n\nexport default solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n\nconst isEven = (i) => {\n    return i % 2 === 0\n}\n\nconst sumEven = (lst) => {\n    let result = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (isEven(i)) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n\nconst addEven = (lst) => {\n    let result = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (isEven(i)) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n\nconst addEven = (lst) => {\n    let result = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result += lst[i]\n        }\n    }\n    return result\n}\n\nconst main = () => {\n    let result = add([4, 2, 6, 7])\n    console.log(result)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const charMap = {\n    a: 0, b: 1, c: 2, d: 3, e: 4, f: 5, g: 6, h: 7, i: 8, j: 9, k: 10, l: 11, m: 12, n: 13, o: 14, p: 15, q: 16, r: 17, s: 18, t: 19, u: 20, v: 21, w: 22, x: 23, y: 24, z: 25, A: 26, B: 27, C: 28, D: 29, E: 30, F: 31, G: 32, H: 33, I: 34, J: 35, K: 36, L: 37, M: 38, N: 39, O: 40, P: 41, Q: 42, R: 43, S: 44, T: 45, U: 46, V: 47, W: 48, X: 49, Y: 50, Z: 51\n  }\n  const chars = s.split('').map(c => charMap[c])\n  const charsLength = chars.length\n  const result = []\n  for (let i = 0; i < charsLength; i += 1) {\n    const j = i\n    const currentChars = chars[j].split(' ')\n    let currentChar = 0\n    let currentCharsLength = currentChars.length\n    while (currentCharsLength) {\n      const k = currentChars.length - 1\n      const currentCharValue = currentChars[k]\n      const kPreviousChar = currentChars[k - 1]\n      if (currentCharValue < kPreviousChar) {\n        const newChar = currentChars[k - 1]\n        currentChars[k - 1] = currentChar\n        currentChars[k] = newChar\n        currentCharsLength -= 1\n        currentChar += 1\n      }\n      currentCharsLength -= 1\n    }\n    result.push(currentChars.join(''))\n  }\n  return result.join('')\n}\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n      }\n      j += 1\n    }\n    return accRow\n  }, [])\n}\n\nconst getRow = (lst, x) => {\n  return lst.reduce((acc, row, i) => {\n    const row = row.slice()\n    const sortedRow = row.sort((a, b) => a - b)\n    const sortedRow = sortedRow.reverse()\n    const accRow = acc.slice()\n    const j = 0\n    for (let k = 0; k < x; k++) {\n      accRow.push([i, k])\n      if (j < sortedRow.length) {\n        accRow.push([sortedRow[j], k])\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.slice();\n\n  if (sorted.length === 0) {\n    return sorted;\n  }\n\n  if (sorted.length === 1) {\n    return sorted;\n  }\n\n  const sum = sorted[0] + sorted[sorted.length - 1];\n\n  if (sum % 2 === 1) {\n    sorted.sort();\n  } else {\n    sorted.sort((a, b) => b - a);\n  }\n\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const len = s.length\n  let i, j, k, result = ''\n  for (i = 0; i < len; i += 2) {\n    for (j = 0; j < 2; j++) {\n      k = len - i - 2\n      result += s[k]\n      result += s[k + 1]\n    }\n  }\n  return result\n}\n\n/**\n * Decrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const len = s.length\n  let i, j, k, result = ''\n  for (i = len - 2; i >= 0; i -= 2) {\n    for (j = len - 1; j > i; j -= 2) {\n      k = j - 1\n      result += s[k]\n      result += s[k + 1]\n    }\n  }\n  return result\n}\n\nconst encrypt_decrypt = (s) => {\n  const len = s.length\n  let i, j, k, result = ''\n  for (i = 0; i < len; i += 2) {\n    for (j = 0; j < 2; j++) {\n      k = len - i - 2\n      result += s[k]\n      result += s[k + 1]\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  encrypt: encrypt,\n  decrypt: decrypt,\n  encrypt_decrypt: encrypt_decrypt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n *   let s = lst[0]\n *   let i = 0\n *   let j = lst.length - 1\n *   while (i < j) {\n *     let n = Math.floor((i + j) / 2)\n *     if (lst[n] < s) i = n + 1\n *     else j = n\n *   }\n *   if (lst[i] < s) return null\n *   return lst[i]\n * }\n */\n\nconst nextSmallest = function (lst) {\n  let s = lst[0]\n  let i = 0\n  let j = lst.length - 1\n  while (i < j) {\n    let n = Math.floor((i + j) / 2)\n    if (lst[n] < s) i = n + 1\n    else j = n\n  }\n  if (lst[i] < s) return null\n  return lst[i]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\nconsole.log(nextSmallest([]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const isBored = words[0].toLowerCase() === 'i'\n  if (!isBored) {\n    for (let i = 1; i < words.length; i++) {\n      if (words[i].toLowerCase() === 'i' || words[i].toLowerCase() === 'you') {\n        isBored = true\n        break\n      }\n    }\n  }\n  return isBored\n}\n\n/*\n  The sentence is not boring.\n\n  >>> isBored(\"I love this weather\")\n  0\n  */\nconst isNotBored = (S) => {\n  const words = S.split(' ')\n  const isNotBored = words[0].toLowerCase()!== 'i'\n  if (!isNotBored) {\n    for (let i = 1; i < words.length; i++) {\n      if (words[i].toLowerCase() === 'i' || words[i].toLowerCase() === 'you') {\n        isNotBored = true\n        break\n      }\n    }\n  }\n  return isNotBored\n}\n\n/*\n  How do you say that?\n\n  >>> isBored(\"I love this weather\")\n  0\n  >>> isBored(\"I hate this weather\")\n  0\n  >>> isBored(\"You love this weather\")\n  0\n  >>> isBored(\"I love the weather\")\n  0\n  >>> isBored(\"I love the weather in your home\")\n  1\n  */\nconst isBoredIn = (S, T) => {\n  if (S === T) {\n    return true\n  } else if (S.toLowerCase() === T.toLowerCase()) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  How do you say that?\n\n  >>> isBored(\"I love this weather\")\n  0\n  >>> isBored(\"I hate this weather\")\n  0\n  >>> isBored(\"You love this weather\")\n  0\n  >>> isBored(\"I love the weather\")\n  0\n  >>> isBored(\"I love the weather in your home\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  */\nconst isBoredInYourHome = (S) => {\n  const words = S.split(' ')\n  const isBoredInHome = words[0].toLowerCase() === 'i' && words[1].toLowerCase() === 'home'\n  if (!isBoredInHome) {\n    for (let i = 1; i < words.length; i++) {\n      if (words[i].toLowerCase() === 'i' && words[i + 1].toLowerCase() === 'home') {\n        isBoredInHome = true\n        break\n      }\n    }\n  }\n  return isBoredInHome\n}\n\n/*\n  How do you say that?\n\n  >>> isBored(\"I love this weather\")\n  0\n  >>> isBored(\"I love the weather\")\n  0\n  >>> isBored(\"I love the weather in your home\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in your home\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your home\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  */\nconst isBoredInMyHouse = (S) => {\n  const words = S.split(' ')\n  const isBoredInHouse = words[0].toLowerCase() === 'i' && words[1].toLowerCase() === 'home'\n  if (!isBoredInHouse) {\n    for (let i = 1; i < words.length; i++) {\n      if (words[i].toLowerCase() === 'i' && words[i + 1].toLowerCase() === 'home') {\n        isBoredInHouse = true\n        break\n      }\n    }\n  }\n  return isBoredInHouse\n}\n\n/*\n  How do you say that?\n\n  >>> isBored(\"I love this weather\")\n  0\n  >>> isBored(\"I love the weather\")\n  0\n  >>> isBored(\"I love the weather in your home\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my house\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  0\n  >>> isBored(\"I love the weather in my home\")\n  0\n  >>> isBored(\"I love the weather in your house\")\n  "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return ((x - y) % (x + y + z) === 0) && (x > 0 && y > 0 && z > 0)\n}\n\n/* Create a function consisting of 4 numbers. Returns true if the sum of the first two is equal to the sum of the last two and all numbers are integers. Returns false in all other cases.\n  Examples\n  twoSum(2, 7, 9) ➞ true\n  twoSum(1, 2, 1) ➞ false\n  twoSum(1, 2, -1) ➞ true\n  twoSum(1.9, -2.5, 1) ➞ true\n  twoSum(1.9, -2.5, -1) ➞ false\n  */\nconst twoSum = (a, b, c) => {\n  return ((a - b) % (c + a + b) === 0) && (a > 0 && b > 0 && c > 0)\n}\n\n/* Create a function consisting of 5 numbers. Returns true if the sum of the first three is equal to the sum of the last three and all numbers are integers. Returns false in all other cases.\n  Examples\n  tripleSum(1, 2, 3, 2, 3) ➞ true\n  tripleSum(1, 2, 3, 4, 5) ➞ false\n  tripleSum(1, 2, 3, -2, 1) ➞ true\n  tripleSum(1, 2, 3, -2, -1) ➞ false\n  */\nconst tripleSum = (a, b, c, d, e) => {\n  return ((a - b) % (c + d + e + a + b) === 0) && (a > 0 && b > 0 && c > 0 && d > 0 && e > 0)\n}\n\n/* Create a function consisting of 4 numbers. Returns true if the sum of the first two is equal to the sum of the last two and all numbers are integers. Returns false in all other cases.\n  Examples\n  fourSum(1, 2, 7, 9) ➞ true\n  fourSum(2, -1, -2, -1) ➞ true\n  fourSum(1, 2, 1, 1) ➞ false\n  fourSum(1, 2, -1, -1) ➞ false\n  */\nconst fourSum = (a, b, c, d) => {\n  return ((a - b) % (c + d + a + b) === 0) && (a > 0 && b > 0 && c > 0 && d > 0)\n}\n\n/* Create a function consisting of 5 numbers. Returns true if the sum of the first three is equal to the sum of the last three and all numbers are integers. Returns false in all other cases.\n  Examples\n  fiveSum(1, 2, 3, 4, 5, 6) ➞ true\n  fiveSum(1, 2, 3, 4, 5, 7) ➞ false\n  fiveSum(1, 2, 3, 4, 7, 6) ➞ true\n  fiveSum(1, 2, 3, 4, 7, 8) ➞ false\n  fiveSum(1, 2, 3, 4, 5, 6, 7) ➞ true\n  fiveSum(1, 2, 3, 4, 5, 6, 8) ➞ false\n  fiveSum(1, 2, 3, 4, 5, 7, 8) ➞ true\n  fiveSum(1, 2, 3, 4, 5, 7, 9) ➞ false\n  */\nconst fiveSum = (a, b, c, d, e, f) => {\n  return ((a - b) % (c + d + e + f + a + b) === 0) && (a > 0 && b > 0 && c > 0 && d > 0 && e > 0 && f > 0)\n}\n\n/* Create a function consisting of 6 numbers. Returns true if the sum of the first three is equal to the sum of the last three and all numbers are integers. Returns false in all other cases.\n  Examples\n  sixSum(1, 2, 3, 4, 5, 6, 7) ➞ true\n  sixSum(1, 2, 3, 4, 5, 6, 8) ➞ true\n  sixSum(1, 2, 3, 4, 5, 7, 6) ➞ true\n  sixSum(1, 2, 3, 4, 5, 7, 8) ➞ false\n  sixSum(1, 2, 3, 4, 5, 6, 7, 8) ➞ true\n  sixSum(1, 2, 3, 4, 5, 6, 7, 9) ➞ true\n  sixSum(1, 2, 3, 4, 5, 6, 8, 7) ➞ true\n  sixSum(1, 2, 3, 4, 5, 6, 8, 7) ➞ false\n  sixSum(1, 2, 3, 4, 5, 7, 6, 8) ➞ true\n  sixSum(1, 2, 3, 4, 5, 7, 6, 8) ➞ false\n  sixSum(1, 2, 3, 4, 5, 7, 8, 6) ➞ true\n  sixSum(1, 2, 3, 4, 5, 7, 8, 6) ➞ false\n  sixSum(1, 2, 3, 4, 5, 6, 7, 8, 9) ➞ false\n  */\nconst sixSum = (a, b, c, d, e, f, g) => {\n  return ((a - b) % (c + d + e + f + g + a + b) === 0) && (a > 0 && b > 0 && c > 0 && d > 0 && e > 0 && f > 0 && g > 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let msg = message.toUpperCase();\n  let msgArray = msg.split(\"\");\n  let result = [];\n  let i;\n\n  for (i = msgArray.length - 1; i >= 0; i--) {\n    let char = msgArray[i];\n    if (char === \"A\" || char === \"E\" || char === \"I\" || char === \"O\" || char === \"U\") {\n      char = char + char.charAt(1);\n    }\n    result.push(char);\n  }\n\n  return result.join(\"\");\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    while (num > 0) {\n      let dig = num % 10;\n      if (dig > max) {\n        max = dig;\n      }\n      num = Math.floor(num / 10);\n    }\n  }\n  return max;\n};\n\nconst max = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    if (num > max) {\n      max = num;\n    }\n  }\n  return max;\n};\n\nmodule.exports = {\n  max,\n  skjkasdkd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(!dict) return false;\n  const keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++) {\n    if(keys[i].length === 0) return false;\n    if(!(keys[i].toLowerCase() === keys[i].toUpperCase())) return false;\n  }\n  return true;\n};\n\n/*\n  Check if the string is all numbers, return true if string is all numbers.\n  If the specified string is empty, the function should return false.\n  Examples:\n  checkAllNum(\"123\") should return true.\n  checkAllNum(\"a123\") should return false.\n  checkAllNum(\"\") should return false.\n  */\nconst checkAllNum = (str) => {\n  if(!str) return false;\n  if(str.length === 0) return false;\n  const nums = str.split(\"\");\n  for(let i = 0; i < nums.length; i++) {\n    if(!isNaN(parseInt(nums[i]))) return false;\n  }\n  return true;\n};\n\n/*\n  Check if the string is all letters, return true if string is all letters.\n  If the specified string is empty, the function should return false.\n  Examples:\n  checkAllLetter(\"a\") should return true.\n  checkAllLetter(\"a\") should return true.\n  checkAllLetter(\"\") should return false.\n  */\nconst checkAllLetter = (str) => {\n  if(!str) return false;\n  if(str.length === 0) return false;\n  const letters = str.split(\"\");\n  for(let i = 0; i < letters.length; i++) {\n    if(!(letters[i].match(/[A-Z]/i))) return false;\n  }\n  return true;\n};\n\n/*\n  Check if the string is all letters or numbers, return true if string is all letters or numbers.\n  If the specified string is empty, the function should return false.\n  Examples:\n  checkAllLetterOrNum(\"a\") should return true.\n  checkAllLetterOrNum(\"a\") should return true.\n  checkAllLetterOrNum(\"\") should return false.\n  */\nconst checkAllLetterOrNum = (str) => {\n  if(!str) return false;\n  if(str.length === 0) return false;\n  const letters = str.split(\"\");\n  for(let i = 0; i < letters.length; i++) {\n    if(!(letters[i].match(/[A-Za-z0-9]/i))) return false;\n  }\n  return true;\n};\n\n/*\n  Check if the string is all letters or numbers or special characters, return true if string is all letters or numbers or special characters.\n  If the specified string is empty, the function should return false.\n  Examples:\n  checkAllLetterOrNum(\"a\") should return true.\n  checkAllLetterOrNum(\"a\") should return true.\n  checkAllLetterOrNum(\"\") should return false.\n  */\nconst checkAllLetterOrNumOrSpecial = (str) => {\n  if(!str) return false;\n  if(str.length === 0) return false;\n  const letters = str.split(\"\");\n  for(let i = 0; i < letters.length; i++) {\n    if(!(letters[i].match(/[A-Za-z0-9,()|/:*?&<>\\s]/i))) return false;\n  }\n  return true;\n};\n\n/*\n  Check if the string is all letters or numbers or special characters or uppercase or lowercase, return true if string is all letters or numbers or special characters or uppercase or lowercase.\n  If the specified string is empty, the function should return false.\n  Examples:\n  checkAllLetterOrNumOrSpecial(\"a\") should return true.\n  checkAllLetterOrNumOrSpecial(\"a\") should return true.\n  checkAllLetterOrNumOrSpecial(\"\") should return false.\n  */\nconst checkAllLetterOrNumOrSpecialOrUpperLower = (str) => {\n  if(!str) return false;\n  if(str.length === 0) return false;\n  const letters = str.split(\"\");\n  for(let i = 0; i < letters.length; i++) {\n    if(!(letters[i].match(/[A-Za-z0-9,()|/:*?&<>\\s]/i))) return false;\n    if(!(letters[i].toUpperCase() === letters[i].toLowerCase())) return false;\n  }\n  return true;\n};\n\n/*\n  Check if the string is all letters or numbers or special characters or uppercase or lowercase or all numbers, return true if string is all letters or numbers or special characters or uppercase or lowercase or all numbers.\n  If the specified string is empty, the function should return false.\n  Examples:\n  checkAllLetterOrNumOrSpecialOrUpperLower(\"a\") should return true.\n  checkAllLetterOrNumOrSpecialOrUpperLower(\"a\") should return true.\n  checkAllLetterOrNumOrSpecialOrUpperLower(\"\") should return false.\n  */\nconst checkAllLetterOrNumOrSpecialOrUpperLowerOrAllNum = (str) => {\n  if(!str) return false;\n  if(str.length === 0) return false;\n  const letters = str.split(\"\");\n  for(let i = 0; i < letters.length; i++) {\n    if(!(letters[i].match(/[A-Za-z0-9,()|/:"}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n <= 0) return []\n  let primeArray = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primeArray.push(i)\n    }\n  }\n  return primeArray\n}\n\n/**\n  * Returns true if a number is prime, else false.\n  * @param {number} n\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/**\n * Given a non-negative integer number, return the next largest number that is prime.\n */\nconst nextPrime = (n) => {\n  if (n <= 1) return 1\n  for (let i = n + 1; i <= 2 * n; i++) {\n    if (isPrime(i)) return i\n  }\n  return 2 * n\n}\n\n// console.log(countUpTo(5))\n// console.log(countUpTo(11))\n// console.log(countUpTo(0))\n// console.log(countUpTo(20))\n// console.log(countUpTo(1))\n// console.log(countUpTo(18))\n// console.log(nextPrime(5))\n// console.log(nextPrime(11))\n// console.log(nextPrime(0))\n// console.log(nextPrime(20))\n// console.log(nextPrime(1))\n// console.log(nextPrime(18))\n// console.log(nextPrime(20))\n// console.log(nextPrime(21))\n// console.log(nextPrime(2 * 20))\n// console.log(nextPrime(2 * 21))\n// console.log(nextPrime(2 * 22))\n// console.log(nextPrime(2 * 23))\n// console.log(nextPrime(2 * 24))\n// console.log(nextPrime(2 * 25))\n// console.log(nextPrime(2 * 26))\n// console.log(nextPrime(2 * 27))\n// console.log(nextPrime(2 * 28))\n// console.log(nextPrime(2 * 29))\n// console.log(nextPrime(2 * 30))\n// console.log(nextPrime(2 * 31))\n// console.log(nextPrime(2 * 32))\n// console.log(nextPrime(2 * 33))\n// console.log(nextPrime(2 * 34))\n// console.log(nextPrime(2 * 35))\n// console.log(nextPrime(2 * 36))\n// console.log(nextPrime(2 * 37))\n// console.log(nextPrime(2 * 38))\n// console.log(nextPrime(2 * 39))\n// console.log(nextPrime(2 * 40))\n// console.log(nextPrime(2 * 41))\n// console.log(nextPrime(2 * 42))\n// console.log(nextPrime(2 * 43))\n// console.log(nextPrime(2 * 44))\n// console.log(nextPrime(2 * 45))\n// console.log(nextPrime(2 * 46))\n// console.log(nextPrime(2 * 47))\n// console.log(nextPrime(2 * 48))\n// console.log(nextPrime(2 * 49))\n// console.log(nextPrime(2 * 50))\n// console.log(nextPrime(2 * 51))\n// console.log(nextPrime(2 * 52))\n// console.log(nextPrime(2 * 53))\n// console.log(nextPrime(2 * 54))\n// console.log(nextPrime(2 * 55))\n// console.log(nextPrime(2 * 56))\n// console.log(nextPrime(2 * 57))\n// console.log(nextPrime(2 * 58))\n// console.log(nextPrime(2 * 59))\n// console.log(nextPrime(2 * 60))\n// console.log(nextPrime(2 * 61))\n// console.log(nextPrime(2 * 62))\n// console.log(nextPrime(2 * 63))\n// console.log(nextPrime(2 * 64))\n// console.log(nextPrime(2 * 65))\n// console.log(nextPrime(2 * 66))\n// console.log(nextPrime(2 * 67))\n// console.log(nextPrime(2 * 68))\n// console.log(nextPrime(2 * 69))\n// console.log(nextPrime(2 * 70))\n// console.log(nextPrime(2 * 71))\n// console.log(nextPrime(2 * 72))\n// console.log(nextPrime(2 * 73))\n// console.log(nextPrime(2 * 74))\n// console.log(nextPrime(2 * 75))\n// console.log(nextPrime(2 * 76))\n// console.log(nextPrime(2 * 77))\n// console.log(nextPrime(2 * 78))\n// console.log(nextPrime(2 * 79))\n// console.log(nextPrime(2 * 80))\n// console.log(nextPrime(2 * 81))\n// console.log(nextPrime(2 * 82))\n// console.log(nextPrime(2 * 83))\n// console.log(nextPrime(2 * 84))\n// console.log(nextPrime(2 * 85))\n// console.log(nextPrime(2 * 86))\n// console.log(nextPrime(2 * 87))\n// console.log(nextPrime(2 * 88))\n// console.log(nextPrime(2 * 89))\n// console.log(nextPrime(2 * 90))\n// console.log(nextPrime(2 * 91))\n// console.log(nextPrime(2 * 92))\n// console.log(nextPrime"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0) return 0;\n  if (b === 0) return 0;\n  let result = a % 10;\n  a = a / 10;\n  while (b > 0) {\n    result = result * 10 + b % 10;\n    b = b / 10;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two integers and returns their sum.\n  The sum of two integers a and b is the same as their sum and difference. For example:\n  a = 1, b = 2, sum(a, b) = 3, sum(b, a) = 3, sum(a, -b) = -1, sum(-b, a) = -1\n  The sum of two integers a and b should be in the range of [-100, 100].\n*/\nconst sum = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a > 0 && b > 0) return a + b;\n  if (a > 0 && b < 0) return a - b;\n  if (a < 0 && b > 0) return b - a;\n  return a + b;\n};\n\n/*\n  Complete the function that takes two integers and returns the largest of their sum.\n  The sum of two integers a and b is the same as their sum and difference. For example:\n  a = 1, b = 2, sum(a, b) = 3, sum(b, a) = 3, sum(a, -b) = -1, sum(-b, a) = -1\n  The sum of two integers a and b should be in the range of [-100, 100].\n*/\nconst max = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a > 0 && b > 0) return Math.max(a + b, b + a);\n  if (a > 0 && b < 0) return Math.max(a + b, b - a);\n  if (a < 0 && b > 0) return Math.max(b + a, a - b);\n  return Math.max(a + b, -b + a);\n};\n\n/*\n  Complete the function that takes two integers and returns the smallest of their sum.\n  The sum of two integers a and b is the same as their sum and difference. For example:\n  a = 1, b = 2, sum(a, b) = 3, sum(b, a) = 3, sum(a, -b) = -1, sum(-b, a) = -1\n  The sum of two integers a and b should be in the range of [-100, 100].\n*/\nconst min = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a > 0 && b > 0) return Math.min(a + b, b + a);\n  if (a > 0 && b < 0) return Math.min(a + b, b - a);\n  if (a < 0 && b > 0) return Math.min(b + a, a - b);\n  return Math.min(a + b, -b + a);\n};\n\n/*\n  Complete the function that takes two integers and returns the product of their sum.\n  The sum of two integers a and b is the same as their sum and difference. For example:\n  a = 1, b = 2, sum(a, b) = 3, sum(b, a) = 3, sum(a, -b) = -1, sum(-b, a) = -1\n  The sum of two integers a and b should be in the range of [-100, 100].\n*/\nconst product = (a, b) => {\n  return a * b;\n};\n\nconst print = (a, b) => {\n  if (a === 0) {\n    console.log(b);\n    return;\n  }\n  if (b === 0) {\n    console.log(a);\n    return;\n  }\n  console.log(a +'' + b +'='+ sum(a, b));\n  console.log(a +'' + b +'='+ multiply(a, b));\n  console.log(a +'' + b +'='+ sum(b, a));\n  console.log(a +'' + b +'='+ multiply(b, a));\n  console.log(a +'' + b +'='+ sum(a, -b));\n  console.log(a +'' + b +'='+ multiply(a, -b));\n  console.log(a +'' + b +'='+ sum(b, -a));\n  console.log(a +'' + b +'='+ multiply(b, -a));\n};\n\nprint(10, 12);\nprint(10, -12);\nprint(12, -10);\nprint(-10, -12);\nprint(1, -1);\nprint(-1, 1);\nprint(1, -1);\nprint(-1, 1);\nprint(14, 412);\nprint(19, 28);\nprint(2020, 1851);\nprint(14, -15);\nprint(14, 15);\nprint(15, 14);\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i+=2) {\n    if (chars[i] === chars[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 1; i < chars.length; i+=2) {\n    if (chars[i] === chars[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerInEven = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i+=2) {\n    if (chars[i] === chars[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of letters in odd indexes is counted.\n  \n  For example:\n  countLetters('aBCdEf') returns 1\n  countLetters('abcdefg') returns 0\n  countLetters('dBBE') returns 1\n  */\nconst countLetters = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 1; i < chars.length; i+=2) {\n    count++;\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of letters in even indexes is counted.\n  \n  For example:\n  countLetters('aBCdEf') returns 0\n  countLetters('abcdefg') returns 1\n  countLetters('dBBE') returns 0\n  */\nconst countLettersInEven = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i+=2) {\n    count++;\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of digits in even indexes is counted.\n  \n  For example:\n  countDigits('aBCdEf') returns 0\n  countDigits('abcdefg') returns 1\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i+=2) {\n    if (chars[i] === chars[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of digits in odd indexes is counted.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 1\n  */\nconst countDigitsInEven = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 1; i < chars.length; i+=2) {\n    if (chars[i] === chars[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of digits in even indexes is counted.\n  \n  For example:\n  countDigits('aBCdEf') returns 0\n  countDigits('abcdefg') returns 1\n  countDigits('dBBE') returns 0\n  */\nconst countDigitsInOdd = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i+=2) {\n    if (chars[i] === chars[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of letters in odd indexes is counted.\n  \n  For example:\n  countLetters('aBCdEf') returns 1\n  countLetters('abcdefg') returns 0\n  countLetters('dBBE') returns 1\n  */\nconst countLettersInOdd = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 1; i < chars.length; i+=2) {\n    count++;\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of letters in even indexes is counted.\n  \n  For example:\n  countLetters('aBCdEf') returns 0\n  countLetters('abcdefg') returns 1\n  countLetters('dBBE') returns 0\n  */\nconst countLettersInEven = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i = 0; i < chars.length; i+=2) {\n    count++;\n  }\n  return count;\n}\n\n/*\n  For a string s, the number of digits in odd indexes is counted.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 1\n  */\nconst countDigitsInEven = (s) => {\n  const chars = s.split('');\n  const count = 0;\n  for (let i ="}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10);\n  if (Math.abs(number) === 1) return number;\n  if (Math.abs(number) === 2) return number > 0? 1 : -1;\n  return Math.round(number);\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    if (n === 1) return [1];\n    let m = n - 1;\n    let evens = m & 1? m + 1 : m;\n    return [m, evens];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/(\\s+|,|\\.|:|;|\\/|\\?|\\!)/g);\n  return words;\n}\n\n/*\n  You get a string with spaces between the words and you need to return a new string with all spaces removed.\n  \n  For example:\n  removeSpaces(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  removeSpaces(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  removeSpaces(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  removeSpaces(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  removeSpaces(\"\") == \"\"\n  */\nconst removeSpaces = (s) => {\n  let spaceString = \"\";\n  let spaces = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \" \") {\n      spaceString += \" \";\n      spaces += 1;\n    } else {\n      spaceString += s[i];\n      spaces = 0;\n    }\n  }\n  return spaceString;\n}\n\n/*\n  You get an array of words and you need to return a new array with all the spaces removed.\n  \n  For example:\n  removeSpaces([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  removeSpaces([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  removeSpaces([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  removeSpaces([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  removeSpaces([\"\"]) == []\n  */\nconst removeSpacesFromArray = (s) => {\n  let spaces = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \" \") {\n      spaces.push(s[i]);\n    }\n  }\n  return spaces;\n}\n\n/*\n  You get an array of words and you need to return a new array with all the words sorted alphabetically.\n  \n  For example:\n  sortWords([\"One Two Three Four Five Six\", \"One\", \"Two\", \"Three Four Five Six\", \"Five Six\"]) == [\"One Two Three Four Five Six\", \"Five Six\", \"One\", \"Two Three Four Five Six\"]\n  sortWords([\"One Two Three Four Five Six\", \"One\", \"Two\", \"Three Four Five Six\", \"Five Six\"]) == [\"One Two Three Four Five Six\", \"Five Six\", \"One\", \"Two Three Four Five Six\"]\n  sortWords([\"One Two Three Four Five Six\", \"Five Six\", \"One\", \"Two Three Four Five Six\", \"Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"Five Six\", \"One\", \"Two Three Four Five Six\", \"Three Four Five Six\"]\n  sortWords([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  sortWords([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  sortWords([\"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\"]\n  sortWords([\"\"]) == []\n  */\nconst sortWords = (s) => {\n  let sorted = s.sort();\n  return sorted;\n}\n\n/*\n  You get an array of strings and you need to return a new array with the first element in each string trimmed.\n  \n  For example:\n  trimStrings([\"  One Two Three Four Five Six  \", \"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"One Two Three Four Five Six\"]\n  trimStrings([\"  One Two Three Four Five Six  \", \"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"One Two Three Four Five Six\"]\n  trimStrings([\"  One Two Three Four Five Six  \", \"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"One Two Three Four Five Six\"]\n  trimStrings([\"  One Two Three Four Five Six  \", \"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"One Two Three Four Five Six\"]\n  trimStrings([\"  One Two Three Four Five Six  \", \"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"One Two Three Four Five Six\"]\n  trimStrings([\"  One Two Three Four Five Six  \", \"One Two Three Four Five Six\"]) == [\"One Two Three Four Five Six\", \"One Two Three Four Five Six\"]\n  trimStrings([\"\"]) == []\n  */\nconst trimStrings = (s) => {\n  let trimmed = [];\n  for (let i = 0; i < s.length; i++) {\n    let string = s[i];\n    let space = string.indexOf(\" \");\n    let newString = string.substring(space+1, string.length-space);\n    trimmed.push(newString);\n  }\n  return trimmed;\n}\n\n/*\n  You get a string and you need to return a new string with all the words sorted alphabetically.\n  \n  For example:\n  sortWords(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  sortWords(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  sortWords(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  sortWords(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  sortWords(\"One Two Three Four Five Six\") == \"One Two Three Four Five Six\"\n  sortWords(\"\") == \"\"\n  */\nconst sortWordsFromString = (s) => {\n  let sorted = s.toLowerCase().split(\" \");\n  return sorted.sort().join(\" \");\n}\n\nmodule.exports = {\n  wordsString,\n  removeSpaces,"}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const half = (x + y) / 2;\n\n  return half % 2? half : half - 1;\n};\n\nexport {chooseNum};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1\n  const res = (Math.floor(n / 2) + Math.floor(m / 2))\n  return Number(res.toString(2)).toString(2)\n}\n\nconst average = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average2 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average3 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average4 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average5 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average6 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average7 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average8 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average9 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average10 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average11 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average12 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average13 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average14 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average15 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average16 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average17 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average18 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average19 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average20 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average21 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average22 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average23 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average24 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average25 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average26 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average27 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average28 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average29 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average30 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average31 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average32 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average33 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average34 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average35 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average36 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average37 = (n, m) => {\n  if (n > m) return -1\n  return (n + m) / 2\n}\n\nconst average38 = (n, m) => {\n  if (n >"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let digits = x.toString().split('')\n  let sortedDigits = digits.sort()\n  let uniqueDigits = []\n  for (let i = 0; i < sortedDigits.length; i++) {\n    if (i % 2 === 0) {\n      uniqueDigits.push(sortedDigits[i])\n    }\n  }\n  return uniqueDigits\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (!arr) {\n    return []\n  }\n  const arrLen = arr.length\n  const sorted = arr.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  let reverse = sorted.slice().reverse()\n  let replace = []\n  for (let i = 0; i < arrLen; i++) {\n    replace.push(sorted[i] === 1? 'one' : sorted[i] === 2? 'two' : sorted[i] === 3? 'three' : sorted[i] === 4? 'four' : sorted[i] === 5? 'five' : sorted[i] === 6?'six' : sorted[i] === 7?'seven' : sorted[i] === 8? 'eight' : sorted[i] === 9? 'nine' : sorted[i])\n  }\n  return replace\n}\n\nconsole.log(byLength([1, 1, 1, 4, 5, 8, 2, 3]))\nconsole.log(byLength([8, 5, 4, 3, 2, 2, 1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return (n <= 1)\n   ? [1]\n    : [1].concat(f(n - 1).map((x) => x * n));\n}\n\nf(5).forEach((n) => {\n  console.log(n);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let evenOdd = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                evenOdd++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [evenOdd, odd];\n}\n\nconst isPalindrome = (n) => {\n    if (n < 0) return false;\n    let reversed = n;\n    while (reversed) {\n        if (n === reversed) return true;\n        reversed = reversed * 10;\n    }\n    return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b);\n  const nonZeros = sortedArr.filter(x => x > 0);\n  return nonZeros.length;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const max = arr.length - 1;\n  const min = 0;\n  const middle = Math.floor((max + min) / 2);\n  let sorted = false;\n  while (!sorted) {\n    for (let i = max; i >= min; i--) {\n      let j = i;\n      let temp = arr[j];\n      while (arr[j] < arr[j - 1]) {\n        arr[j] = arr[j - 1];\n        j--;\n      }\n      arr[j] = temp;\n    }\n    sorted = true;\n    for (let i = 0; i <= max; i++) {\n      if (arr[i] < arr[i + 1]) {\n        sorted = false;\n        break;\n      }\n    }\n    if (sorted) {\n      return true;\n    }\n    let mid = middle;\n    while (arr[mid] < arr[min]) {\n      mid++;\n    }\n    if (arr[min] < arr[mid]) {\n      min = mid;\n    } else if (arr[mid] < arr[max]) {\n      max = mid;\n    } else {\n      sorted = false;\n    }\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Count = lst1.length;\n  const lst2Count = lst2.length;\n  const lst1Start = 0;\n  const lst1End = lst1Count - 1;\n  const lst2Start = 0;\n  const lst2End = lst2Count - 1;\n\n  let lst1Even = true;\n  let lst2Even = true;\n  let i = 0;\n  let j = 0;\n\n  while (lst1Start <= lst1End && lst2Start <= lst2End) {\n    if (lst1[lst1Start] % 2!== 0) {\n      lst1Even = false;\n    }\n    if (lst2[lst2Start] % 2!== 0) {\n      lst2Even = false;\n    }\n\n    if (lst1[lst1Start] === lst2[lst2Start]) {\n      lst1Start++;\n      lst2Start++;\n      i++;\n      j++;\n    } else if (lst1[lst1Start] < lst2[lst2Start]) {\n      lst1Start++;\n      i++;\n    } else if (lst1[lst1Start] > lst2[lst2Start]) {\n      lst2Start++;\n      j++;\n    }\n  }\n\n  return (lst1Even && lst2Even)? \"YES\" : \"NO\";\n};\n\nexport default exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const dictionary = {}\n  const testArr = test.split(' ')\n  for (let i = 0; i < testArr.length; i++) {\n    const letter = testArr[i]\n    if (dictionary[letter] === undefined) {\n      dictionary[letter] = 1\n    } else {\n      dictionary[letter]++\n    }\n  }\n  return dictionary\n}\n\n/*\n  Test: histogram('a b c')\n  Output: {'a': 1, 'b': 1, 'c': 1}\n  Test: histogram('a b b a')\n  Output: {'a': 2, 'b': 2}\n  Test: histogram('b b b b a')\n  Output: {'b': 4}\n  Test: histogram('')\n  Output: {}\n  */\nconsole.log(histogram('a b c'))\nconsole.log(histogram('a b b a'))\nconsole.log(histogram('b b b b a'))\nconsole.log(histogram(''))\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  // console.log(s,c)\n  const len = s.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      result.push(s[i])\n      s = s.slice(0, i) + s.slice(i+1)\n      break\n    }\n  }\n  if (s === \"\") {\n    return (result,true)\n  } else {\n    return (result, false)\n  }\n}\n\n// console.log(reverseDelete(\"abcde\", \"ae\"))\n// console.log(reverseDelete(\"abcdef\", \"b\"))\n// console.log(reverseDelete(\"abcdedcba\", \"ab\"))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let numOdd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let odd = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        odd++;\n      }\n    }\n    if (odd!== 0) {\n      numOdd += odd;\n    }\n  }\n  return [`the number of odd elements ${numOdd} of the ${lst.length} string of input.`];\n};\n\nexport {oddCount};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  // a cache of the sum of the sub-arrays\n  const sumOfSubArrays = new Map();\n  // return the minimum sum of the sub-arrays\n  return (\n    (sumOfSubArrays.get(nums) ||\n      // calculate the sum of the sub-arrays and add it to the cache\n      (sumOfSubArrays.set(nums, nums.reduce((prev, curr, index) =>\n        (index === 0? prev + curr : prev), 0)) ||\n        // if the sum of the sub-arrays is smaller than the smallest sum, return it\n        (index === nums.length - 1 && nums[index - 1] < nums[index] &&\n          Math.min(nums[index - 1], nums[index]) - Math.max(nums[index - 1], nums[index]) <= sumOfSubArrays.get(nums.slice(0, index + 1))))));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let dp = [[0] * (grid.length + 1)];\n  dp[0][0] = 1;\n  \n  for (let i = 0; i < grid.length; i++) {\n    dp[i + 1][0] = 0;\n    dp[i + 1][1] = dp[i][0];\n  }\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 1; j < grid[i].length + 1; j++) {\n      dp[i + 1][j] = dp[i][j - 1] + dp[i][j] - dp[i][j - 1];\n    }\n  }\n  \n  let ans = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 1; j <= capacity; j++) {\n      ans += dp[grid.length - 1][j];\n    }\n  }\n  \n  return ans;\n};\n\nconst maxFill = (grid, capacity) => {\n  let dp = [[0] * (grid.length + 1)];\n  dp[0][0] = 1;\n  \n  for (let i = 0; i < grid.length; i++) {\n    dp[i + 1][0] = 0;\n    dp[i + 1][1] = dp[i][0];\n  }\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 1; j < grid[i].length + 1; j++) {\n      dp[i + 1][j] = dp[i][j - 1] + dp[i][j] - dp[i][j - 1];\n    }\n  }\n  \n  let ans = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 1; j <= capacity; j++) {\n      ans += dp[grid.length - 1][j];\n    }\n  }\n  \n  return ans;\n};\n\n// const maxFill = (grid, capacity) => {\n//   let dp = [[0] * (grid.length + 1)];\n//   dp[0][0] = 1;\n//   \n//   for (let i = 0; i < grid.length; i++) {\n//     dp[i + 1][0] = 0;\n//     dp[i + 1][1] = dp[i][0];\n//   }\n//   \n//   for (let i = 0; i < grid.length; i++) {\n//     for (let j = 1; j < grid[i].length + 1; j++) {\n//       dp[i + 1][j] = dp[i][j - 1] + dp[i][j] - dp[i][j - 1];\n//     }\n//   }\n//   \n//   let ans = 0;\n//   for (let i = 0; i < grid.length; i++) {\n//     for (let j = 1; j <= capacity; j++) {\n//       ans += dp[grid.length - 1][j];\n//     }\n//   }\n//   \n//   return ans;\n// };\n\nlet maxFill = (grid, capacity) => {\n  let dp = [[0] * (grid.length + 1)];\n  dp[0][0] = 1;\n  \n  for (let i = 0; i < grid.length; i++) {\n    dp[i + 1][0] = 0;\n    dp[i + 1][1] = dp[i][0];\n  }\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 1; j < grid[i].length + 1; j++) {\n      dp[i + 1][j] = dp[i][j - 1] + dp[i][j] - dp[i][j - 1];\n    }\n  }\n  \n  let ans = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 1; j <= capacity; j++) {\n      ans += dp[grid.length - 1][j];\n    }\n  }\n  \n  return ans;\n};\n\nlet grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nlet capacity = 1;\n\nconsole.log(maxFill(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [...new Array(arr.length)].sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\n  return result;\n};\n\n// console.log(sortArray([1, 5, 2, 3, 4]));\n// console.log(sortArray([-2, -3, -4, -5, -6]));\n// console.log(sortArray([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = [];\n  let last = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      if (n === 1) {\n        if (i - last === 1) {\n          arr.push(s.substring(last, i + 1));\n        }\n      }\n      last = i + 1;\n    }\n  }\n  if (n === 1) {\n    if (s.length - last === 1) {\n      arr.push(s.substring(last, s.length));\n    }\n  }\n  return arr;\n};\n\n/*Given a string s and a non-empty int n, you have been tasked to implement a \n  function that returns the index of the first occurrence of n in s. If the \n  string s is empty then the function should return -1.\n  Note: The int n should be a positive number.\n  Examples:\n  findIndex(\"aaabbbccc\", 3) ==> 2\n  findIndex(\"aaa\", 3) ==> -1\n  */\nconst findIndex = (s, n) => {\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === n) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*Given a string s, you have been tasked to implement a function that finds the \n  length of the longest substring that contains only characters from s. If the \n  string s is empty then the function should return 0.\n  Note: The length of the string s will be in the range [1, 1000].\n  Examples:\n  longestSubstring(\"aab\") ==> 2\n  longestSubstring(\"\") ==> 0\n  longestSubstring(\"abcabcabc\") ==> 4\n  longestSubstring(\"bbbbbbb\") ==> 4\n  longestSubstring(\"abb\") ==> 2\n  longestSubstring(\"abcab\") ==> 3\n  longestSubstring(\"abc\") ==> 1\n  longestSubstring(\"ab\") ==> 1\n  longestSubstring(\"a\") ==> 1\n  longestSubstring(\"\") ==> 0\n  longestSubstring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letter = word[word.length - 1]\n  const vowel = letter.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel2 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel3 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel4 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel5 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel6 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel7 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel8 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel9 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel10 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel11 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel12 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel13 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel14 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel15 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel16 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel17 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel18 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel19 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel20 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel21 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel22 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel23 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel24 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel25 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel26 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel27 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel28 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel29 = (word) => {\n  const vowel = word.match(/[AEIOUY]/)\n  return vowel? vowel[0] : ''\n}\n\nconst getClosestVowel30 = (word) => {\n"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let isBalanced = true;\n  while (i < j) {\n    if (lst[i]!== '(' && lst[j]!== ')') {\n      isBalanced = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isBalanced;\n};\n\nconst isGood = (s) => matchParens(s.split(''));\n\nmodule.exports = isGood;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    if (k === 0) return []\n    const d = new Int32Array(arr.length)\n    d[0] = arr[0]\n    d[1] = arr[1]\n    const max = arr[0]\n    for (let i = 2; i < arr.length; i++) {\n        if (arr[i] > max) {\n            d[0] = arr[i]\n            max = arr[i]\n        }\n    }\n    const maxLen = d[0]\n    for (let i = 2; i < arr.length; i++) {\n        if (arr[i] > max) {\n            d[i] = arr[i]\n            max = arr[i]\n        }\n    }\n    return d.slice(0, k)\n}\n\nconst test = (actual, expected) => {\n    console.log(`actual:${actual}`)\n    console.log(`expected:${expected}`)\n    console.log(`expected:${JSON.stringify(expected)}`)\n    console.log(`actual:${JSON.stringify(actual)}`)\n    assert.deepEqual(actual, expected)\n}\n\nconst number = (a, b) => {\n    if (a > b) return a\n    return b\n}\n\nconst test1 = maximum([-3, -4, 5], 3)\ntest(test1, [-4, -3, 5])\n\nconst test2 = maximum([4, -4, 4], 2)\ntest(test2, [4, 4])\n\nconst test3 = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\ntest(test3, [2])\n\nconst test4 = maximum([-3, 2, 1, 2, -1, -2, 1, -1, -2, 1, -2, 1, -2, 1, -1, -2, 1, -1, -2, 1, -2, 1, -2, 1, -2, 1, -2, 1, -2, 1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2, 1, -1, -2,"}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const oddElements = lst.filter((el) => el % 2 === 1)\n  const evenElements = lst.filter((el) => el % 2 === 0)\n  return oddElements.reduce((prev, curr) => prev + curr) + evenElements.reduce((prev, curr) => prev + curr)\n}\n\nexport default solution\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let max = 0;\n\n  for (let i = 0; i < k; i++) {\n    let n = arr[i];\n    sum += n;\n    if (n >= 10) {\n      if (sum - n <= max) {\n        max = sum - n;\n      }\n    } else {\n      if (sum <= max) {\n        max = sum;\n      }\n    }\n  }\n\n  return max;\n};\n\n// Note:\n// The input may contain duplicate numbers.\n// Your algorithm should return the maximum sum of the elements with a maximum of two digits.\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    let arr = [];\n    while (n > 1) {\n        arr.unshift(n);\n        if (n % 2 === 1) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    arr.unshift(1);\n    return arr;\n};\n\nmodule.exports = getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const month = parseInt(date.split('-')[1]);\n  const day = parseInt(date.split('-')[2]);\n  const year = parseInt(date.split('-')[0]);\n  const date_is_valid = month <= 12 && month >= 1 && day <= 31 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month = month >= 1 && month <= 12 && day <= 30 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month2 = month >= 4 && month <= 6 && day <= 29 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month3 = month >= 9 && month <= 11 && day <= 30 && day >= 1 && year >= 1900;\n  return date_is_valid && date_is_valid_for_month && date_is_valid_for_month2 && date_is_valid_for_month3;\n};\n\nconst addDays = (days, months) => {\n  const newDate = new Date(Date.parse(months.toString() + '-' + days.toString() + '-20' + years.toString()));\n  return newDate;\n};\n\nconst daysInMonth = (month, year) => {\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  if (month <= months.length) {\n    return new Date(Date.parse(months[month - 1] + '-' + year + '-01')).getDate();\n  } else {\n    return new Date(Date.parse(months[month - 1] + '-' + year + '-01')).getDate() + 31;\n  }\n};\n\nconst validateDate = (date) => {\n  const month = parseInt(date.split('-')[1]);\n  const day = parseInt(date.split('-')[2]);\n  const year = parseInt(date.split('-')[0]);\n  const date_is_valid = month <= 12 && month >= 1 && day <= 31 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month = month >= 1 && month <= 12 && day <= 30 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month2 = month >= 4 && month <= 6 && day <= 29 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month3 = month >= 9 && month <= 11 && day <= 30 && day >= 1 && year >= 1900;\n  return date_is_valid && date_is_valid_for_month && date_is_valid_for_month2 && date_is_valid_for_month3;\n};\n\nconst validateDateAndAddDays = (date) => {\n  const month = parseInt(date.split('-')[1]);\n  const day = parseInt(date.split('-')[2]);\n  const year = parseInt(date.split('-')[0]);\n  const date_is_valid = month <= 12 && month >= 1 && day <= 31 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month = month >= 1 && month <= 12 && day <= 30 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month2 = month >= 4 && month <= 6 && day <= 29 && day >= 1 && year >= 1900;\n  const date_is_valid_for_month3 = month >= 9 && month <= 11 && day <= 30 && day >= 1 && year >= 1900;\n  return date_is_valid && date_is_valid_for_month && date_is_valid_for_month2 && date_is_valid_for_month3;\n};\n\nmodule.exports = {\n  validDate,\n  validateDate,\n  validateDateAndAddDays,\n  addDays\n};<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] =='') {\n      list.push(txt.slice(0, i))\n      i++\n    } else {\n      i++\n    }\n  }\n  list.push(txt.slice(0, i))\n  return list\n}\n\n/*\n  # Splits a sentence by a space.\n  sentenceSplit(\"Hello world\") ➞ [\"Hello world\"]\n  sentenceSplit(\"Hello world!\", \"!\") ➞ [\"Hello world\", \"!\"]\n  sentenceSplit(\"Hello, world!\", \"!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"abcdef\") == 3\n  */\nconst sentenceSplit = (txt, splitStr) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] == splitStr) {\n      list.push(txt.slice(0, i))\n      i++\n    } else {\n      i++\n    }\n  }\n  list.push(txt.slice(0, i))\n  return list\n}\n\n/*\n  # Splits a sentence by a space.\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"abcdef\") == 3\n  */\nconst sentenceSplitByWords = (txt) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] =='') {\n      list.push(txt.slice(0, i))\n      i++\n    } else {\n      i++\n    }\n  }\n  list.push(txt.slice(0, i))\n  return list\n}\n\n/*\n  # Splits a sentence by a space.\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"abcdef\") == 3\n  */\nconst sentenceSplitByWords2 = (txt) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] =='') {\n      list.push(txt.slice(0, i))\n      i++\n    } else {\n      i++\n    }\n  }\n  list.push(txt.slice(0, i))\n  return list\n}\n\n/*\n  # Splits a sentence by a space.\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"abcdef\") == 3\n  */\nconst sentenceSplitByWords3 = (txt) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] =='') {\n      list.push(txt.slice(0, i))\n      i++\n    } else {\n      i++\n    }\n  }\n  list.push(txt.slice(0, i))\n  return list\n}\n\n/*\n  # Splits a sentence by a space.\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"abcdef\") == 3\n  */\nconst sentenceSplitByWords4 = (txt) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] =='') {\n      list.push(txt.slice(0, i))\n      i++\n    } else {\n      i++\n    }\n  }\n  list.push(txt.slice(0, i))\n  return list\n}\n\n/*\n  # Splits a sentence by a space.\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello world!\") ➞ [\"Hello world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"Hello, world!\") ➞ [\"Hello, world!\", \"!\"]\n  sentenceSplit(\"abcdef\") == 3\n  */\nconst sentenceSplitByWords5 = (txt) => {\n  let i = 0\n  let txtLength = txt.length\n  let list = []\n  while (i < txtLength) {\n    if (txt[i] =='') {\n      list.push(txt.slice(0, i))\n      "}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const isSortedArray = (arr) => {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n    if (arr.length < 2) {\n      return true;\n    }\n\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (!Array.isArray(lst)) {\n    return false;\n  }\n\n  if (lst.length < 2) {\n    return true;\n  }\n\n  return isSortedArray(lst);\n}\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  \n  const isIntersection = (start1 <= end1 && start2 <= end2);\n  if (!isIntersection) {\n    return 'NO';\n  }\n\n  const isPrime = number => {\n    const divisor = 3;\n    let max = Math.ceil(Math.abs(start1 - start2) / divisor);\n    while (true) {\n      if (start1 + max * divisor > end2) {\n        return false;\n      }\n      if (Number.isInteger(start1 + max * divisor) && Number.isInteger(start2 + max * divisor)) {\n        return true;\n      }\n      max++;\n    }\n  };\n\n  const isPrimeNum = (num) => {\n    if (num % 2 === 0) {\n      return false;\n    }\n\n    let i = 3;\n    while (true) {\n      if (num % i === 0) {\n        return false;\n      }\n      i += 2;\n    }\n  };\n\n  const isPrime = (num) => {\n    return isPrimeNum(num) &&!isPrimeNum(num - 2) &&!isPrimeNum(num + 2);\n  };\n\n  const prime = (num) => {\n    if (num <= 1) {\n      return false;\n    }\n\n    if (num % 2 === 0) {\n      return false;\n    }\n\n    let i = 3;\n    while (true) {\n      if (num % i === 0) {\n        return false;\n      }\n      i += 2;\n    }\n  };\n\n  return prime(Math.min(end1, end2)) && prime(Math.max(end1, end2));\n};\n\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sign = 1;\n        let num = arr[i];\n        while (num!== 0) {\n            if (num < 0) {\n                num = Math.abs(num);\n                sign *= -1;\n            }\n            num /= 10;\n        }\n        result += sign * num;\n    }\n    return result;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length === 0) return [];\n  const lst = [grid[0][0]];\n  const len = grid.length;\n  for (let i = 0; i < len; i++) {\n    const row = grid[i];\n    if (row.length === 0) return [];\n    const lst_row = [];\n    for (let j = 0; j < len; j++) {\n      if (lst.length === k) return [];\n      if (lst.indexOf(row[j]) === -1) {\n        lst_row.push(row[j]);\n        lst.push(row[j]);\n      }\n    }\n    lst = lst_row;\n  }\n  return lst;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const a = 1, b = 1, c = 1;\n  return [a, b, c].concat(n, 1).map((_, i) => {\n    if(i > n) return null;\n    if(i % 2) return a + b + c;\n    else return a + c;\n  });\n};\n\ntri(3)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = []\n  let num = n\n  while (num > 0) {\n    digits.unshift(num % 10)\n    num = Math.floor(num / 10)\n  }\n  return digits.reverse()\n}\n\nconsole.log(digits(12345))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  if (!string) {\n    return false\n  }\n\n  const stack = []\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      const index = stack.pop()\n      if (index === '[') {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nexport default isNested\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach(v => {\n    let squared = Math.pow(v, 2);\n    sum += squared;\n  });\n  return sum;\n};\n\nconst sumSquaresRounded = (lst) => {\n  let sum = 0;\n  lst.forEach(v => {\n    let rounded = Math.round(v);\n    sum += rounded * rounded;\n  });\n  return sum;\n};\n\nconst getAnswer = (answer) => {\n  const answers = [\n    sumSquares(list),\n    sumSquaresRounded(list),\n  ];\n  return answers[answer];\n};\n\nexports.sumSquares = sumSquares;\nexports.sumSquaresRounded = sumSquaresRounded;\nexports.getAnswer = getAnswer;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.slice(-1) === /[a-zA-Z]/.test(txt);\n};\n\n/* Create a function that checks if a string has all uppercase letters.\n  Examples:\n  hasAllUpperCaseLetters(\"Pepi\") ➞ false\n  hasAllUpperCaseLetters(\"Pep\") ➞ true\n  hasAllUpperCaseLetters(\"Pepi!\") ➞ false\n  */\nconst hasAllUpperCaseLetters = (txt) => {\n  return txt.toUpperCase() === txt;\n};\n\n/* Create a function that checks if a string has all lowercase letters.\n  Examples:\n  hasAllLowerCaseLetters(\"pepi\") ➞ true\n  hasAllLowerCaseLetters(\"pe\") ➞ true\n  hasAllLowerCaseLetters(\"pepi!\") ➞ false\n  */\nconst hasAllLowerCaseLetters = (txt) => {\n  return txt.toLowerCase() === txt;\n};\n\n/* Create a function that returns the length of a string, excluding all spaces.\n  Examples:\n  lengthOfText(\"Hello\") ➞ 5\n  lengthOfText(\"Hello World\") ➞ 13\n  lengthOfText(\"\") ➞ 0\n  */\nconst lengthOfText = (txt) => {\n  return txt.replace(/\\s+/g, \"\").length;\n};\n\n/* Create a function that returns the number of times a given character appears in a string.\n  Examples:\n  countChar(\"Hello World\", \"l\") ➞ 1\n  countChar(\"Hello World\", \"p\") ➞ 1\n  countChar(\"Hello World\", \"e\") ➞ 2\n  */\nconst countChar = (txt, chr) => {\n  return txt.split(chr).length - 1;\n};\n\n/* Create a function that returns the number of times a given character appears in a string.\n  Examples:\n  countChar(\"Hello World\", \"e\") ➞ 1\n  countChar(\"Hello World\", \" \") ➞ 2\n  countChar(\"Hello World\", \"h\") ➞ 0\n  */\nconst countChar2 = (txt, chr) => {\n  return txt.split(chr).length;\n};\n\n/* Create a function that returns the number of words in a string.\n  Examples:\n  countWords(\"Hello World\") ➞ 1\n  countWords(\"Hello World Goodbye\") ➞ 2\n  countWords(\"Hello World Goodbye World\") ➞ 2\n  */\nconst countWords = (txt) => {\n  return txt.split(\" \").length;\n};\n\n/* Create a function that returns the number of words in a string.\n  Examples:\n  countWords(\"Hello World\") ➞ 1\n  countWords(\"Hello World Goodbye\") ➞ 2\n  countWords(\"Hello World Goodbye World\") ➞ 2\n  */\nconst countWords2 = (txt) => {\n  return txt.split(\" \").length;\n};\n\n/* Create a function that returns the number of characters in a string.\n  Examples:\n  countChars(\"Hello World\") ➞ 15\n  countChars(\"Hello World Goodbye\") ➞ 17\n  countChars(\"Hello World Goodbye World\") ➞ 17\n  */\nconst countChars = (txt) => {\n  return txt.length;\n};\n\n/* Create a function that returns the number of characters in a string.\n  Examples:\n  countChars(\"Hello World\") ➞ 15\n  countChars(\"Hello World Goodbye\") ➞ 17\n  countChars(\"Hello World Goodbye World\") ➞ 17\n  */\nconst countChars2 = (txt) => {\n  return txt.length;\n};\n\n/* Create a function that returns the number of alphabetic characters in a string.\n  Examples:\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 1\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 3\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 4\n  */\nconst countLetters = (txt) => {\n  return txt.split(\"\").filter(isALetter).length;\n};\n\n/* Create a function that returns the number of alphabetic characters in a string.\n  Examples:\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 1\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 3\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 4\n  */\nconst countLetters2 = (txt) => {\n  return txt.split(\"\").filter(isALetter).length;\n};\n\n/* Create a function that returns the number of characters in a string.\n  Examples:\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 4\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 5\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 6\n  */\nconst countLetters3 = (txt) => {\n  return txt.split(\"\").filter(isALetter).length;\n};\n\n/* Create a function that returns the number of characters in a string.\n  Examples:\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 4\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 5\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 6\n  */\nconst countLetters4 = (txt) => {\n  return txt.split(\"\").filter(isALetter).length;\n};\n\n/* Create a function that returns the number of alphabetic characters in a string.\n  Examples:\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 4\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 5\n  countLetters(\"Hello World Goodbye World Goodbye\") ➞ 6\n  */\nconst countLetters5 = (txt) => {\n  return txt.split(\"\").filter(isALetter).length;\n"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i - 1] > arr[i]) {\n            return i - 1;\n        }\n    }\n    return -1;\n};\n\n// test cases\nlet testcases = [\n    [1, 2, 3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8, 9, 10],\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n    [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596,"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = 0;\n  const smallest = Number.MAX_SAFE_INTEGER;\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur < 0) {\n      cur = largest - cur;\n    } else if (cur > 0) {\n      cur = smallest + cur;\n    }\n    if (largest < cur) {\n      largest = cur;\n    }\n    if (smallest > cur) {\n      smallest = cur;\n    }\n    result.push(cur);\n  }\n  return [largest, smallest];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? b : a\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? b : a\n  }\n  return null\n}\n\nmodule.exports = compareOne\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let num = 0\n  while (num <= n) {\n    if (n % 2 === 0 && n % 4 === 0) {\n      return true\n    }\n    num++\n  }\n  return false\n}\n\n/*Eevaluate whether the given number n is a power of 2\n  Example\n  isPowerOfTwo(1) == false\n  isPowerOfTwo(2) == true\n  isPowerOfTwo(4) == true\n  isPowerOfTwo(8) == false\n  */\nconst isPowerOfTwo = (n) => {\n  return (n & (n - 1)) === 0\n}\n\n/*Eevaluate whether the given number n is prime\n  Example\n  isPrime(1) == false\n  isPrime(2) == true\n  isPrime(3) == false\n  isPrime(4) == true\n  isPrime(5) == false\n  isPrime(7) == true\n  isPrime(9) == true\n  isPrime(13) == true\n  isPrime(18) == true\n  isPrime(19) == false\n  isPrime(23) == true\n  isPrime(24) == true\n  isPrime(25) == true\n  isPrime(33) == true\n  isPrime(34) == true\n  isPrime(35) == false\n  isPrime(37) == true\n  isPrime(43) == true\n  isPrime(44) == true\n  isPrime(45) == false\n  isPrime(47) == true\n  isPrime(51) == true\n  isPrime(52) == true\n  isPrime(57) == true\n  isPrime(59) == true\n  isPrime(61) == true\n  isPrime(67) == true\n  isPrime(68) == true\n  isPrime(69) == true\n  isPrime(71) == true\n  isPrime(73) == true\n  isPrime(78) == true\n  isPrime(79) == true\n  isPrime(83) == true\n  isPrime(85) == true\n  isPrime(87) == true\n  isPrime(89) == true\n  isPrime(91) == true\n  isPrime(93) == true\n  isPrime(97) == true\n  isPrime(98) == true\n  isPrime(99) == true\n  isPrime(101) == true\n  isPrime(103) == true\n  isPrime(105) == true\n  isPrime(107) == true\n  isPrime(109) == true\n  isPrime(111) == true\n  isPrime(113) == true\n  isPrime(115) == true\n  isPrime(117) == true\n  isPrime(119) == true\n  isPrime(121) == true\n  isPrime(127) == true\n  isPrime(131) == true\n  isPrime(137) == true\n  isPrime(139) == true\n  isPrime(149) == true\n  isPrime(151) == true\n  isPrime(157) == true\n  isPrime(159) == true\n  isPrime(163) == true\n  isPrime(167) == true\n  isPrime(173) == true\n  isPrime(179) == true\n  isPrime(181) == true\n  isPrime(191) == true\n  isPrime(193) == true\n  isPrime(197) == true\n  isPrime(199) == true\n  isPrime(211) == true\n  isPrime(223) == true\n  isPrime(227) == true\n  isPrime(229) == true\n  isPrime(233) == true\n  isPrime(239) == true\n  isPrime(241) == true\n  isPrime(251) == true\n  isPrime(257) == true\n  isPrime(263) == true\n  isPrime(269) == true\n  isPrime(271) == true\n  isPrime(277) == true\n  isPrime(281) == true\n  isPrime(283) == true\n  isPrime(289) == true\n  isPrime(293) == true\n  isPrime(307) == true\n  isPrime(311) == true\n  isPrime(313) == true\n  isPrime(317) == true\n  isPrime(331) == true\n  isPrime(337) == true\n  isPrime(347) == true\n  isPrime(349) == true\n  isPrime(357) == true\n  isPrime(359) == true\n  isPrime(367) == true\n  isPrime(373) == true\n  isPrime(379) == true\n  isPrime(383) == true\n  isPrime(389) == true\n  isPrime(397) == true\n  isPrime(401) == true\n  isPrime(409) == true\n  isPrime(419) == true\n  isPrime(421) == true\n  isPrime(431) == true\n  isPrime(437) == true\n  isPrime(439) == true\n  isPrime(457) == true\n  isPrime(461) == true\n  isPrime(463) == true\n  isPrime(467) == true\n  isPrime(479) == true\n  isPrime(487) == true\n  isPrime(491) == true\n  isPrime(499) == true\n  isPrime(503) == true\n  isPrime(509) == true\n  isPrime(521) == true\n  isPrime(541) == true\n  isPrime(547) == true\n  isPrime(557) == true\n  isPrime(563) == true\n  isPrime(569) == true\n  isPrime(571) == true\n  isPrime(587) == true\n  isPrime(601) == true\n  isPrime(607) == true\n  isPrime(613) == true\n  isPrime(619) == true\n  isPrime(631) == true\n  isPrime(641) == true\n  isPrime(643) == true\n  isPrime(647) == true\n  isPrime(653) == true\n  isPrime(659) == true\n  isPrime(661) == true\n  isPrime(673) == true\n  isPrime(677) == true\n  isPrime(683) == true\n  isPrime(691) == true\n  isPrime("}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * specialFactorial(n - 1);\n};\n\nconsole.log(specialFactorial(4));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (typeof text!=='string') return text;\n  text = text.replace(/\\s/g, '_');\n  while (text.indexOf('  ') > -1) {\n    text = text.replace(/\\s{2}/g, '-');\n  }\n  return text;\n}\n\nexport default fixSpaces;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const is_valid = (file_name) => {\n    if(!file_name.match(/\\d/)) {\n      return 'Yes'\n    } else {\n      return 'No'\n    }\n  }\n  return is_valid(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const is_valid = (file_name) => {\n    if(!file_name.match(/\\d/)) {\n      return 'Yes'\n    } else {\n      return 'No'\n    }\n  }\n  return is_valid(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  const is_valid = (file_name) => {\n    if(!file_name.match(/\\d/)) {\n      return 'Yes'\n    } else {\n      return 'No'\n    }\n  }\n  return is_valid(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  const is_valid = (file_name) => {\n    if(!file_name.match(/\\d/)) {\n      return 'Yes'\n    } else {\n      return 'No'\n    }\n  }\n  return is_valid(file_name)\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck5 = (file_name) => {\n  const is_valid = (file_name) => {\n    if(!file_name.match(/\\d/)) {\n      return 'Yes'\n    } else {\n      return 'No'\n    }\n  }\n  return is_valid(file_name)\n}\n\nconst fileNameCheck6 = (file_name) => {\n  const is_valid = (file_name) => {"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n// Test:\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([]))\nconsole.log(sumSquares([-1,-5,2,-1,-5]))<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const sentenceArr = sentence.split(\" \")\n  const newSentence = []\n  for (let i = 0; i < sentenceArr.length; i++) {\n    const word = sentenceArr[i]\n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    const index = Math.floor(Math.random() * primes.length)\n    const newWord = primes[index]\n    newSentence.push(newWord)\n  }\n  return newSentence.join(\" \")\n}\n\nconst solution = (sentence) => {\n  const words = wordsInSentence(sentence)\n  return words\n}\n\nconsole.log(solution(\"This is a test\"))\nconsole.log(solution(\"lets go for swimming\"))\nconsole.log(solution(\"I want to go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let p = parseInt(x),\n    q = parseInt(n),\n    pLen = x.length,\n    qLen = n.length;\n\n  // Make sure p is the smaller of the two\n  if (pLen < qLen) {\n    p = p * q;\n    q = x;\n    pLen = qLen;\n    qLen = pLen;\n  }\n\n  // Simplify each element of the fraction\n  let result = pLen > qLen? false : p.slice(qLen - pLen);\n\n  // Loop through the number and keep adding the value of each number\n  // to the right of the current number.\n  // If we add any number past the right of the current number, then it\n  // is an overflow.\n  // Keep adding until we run out of numbers.\n  for (let i = qLen - pLen + 1; i <= qLen; i++) {\n    if (p.slice(i).reduce((acc, x, j) => acc + x * q.slice(j), 0) % 1 === 0) {\n      result = true;\n      break;\n    }\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const index = {};\n\n  for (let i = 0; i < nums.length; i++) {\n    const current = nums[i];\n    if (index[current] === undefined) {\n      sorted.push(current);\n      index[current] = i;\n    }\n  }\n\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return sorted;\n};\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let num;\n  for (let i = 0; i < nums.length; i++) {\n    num = nums[i];\n    if (num > 10 && num % 10 == 1 && num % 11 == 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = new Array(n).fill(0);\n  const i = 1;\n  const j = n - 1;\n  const k = n - 1;\n\n  while (i <= j) {\n    for (let i = i; i <= j; i++) {\n      arr[i] = i * i - i + 1;\n    }\n\n    let total = 0;\n    for (let i = 1; i <= j; i++) {\n      for (let j = i + 1; j <= k; j++) {\n        total = total + arr[i] + arr[j] + arr[k];\n        if (total % 3 === 0) {\n          return i;\n        }\n      }\n    }\n\n    i++;\n  }\n\n  return 0;\n}\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var temp = []\n  for (var i = 0; i < planets.length; i++) {\n    for (var j = 0; j < planets.length; j++) {\n      if (planets[i][0] === planet1 && planets[i][1] === planet2) {\n        temp.push(planets[i])\n      }\n      if (planets[i][1] === planet1 && planets[i][0] === planet2) {\n        temp.push(planets[i])\n      }\n    }\n  }\n  return temp\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let listSum = [];\n  let sortedList = lst.sort((a, b) => {\n    let aSum = a.length;\n    let bSum = b.length;\n    return aSum - bSum;\n  });\n  for (let i = 0; i < sortedList.length; i++) {\n    let curr = sortedList[i];\n    let currSum = curr.length;\n    listSum.push(currSum);\n  }\n  return listSum;\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"])); // => [2, 1, 3]\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"])); // => [3, 2, 2]<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default xOrY;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const evens = lst.filter((n) => n % 2 === 0);\n  const odds = lst.filter((n) => n % 2!== 0);\n  const sum = evens.reduce((acc, num) => acc + num * num, 0);\n  return sum + (odds.reduce((acc, num) => acc + num * num, 0));\n};\n\n//# sourceMappingURL=sum-of-squares.js.map<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.slice();\n  const guess = guess.slice();\n  const correct = score.filter(x => x === guess[x]);\n  const diff = score.filter(x => x!== correct[x]);\n  return diff;\n};\n\nexport default compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strength = 0;\n  for (let extension of extensions) {\n    strength += extension.split('.').length - 1;\n  }\n  let capitalLetters = 0;\n  for (let extension of extensions) {\n    for (let i = 0; i < extension.length; i++) {\n      if (extension[i].toUpperCase() === extension[i]) {\n        capitalLetters++;\n      }\n    }\n  }\n  strength -= capitalLetters;\n  return class_name + '.' + extensions[0].split('.').slice(strength).join('.');\n};\n\nconst main = () => {\n  console.log(strongestExtension('MyClass', ['AA', 'BB', 'CC']));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    const l = a.length,\n        r = b.length;\n    if(l!= r) return false;\n    let i = 0,\n        j = 0;\n    while(i<l && j<r) {\n        if(a[i]!= b[j]) {\n            while(i+1 < l && a[i+1] == a[i]) i++;\n            while(j+1 < r && b[j+1] == b[j]) j++;\n            if(i >= l || j >= r) return false;\n            if(a[i]!= b[j]) return false;\n            i++;\n            j++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    return true;\n}\n\n/*\n  Given 2 words. Word1 and Word2 can be repeated any number of times, so they can be considered as a string\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternRepeatedCheck = (a, b) => {\n    const l = a.length,\n        r = b.length;\n    if(l!= r) return false;\n    let i = 0,\n        j = 0;\n    while(i<l && j<r) {\n        if(a[i]!= b[j]) {\n            while(i+1 < l && a[i+1] == a[i]) i++;\n            while(j+1 < r && b[j+1] == b[j]) j++;\n            if(i >= l || j >= r) return false;\n            if(a[i]!= b[j]) return false;\n            i++;\n            j++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    return true;\n}\n\n// TESTS\ntests.forEach(test => {\n    console.log(`Test #${test.i + 1}: ${test.title}`);\n    console.log(cycpatternCheck(test.word1, test.word2));\n    console.log(cycpatternRepeatedCheck(test.word1, test.word2));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    if (num < 0) {\n        throw new Error(`Negative number: ${num}`);\n    }\n    const count = num;\n    const odd = count % 2 === 1? count - 1 : count;\n    return [odd, count];\n};\n\nexport default evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  };\n\n  const res = [];\n\n  while (number > 0) {\n    if (number % roman.I === 0) {\n      res.push('i');\n      number = number - roman.I;\n    } else if (number % roman.V === 0) {\n      res.push('v');\n      number = number - roman.V;\n    } else if (number % roman.X === 0) {\n      res.push('x');\n      number = number - roman.X;\n    } else if (number % roman.L === 0) {\n      res.push('l');\n      number = number - roman.L;\n    } else if (number % roman.C === 0) {\n      res.push('c');\n      number = number - roman.C;\n    } else if (number % roman.D === 0) {\n      res.push('d');\n      number = number - roman.D;\n    } else if (number % roman.M === 0) {\n      res.push('m');\n      number = number - roman.M;\n    }\n  }\n\n  return res.reverse().join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a + b - c) <= 1\n}\n\nconst rightAngleTriangle = (a, b,"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0]\n  let maxLength = words[0].length\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      max = words[i]\n      maxLength = words[i].length\n    } else if (words[i].length === maxLength) {\n      let min = words[i]\n      for (let j = i + 1; j < words.length; j++) {\n        if (words[j].length < min.length) {\n          min = words[j]\n        }\n      }\n      if (min < max) {\n        max = min\n        maxLength = min.length\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  return [ number - need + remaining, remaining - need ];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 = (number, need, remaining) => {\n  return [ number - need + remaining, remaining - need ];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                 the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat3 = (number, need, remaining) => {\n  return [ number - need + remaining, remaining - need ];\n}\n\nconst number = 12;\nconst need = 6;\nconst remaining = 10;\n\nconst result = eat(number, need, remaining);\nconsole.log(`eat(${number}, ${need}, ${remaining}) = ${result}`);\n\nconst result2 = eat2(number, need, remaining);\nconsole.log(`eat2(${number}, ${need}, ${remaining}) = ${result2}`);\n\nconst result3 = eat3(number, need, remaining);\nconsole.log(`eat3(${number}, ${need}, ${remaining}) = ${result3}`);\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operandLength = operand.length;\n  let operatorLength = operator.length;\n  operand.forEach((element, index) => {\n    result += operator[index] * element;\n  });\n  return result;\n};\n\nconst doAlgebraTests = () => {\n  let a = [2, 3, 4, 5];\n  let b = [2, 3, 4, 5];\n  let c = [3, 4, 5];\n  let d = [2, 4, 5];\n  let e = [2, 3, 5];\n  let f = [2, 3, 4];\n  let g = [2, 3, 4, 5];\n  let h = [2, 3, 4, 5, 6];\n\n  console.log('The following are examples of basic algebra operations:');\n  console.log(a);\n  console.log(b);\n  console.log(c);\n  console.log(d);\n  console.log(e);\n  console.log(f);\n  console.log(g);\n  console.log(h);\n\n  console.log('\\n\\nThe following are examples of algebra expressions:');\n  console.log('a + b ='+ doAlgebra(a, b));\n  console.log('a - b ='+ doAlgebra(a, b));\n  console.log('a * b ='+ doAlgebra(a, b));\n  console.log('a // b ='+ doAlgebra(a, b));\n  console.log('a ** b ='+ doAlgebra(a, b));\n\n  console.log('\\n\\nThe following are examples of algebra expressions:');\n  console.log('a + b ='+ doAlgebra(a, b));\n  console.log('a - b ='+ doAlgebra(a, b));\n  console.log('a * b ='+ doAlgebra(a, b));\n  console.log('a // b ='+ doAlgebra(a, b));\n  console.log('a ** b ='+ doAlgebra(a, b));\n};\n\ndoAlgebraTests();<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    const isLower = s.includes(\"a\")\n    const isUpper = s.includes(\"A\")\n    const rev = s.split('').reverse().join('')\n    return (isLower? rev : s).toUpperCase()\n}\n\nmodule.exports = solve\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Compute the md5 hash of a given string\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Compute the md5 hash of a given string with the specified salt\n\n  >>> md5('Hello world','mysecret') == '8d3a7a4a83e3b3c5c4c6d7d8e9f0a1'\n  */\nconst md5WithSalt = (text, salt) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('md5').update(text).update(salt).digest('hex')\n}\n\n/*\n  Compute the md5 hash of a given string with the specified salt\n\n  >>> md5WithSalt('Hello world','mysecret') == '8d3a7a4a83e3b3c5c4c6d7d8e9f0a1'\n  */\nconst md5WithSaltString = (text, salt) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('md5').update(text).update(salt).digest('hex')\n}\n\n/*\n  Compute the sha1 hash of a given string\n\n  >>> sha1('Hello world') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\n  */\nconst sha1 = (text) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha1').update(text).digest('hex')\n}\n\n/*\n  Compute the sha1 hash of a given string with the specified salt\n\n  >>> sha1('Hello world','mysecret') == '7a4cabcc2c8a4c0b8d098e0d69a3f084'\n  */\nconst sha1WithSalt = (text, salt) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha1').update(text).update(salt).digest('hex')\n}\n\n/*\n  Compute the sha1 hash of a given string with the specified salt\n\n  >>> sha1WithSalt('Hello world','mysecret') == '7a4cabcc2c8a4c0b8d098e0d69a3f084'\n  */\nconst sha1WithSaltString = (text, salt) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha1').update(text).update(salt).digest('hex')\n}\n\n/*\n  Compute the sha256 hash of a given string\n\n  >>> sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst sha256 = (text) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha256').update(text).digest('hex')\n}\n\n/*\n  Compute the sha256 hash of a given string with the specified salt\n\n  >>> sha256('Hello world','mysecret') == 'b5f7af4a084d04a5b04e9e9f8f9b892e7e2c4b1c6d4d07a0e1d9d2d8c1a0c8b9c9d5b6d7b8e1e3d9b4d'\n  */\nconst sha256WithSalt = (text, salt) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha256').update(text).update(salt).digest('hex')\n}\n\n/*\n  Compute the sha256 hash of a given string with the specified salt\n\n  >>> sha256WithSalt('Hello world','mysecret') == 'b5f7af4a084d04a5b04e9e9f8f9b892e7e2c4b1c6d4d07a0e1d9d2d8c1a0c8b9c9d5b6d7b8e1e3d9b4d'\n  */\nconst sha256WithSaltString = (text, salt) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha256').update(text).update(salt).digest('hex')\n}\n\n/*\n  Compute the sha512 hash of a given string\n\n  >>> sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst sha512 = (text) => {\n  if (!text) {\n    return '0'\n  }\n\n  return crypto.createHash('sha512').update(text).digest('hex')\n}\n\n/*\n  Compute the sha512 hash of a given string with the specified salt\n\n  >>> sha512('Hello world','mysecret') == 'bacb4f1b4b9a57a5d9f8e8e1144ae1d0d8cd1754e5c9c2f1"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  return a > b\n   ? a > 9? [] : [...generateIntegers(a - 1, 9)]\n    : b > 9? [] : [...generateIntegers(9, b - 1)]\n}\n\n// ----- Test -----\n\nconst { map } = Array.prototype;\nconst { from } = List.prototype;\n\nconsole.log(\n  \"generateIntegers(2, 8) =>\",\n  generateIntegers(2, 8)\n);\n\nconsole.log(\n  \"generateIntegers(8, 2) =>\",\n  generateIntegers(8, 2)\n);\n\nconsole.log(\n  \"generateIntegers(10, 14) =>\",\n  generateIntegers(10, 14)\n);\n\nconst { reduce } = Array.prototype;\n\nconsole.log(\n  \"reduce(generateIntegers(2, 8), (acc, num) => acc + num, 0) =>\",\n  reduce(generateIntegers(2, 8), (acc, num) => acc + num, 0)\n);\n\nconsole.log(\n  \"reduce(generateIntegers(8, 2), (acc, num) => acc + num, 0) =>\",\n  reduce(generateIntegers(8, 2), (acc, num) => acc + num, 0)\n);\n\nconsole.log(\n  \"reduce(generateIntegers(10, 14), (acc, num) => acc + num, 0) =>\",\n  reduce(generateIntegers(10, 14), (acc, num) => acc + num, 0)\n);\n\nconst { reduceRight } = Array.prototype;\n\nconsole.log(\n  \"reduceRight(generateIntegers(2, 8), (num, acc) => acc + num, 0) =>\",\n  reduceRight(generateIntegers(2, 8), (num, acc) => acc + num, 0)\n);\n\nconsole.log(\n  \"reduceRight(generateIntegers(8, 2), (num, acc) => acc + num, 0) =>\",\n  reduceRight(generateIntegers(8, 2), (num, acc) => acc + num, 0)\n);\n\nconsole.log(\n  \"reduceRight(generateIntegers(10, 14), (num, acc) => acc + num, 0) =>\",\n  reduceRight(generateIntegers(10, 14), (num, acc) => acc + num, 0)\n);\n\nconst { unshift } = Array.prototype;\n\nconsole.log(\n  \"unshift(generateIntegers(2, 8), 4) =>\",\n  unshift(generateIntegers(2, 8), 4)\n);\n\nconsole.log(\n  \"unshift(generateIntegers(8, 2), 4) =>\",\n  unshift(generateIntegers(8, 2), 4)\n);\n\nconsole.log(\n  \"unshift(generateIntegers(10, 14), 4) =>\",\n  unshift(generateIntegers(10, 14), 4)\n);\n\nconst { slice } = Array.prototype;\n\nconsole.log(\n  \"slice(generateIntegers(2, 8), 0, 1) =>\",\n  slice(generateIntegers(2, 8), 0, 1)\n);\n\nconsole.log(\n  \"slice(generateIntegers(8, 2), 0, 1) =>\",\n  slice(generateIntegers(8, 2), 0, 1)\n);\n\nconsole.log(\n  \"slice(generateIntegers(10, 14), 0, 1) =>\",\n  slice(generateIntegers(10, 14), 0, 1)\n);\n\nconst { sort } = Array.prototype;\n\nconsole.log(\n  \"sort(generateIntegers(2, 8)) =>\",\n  sort(generateIntegers(2, 8))\n);\n\nconsole.log(\n  \"sort(generateIntegers(8, 2)) =>\",\n  sort(generateIntegers(8, 2))\n);\n\nconsole.log(\n  \"sort(generateIntegers(10, 14)) =>\",\n  sort(generateIntegers(10, 14))\n);\n\nconst { splice } = Array.prototype;\n\nconsole.log(\n  \"splice(generateIntegers(2, 8), 0, 1) =>\",\n  splice(generateIntegers(2, 8), 0, 1)\n);\n\nconsole.log(\n  \"splice(generateIntegers(8, 2), 0, 1) =>\",\n  splice(generateIntegers(8, 2), 0, 1)\n);\n\nconsole.log(\n  \"splice(generateIntegers(10, 14), 0, 1) =>\",\n  splice(generateIntegers(10, 14), 0, 1)\n);\n\nconst { shift } = Array.prototype;\n\nconsole.log(\n  \"shift(generateIntegers(2, 8)) =>\",\n  shift(generateIntegers(2, 8))\n);\n\nconsole.log(\n  \"shift(generateIntegers(8, 2)) =>\",\n  shift(generateIntegers(8, 2))\n);\n\nconsole.log(\n  \"shift(generateIntegers(10, 14)) =>\",\n  shift(generateIntegers(10, 14))\n);\n\nconst { unshift } = Array.prototype;\n\nconsole.log(\n  \"unshift(generateIntegers(2, 8), 4) =>\",\n  unshift(generateIntegers(2, 8), 4)\n);\n\nconsole.log(\n  \"unshift(generateIntegers(8, 2), 4) =>\",\n  unshift(generateIntegers(8, 2), 4)\n);\n\nconsole.log(\n  \"unshift(generateIntegers(10, 14), 4) =>\",\n  unshift(generateIntegers(10, 14), 4)\n);\n\nconst { every } = Array.prototype;\n\nconsole.log(\n  \"every(every(generateInteg"}
