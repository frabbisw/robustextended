{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    const sortedNumbers = sortByFunc(numbers);\n\n    const leftIndex = 0;\n    const rightIndex = sortedNumbers.length - 1;\n\n    while (leftIndex < rightIndex) {\n        const distance = sortedNumbers[leftIndex + 1] - sortedNumbers[rightIndex];\n\n        if (distance > threshold) {\n            return false;\n        }\n\n        leftIndex += 1;\n        rightIndex -= 1;\n    }\n\n    return true;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsInArray = (numbers, threshold) => {\n    const sortedNumbers = sortByFunc(numbers);\n\n    const leftIndex = 0;\n    const rightIndex = sortedNumbers.length - 1;\n\n    while (leftIndex < rightIndex) {\n        const distance = sortedNumbers[leftIndex + 1] - sortedNumbers[rightIndex];\n\n        if (distance > threshold) {\n            return false;\n        }\n\n        leftIndex += 1;\n        rightIndex -= 1;\n    }\n\n    return true;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsInArrayList = (numbers, threshold) => {\n    const sortedNumbers = sortByFunc(numbers);\n\n    const leftIndex = 0;\n    const rightIndex = sortedNumbers.length - 1;\n\n    while (leftIndex < rightIndex) {\n        const distance = sortedNumbers[leftIndex + 1] - sortedNumbers[rightIndex];\n\n        if (distance > threshold) {\n            return false;\n        }\n\n        leftIndex += 1;\n        rightIndex -= 1;\n    }\n\n    return true;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsInMap = (numbers, threshold) => {\n    const sortedNumbers = sortByFunc(numbers);\n\n    const leftIndex = 0;\n    const rightIndex = sortedNumbers.length - 1;\n\n    while (leftIndex < rightIndex) {\n        const distance = sortedNumbers[leftIndex + 1] - sortedNumbers[rightIndex];\n\n        if (distance > threshold) {\n            return false;\n        }\n\n        leftIndex += 1;\n        rightIndex -= 1;\n    }\n\n    return true;\n};\n\nexport {\n    hasCloseElements,\n    hasCloseElementsInArray,\n    hasCloseElementsInArrayList,\n    hasCloseElementsInMap,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const regex = /\\((.*)\\)/g\n  const result = regex.exec(paren_string)\n  const num_groups = result.length\n  const groups = []\n  while(result!== null) {\n    const group = result[1]\n    const new_group = group.split('(')\n    new_group.pop()\n    new_group.pop()\n    groups.push(new_group)\n    result = regex.exec(paren_string)\n  }\n  return groups\n}\n\n/*\n  Input: A string containing a single group of parentheses.\n  Output: The string with the parentheses removed.\n  >>> removeParentheses('(abc)')\n  'abc'\n  >>> removeParentheses('(abc')\n  Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  ValueError: Input string is not a valid group of parentheses.\n  */\nconst removeParentheses = (paren_string) => {\n  const regex = /\\(.*\\)/\n  const result = regex.exec(paren_string)\n  if(result === null) {\n    throw new ValueError('Input string is not a valid group of parentheses.')\n  }\n  const sub_string = result[0]\n  return sub_string\n}\n\n/*\n  Input: A string containing multiple groups of parentheses.\n  Output: The string with the parentheses removed.\n  >>> removeParentheses('(()())')\n  '()()'\n  >>> removeParentheses('((()()()))')\n  '()()'\n  >>> removeParentheses('((())())')\n  '()()'\n  >>> removeParentheses('(()(()(()())))')\n  '()()()()()'\n  >>> removeParentheses('((()()()))')\n  '()()()()'\n  >>> removeParentheses('(((()()()())))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()())))')\n  '()()()()()'\n  >>> removeParentheses('(((()(()()())))')\n  '()()()()()'\n  >>> removeParentheses('(((()()))(()))')\n  '()()()()'\n  >>> removeParentheses('(((()()()()))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()())))')\n  '()()()()()'\n  >>> removeParentheses('(((()()()()()))')\n  '()()()()()'\n  >>> removeParentheses('(((()()()()))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()())))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()()))()))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()()())))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()()()())))')\n  '()()()()()'\n  >>> removeParentheses('((((()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'\n  >>> removeParentheses('((((()()()()()()()()()()()()()()()()()))())')\n  '()()()()()()'"}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integer = number % 1;\n  const decimal = Math.floor(number);\n  return decimal? integer + '.' + (decimal + 1).toString().split('.').pop() : integer.toString();\n};\n\n/*\n  Return true if the first string has a prefix which is also in the second string.\n  >>> isPrefix('abc', 'abc')\n  true\n  >>> isPrefix('abc', 'abd')\n  false\n  >>> isPrefix('abc', 'ab')\n  true\n  >>> isPrefix('abc', 'abcd')\n  false\n  >>> isPrefix('abc', 'ab')\n  true\n  */\nconst isPrefix = (str1, str2) => str1.indexOf(str2) === 0;\n\n/*\n  Return true if the first string has a suffix which is also in the second string.\n  >>> isSuffix('abc', 'cde')\n  true\n  >>> isSuffix('abc', 'c')\n  true\n  >>> isSuffix('abc', 'abcd')\n  false\n  >>> isSuffix('abc', 'ab')\n  false\n  */\nconst isSuffix = (str1, str2) => str1.lastIndexOf(str2) === str2.length - 1;\n\n/*\n  Return true if the first string has a suffix which is also in the second string, but the suffix is a prefix of the second string.\n  >>> isSuffix('abc', 'bcd')\n  false\n  >>> isSuffix('abc', 'ab')\n  true\n  >>> isSuffix('abc', 'abc')\n  true\n  */\nconst isSuffixPrefix = (str1, str2) => isSuffix(str2, str1) && isPrefix(str2, str1);\n\n/*\n  Return true if the first string has a suffix which is also in the second string, but the suffix is not a prefix of the second string.\n  >>> isSuffix('abc', 'b')\n  true\n  >>> isSuffix('abc', 'ab')\n  false\n  >>> isSuffix('abc', 'bcd')\n  false\n  */\nconst isSuffixNotPrefix = (str1, str2) => isSuffix(str2, str1) &&!isPrefix(str2, str1);\n\n/*\n  Return true if the first string has a suffix which is also in the second string, but the suffix is a suffix of the second string.\n  >>> isSuffix('abc', 'ab')\n  true\n  >>> isSuffix('abc', 'c')\n  true\n  >>> isSuffix('abc', 'abc')\n  true\n  */\nconst isSuffixSuffix = (str1, str2) => isSuffix(str2, str1) && isSuffix(str1, str2);\n\n/*\n  Return true if the first string has a suffix which is also in the second string, but the suffix is not a suffix of the second string.\n  >>> isSuffix('abc', 'ab')\n  false\n  >>> isSuffix('abc', 'b')\n  true\n  >>> isSuffix('abc', 'bcd')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  */\nconst isSuffixNotSuffix = (str1, str2) => isSuffix(str2, str1) &&!isSuffix(str1, str2);\n\n/*\n  Return true if the first string has a suffix which is also in the second string, but the suffix is not a prefix or suffix of the second string.\n  >>> isSuffix('abc', 'ab')\n  false\n  >>> isSuffix('abc', 'b')\n  true\n  >>> isSuffix('abc', 'bc')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  */\nconst isSuffixNotPrefixOrSuffix = (str1, str2) => isSuffix(str2, str1) &&!isSuffixPrefix(str2, str1) &&!isSuffixSuffix(str2, str1);\n\n/*\n  Returns true if the first string has a suffix which is also in the second string, but the suffix is a suffix of the second string.\n  >>> isSuffix('abc', 'c')\n  true\n  >>> isSuffix('abc', 'ab')\n  false\n  >>> isSuffix('abc', 'bc')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  */\nconst isSuffixSuffix = (str1, str2) => isSuffix(str2, str1) && isSuffix(str1, str2);\n\n/*\n  Returns true if the first string has a suffix which is also in the second string, but the suffix is a prefix of the second string.\n  >>> isSuffix('abc', 'ab')\n  false\n  >>> isSuffix('abc', 'c')\n  true\n  >>> isSuffix('abc', 'abc')\n  true\n  >>> isSuffix('abc', 'abcd')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  */\nconst isSuffixPrefix = (str1, str2) => isSuffix(str2, str1) && isPrefix(str2, str1);\n\n/*\n  Returns true if the first string has a suffix which is also in the second string, but the suffix is not a prefix of the second string.\n  >>> isSuffix('abc', 'ab')\n  false\n  >>> isSuffix('abc', 'b')\n  true\n  >>> isSuffix('abc', 'bc')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  >>> isSuffix('abc', 'abcd')\n  false\n  */\nconst isSuffixNotPrefix = (str1, str2) => is"}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = (a, b) => a + b\n  const count = (a) => a.length\n\n  const account = [0]\n  const balance = account[0]\n\n  let index = count(operations) - 1\n  const add = (value) => {\n    if (index >= 0) {\n      balance = sum(account[index], value)\n      account[index] = balance\n      index--\n    }\n  }\n\n  const subtract = (value) => {\n    if (index >= 0) {\n      balance = sum(account[index], -value)\n      account[index] = balance\n      index--\n    }\n  }\n\n  const allZero = () => balance === 0\n\n  let result = allZero()\n\n  for (const operation of operations) {\n    switch (operation) {\n      case '+': add(parseInt(operations[index + 1]))\n      break\n      case '-': subtract(parseInt(operations[index + 1]))\n      break\n      default:\n        console.log('Oops!')\n    }\n    result = belowZero(account)\n  }\n\n  return result\n}\n\nmodule.exports = belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = sumUp(numbers);\n  const m = sum / numbers.length;\n  const dev = numbers.map((n) => Math.abs(n - m));\n  return mean(dev);\n};\n\n/**\n  * For a given list of input numbers, calculate the median value of this dataset. The median is the mean of the two numbers which are the most frequent.\n  * @param numbers\n  * @returns {number}\n  */\nconst median = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const half = Math.floor(numbers.length / 2);\n  return (numbers.length % 2)? sorted[half] : (sorted[half - 1] + sorted[half]) / 2;\n};\n\n/**\n  * For a given list of input numbers, calculate the standard deviation of this dataset. The standard deviation is the square root of the sum of the squares of the difference between each element and the mean.\n  * @param numbers\n  * @returns {number}\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (sumOfSquares(numbers) - sum(numbers) * mean * mean) / numbers.length;\n};\n\n/**\n  * For a given list of input numbers, calculate the standard deviation of this dataset. The standard deviation is the square root of the sum of the squares of the difference between each element and the mean.\n  * @param numbers\n  * @returns {number}\n  */\nconst variance = (numbers) => {\n  return standardDeviation(numbers) / numbers.length;\n};\n\n/**\n  * For a given list of input numbers, calculate the population standard deviation of this dataset. The population standard deviation is the square root of the sum of the squares of the difference between each element and the mean of the population.\n  * @param numbers\n  * @returns {number}\n  */\nconst populationStandardDeviation = (numbers) => {\n  const sumOfSquares = sumOfSquares(numbers);\n  const populationMean = mean(numbers);\n  return Math.sqrt(sumOfSquares / numbers.length - populationMean * populationMean);\n};\n\n/**\n  * For a given list of input numbers, calculate the sample standard deviation of this dataset. The sample standard deviation is the square root of the sum of the squares of the difference between each element and the mean of the sample.\n  * @param numbers\n  * @returns {number}\n  */\nconst sampleStandardDeviation = (numbers) => {\n  const sumOfSquares = sumOfSquares(numbers);\n  const sampleMean = mean(numbers);\n  return Math.sqrt(sumOfSquares / numbers.length - sampleMean * sampleMean);\n};\n\nexport {\n  meanAbsoluteDeviation,\n  median,\n  standardDeviation,\n  variance,\n  populationStandardDeviation,\n  sampleStandardDeviation,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    return [].concat(...numbers.slice(0, -1).map(n => n + delimeter)).concat(numbers[numbers.length - 1]);\n};\n\n// Tests\nconst testInterleave = t => {\n    const list = [1, 2, 3, 4, 5];\n    t.deepEqual(intersperse(list, '*'), [1, 2, 3, 4, 5, 2, 3, 4, 5]);\n    t.deepEqual(intersperse(list, '^'), [1, 2, 3, 4, 5, 3, 4, 5, 2]);\n    t.deepEqual(intersperse(list, '+'), [1, 2, 3, 4, 5, 4, 5, 3, 2]);\n    t.end();\n};\n\ntape('interleave', testInterleave);\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [];\n  let current_level = 0;\n  paren_string.split(\" \").forEach((item) => {\n    if (item === \"(\" || item === \")\") {\n      current_level += 1;\n    }\n    if (item === \")\") {\n      current_level -= 1;\n      if (current_level < 0) {\n        throw new Error(\"Unbalanced brackets\");\n      }\n    }\n  });\n  if (current_level > 0) {\n    throw new Error(\"Unbalanced brackets\");\n  }\n  let level = 0;\n  let res = [];\n  paren_string.split(\" \").forEach((item) => {\n    if (item === \"(\") {\n      stack.push(\"(\");\n    }\n    if (item === \")\") {\n      let top = stack.pop();\n      if (stack.length === 0) {\n        throw new Error(\"Unbalanced brackets\");\n      }\n      res.push(level + 1);\n      if (top === \"(\" && stack[stack.length - 1] === \")\") {\n        level += 2;\n      }\n      if (top === \")\") {\n        level -= 1;\n      }\n    }\n  });\n  if (stack.length > 0) {\n    throw new Error(\"Unbalanced brackets\");\n  }\n  return res;\n};\n\n/*\n  >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  let stack = [];\n  let current_level = 0;\n  paren_string.split(\" \").forEach((item) => {\n    if (item === \"(\" || item === \")\") {\n      current_level += 1;\n    }\n    if (item === \")\") {\n      current_level -= 1;\n      if (current_level < 0) {\n        throw new Error(\"Unbalanced brackets\");\n      }\n    }\n  });\n  if (current_level > 0) {\n    throw new Error(\"Unbalanced brackets\");\n  }\n  let level = 0;\n  let res = [];\n  paren_string.split(\" \").forEach((item) => {\n    if (item === \"(\") {\n      stack.push(\"(\");\n    }\n    if (item === \")\") {\n      let top = stack.pop();\n      if (stack.length === 0) {\n        throw new Error(\"Unbalanced brackets\");\n      }\n      res.push(level + 1);\n      if (top === \"(\" && stack[stack.length - 1] === \")\") {\n        level += 2;\n      }\n      if (top === \")\") {\n        level -= 1;\n      }\n    }\n  });\n  if (stack.length > 0) {\n    throw new Error(\"Unbalanced brackets\");\n  }\n  return res;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) > -1) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\nmodule.exports = {\n  filterBySubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((s, number) => s + number, 0)\n  const product = numbers.reduce((p, number) => p * number, 1)\n  return [sum, product]\n}\n\nconst sumProductByList = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let number of numbers) {\n    sum += number\n    product *= number\n  }\n  return [sum, product]\n}\n\nconst sumProductByList2 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let number of numbers) {\n    sum += number\n    product *= number\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration2 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration3 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration4 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration5 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration6 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration7 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration8 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration9 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration10 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration11 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration12 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration13 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration14 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration15 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index < numbers.length) {\n    sum += numbers[index]\n    product *= numbers[index]\n    index += 1\n  }\n  return [sum, product]\n}\n\nconst sumProductByIteration16 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let index = 0\n  while (index <"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let previous = numbers[0],\n    max = previous,\n    result = [previous],\n    current;\n\n  for (let i = 1; i < numbers.length; i++) {\n    current = numbers[i];\n    if (current > max) {\n      max = current;\n    }\n\n    if (current === max) {\n      result.push(max);\n      max = current;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longest = string.split('').reduce((a, b) => Math.max(a, b.length), 0);\n  let prefix = '';\n  let postfix = string.split('').reverse().join('');\n\n  while (postfix.length < longest) {\n    const postfixReverse = postfix.split('').reverse().join('');\n    const prefixReverse = postfix.split('').join('');\n    if (isPalindrome(postfixReverse)) {\n      prefix += postfixReverse;\n      postfix = postfixReverse;\n    } else {\n      break;\n    }\n  }\n\n  return prefix + postfix;\n}\n\nmodule.exports = makePalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let aString = '';\n  for (let i = 0; i < a.length; i++) {\n    aString += a[i];\n  }\n  let bString = '';\n  for (let i = 0; i < b.length; i++) {\n    bString += b[i];\n  }\n  let sum = 0;\n  for (let i = 0; i < aString.length; i++) {\n    sum += parseInt(aString[i]);\n  }\n  for (let i = 0; i < bString.length; i++) {\n    sum -= parseInt(bString[i]);\n  }\n  sum = sum % 2;\n  if (sum === 0) {\n    return '0';\n  } else {\n    return '1';\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings)) {\n    return ''\n  }\n  let longest = strings[0]\n  strings.forEach((string) => {\n    if (string.length > longest.length) {\n      longest = string\n    }\n  })\n  return longest\n}\n\nexport default longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b) {\n    const r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n};\n\nconst computeDivisorSum = (n) => {\n  return (Math.pow(n, 2) - 1).toString().split('').reduce((p, c) => p + c);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n *\n * @returns {number}\n */\nconst leastCommonMultiple = (a, b) => {\n  return (a * b) / greatestCommonDivisor(a, b);\n};\n\n/**\n * Returns the sum of the digits of an integer\n *\n * @returns {number}\n */\nconst sum = (n) => {\n  let sum = 0;\n  while (n) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/**\n * Returns the sum of the digits of an integer\n *\n * @returns {number}\n */\nconst sumInverse = (n) => {\n  let sum = 0;\n  while (n) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\n/**\n * Returns the product of the digits of an integer\n *\n * @returns {number}\n */\nconst product = (n) => {\n  let product = 1;\n  while (n) {\n    product *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\n/**\n * Returns the product of the digits of an integer\n *\n * @returns {number}\n */\nconst productInverse = (n) => {\n  let product = 1;\n  while (n) {\n    product *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\nconst sumDivisorSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += sum(i);\n  }\n  return sum;\n};\n\nconst sumDivisorSumInverse = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += sumInverse(i);\n  }\n  return sum;\n};\n\nconst productDivisorProduct = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= product(i);\n  }\n  return product;\n};\n\nconst productDivisorProductInverse = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= productInverse(i);\n  }\n  return product;\n};\n\nconst computeSumDivisorSum = (n) => {\n  let sum = 0;\n  while (n) {\n    sum += sum(n);\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\nconst computeSumDivisorSumInverse = (n) => {\n  let sum = 0;\n  while (n) {\n    sum += sumInverse(n);\n    n = Math.floor(n / 10);\n  }\n  return sum;\n};\n\nconst computeProductDivisorProduct = (n) => {\n  let product = 1;\n  while (n) {\n    product *= product(n);\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\nconst computeProductDivisorProductInverse = (n) => {\n  let product = 1;\n  while (n) {\n    product *= productInverse(n);\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\nexport default {\n  sum,\n  sumInverse,\n  product,\n  productInverse,\n  greatestCommonDivisor,\n  leastCommonMultiple,\n  computeDivisorSum,\n  computeSumDivisorSum,\n  computeSumDivisorSumInverse,\n  computeProductDivisorProduct,\n  computeProductDivisorProductInverse,\n  computeSumDivisorSum,\n  computeSumDivisorSumInverse,\n  computeProductDivisorProduct,\n  computeProductDivisorProductInverse,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n\n  for (let i = 0; i < string.length; i += 1) {\n    for (let j = i; j < string.length; j += 1) {\n      prefixes.push(string.substr(i, j - i + 1));\n    }\n  }\n\n  return prefixes;\n};\n\n/*\n  Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('cab')\n  ['c', 'ca', 'cb', 'cab']\n  */\nconst allPrefixes2 = (string) => {\n  const prefixes = [];\n\n  for (let i = 0; i < string.length; i += 1) {\n    for (let j = i; j < string.length; j += 1) {\n      prefixes.push(string.substr(i, j - i + 1));\n    }\n  }\n\n  return prefixes;\n};\n\n// TEST CODE\n\nconst string = 'abc';\n\nconsole.log(allPrefixes(string));\nconsole.log(allPrefixes2(string));\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let output = '';\n  for (let i = 0; i < n; i++) {\n    output += `${i} `;\n  }\n  return output;\n};\n\nexport default stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const allChars = string.split('').map(c => c.toLowerCase())\n  const distinctChars = new Set(allChars)\n  return distinctChars.size\n}\n\n/*\n  Given a string, return the length of the longest substring that contains at least 2\n  distinct characters.\n  >>> longestSubstringWithAtLeastTwoDistinctCharacters('abcde')\n  4\n  >>> longestSubstringWithAtLeastTwoDistinctCharacters('xyzXYZ')\n  3\n  >>> longestSubstringWithAtLeastTwoDistinctCharacters('jerry')\n  3\n  >>> longestSubstringWithAtLeastTwoDistinctCharacters('jerry')\n  3\n  >>> longestSubstringWithAtLeastTwoDistinctCharacters('jerry')\n  3\n  */\nconst longestSubstringWithAtLeastTwoDistinctCharacters = (string) => {\n  const chars = string.split('')\n  let minLength = 0\n  let longestString = ''\n\n  // Loop through each character in the string.\n  // If the string contains the current character, then increase the length of the\n  // current string, and append the current character to the current string.\n  for (const c of chars) {\n    const charsLength = countDistinctCharacters(c)\n    if (charsLength >= 2) {\n      if (charsLength > minLength) {\n        longestString = c\n        minLength = charsLength\n      }\n    }\n  }\n\n  return minLength\n}\n\n/*\n  Given a string, return the length of the longest substring that contains exactly\n  two distinct characters.\n  >>> longestSubstringWithExactlyTwoDistinctCharacters('abcde')\n  4\n  >>> longestSubstringWithExactlyTwoDistinctCharacters('xyzXYZ')\n  3\n  >>> longestSubstringWithExactlyTwoDistinctCharacters('jerry')\n  3\n  >>> longestSubstringWithExactlyTwoDistinctCharacters('jerry')\n  3\n  >>> longestSubstringWithExactlyTwoDistinctCharacters('jerry')\n  3\n  */\nconst longestSubstringWithExactlyTwoDistinctCharacters = (string) => {\n  const chars = string.split('')\n  let minLength = 0\n  let longestString = ''\n\n  // Loop through each character in the string.\n  // If the string contains the current character, then increase the length of the\n  // current string, and append the current character to the current string.\n  for (const c of chars) {\n    const charsLength = countDistinctCharacters(c)\n    if (charsLength === 2) {\n      if (charsLength > minLength) {\n        longestString = c\n        minLength = charsLength\n      }\n    }\n  }\n\n  return minLength\n}\n\nexport default longestSubstringWithAtLeastTwoDistinctCharacters\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beats = [0, 0, 0, 0];\n  let notes = music_string.split(\"|\");\n  notes.forEach((note) => {\n    let new_note = note.split(\" \");\n    beats[new_note[0]] += 1;\n  });\n  return beats;\n};\n\n/*\n  What to print:\n  >>> printMusic('o o|.| o| o|.|.|.|.| o o')\n  4 2 1 2 2 1 1 1 4 4\n  */\nconst printMusic = (music_string) => {\n  let notes = music_string.split(\"|\");\n  let current_beat = 0;\n  let current_note = 0;\n  let current_time = 0;\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] == 'o') {\n      current_time += 4;\n    } else {\n      current_time += parseInt(notes[i]);\n      if (current_time % 4 == 0) {\n        current_beat += 1;\n      }\n    }\n  }\n  console.log(current_beat);\n};\n\nconst test = (music_string) => {\n  let beats = parseMusic(music_string);\n  let test_beats = [0, 0, 0, 0];\n  beats.forEach((beat) => {\n    test_beats[beat] += 1;\n  });\n  console.log(test_beats);\n};\n\n/*\n  What to print:\n  >>> test('o o|.| o| o|.|.|.|.| o o')\n  4 2 1 2 2 1 1 1 4 4\n  */\ntest('o o|.| o| o|.|.|.|.| o o');\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const arr = string.split('');\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i] === substring) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    let sortedNumbers = [];\n    for (let i = 0; i < numbers.length; i++) {\n        let number = numbers[i];\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice(index, 1);\n            sortedNumbers.push(number);\n        }\n    }\n    return sortedNumbers.join(\" \");\n};\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n    let sortedNumbers = [];\n    let numbersAsArray = numbers.split(\" \");\n    let numbersLength = numbersAsArray.length;\n    for (let i = 0; i < numbersLength; i++) {\n        let number = numbersAsArray[i];\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice(index, 1);\n            sortedNumbers.push(number);\n        }\n    }\n    return sortedNumbers.join(\" \");\n};\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n    let sortedNumbers = [];\n    let numbersAsArray = numbers.split(\" \");\n    let numbersLength = numbersAsArray.length;\n    for (let i = 0; i < numbersLength; i++) {\n        let number = numbersAsArray[i];\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice(index, 1);\n            sortedNumbers.push(number);\n        }\n    }\n    return sortedNumbers.join(\" \");\n};\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n    let sortedNumbers = [];\n    let numbersAsArray = numbers.split(\" \");\n    let numbersLength = numbersAsArray.length;\n    for (let i = 0; i < numbersLength; i++) {\n        let number = parseInt(numbersAsArray[i]);\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice(index, 1);\n            sortedNumbers.push(number);\n        }\n    }\n    return sortedNumbers.join(\" \");\n};\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n    let sortedNumbers = [];\n    let numbersAsArray = numbers.split(\" \");\n    let numbersLength = numbersAsArray.length;\n    for (let i = 0; i < numbersLength; i++) {\n        let number = parseInt(numbersAsArray[i]);\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice(index, 1);\n            sortedNumbers.push(number);\n        }\n    }\n    return sortedNumbers.join(\" \");\n};\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n    let sortedNumbers = [];\n    let numbersAsArray = numbers.split(\" \");\n    let numbersLength = numbersAsArray.length;\n    for (let i = 0; i < numbersLength; i++) {\n        let number = parseInt(numbersAsArray[i]);\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice(index, 1);\n            sortedNumbers.push(number);\n        }\n    }\n    return sortedNumbers.join(\" \");\n};\n\n/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n    let sortedNumbers = [];\n    let numbersAsArray = numbers.split(\" \");\n    let numbersLength = numbersAsArray.length;\n    for (let i = 0; i < numbersLength; i++) {\n        let number = parseInt(numbersAsArray[i]);\n        let index = sortedNumbers.indexOf(number);\n        if (index === -1) {\n            sortedNumbers.push(number);\n        } else {\n            sortedNumbers.splice"}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let sorted = numbers.sort((a, b) => a - b);\n  let middle = sorted[Math.floor(sorted.length / 2)];\n  return [sorted[0], sorted[sorted.length - 1]];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const maxAbs = Math.abs(max)\n  const minAbs = Math.abs(min)\n  const maxMin = max - min\n  const minMax = min - max\n  const ratio = max / min\n  return numbers.map((x) => ratio * x + minMax)\n}\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the largest number becomes 0 and the smallest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitDescending = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const maxAbs = Math.abs(max)\n  const minAbs = Math.abs(min)\n  const maxMin = max - min\n  const minMax = min - max\n  const ratio = max / min\n  return numbers.map((x) => ratio * x + minMax)\n}\n\nconst sum = (a, b) => a + b\n\nconst product = (a, b) => a * b\n\nconst subtract = (a, b) => a - b\n\nconst divide = (a, b) => a / b\n\nconst min = (a, b) => Math.min(a, b)\n\nconst max = (a, b) => Math.max(a, b)\n\nconst sqrt = (x) => Math.sqrt(x)\n\nconst log = (x) => Math.log(x)\n\nconst exp = (x) => Math.exp(x)\n\nconst exp2 = (x) => Math.exp(2 * x)\n\nconst log2 = (x) => Math.log(x) / Math.log(2)\n\nconst log10 = (x) => Math.log(x) / Math.log(10)\n\nconst log1p = (x) => Math.log(1 + x)\n\nconst sin = (x) => Math.sin(x)\n\nconst cos = (x) => Math.cos(x)\n\nconst tan = (x) => Math.tan(x)\n\nconst asin = (x) => Math.asin(x)\n\nconst acos = (x) => Math.acos(x)\n\nconst atan = (x) => Math.atan(x)\n\nconst sqrt1p = (x) => Math.sqrt(1 + x * x)\n\nconst sinh = (x) => Math.sinh(x)\n\nconst cosh = (x) => Math.cosh(x)\n\nconst tanh = (x) => Math.tanh(x)\n\nconst asinh = (x) => Math.asinh(x)\n\nconst acosh = (x) => Math.acosh(x)\n\nconst atanh = (x) => Math.atanh(x)\n\nconst sign = (x) => x > 0? 1 : -1\n\nconst min = (a, b) => Math.min(a, b)\n\nconst max = (a, b) => Math.max(a, b)\n\nconst clamp = (min, max, x) => Math.max(min, Math.min(max, x))\n\nconst lerp = (a, b, t) => a + (b - a) * t\n\nconst mix = (a, b, t) => a + (b - a) * t\n\nconst smoothstep = (a, b, x) => (x - a) / (b - a)\n\nconst smoothstepGrad = (a, b, x) => (b - a) * smoothstep(a, b, x)\n\nconst normalize = (x, a, b) => ((x - a) / (b - a))\n\nconst normalizeGrad = (x, a, b) => ((b - a) * normalize(x, a, b))\n\nconst dot = (a, b) => a * b\n\nconst cross = (a, b) => a.x * b.y - a.y * b.x\n\nconst length = (x) => Math.sqrt(x * x)\n\nconst length2 = (x) => x * x\n\nconst length3 = (x) => x * x * x\n\nconst length4 = (x) => x * x * x * x\n\nconst lengthGrad = (x, y) => x * y\n\nconst distance = (a, b) => Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2))\n\nconst distance2 = (a, b) => Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2)\n\nconst distance3 = (a, b) => Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2)\n\nconst distance4 = (a, b) => Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2) + Math.pow(a.w - b.w, 2)\n\nconst distanceGrad = (x, y, z) => x * y + x * z + y * z\n\nconst area = (a, b, c) => (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y)\n\nconst areaGrad = (x, y, z) => ((z - y) * (b.x - a.x) + (z - x) *"}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(Number.isInteger);\n};\n\n/**\n * Filters the specified list of arbitrary Python values for floats only\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(Number.isFinite);\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(str => {\n    return typeof str ==='string';\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(Boolean);\n};\n\n/**\n * Filters the specified list of arbitrary Python values for lists only\n  >>> filterLists(['a', 3.14, 5])\n  [[3.14, 5]]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[1, 2, 3]]\n  */\nconst filterLists = (values) => {\n  return values.filter(list => {\n    return Array.isArray(list);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dictionaries only\n  >>> filterDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [[1, 2, 3]]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(dictionary => {\n    return typeof dictionary === 'object' &&!Array.isArray(dictionary);\n  });\n};\n\n/**\n * Filters the specified list of arbitrary Python values for all types\n  >>> filterAll(['a', 3.14, 5])\n  [3.14, 5, 'a']\n  >>> filterAll([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterAll = (values) => {\n  return values.filter(v => {\n    return isType(v);\n  });\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterFloats,\n  filterStrings,\n  filterBooleans,\n  filterLists,\n  filterDictionaries,\n  filterAll,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [1]\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  const max = Math.max(...divisors)\n  return max\n}\n\n/* Find for a given number n the smallest number divisor that divides n,\n  less than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  const divisors = [1]\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  const min = Math.min(...divisors)\n  return min\n}\n\n/* Find for a given number n the largest number that divides n evenly,\n  less than n\n  >>> largestDivisible(15)\n  5\n  */\nconst largestDivisible = (n) => {\n  const divisors = [1]\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  const max = Math.max(...divisors)\n  return max\n}\n\n/* Find for a given number n the smallest number divisor that divides n,\n  less than n\n  >>> smallestDivisible(15)\n  3\n  */\nconst smallestDivisible = (n) => {\n  const divisors = [1]\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  const min = Math.min(...divisors)\n  return min\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n\n  if (n!== 1) {\n    factors.push(n)\n  }\n\n  return factors\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      continue;\n    }\n    map.set(numbers[i], true);\n  }\n  return [...new Set(map.values())];\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const result = string.toLowerCase();\n  return result.replace(/[a-z]/g, m => m.toUpperCase());\n};\n\n// Flip a word of text.\n/*\n  >>> flipWord('HelloWorld')\n  'hELLOwRld'\n  */\nconst flipWord = (string) => {\n  const splitWords = string.split(' ');\n  const newString = splitWords[0].toUpperCase();\n  for (let i = 1; i < splitWords.length; i++) {\n    newString += splitWords[i].toLowerCase();\n  }\n  return newString;\n};\n\nmodule.exports = {\n  flipCase,\n  flipWord\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => acc + string, '');\n};\n\n/**\n  * Convert a List of Objects to a Single Object\n  * @param {Array} arr - Array of Objects\n  * @returns {Object}\n  */\nconst flatten = (arr) => {\n  return Object.keys(arr[0]).reduce((acc, key) => {\n    acc[key] = arr.map(item => item[key]);\n    return acc;\n  }, {});\n};\n\n/**\n  * Get the length of a List of Strings\n  * @param {Array} list - Array of Strings\n  * @returns {Number}\n  */\nconst length = (list) => {\n  return list.reduce((acc, item) => acc + 1, 0);\n};\n\nmodule.exports = {\n  concatenate,\n  flatten,\n  length\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => string.indexOf(prefix) === 0)\n}\n\n/*\n  Given a list of strings, return a list of the strings without the\n  prefixes that are found in the list of prefixes.\n  >>> filterByPrefix([], ['a', 'b'])\n  []\n  >>> filterByPrefix(['a', 'b', 'c', 'array'], ['a', 'b'])\n  ['c', 'array']\n  */\nconst filterByPrefixes = (strings, prefixes) => {\n  return filterByPrefix(strings, prefixes.join('|'))\n}\n\n/*\n  Given a list of strings, return a list of the strings without the\n  prefixes that are not found in the list of prefixes.\n  >>> filterByPrefix([], ['a', 'b'])\n  []\n  >>> filterByPrefix(['a', 'b', 'c', 'array'], ['a', 'b'])\n  ['c', 'array']\n  */\nconst filterByPrefixesNot = (strings, prefixes) => {\n  return filterByPrefix(strings, prefixes.join('|')).filter(\n    (string) =>!filterByPrefix(prefixes, string).length\n  )\n}\n\n/*\n  Given a list of strings, return a list of the strings that are found in\n  the list of prefixes.\n  >>> filterByPrefix([], ['a', 'b'])\n  []\n  >>> filterByPrefix(['a', 'b', 'c', 'array'], ['a', 'b'])\n  ['c', 'array']\n  */\nconst filterByPrefixesAnd = (strings, prefixes) => {\n  return filterByPrefix(strings, prefixes.join('|')).filter(\n    (string) => filterByPrefix(prefixes, string).length\n  )\n}\n\n/*\n  Given a list of strings, return a list of the strings that are not found\n  in the list of prefixes.\n  >>> filterByPrefix([], ['a', 'b'])\n  []\n  >>> filterByPrefix(['a', 'b', 'c', 'array'], ['a', 'b'])\n  ['c', 'array']\n  */\nconst filterByPrefixesNotAnd = (strings, prefixes) => {\n  return filterByPrefix(strings, prefixes.join('|')).filter(\n    (string) =>!filterByPrefix(prefixes, string).length\n  )\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n > 0);\n};\n\n/*RThe list contains only negative numbers.\n  >>> getNegative([1, 2, -3, 4, -5])\n  [-5, -3, -1, 4]\n  >>> getNegative([-5, -3, -1, 4, 5, 3, 2, 1, 0])\n  [-5, -3, -1, 4]\n  */\nconst getNegative = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n < 0);\n};\n\n/*RThe list contains only positive or negative numbers.\n  >>> getBoth([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getBoth([-1, 2, -4, 5, 6, -7])\n  [-4, 5, 6]\n  >>> getBoth([-1, 2, -4, 5, 6, -7, -8])\n  [-4, 5, 6]\n  */\nconst getBoth = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n > 0 || n < 0);\n};\n\n/*RThe list contains no positive or negative numbers.\n  >>> getNone([1, 2, 3, 4, 5])\n  []\n  >>> getNone([-1, 2, -4, 5, 6])\n  []\n  >>> getNone([-1, 2, -4, 5, 6, -7])\n  []\n  */\nconst getNone = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n > 0 || n < 0);\n};\n\n/*RThe list contains no positive or negative numbers.\n  >>> getAll([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getAll([-1, 2, -4, 5, 6, -7])\n  [-1, 2, -4, 5, 6]\n  */\nconst getAll = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n > 0 || n < 0);\n};\n\n/*RThe list contains no positive or negative numbers.\n  >>> getNone([1, 2, 3, 4, 5])\n  []\n  >>> getNone([-1, 2, -4, 5, 6])\n  []\n  >>> getNone([-1, 2, -4, 5, 6, -7])\n  []\n  */\nconst getAllNeg = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n < 0);\n};\n\n/*RThe list contains no positive or negative numbers.\n  >>> getAllNeg([1, 2, 3, 4, 5])\n  []\n  >>> getAllNeg([-1, 2, -4, 5, 6])\n  []\n  >>> getAllNeg([-1, 2, -4, 5, 6, -7])\n  [-7]\n  */\nconst getAllPos = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n > 0);\n};\n\n/*RThe list contains no positive or negative numbers.\n  >>> getAllPos([1, 2, 3, 4, 5])\n  []\n  >>> getAllPos([-1, 2, -4, 5, 6])\n  []\n  >>> getAllPos([-1, 2, -4, 5, 6, -7])\n  []\n  */\nconst getAll = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.filter((n) => n > 0 || n < 0);\n};\n\nexport {\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg,\n  getAllPos,\n  getAll,\n  getAllNeg,\n  getAllPos,\n  getAllNeg"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1 || n === 2) return false\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  const limit = Math.sqrt(n)\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> primeList([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997])\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let result = find(xs, (x) => {\n    return poly(x) === 0;\n  });\n\n  return result;\n}\n\n/*\n  We have a function find(xs, f) which takes xs as a list and\n  f(x) = 0 when xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n == 0.\n  We have a function round(x, n) which rounds x to n digits after decimal point.\n  We want to find x, x1, x2,..., xn such that f(x1) + f(x2) + f(x3) +... + f(xn) = 0\n  such that f(x) has the smallest positive root.\n\n  Our solution is to find x such that f(x) = 0 using the Newton method.\n  If f(x) = 0, then x is a root.\n  Then we iterate f(x) = f(x) - f(x)^2/f'(x) = f(x) - f(x)^2/f'(x)^2 = f(x) - f(x)^2/f'(x)^2 * f'(x)\n  We get f(x) = 0 by solving f(x) = 0 and f'(x) = f(x)^2/f'(x)^2 = f(x)^2/f'(x)^2 * f'(x)\n  This is a quadratic equation.\n  The solutions are:\n  x0 = (-f(x0) - sqrt(f(x0)^2 - 4 * f(x0) * f'(x0))) / 2\n  x1 = (-f(x0) + sqrt(f(x0)^2 - 4 * f(x0) * f'(x0))) / 2\n\n  We use the Newton method to solve this equation.\n  We have to find the value of x0, x1, x2,..., xn such that f(x0) + f(x1) + f(x2) +... + f(xn) = 0.\n  Then we can iterate f(x) = f(x) - f(x)^2/f'(x) = f(x) - f(x)^2/f'(x)^2 * f'(x)\n  We get f(x) = 0 by solving f(x) = 0 and f'(x) = f(x)^2/f'(x)^2 = f(x)^2/f'(x)^2 * f'(x)\n  This is a quadratic equation.\n  The solution is:\n  xn = (-f(xn) - sqrt(f(xn)^2 - 4 * f(xn) * f'(xn))) / 2\n\n  We can find x0, x1, x2,..., xn by taking xn = x1, x2,..., xn - 1\n  and x0 = x1, x2,..., xn - 1\n  Note:\n  1. For even number of coefficients, largest non zero coefficient is first.\n  2. xs are a list of coefficients.\n  3. xs are coefficients of a polynomial.\n  4. xs are coefficients of a polynomial.\n  5. If f(x0) + f(x1) + f(x2) +... + f(xn) == 0, then x0, x1, x2,..., xn are roots of f(x).\n  6. If f(x) = 0, then x is a root of f(x).\n  7. If f(x) = 0, then x is a root of f(x).\n  8. If f(x0) + f(x1) + f(x2) +... + f(xn) == 0, then x0, x1, x2,..., xn are roots of f(x).\n  9. If f(x) = 0, then x is a root of f(x).\n  */\nconst find = (xs, f) => {\n  let result = findZero(xs);\n\n  return result;\n}\n\n// ------------------------------------------------------------------------\n\n/*\n  xs are coefficients of a polynomial.\n  findZero finds x such that f(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(find([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(find([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(find([1, -2, 3, -4]), 2) # f(x) = 1 + 2x - 4x^2 + 3x^3\n  1.0\n  >>> round(find([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  1.0\n"}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\n// EXERCISE: Write a function that takes a list l and returns a list l' such that\n// l' is identical to l in indices that are not divisible by four, while its values for indices divisible by four correspond to the values of the corresponding indices of l but are sorted.\nconst sortFourth = (l) => {\n  return l.filter((x, i) => {\n    return i % 4 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\n// EXERCISE: Write a function that takes a list l and returns a list l' such that\n// l' is identical to l in indices that are not divisible by five, while its values for indices divisible by five correspond to the values of the corresponding indices of l but are sorted.\nconst sortFifth = (l) => {\n  return l.filter((x, i) => {\n    return i % 5 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm = (l) => {\n  let result = l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0? i : null\n  }).sort((a, b) => a - b)\n  return result\n}\n\nconst sortAlgorithm2 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\n// EXERCISE: Write a function that takes a list l and returns a list l' such that\n// l' is identical to l in indices that are not divisible by either six or seven, while its values for indices divisible by either six or seven correspond to the values of the corresponding indices of l but are sorted.\nconst sortSixOrSeven = (l) => {\n  return l.filter((x, i) => {\n    return i % 6 === 0 || i % 7 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm3 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm4 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7 === 0 || i % 8 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\n// EXERCISE: Write a function that takes a list l and returns a list l' such that\n// l' is identical to l in indices that are not divisible by either eight or nine, while its values for indices divisible by either eight or nine correspond to the values of the corresponding indices of l but are sorted.\nconst sortEightOrNine = (l) => {\n  return l.filter((x, i) => {\n    return i % 8 === 0 || i % 9 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm5 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7 === 0 || i % 8 === 0 || i % 9 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\n// EXERCISE: Write a function that takes a list l and returns a list l' such that\n// l' is identical to l in indices that are not divisible by ten, while its values for indices divisible by ten correspond to the values of the corresponding indices of l but are sorted.\nconst sortTen = (l) => {\n  return l.filter((x, i) => {\n    return i % 10 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm6 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7 === 0 || i % 8 === 0 || i % 9 === 0 || i % 10 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm7 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7 === 0 || i % 8 === 0 || i % 9 === 0 || i % 10 === 0 || i % 11 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm8 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7 === 0 || i % 8 === 0 || i % 9 === 0 || i % 10 === 0 || i % 11 === 0 || i % 12 === 0? i : null\n  }).sort((a, b) => a - b)\n}\n\nconst sortAlgorithm9 = (l) => {\n  return l.filter((x, i) => {\n    return i % 3 === 0 || i % 4 === 0 || i % 5 === 0 || i % 6 === 0 || i % 7"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const unique = [];\n  let i = 0;\n  while (i < sorted.length) {\n    if (unique.indexOf(sorted[i]) === -1) {\n      unique.push(sorted[i]);\n    }\n    i++;\n  }\n  return unique;\n};\n\n/*Return the index of the value in a sorted list\n  >>> indexOf([1, 3, 5, 7, 9], 9)\n  3\n  >>> indexOf([1, 3, 5, 7, 9], 1)\n  0\n  >>> indexOf([1, 3, 5, 7, 9], 10)\n  -1\n  */\nconst indexOf = (l, item) => {\n  const sorted = l.sort((a, b) => a - b);\n  const i = sorted.indexOf(item);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n};\n\nmodule.exports = {\n  find,\n  findLast,\n  first,\n  index,\n  last,\n  indexOf,\n  lastIndexOf,\n  lastIndex,\n  lastIndexOf,\n  map,\n  mapToArray,\n  mapToObject,\n  max,\n  min,\n  minBy,\n  minBy,\n  minBy,\n  maxBy,\n  maxBy,\n  reduce,\n  reduceRight,\n  reduceRight,\n  reduceRight,\n  reduceRight,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  reject,\n  "}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const arr = l.slice()\n  arr.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return arr[arr.length - 1]\n}\n\nexport default maxElement\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const res = [];\n    for (let i = 1; i <= n; i++) {\n        if (isFizz(i)) {\n            res.push(`${i}`);\n        } else if (isBuzz(i)) {\n            res.push(`${i}`);\n        } else if (isDivisibleBy11(i)) {\n            res.push(`${i}Fizz`);\n        } else if (isDivisibleBy13(i)) {\n            res.push(`${i}Buzz`);\n        } else {\n            res.push(`${i}`);\n        }\n    }\n    return res;\n};\n\nexport {\n    fizzBuzz\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.filter((item) => item % 2 === 1).sort();\n};\n\n/*\n  Let's think of the numbers from 1 to N as the Fibonacci sequence, defined by the recurrence F(n) = F(n - 1) + F(n - 2), where F(1) = 1 and F(2) = 1.\n  Given N, write a function that returns a list of all the even-valued Fibonacci numbers less than N.\n  >>> fibonacci(10)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [];\n  }\n  const even = [];\n  const fibonacci = (f) => {\n    if (f <= 0) {\n      return;\n    }\n    if (f % 2 === 1) {\n      even.push(f);\n    }\n    return fibonacci(f - 1) + fibonacci(f - 2);\n  };\n  return fibonacci(n);\n};\n\n/*\n  Given a list of numbers l, write a function that returns the sum of the even values in l.\n  >>> sumEven([1, 2, 3])\n  6\n  >>> sumEven([1, 2, 3, 5])\n  10\n  >>> sumEven([1, 2, 3, 5, 7])\n  16\n  */\nconst sumEven = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given a list of numbers l, write a function that returns the sum of the even values in l, but in descending order.\n  >>> sumEvenDesc([1, 2, 3])\n  6\n  >>> sumEvenDesc([1, 2, 3, 5])\n  10\n  >>> sumEvenDesc([1, 2, 3, 5, 7])\n  16\n  */\nconst sumEvenDesc = (l) => {\n  return l.reduce((a, b) => a + b, 0, (a, b) => b - a);\n};\n\n/*\n  Given a list of numbers l, write a function that returns the sum of the even values in l, but in ascending order.\n  >>> sumEvenAsc([1, 2, 3])\n  6\n  >>> sumEvenAsc([1, 2, 3, 5])\n  10\n  >>> sumEvenAsc([1, 2, 3, 5, 7])\n  16\n  */\nconst sumEvenAsc = (l) => {\n  return l.reduce((a, b) => a + b, 0, (a, b) => a - b);\n};\n\n/*\n  Given a list of numbers l, write a function that returns the sum of the even values in l, but in descending order.\n  >>> sumEvenDesc([1, 2, 3])\n  6\n  >>> sumEvenDesc([1, 2, 3, 5])\n  10\n  >>> sumEvenDesc([1, 2, 3, 5, 7])\n  16\n  */\nconst sumEvenDesc = (l) => {\n  return l.reduce((a, b) => a + b, 0, (a, b) => b - a);\n};\n\n/*\n  Given a list of numbers l, write a function that returns the sum of the even values in l, but in ascending order.\n  >>> sumEvenAsc([1, 2, 3])\n  6\n  >>> sumEvenAsc([1, 2, 3, 5])\n  10\n  >>> sumEvenAsc([1, 2, 3, 5, 7])\n  16\n  */\nconst sumEvenAsc = (l) => {\n  return l.reduce((a, b) => a + b, 0, (a, b) => a - b);\n};\n\nconst l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconsole.log(l);\nconsole.log(sumEven(l));\nconsole.log(sumEvenDesc(l));\nconsole.log(sumEvenAsc(l));\n\nconsole.log(l);\nconsole.log(sumEven(sortEven(l)));\nconsole.log(sumEvenDesc(sortEven(l)));\nconsole.log(sumEvenAsc(sortEven(l)));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(i * 3, Math.min((i + 1) * 3, s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode = (s) => {\n  if (s.length % 3!= 0) {\n    throw new Error('Length of string should be divisible by 3.');\n  }\n  return encodeCyclic(s);\n}\n\nconst decode = (s) => {\n  if (s.length % 3!= 0) {\n    throw new Error('Length of string should be divisible by 3.');\n  }\n  return decodeCyclic(s);\n}\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return (Math.pow(2,n) + Math.pow(3,n-1) - 3);\n};\n\n/*\n  primeSieve returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeSieve(1)\n  2\n  >>> primeSieve(2)\n  3\n  >>> primeSieve(3)\n  5\n  >>> primeSieve(4)\n  13\n  >>> primeSieve(5)\n  89\n  */\nconst primeSieve = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= Math.pow(2,n)) {\n    if (primeFib(i) === Math.pow(2,n) + Math.pow(3,n-1) - 3) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr[n-1];\n};\n\nconst divisorCount = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= Math.pow(2,n)) {\n    if (primeFib(i) === Math.pow(2,n) + Math.pow(3,n-1) - 3) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  sievePrime returns the number of primes less than n.\n  >>> sievePrime(1)\n  0\n  >>> sievePrime(2)\n  1\n  >>> sievePrime(3)\n  2\n  >>> sievePrime(4)\n  3\n  >>> sievePrime(5)\n  4\n  >>> sievePrime(6)\n  5\n  >>> sievePrime(7)\n  6\n  >>> sievePrime(8)\n  7\n  >>> sievePrime(9)\n  8\n  >>> sievePrime(10)\n  9\n  >>> sievePrime(11)\n  10\n  >>> sievePrime(12)\n  11\n  >>> sievePrime(13)\n  12\n  >>> sievePrime(14)\n  13\n  >>> sievePrime(15)\n  14\n  >>> sievePrime(16)\n  15\n  >>> sievePrime(17)\n  16\n  >>> sievePrime(18)\n  17\n  >>> sievePrime(19)\n  18\n  >>> sievePrime(20)\n  19\n  >>> sievePrime(21)\n  20\n  >>> sievePrime(22)\n  21\n  >>> sievePrime(23)\n  22\n  >>> sievePrime(24)\n  23\n  >>> sievePrime(25)\n  24\n  >>> sievePrime(26)\n  25\n  >>> sievePrime(27)\n  26\n  >>> sievePrime(28)\n  27\n  >>> sievePrime(29)\n  28\n  >>> sievePrime(30)\n  29\n  >>> sievePrime(31)\n  30\n  >>> sievePrime(32)\n  31\n  >>> sievePrime(33)\n  32\n  >>> sievePrime(34)\n  33\n  >>> sievePrime(35)\n  34\n  >>> sievePrime(36)\n  35\n  >>> sievePrime(37)\n  36\n  >>> sievePrime(38)\n  37\n  >>> sievePrime(39)\n  38\n  >>> sievePrime(40)\n  39\n  >>> sievePrime(41)\n  40\n  >>> sievePrime(42)\n  41\n  >>> sievePrime(43)\n  42\n  >>> sievePrime(44)\n  43\n  >>> sievePrime(45)\n  44\n  >>> sievePrime(46)\n  45\n  >>> sievePrime(47)\n  46\n  >>> sievePrime(48)\n  47\n  >>> sievePrime(49)\n  48\n  >>> sievePrime(50)\n  49\n  >>> sievePrime(51)\n  50\n  >>> sievePrime(52)\n  51\n  >>> sievePrime(53)\n  52\n  >>> sievePrime(54)\n  53\n  >>> sievePrime(55)\n  54\n  >>> sievePrime(56)\n  55\n  >>> sievePrime(57)\n  56\n  >>> sievePrime(58)\n  57\n  >>> sievePrime(59)\n  58\n  >>> sievePrime(60)\n  59\n  >>> sievePrime(61)\n  60\n  >>> sievePrime(62)\n  61\n  >>> sievePrime(63)\n  62\n  >>> sievePrime(64)\n  63\n  >>> sievePrime(65)\n  64\n  >>> sievePrime(66)\n  65\n  >>> sievePrime(67)\n  66\n  >>> sievePrime(68)\n  67\n  >>> sievePrime(69)\n  68\n  >>> sievePrime(70)\n  69\n  >>> sievePrime(71)\n  70\n  >>> sievePrime(72)\n  71\n  >>> sievePrime(73)\n  72\n  >>> sievePrime(74)\n  73\n  >>> sievePrime(75)\n  74\n  >>> sievePrime(76)\n  75\n  >>> sievePrime(77)\n  76\n  >>> sievePrime(78)\n  77\n  >>> sievePrime(79)\n  78\n  >>> sievePrime(80)\n  79\n  >>> sievePrime(81)\n  80\n  >>> sievePrime(82)\n  81\n  >>> sievePrime(83)\n  82\n  >>> sievePrime(84)\n  83\n  >>> sievePrime(85)\n  84\n  >>> sievePrime(86)\n  85\n  >>> sievePrime(87)\n  86\n  >>> sievePrime(88)\n  87\n  >>> sievePrime(89)\n  88\n  >>> sievePrime(90)\n  89\n  >>> sieve"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    if (!l) return false\n    const result = l.reduce((a, b) => a + b, 0)\n    return result === 0 && l.length === 3\n}\n\n/**\n  * The main function\n  */\nconst main = () => {\n    console.log(triplesSumToZero([1, 3, 5, 0]))\n    console.log(triplesSumToZero([1, 3, -2, 1]))\n    console.log(triplesSumToZero([1, 2, 3, 7]))\n    console.log(triplesSumToZero([2, 4, -5, 3, 9, 7]))\n    console.log(triplesSumToZero([1]))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  // Number of cars that are moving left to right\n  const leftToRight = n;\n  // Number of cars that are moving right to left\n  const rightToLeft = n;\n  // Number of cars that are moving left to right\n  const leftToRightCollisions = 0;\n  // Number of cars that are moving right to left\n  const rightToLeftCollisions = 0;\n  // Number of cars that are moving left to right\n  const leftToRightSpeed = 1;\n  // Number of cars that are moving right to left\n  const rightToLeftSpeed = 1;\n  // Number of cars that are moving left to right\n  const leftToRightDuration = 1;\n  // Number of cars that are moving right to left\n  const rightToLeftDuration = 1;\n\n  for (let i = 0; i < leftToRight; i++) {\n    for (let j = 0; j < rightToLeft; j++) {\n      // This collision occurs every second\n      if (i * leftToRightDuration + j * rightToLeftDuration === 1) {\n        // If the car is moving left to right, this counts as a collision\n        if (i > 0) {\n          leftToRightCollisions++;\n        }\n        // If the car is moving right to left, this counts as a collision\n        if (j > 0) {\n          rightToLeftCollisions++;\n        }\n      }\n    }\n  }\n  return leftToRightCollisions + rightToLeftCollisions;\n};\n\n// Your code goes here\nconst test1 = () => {\n  console.log(carRaceCollision(2));\n};\n\ntest1();\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  let n;\n  for (let i = 0; i < l.length; i += 1) {\n    n = l[i];\n    result.push(n + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decreased by 1.\n  >>> decrList([4, 6, 9, 11])\n  [3, 5, 8, 10]\n  >>> decrList([3, 4, 7, 7, 2, 4, 3, 3, 2])\n  [1, 2, 3, 3, 2, 3, 4, 3, 3]\n  */\nconst decrList = (l) => {\n  const result = [];\n  let n;\n  for (let i = 0; i < l.length; i += 1) {\n    n = l[i];\n    result.push(n - 1);\n  }\n  return result;\n};\n\n/*Return list with elements reversed.\n  >>> revList([1, 2, 3])\n  [3, 2, 1]\n  >>> revList([3, 4, 7, 7, 2, 4, 3, 3, 2])\n  [2, 3, 3, 2, 4, 7, 7, 4, 3]\n  */\nconst revList = (l) => {\n  const result = [];\n  for (let i = l.length - 1; i >= 0; i -= 1) {\n    result.push(l[i]);\n  }\n  return result;\n};\n\nconst sum = (l) => {\n  const result = 0;\n  for (let i = 0; i < l.length; i += 1) {\n    result += l[i];\n  }\n  return result;\n};\n\nconst mean = (l) => {\n  return sum(l) / l.length;\n};\n\nconst median = (l) => {\n  const sorted = sortedList(l);\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nconst mode = (l) => {\n  const sorted = sortedList(l);\n  let result = null;\n  let maxCount = 0;\n  for (let i = 0; i < sorted.length; i += 1) {\n    if (l.indexOf(sorted[i]) > maxCount) {\n      result = sorted[i];\n      maxCount = l.indexOf(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sortedList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i += 1) {\n    result.push(l[i]);\n  }\n  result.sort();\n  return result;\n};\n\nconst sumList = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i += 1) {\n    result += l[i];\n  }\n  return result;\n};\n\nconst meanList = (l) => {\n  return sumList(l) / l.length;\n};\n\nconst medianList = (l) => {\n  const sorted = sortedList(l);\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nconst modeList = (l) => {\n  const sorted = sortedList(l);\n  let result = null;\n  let maxCount = 0;\n  for (let i = 0; i < sorted.length; i += 1) {\n    if (l.indexOf(sorted[i]) > maxCount) {\n      result = sorted[i];\n      maxCount = l.indexOf(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst sumArray = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i += 1) {\n    result += l[i];\n  }\n  return result;\n};\n\nconst meanArray = (l) => {\n  return sumArray(l) / l.length;\n};\n\nconst medianArray = (l) => {\n  const sorted = sortedList(l);\n  const half = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nconst modeArray = (l) => {\n  const sorted = sortedList(l);\n  let result = null;\n  let maxCount = 0;\n  for (let i = 0; i < sorted.length; i += 1) {\n    if (l.indexOf(sorted[i]) > maxCount) {\n      result = sorted[i];\n      maxCount = l.indexOf(sorted[i]);\n    }\n  }\n  return result;\n};\n\nconst isPalindrome = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i]!== l[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n};\n\nconst isPalindromeList = (l) => {\n  for (let i = 0; i < l.length / 2; i += 1) {\n    if (l[i]!== l[l.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindromeArray = (l) => {\n  const len = l.length;\n  for (let i = 0; i < len / 2; i += 1)"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let pairs = [];\n\n  for (let i = 0; i < l.length - 1; i += 2) {\n    if (l[i] === 0) {\n      pairs.push([l[i + 1], l[i]]);\n    }\n  }\n\n  for (let j = 1; j < l.length; j++) {\n    if (l[j]!== 0 &&!pairs.includes([l[j], l[j - 1]])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 10) {\n    return x.toString(base);\n  }\n  const xAsString = x.toString(base);\n  let result = '';\n  for (let i = 0; i < xAsString.length; i++) {\n    result += xAsString.charAt(i);\n    while (xAsString.charAt(i) === '0' && i < xAsString.length - 1) {\n      i++;\n    }\n    while (xAsString.charAt(i)!== '0' && i < xAsString.length - 1) {\n      const temp = xAsString.charAt(i);\n      xAsString = xAsString.slice(0, i) + xAsString.slice(i + 1);\n      x = parseInt(xAsString, base);\n      result += temp;\n    }\n  }\n  return result;\n};\n\nmodule.exports = changeBase;\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs(Math.sqrt(a*a - h*h)/2);\n};\n\n/*GThis is a helper method that checks if a number is an integer.\n  >>> isInt(5)\n  true\n  >>> isInt(3.5)\n  false\n  >>> isInt(5.2)\n  false\n  */\nconst isInt = (n) => {\n  return n%1 === 0;\n};\n\n/*GThis is a helper method that checks if two numbers are the same.\n  >>> areEqual(5, 5)\n  true\n  >>> areEqual(5, 3.5)\n  false\n  >>> areEqual(5, 5.2)\n  false\n  */\nconst areEqual = (a, b) => {\n  return Math.abs(a - b) < 0.1;\n};\n\n/*GThis is a helper method that checks if two arrays are the same.\n  >>> areEqual([\"one\", \"two\"], [\"two\", \"one\"])\n  true\n  >>> areEqual([\"one\", \"two\"], [\"two\", \"one\", \"one\"])\n  false\n  */\nconst areEqualArrays = (a, b) => {\n  if (a.length!== b.length) {\n    return false;\n  }\n\n  return a.every((x, i) => areEqual(x, b[i]));\n};\n\n/*GThis is a helper method that checks if two arrays are the same.\n  >>> areEqual([\"one\", \"two\"], [\"two\", \"one\"])\n  true\n  >>> areEqual([\"one\", \"two\"], [\"two\", \"one\", \"one\"])\n  false\n  */\nconst isEqualArrays = (a, b) => {\n  if (a.length!== b.length) {\n    return false;\n  }\n\n  return a.every((x, i) => areEqual(x, b[i]));\n};\n\n/*GThis is a helper method that checks if two objects are the same.\n  >>> areEqual({\"name\": \"one\"}, {\"name\": \"one\"})\n  true\n  >>> areEqual({\"name\": \"one\"}, {\"name\": \"two\"})\n  false\n  >>> areEqual({\"name\": \"one\"}, {\"name\": \"one\", \"age\": 1})\n  false\n  */\nconst areEqualObjects = (a, b) => {\n  if (Object.keys(a).length!== Object.keys(b).length) {\n    return false;\n  }\n\n  return Object.keys(a).every((key) => {\n    if (typeof a[key] === \"object\" && typeof b[key] === \"object\") {\n      return areEqualObjects(a[key], b[key]);\n    } else if (areEqual(a[key], b[key])) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n};\n\n/*GThis is a helper method that checks if two objects are the same.\n  >>> areEqual({\"name\": \"one\"}, {\"name\": \"one\"})\n  true\n  >>> areEqual({\"name\": \"one\"}, {\"name\": \"two\"})\n  false\n  >>> areEqual({\"name\": \"one\"}, {\"name\": \"one\", \"age\": 1})\n  false\n  */\nconst isEqualObjects = (a, b) => {\n  if (Object.keys(a).length!== Object.keys(b).length) {\n    return false;\n  }\n\n  return Object.keys(a).every((key) => {\n    if (typeof a[key] === \"object\" && typeof b[key] === \"object\") {\n      return isEqualObjects(a[key], b[key]);\n    } else if (areEqual(a[key], b[key])) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n};\n\nmodule.exports = {\n  triangleArea,\n  isInt,\n  areEqualArrays,\n  isEqualArrays,\n  areEqualObjects,\n  isEqualObjects\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib4(n-1) + fib4(n-2);\n};\n\n/*\n  >>> fib4(0)\n  0\n  >>> fib4(1)\n  1\n  >>> fib4(2)\n  2\n  >>> fib4(3)\n  3\n  >>> fib4(4)\n  5\n  >>> fib4(5)\n  8\n  >>> fib4(6)\n  14\n  >>> fib4(7)\n  22\n  >>> fib4(8)\n  34\n  >>> fib4(9)\n  55\n  */\n\n/*\n  >>> fib4(100)\n  26231009\n  >>> fib4(200)\n  406904005\n  >>> fib4(300)\n  6408390058\n  >>> fib4(400)\n  9262640068\n  >>> fib4(500)\n  13421772701\n  >>> fib4(600)\n  19342650060\n  >>> fib4(700)\n  29677360981\n  >>> fib4(800)\n  43927953790\n  >>> fib4(900)\n  57646075230\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = sort(l);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2.0;\n  }\n  return sorted[middle];\n};\n\n/**\n * Compute the mode of a list.\n *\n * @param {Array} l\n *   The list to find the mode of.\n *\n * @return {Number}\n *   The mode of the list.\n *\n * @example\n *\n * The mode of a list.\n *\n * ```javascript\n * const mode = mode([1, 2, 3, 4, 3, 2, 4, 5]);\n * //=> 3\n * ```\n */\nconst mode = (l) => {\n  const sorted = sort(l);\n  const maxCount = 1;\n  const max = sorted[0];\n  let count = 1;\n  let i = 1;\n  while (i < sorted.length) {\n    if (sorted[i] === max) {\n      count++;\n    }\n    else if (count === maxCount) {\n      max = sorted[i];\n      count = 1;\n    }\n    else {\n      count = 1;\n      max = sorted[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n/**\n * Returns the median of a list of numbers.\n *\n * @param {Array} l\n *   The list to find the median of.\n *\n * @return {Number}\n *   The median of the list.\n *\n * @example\n *\n * The median of a list of numbers.\n *\n * ```javascript\n * const median = median([3, 1, 2, 4, 5]);\n * //=> 3\n * ```\n */\nconst median = (l) => {\n  const sorted = sort(l);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2.0;\n  }\n  return sorted[middle];\n};\n\n/**\n * Returns the mode of a list of numbers.\n *\n * @param {Array} l\n *   The list to find the mode of.\n *\n * @return {Number}\n *   The mode of the list.\n *\n * @example\n *\n * The mode of a list of numbers.\n *\n * ```javascript\n * const mode = mode([3, 1, 2, 4, 3, 2, 4, 5]);\n * //=> 3\n * ```\n */\nconst mode = (l) => {\n  const sorted = sort(l);\n  const maxCount = 1;\n  const max = sorted[0];\n  let count = 1;\n  let i = 1;\n  while (i < sorted.length) {\n    if (sorted[i] === max) {\n      count++;\n    }\n    else if (count === maxCount) {\n      max = sorted[i];\n      count = 1;\n    }\n    else {\n      count = 1;\n      max = sorted[i];\n    }\n    i++;\n  }\n  return max;\n};\n\nexport default {\n  average,\n  median,\n  mode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart <= textEnd) {\n    if (text[textStart]!== text[textEnd]) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\n/**\n  Tests if the given string is a palindrome\n  >>> isPalindrome('A man, a plan, a canal: Panama')\n  true\n  >>> isPalindrome('banana')\n  true\n  >>> isPalindrome('zebra')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text[textStart]!== text[textEnd]) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome3 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charAt(textStart)!== text.charAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome4 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charCodeAt(textStart)!== text.charCodeAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome5 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charCodeAt(textStart)!== text.charCodeAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome6 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charCodeAt(textStart)!== text.charCodeAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome7 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.codePointAt(textStart)!== text.codePointAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome8 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.codePointAt(textStart)!== text.codePointAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome9 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charCodeAt(textStart)!== text.charCodeAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome10 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charCodeAt(textStart)!== text.charCodeAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;\n};\n\nconst isPalindrome11 = (text) => {\n  if (!text) return false;\n  let textLen = text.length;\n  if (textLen === 0) return true;\n  let textStart = 0;\n  let textEnd = textLen - 1;\n  while (textStart < textEnd) {\n    if (text.charCodeAt(textStart)!== text.charCodeAt(textEnd)) {\n      return false;\n    }\n    textStart++;\n    textEnd--;\n  }\n  return true;"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return ((n % p) + p) % p\n}\n\n/* Return the greatest common divisor (GCD) of a and b.\n  >>> gcd(4, 12)\n  4\n  >>> gcd(24, 36)\n  12\n  >>> gcd(1, 1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(2, -3)\n  2\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 0)\n  0\n  >>> gcd(3, -6)\n  3\n  >>> gcd(0, -9)\n  3\n  */\nconst gcd = (a, b) => {\n  return (b === 0)? a : gcd(b, a % b)\n}\n\n/* Return the greatest common divisor (GCD) of a and b.\n  >>> gcd(4, 12)\n  4\n  >>> gcd(24, 36)\n  12\n  >>> gcd(1, 1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(2, -3)\n  2\n  >>> gcd(0, -9)\n  3\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\n/* Return the least common multiple (LCM) of a and b.\n  >>> lcm(4, 12)\n  24\n  >>> lcm(24, 36)\n  12 * 36\n  >>> lcm(1, 1)\n  1\n  >>> lcm(0, 0)\n  0\n  >>> lcm(1, -1)\n  1\n  >>> lcm(-1, 1)\n  1\n  >>> lcm(2, -3)\n  6\n  >>> lcm(0, -9)\n  9\n  */\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b)\n}\n\n/* Return the least common multiple (LCM) of a and b.\n  >>> lcm(4, 12)\n  24\n  >>> lcm(24, 36)\n  12 * 36\n  >>> lcm(1, 1)\n  1\n  >>> lcm(0, 0)\n  0\n  >>> lcm(1, -1)\n  1\n  >>> lcm(-1, 1)\n  1\n  >>> lcm(2, -3)\n  6\n  >>> lcm(0, -9)\n  9\n  */\nconst pdiv = (a, b) => {\n  return a * (b / gcd(a, b))\n}\n\n/* Return the sum of a and b.\n  >>> sum(1, 1)\n  2\n  >>> sum(2, 3)\n  5\n  >>> sum(1, 2)\n  3\n  >>> sum(3, 2)\n  5\n  >>> sum(0, 0)\n  0\n  >>> sum(2, 0)\n  0\n  >>> sum(2, -2)\n  0\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/* Return the difference of a and b.\n  >>> difference(1, 1)\n  0\n  >>> difference(2, 3)\n  -1\n  >>> difference(1, 2)\n  1\n  >>> difference(3, 2)\n  1\n  >>> difference(0, 0)\n  0\n  >>> difference(2, 0)\n  2\n  >>> difference(2, -2)\n  2\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/* Return the product of a and b.\n  >>> product(1, 1)\n  1\n  >>> product(2, 3)\n  6\n  >>> product(1, 2)\n  2\n  >>> product(3, 2)\n  6\n  >>> product(0, 0)\n  0\n  >>> product(2, 0)\n  0\n  >>> product(2, -2)\n  0\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/* Return the quotient of a and b.\n  >>> quotient(1, 1)\n  1\n  >>> quotient(2, 3)\n  0\n  >>> quotient(1, 2)\n  0\n  >>> quotient(3, 2)\n  1\n  >>> quotient(0, 0)\n  0\n  >>> quotient(2, 0)\n  0\n  >>> quotient(2, -2)\n  0\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/* Return the remainder of a and b.\n  >>> remainder(1, 1)\n  0\n  >>> remainder(2, 3)\n  1\n  >>> remainder(1, 2)\n  1\n  >>> remainder(3, 2)\n  1\n  >>> remainder(0, 0)\n  0\n  >>> remainder(2, 0)\n  2\n  >>> remainder(2, -2)\n  2\n  */\nconst remainder = (a, b) => {\n  return a % b\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  encodes a string using shift encoding.\n  */\nconst encode = (s) => {\n  let i = 0;\n  let enc = \"\";\n  let encoded = \"\";\n  while (i < s.length) {\n    enc = encodeShift(s.charAt(i));\n    encoded += enc;\n    i += 1;\n  }\n  return encoded;\n}\n\n/*\n  decodes a string previously encoded using shift encoding.\n  */\nconst decode = (s) => {\n  let i = 0;\n  let dec = \"\";\n  let decoded = \"\";\n  while (i < s.length) {\n    dec = decodeShift(s.charAt(i));\n    decoded += dec;\n    i += 1;\n  }\n  return decoded;\n}\n\n/*\n  encodes a string using shift encoding.\n  */\nconst encode_shifted = (s) => {\n  let i = 0;\n  let enc = \"\";\n  while (i < s.length) {\n    enc = encodeShift(s.charAt(i));\n    i += 1;\n  }\n  return enc;\n}\n\n/*\n  decodes a string previously encoded using shift encoding.\n  */\nconst decode_shifted = (s) => {\n  let i = 0;\n  let dec = \"\";\n  while (i < s.length) {\n    dec = decodeShift(s.charAt(i));\n    i += 1;\n  }\n  return dec;\n}\n\n/*\n  encodes a string using shift encoding.\n  */\nconst encode_shifted_reverse = (s) => {\n  let i = s.length - 1;\n  let enc = \"\";\n  while (i >= 0) {\n    enc = encodeShift(s.charAt(i));\n    i -= 1;\n  }\n  return enc;\n}\n\n/*\n  decodes a string previously encoded using shift encoding.\n  */\nconst decode_shifted_reverse = (s) => {\n  let i = s.length - 1;\n  let dec = \"\";\n  while (i >= 0) {\n    dec = decodeShift(s.charAt(i));\n    i -= 1;\n  }\n  return dec;\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  encode_shifted,\n  decode_shifted,\n  encode_shifted_reverse,\n  decode_shifted_reverse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let len = text.length;\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n  let newStr = \"\";\n\n  for(let i=0; i < len; i++) {\n    let currentChar = text.charAt(i);\n    let nextChar = text.charAt(i+1);\n\n    for(let j=0; j < vowels.length; j++) {\n      if(currentChar == vowels[j]) {\n        newStr += nextChar;\n        i++;\n        break;\n      }\n    }\n  }\n\n  return newStr;\n};\n\n/*\n  toWords is a function that takes strings and returns a string array.\n  >>> toWords('')\n  []\n  >>> toWords('abcdef')\n  ['abc', 'def']\n  >>> toWords('aaBAA')\n  ['aa', 'B', 'AA']\n  >>> toWords('zabc')\n  ['z', 'abc']\n  */\nconst toWords = (text) => {\n  let words = [];\n\n  let len = text.length;\n\n  for(let i=0; i < len; i++) {\n    let currentChar = text.charAt(i);\n    let nextChar = text.charAt(i+1);\n\n    if(currentChar =='') {\n      words.push(text.slice(i, i+2));\n    }\n    else if(nextChar =='') {\n      words.push(text.slice(i, i+2));\n    }\n    else {\n      words.push(text.slice(i, i+1));\n    }\n  }\n\n  return words;\n};\n\n/*\n  countVowels is a function that takes strings and returns an integer.\n  >>> countVowels('')\n  0\n  >>> countVowels('abcdef')\n  5\n  >>> countVowels('zabc')\n  3\n  >>> countVowels('aaBAA')\n  2\n  */\nconst countVowels = (text) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n  let vowelsCount = 0;\n\n  for(let i=0; i < text.length; i++) {\n    let currentChar = text.charAt(i);\n\n    for(let j=0; j < vowels.length; j++) {\n      if(currentChar == vowels[j]) {\n        vowelsCount++;\n      }\n    }\n  }\n\n  return vowelsCount;\n};\n\n/*\n  reverseWords is a function that takes strings and returns strings.\n  >>> reverseWords('')\n  ''\n  >>> reverseWords('abcdef')\n  'fedcba'\n  >>> reverseWords('aaBAA')\n  'AAbaa'\n  >>> reverseWords('zabc')\n  'czbac'\n  */\nconst reverseWords = (text) => {\n  let words = toWords(text);\n  let reversed = words.reverse();\n\n  let len = reversed.length;\n  let newStr = \"\";\n\n  for(let i=0; i < len; i++) {\n    let currentChar = reversed.charAt(i);\n    let nextChar = reversed.charAt(i+1);\n\n    newStr += currentChar;\n\n    if(nextChar =='') {\n      newStr +='';\n      i++;\n    }\n  }\n\n  return newStr;\n};\n\n/*\n  reverse is a function that takes strings and returns strings.\n  >>> reverse('')\n  ''\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('aaBAA')\n  'AAbaa'\n  >>> reverse('zabc')\n  'czbac'\n  */\nconst reverse = (text) => {\n  let text = removeVowels(text);\n  return reverseWords(text);\n};\n\n/*\n  toUpperCase is a function that takes strings and returns strings.\n  >>> toUpperCase('')\n  ''\n  >>> toUpperCase('abcdef')\n  'ABCDEF'\n  >>> toUpperCase('aaBAA')\n  'AABAA'\n  >>> toUpperCase('zabc')\n  'ZABC'\n  */\nconst toUpperCase = (text) => {\n  let text = removeVowels(text);\n  return text.toUpperCase();\n};\n\n/*\n  toLowerCase is a function that takes strings and returns strings.\n  >>> toLowerCase('')\n  ''\n  >>> toLowerCase('abcdef')\n  'abcdef'\n  >>> toLowerCase('aaBAA')\n  'aabaa'\n  >>> toLowerCase('zabc')\n  'zabc'\n  */\nconst toLowerCase = (text) => {\n  let text = removeVowels(text);\n  return text.toLowerCase();\n};\n\n/*\n  replace is a function that takes strings and replaces vowels with new words.\n  >>> replace('')\n  ''\n  >>> replace('abcdef')\n  'abcdef'\n  >>> replace('aaBAA')\n  'AAbaa'\n  >>> replace('zabc')\n  'Zabc'\n  */\nconst replace = (text) => {\n  let text = removeVowels(text);\n  return toUpperCase(text);\n};\n\n/*\n  main is a function that takes a string and prints the string to the console.\n  >>> main('')\n  ''\n  >>> main('abcdef')\n  'ABCDEF'\n  >>> main('aaBAA')\n  'AABAA'\n  >>> main('zabc')\n  'ZABC'\n  */\nconst main = ("}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    let i = 0;\n    let isBelow = true;\n    while(i < l.length) {\n        if(l[i] > t) {\n            isBelow = false;\n            break;\n        }\n        i++;\n    }\n    return isBelow;\n};\n\n/*Return true if every element in the list l is odd.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst belowThresholdOdd = (l) => {\n    let i = 0;\n    let isBelow = true;\n    while(i < l.length) {\n        if(l[i] % 2!== 1) {\n            isBelow = false;\n            break;\n        }\n        i++;\n    }\n    return isBelow;\n};\n\n/*Return true if the sum of every element in list l is divisible by the given factor.\n  >>> belowThresholdOdd([1, 2, 4, 10])\n  true\n  >>> belowThresholdOdd([1, 2, 4, 10, 20])\n  true\n  >>> belowThresholdOdd([1, 2, 4, 10, 20, 40, 80])\n  false\n  >>> belowThresholdOdd([1, 2, 4, 10, 20, 40, 80, 120])\n  false\n  */\nconst belowThresholdOddFactor = (l, factor) => {\n    let i = 0;\n    let isBelow = true;\n    while(i < l.length) {\n        let a = l[i];\n        let b = factor;\n        if(a % b!== 0) {\n            isBelow = false;\n            break;\n        }\n        i++;\n    }\n    return isBelow;\n};\n\n/*Return true if all elements in list l are greater than the given threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5, 1)\n  true\n  */\nconst belowThresholdOddFactor = (l, t, factor) => {\n    let i = 0;\n    let isBelow = true;\n    while(i < l.length) {\n        let a = l[i];\n        if(a < t) {\n            isBelow = false;\n            break;\n        }\n        i++;\n    }\n    return isBelow;\n};\n\n/*Return true if every element in list l is less than the given threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5, 1)\n  false\n  */\nconst belowThresholdEvenFactor = (l, t, factor) => {\n    let i = 0;\n    let isBelow = true;\n    while(i < l.length) {\n        let a = l[i];\n        if(a > t) {\n            isBelow = false;\n            break;\n        }\n        i++;\n    }\n    return isBelow;\n};\n\nconst main = async () => {\n    let r = await belowThresholdOdd([1, 2, 4, 10, 20, 40, 80, 120]);\n    console.log(r);\n    r = await belowThresholdOddFactor([1, 2, 4, 10, 20, 40, 80, 120]);\n    console.log(r);\n    r = await belowThresholdEvenFactor([1, 2, 4, 10, 20, 40, 80, 120]);\n    console.log(r);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(0, 7)\n  7\n  >>> add(7, 0)\n  7\n  >>> add(2, 3, 2)\n  9\n  >>> add(3, 2, 1)\n  6\n  >>> add(3, 2, 3)\n  6\n  >>> add(2, 3, 4)\n  9\n  >>> add(4, 3, 2)\n  6\n  >>> add(3, 4, 2)\n  6\n  >>> add(1, 3, 4, 5, 6)\n  1\n  >>> add(3, 2, 3, 4, 5, 6)\n  6\n  >>> add(2, 3, 4, 5, 6, 7)\n  9\n  >>> add(3, 2, 3, 4, 5, 6, 7)\n  9\n  >>> add(2, 3, 4, 5, 6, 7, 8)\n  14\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8)\n  14\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9)\n  19\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9)\n  19\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10)\n  24\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  24\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  29\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  29\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  34\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  34\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n  39\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n  39\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n  44\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n  44\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n  49\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n  49\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n  54\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n  54\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n  59\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n  59\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n  64\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n  64\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)\n  69\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)\n  69\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  74\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  74\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)\n  79\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)\n  79\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)\n  84\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)\n  84\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n  89\n  >>> add(3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n  89\n  >>> add(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const a = [];\n  for (let i = 0; i < s0.length; i++) {\n    a.push(s0[i]);\n  }\n  for (let i = 0; i < s1.length; i++) {\n    if (a.indexOf(s1[i]) == -1) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const pairs = brackets.split(\"\").map((bracket, index) => {\n    const openingBracket = bracket[0];\n    const closingBracket = bracket[1];\n    const openingBracketIndex = brackets.indexOf(openingBracket);\n    const closingBracketIndex = brackets.indexOf(closingBracket);\n    const openingBracketLength = openingBracket.length;\n    const closingBracketLength = closingBracket.length;\n    if (openingBracketIndex < closingBracketIndex && openingBracketIndex > -1 && openingBracketIndex < brackets.length - 1 &&\n      closingBracketIndex < brackets.length - 1 && closingBracketIndex > -1) {\n      return true;\n    }\n    return false;\n  });\n\n  return pairs.every(pair => pair);\n};\n\n/*\n  isValid = correctBracketing(\"<><><>\")\n  returns true if the brackets are valid.\n  */\nconst isValid = brackets => {\n  return correctBracketing(brackets);\n};\n\n/*\n  checkBrackets = function(input) {\n    if (input.length > 0) {\n      let current = input.charAt(0);\n      let brackets = [current];\n      let bracketsValid = isValid(brackets);\n      while (bracketsValid && input.length > 0) {\n        current = input.charAt(input.length - 1);\n        brackets.push(current);\n        bracketsValid = isValid(brackets);\n        input = input.substring(1, input.length - 1);\n      }\n      return brackets;\n    }\n    else {\n      return \"\";\n    }\n  }\n  */\n\nconst checkBrackets = (input) => {\n  let brackets = [];\n  let bracketsValid = isValid(brackets);\n  while (bracketsValid && input.length > 0) {\n    let current = input.charAt(0);\n    brackets.push(current);\n    bracketsValid = isValid(brackets);\n    input = input.substring(1, input.length - 1);\n  }\n  return brackets;\n};\n\n// const checkBrackets = (input) => {\n//   if (input.length > 0) {\n//     let current = input.charAt(0);\n//     let brackets = [current];\n//     let bracketsValid = isValid(brackets);\n//     while (bracketsValid && input.length > 0) {\n//       current = input.charAt(input.length - 1);\n//       brackets.push(current);\n//       bracketsValid = isValid(brackets);\n//       input = input.substring(1, input.length - 1);\n//     }\n//     return brackets;\n//   }\n//   else {\n//     return \"\";\n//   }\n// };\n\n// console.log(checkBrackets(\"<>\"));\n// console.log(checkBrackets(\"<<>\"));\n// console.log(checkBrackets(\"<<<>>\"));\n// console.log(checkBrackets(\"<><>\"));\n// console.log(checkBrackets(\"<><><>\"));\n// console.log(checkBrackets(\"<><><><>\"));\n// console.log(checkBrackets(\"<><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><>\"));\n// console.log(checkBrackets(\"<><><><"}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = l[0]\n  let next = l[1]\n  for (let i = 2; i < l.length; i++) {\n    if (l[i] < last) {\n      return false\n    }\n    last = l[i]\n    if (l[i] > next) {\n      return false\n    }\n    next = l[i]\n  }\n  return true\n}\n\n/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] > l[1]) {\n    return false\n  }\n  return monotonic_sorted(l.slice(1))\n}\n\n/*RIt is true that list elements monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst increasing = (l) => {\n  let sorted = l.slice(0)\n  sorted.sort()\n  if (sorted.length < 2) {\n    return true\n  }\n  return sorted[0] <= sorted[1]\n}\n\n/*RIt is true that list elements monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst increasing_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] <= l[1]) {\n    return false\n  }\n  return increasing_sorted(l.slice(1))\n}\n\nconst increasing_subsequence = (l) => {\n  const s = l.slice(0)\n  if (s.length < 2) {\n    return false\n  }\n  const sorted = s.slice(0)\n  sorted.sort()\n  if (sorted.length < 2) {\n    return false\n  }\n  return sorted[0] <= sorted[1]\n}\n\nconst increasing_subsequence_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] <= l[1]) {\n    return false\n  }\n  return increasing_subsequence_sorted(l.slice(1))\n}\n\nconst increasing_subsequence_reverse = (l) => {\n  const s = l.slice(0)\n  if (s.length < 2) {\n    return false\n  }\n  const sorted = s.slice(0)\n  sorted.sort()\n  if (sorted.length < 2) {\n    return false\n  }\n  return sorted[1] <= sorted[0]\n}\n\nconst increasing_subsequence_reverse_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] <= l[1]) {\n    return false\n  }\n  return increasing_subsequence_reverse_sorted(l.slice(1))\n}\n\n/*RIt is true that list elements monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst increasing_subsequence_reverse_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] <= l[1]) {\n    return false\n  }\n  return increasing_subsequence_reverse_sorted(l.slice(1))\n}\n\nconst increasing_monotonic = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  const sorted = l.slice(0)\n  sorted.sort()\n  if (sorted.length < 2) {\n    return true\n  }\n  return sorted[0] <= sorted[1]\n}\n\nconst increasing_monotonic_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] <= l[1]) {\n    return false\n  }\n  return increasing_monotonic_sorted(l.slice(1))\n}\n\n/*RIt is true that list elements monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst decreasing = (l) => {\n  const sorted = l.slice(0)\n  sorted.sort()\n  if (sorted.length < 2) {\n    return true\n  }\n  return sorted[1] <= sorted[0]\n}\n\nconst decreasing_sorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  if (l[0] >= l[1]) {\n    return false\n  }\n  return decreasing_sorted(l.slice(1))\n}\n\nconst decreasing_subsequence = (l) => {\n  const s = l.slice(0)\n  if (s.length < 2) {\n    return false\n  }\n  const sorted = s.slice(0)\n  sorted.sort()\n  if (sorted.length < 2) {\n    return false"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.filter(x => l2.includes(x));\n}\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.filter(x => l2.includes(x));\n}\n\nmodule.exports = {\n  common\n};<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) {\n      return Math.min(factor, largestPrimeFactor(n / factor));\n    }\n    factor++;\n  }\n  return factor;\n};\n\n//# sourceMappingURL=largestPrimeFactor.js.map<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length;\n\n  if (bracketsLength < 2) {\n    return true;\n  }\n\n  let openingBracket = brackets[0];\n  let closingBracket = brackets[bracketsLength - 1];\n  let bracketCount = 0;\n\n  for (let i = 1; i < bracketsLength - 1; i++) {\n    if (brackets[i] === openingBracket) {\n      bracketCount++;\n    }\n\n    if (brackets[i] === closingBracket) {\n      bracketCount--;\n    }\n\n    if (bracketCount < 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  Given an array of opening and closing brackets, and a string that contains\n  either opening or closing brackets, returns true if the brackets are correctly\n  balanced.\n\n  >>> openBracketsAndClosingBrackets(\"()\")\n  true\n  >>> openBracketsAndClosingBrackets(\"()()\")\n  true\n  >>> openBracketsAndClosingBrackets(\"()\")\n  false\n  >>> openBracketsAndClosingBrackets(\"()(()\")\n  false\n  >>> openBracketsAndClosingBrackets(\"(())\")\n  true\n  >>> openBracketsAndClosingBrackets(\"(()())\")\n  true\n  >>> openBracketsAndClosingBrackets(\"(())()\")\n  false\n  >>> openBracketsAndClosingBrackets(\"(()()\")\n  false\n  >>> openBracketsAndClosingBrackets(\"(()()(())\")\n  true\n  >>> openBracketsAndClosingBrackets(\"(()()())\")\n  true\n  >>> openBracketsAndClosingBrackets(\"()\")\n  false\n  */\nconst openBracketsAndClosingBrackets = (brackets) => {\n  const bracketsLength = brackets.length;\n  let openingBracket = brackets[0];\n  let closingBracket = brackets[bracketsLength - 1];\n\n  for (let i = 1; i < bracketsLength - 1; i++) {\n    if (brackets[i] === openingBracket) {\n      openingBracket = brackets[i + 1];\n    }\n\n    if (brackets[i] === closingBracket) {\n      closingBracket = brackets[i - 1];\n    }\n\n    if (openingBracket === \"(\" && closingBracket === \")\") {\n      return true;\n    }\n\n    if (openingBracket === \"(\" && closingBracket === \")\") {\n      return false;\n    }\n\n    if (openingBracket === \"(\" && closingBracket === \"(\") {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/*\n  Returns true if the first string is a substring of the second string, false\n  otherwise.\n  */\nconst isSubstring = (substring, string) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let i = 0;\n\n  while (i < substringLength) {\n    if (string[i]!== substring[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n};\n\n/*\n  Given an array of strings, return a function that returns true if the string\n  is a substring of any of the other strings in the array.\n  */\nconst isSubstringInAnyString = (strings) => {\n  const stringsLength = strings.length;\n  let isSubstringOf;\n  let i;\n\n  for (i = 0; i < stringsLength; i++) {\n    isSubstringOf = (substring) => isSubstring(substring, strings[i]);\n\n    if (isSubstringOf(strings[i]) === true) {\n      return isSubstringOf;\n    }\n  }\n\n  return () => false;\n};\n\n/*\n  Given a list of strings, return a function that returns true if any of the\n  strings is a substring of the other strings in the list.\n  */\nconst isSubstringInAnyStringList = (strings) => {\n  const stringsLength = strings.length;\n  let isSubstringOf;\n  let i;\n\n  for (i = 0; i < stringsLength; i++) {\n    isSubstringOf = (substring) => isSubstring(substring, strings[i]);\n\n    if (isSubstringOf(strings[i]) === true) {\n      return isSubstringOf;\n    }\n  }\n\n  return () => false;\n};\n\nexport {\n  correctBracketing,\n  isSubstringInAnyString,\n  isSubstringInAnyStringList,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const N = xs.length - 1\n  const D = [0]\n  for (let i = 0; i < N; i++) {\n    D[i] = xs[i + 1]\n  }\n  return D\n}\n\n/*\n  Given a polynomial and a number x, return whether it is monic or not.\n  */\nconst monic = (p, x) => p[0]!== 0\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the coefficient of the leading\n  monomial.\n  */\nconst leading = (p, x) => p[0]\n\n/*\n  Given a polynomial and a number x, return the coefficient of the last\n  monomial.\n  */\nconst last = (p, x) => p[p.length - 1]\n\n/*\n  Given a polynomial and a number x, return the coefficient of the leading\n  monomial.\n  */\nconst leading = (p, x) => p[0]\n\n/*\n  Given a polynomial and a number x, return the coefficient of the last\n  monomial.\n  */\nconst last = (p, x) => p[p.length - 1]\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the derivative of the polynomial.\n  */\nconst derivative = (p, x) => derivative(p, x)\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the derivative of the polynomial.\n  */\nconst derivative = (p, x) => derivative(p, x)\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number x, return the monic form of the polynomial.\n  */\nconst monic = (p, x) => (monic(p, x)? p.map((d, i) => d / p[0]) : [1, p])\n\n/*\n  Given a polynomial and a number"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst fib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nfibfib(5).should.equal(4)\nfib(5).should.equal(4)\n\nfibfib(8).should.equal(24)\nfib(8).should.equal(24)\n\nfibfib(13).should.equal(857)\nfib(13).should.equal(857)\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelCount++;\n    }\n  }\n  if (s.endsWith(\"y\") && vowels.includes(s[s.length - 1])) {\n    vowelCount++;\n  }\n  return vowelCount;\n};\n\n/*\n * wordsToVowelsCount is a function that takes a string that represents a list of words as input and returns the sum of the number of vowels in all of the given words.\n * In this case, all of the given words are vowels.\n * Example:\n * >>> wordsToVowelsCount(\"abcdef\")\n * 3\n * >>> wordsToVowelsCount(\"aAa\")\n * 1\n * */\nconst wordsToVowelsCount = (words) => {\n  let sum = 0;\n  words.forEach(word => sum += vowelsCount(word));\n  return sum;\n};\n\n/*\n * isPalindrome is a function that takes a string as input and returns a boolean value that indicates whether the given string is a palindrome.\n * Example:\n * >>> isPalindrome(\"abc\")\n * True\n * >>> isPalindrome(\"Ace\")\n * False\n * */\nconst isPalindrome = (s) => s === s.split('').reverse().join('');\n\n/*\n * isPalindrome is a function that takes a string as input and returns a boolean value that indicates whether the given string is a palindrome.\n * Example:\n * >>> isPalindrome(\"abc\")\n * True\n * >>> isPalindrome(\"Ace\")\n * False\n * */\nconst isPalindrome = (s) => s === s.split('').reverse().join('');\n\n/*\n * longestPalindrome is a function that takes a string as input and returns the length of the longest palindrome in the given string.\n * Example:\n * >>> longestPalindrome(\"abc\")\n * 3\n * */\nconst longestPalindrome = (s) => {\n  let maxLength = 0;\n  let length = s.length;\n  for (let i = 0; i < length - 1; i++) {\n    if (isPalindrome(s.substring(i, i + length))) {\n      maxLength = length;\n    }\n  }\n  return maxLength;\n};\n\n/*\n * longestPalindrome is a function that takes a string as input and returns the length of the longest palindrome in the given string.\n * Example:\n * >>> longestPalindrome(\"abc\")\n * 3\n * */\nconst longestPalindrome = (s) => {\n  let maxLength = 0;\n  let length = s.length;\n  for (let i = 0; i < length - 1; i++) {\n    if (isPalindrome(s.substring(i, i + length))) {\n      maxLength = length;\n    }\n  }\n  return maxLength;\n};\n\n/*\n * main is the driver function for the program.\n * */\nconst main = () => {\n  const s = readLine();\n  const vowels = [...vowels];\n  const words = readLine().split(' ');\n  const answer = wordsToVowelsCount(words);\n  console.log(answer);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  while (shift--) {\n    result = parseInt(result.toString().charAt(0) + result.toString().charAt(1) + result.toString().charAt(2) + result.toString().charAt(3) + result.toString().charAt(4) + result.toString().charAt(5) + result.toString().charAt(6) + result.toString().charAt(7) + result.toString().charAt(8) + result.toString().charAt(9) + result.toString().charAt(10) + result.toString().charAt(11), 10);\n  }\n  return result;\n};\n\n/*\n  >>> sum([1,2,3,4,5])\n  15\n  >>> sum([1,2,3,4,5], 3)\n  17\n  >>> sum([1,2,3,4,5], 5)\n  21\n  >>> sum([1,2,3,4,5], 6)\n  21\n  >>> sum([1,2,3,4,5], 7)\n  31\n  >>> sum([1,2,3,4,5], 8)\n  31\n  >>> sum([1,2,3,4,5], 9)\n  31\n  >>> sum([1,2,3,4,5], 10)\n  31\n  >>> sum([1,2,3,4,5], 11)\n  31\n  >>> sum([1,2,3,4,5], 12)\n  31\n  >>> sum([1,2,3,4,5], 13)\n  31\n  >>> sum([1,2,3,4,5], 14)\n  31\n  >>> sum([1,2,3,4,5], 15)\n  31\n  >>> sum([1,2,3,4,5], 16)\n  31\n  >>> sum([1,2,3,4,5], 17)\n  31\n  >>> sum([1,2,3,4,5], 18)\n  31\n  >>> sum([1,2,3,4,5], 19)\n  31\n  >>> sum([1,2,3,4,5], 20)\n  31\n  >>> sum([1,2,3,4,5], 21)\n  31\n  >>> sum([1,2,3,4,5], 22)\n  31\n  >>> sum([1,2,3,4,5], 23)\n  31\n  >>> sum([1,2,3,4,5], 24)\n  31\n  >>> sum([1,2,3,4,5], 25)\n  31\n  >>> sum([1,2,3,4,5], 26)\n  31\n  >>> sum([1,2,3,4,5], 27)\n  31\n  >>> sum([1,2,3,4,5], 28)\n  31\n  >>> sum([1,2,3,4,5], 29)\n  31\n  >>> sum([1,2,3,4,5], 30)\n  31\n  >>> sum([1,2,3,4,5], 31)\n  31\n  >>> sum([1,2,3,4,5], 32)\n  31\n  >>> sum([1,2,3,4,5], 33)\n  31\n  >>> sum([1,2,3,4,5], 34)\n  31\n  >>> sum([1,2,3,4,5], 35)\n  31\n  >>> sum([1,2,3,4,5], 36)\n  31\n  >>> sum([1,2,3,4,5], 37)\n  31\n  >>> sum([1,2,3,4,5], 38)\n  31\n  >>> sum([1,2,3,4,5], 39)\n  31\n  >>> sum([1,2,3,4,5], 40)\n  31\n  >>> sum([1,2,3,4,5], 41)\n  31\n  >>> sum([1,2,3,4,5], 42)\n  31\n  >>> sum([1,2,3,4,5], 43)\n  31\n  >>> sum([1,2,3,4,5], 44)\n  31\n  >>> sum([1,2,3,4,5], 45)\n  31\n  >>> sum([1,2,3,4,5], 46)\n  31\n  >>> sum([1,2,3,4,5], 47)\n  31\n  >>> sum([1,2,3,4,5], 48)\n  31\n  >>> sum([1,2,3,4,5], 49)\n  31\n  >>> sum([1,2,3,4,5], 50)\n  31\n  >>> sum([1,2,3,4,5], 51)\n  31\n  >>> sum([1,2,3,4,5], 52)\n  31\n  >>> sum([1,2,3,4,5], 53)\n  31\n  >>> sum([1,2,3,4,5], 54)\n  31\n  >>> sum([1,2,3,4,5], 55)\n  31\n  >>> sum([1,2,3,4,5], 56)\n  31\n  >>> sum([1,2,3,4,5], 57)\n  31\n  >>> sum([1,2,3,4,5], 58)\n  31\n  >>> sum([1,2,3,4,5], 59)\n  31\n  >>> sum([1,2,3,4,5], 60)\n  31\n  >>> sum([1,2,3,4,5], 61)\n  31\n  >>> sum([1,2,3,4,5], 62)\n  31\n  >>> sum([1,2,3,4,5], 63)\n  31\n  >>> sum([1,2,3,4,5], 64)\n  31\n  >>> sum([1,2,3,4,5], 65)\n  31\n  >>> sum([1,2,3,4,5], 66)\n  31\n  >>> sum(["}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.split('')\n   .map((letter) => {\n      return letter.toUpperCase().charCodeAt(0) - 65\n    })\n   .reduce((a, b) => a + b)\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the vowels in lowercase.\n  Examples:\n      vowelCase(\"Hello\") => \"hello\"\n      vowelCase(\"AeA\") => \"aea\"\n      vowelCase(\"EuEuE\") => \"euee\"\n      vowelCase(\"aBcC\") => \"abc\"\n  */\nconst vowelCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toLowerCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the consonants in upper case.\n  Examples:\n      consonantCase(\"Hello\") => \"HELLO\"\n      consonantCase(\"AeA\") => \"AEA\"\n      consonantCase(\"EuEuE\") => \"EUEUE\"\n      consonantCase(\"aBcC\") => \"ABCC\"\n  */\nconst consonantCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toUpperCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the consonants in lower case.\n  Examples:\n      consonantCase(\"Hello\") => \"hello\"\n      consonantCase(\"AeA\") => \"aea\"\n      consonantCase(\"EuEuE\") => \"euee\"\n      consonantCase(\"aBcC\") => \"abc\"\n  */\nconst consonantLowerCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toLowerCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the vowels in upper case.\n  Examples:\n      vowelCase(\"Hello\") => \"HELLO\"\n      vowelCase(\"AeA\") => \"AEA\"\n      vowelCase(\"EuEuE\") => \"EUEUE\"\n      vowelCase(\"aBcC\") => \"ABCC\"\n  */\nconst vowelUpperCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toUpperCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the vowels in lower case.\n  Examples:\n      vowelCase(\"Hello\") => \"hello\"\n      vowelCase(\"AeA\") => \"aea\"\n      vowelCase(\"EuEuE\") => \"euee\"\n      vowelCase(\"aBcC\") => \"abc\"\n  */\nconst vowelLowerCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toLowerCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the vowels in lower case.\n  Examples:\n      vowelCase(\"Hello\") => \"hello\"\n      vowelCase(\"AeA\") => \"aea\"\n      vowelCase(\"EuEuE\") => \"euee\"\n      vowelCase(\"aBcC\") => \"abc\"\n  */\nconst vowelAllLowerCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toLowerCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the consonants in upper case.\n  Examples:\n      consonantCase(\"Hello\") => \"HELLO\"\n      consonantCase(\"AeA\") => \"AEA\"\n      consonantCase(\"EuEuE\") => \"EUEUE\"\n      consonantCase(\"aBcC\") => \"ABCC\"\n  */\nconst consonantAllUpperCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toUpperCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the consonants in lower case.\n  Examples:\n      consonantCase(\"Hello\") => \"hello\"\n      consonantCase(\"AeA\") => \"aea\"\n      consonantCase(\"EuEuE\") => \"euee\"\n      consonantCase(\"aBcC\") => \"abc\"\n  */\nconst consonantAllLowerCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toLowerCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the vowels in upper case.\n  Examples:\n      vowelCase(\"Hello\") => \"HELLO\"\n      vowelCase(\"AeA\") => \"AEA\"\n      vowelCase(\"EuEuE\") => \"EUEUE\"\n      vowelCase(\"aBcC\") => \"ABCC\"\n  */\nconst vowelAllUpperCase = (s) => {\n  return s.split('').map((letter) => {\n    return letter.toUpperCase()\n  })\n}\n\n/*Task Writes a function that takes a string as input and returns the string, with all the vowels in lower case.\n  Examples:\n      vowelCase(\"Hello\") => \"hello\"\n      vowelCase(\"AeA\") => \"aea\"\n      vowelCase(\"EuEuE\") => \"euee\"\n      vowelCase(\"aBcC\") => \"abc\""}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const count = s.split(/\\s+/).length\n  const total = count - n\n  return total\n}\n\nmodule.exports = fruitDistribution\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let index = 1;\n  let smallest_index = 1;\n  let smallest_value = arr[1];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < smallest_value) {\n        smallest_value = arr[i];\n        smallest_index = index;\n      }\n    }\n    index++;\n  }\n  return [smallest_value, smallest_index];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const arr = Array.from(lst);\n  arr.sort((a, b) => {\n    return a - b;\n  });\n  const freq = arr.reduce((prev, curr) => {\n    if (prev === curr) {\n      return prev + 1;\n    }\n    return prev;\n  }, 0);\n  const maxFreq = arr.reduce((prev, curr) => {\n    if (prev === curr) {\n      return prev + 1;\n    }\n    return prev;\n  }, -1);\n  if (maxFreq > freq) {\n    return maxFreq;\n  }\n  return -1;\n}\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const list = Array.from(lst)\n  const max = Math.max(...list)\n  const min = Math.min(...list)\n  const len = list.length\n\n  let swapped = false\n  for (let i = 0; i < len; i++) {\n    if (list[i] === max) {\n      swap(list, i, len - 1)\n      swapped = true\n      break\n    }\n  }\n\n  if (!swapped) {\n    return list\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (list[i] === min) {\n      swap(list, i, 0)\n      swapped = true\n      break\n    }\n  }\n\n  if (!swapped) {\n    return list\n  }\n\n  swapped = false\n  for (let i = 0; i < len - 1; i++) {\n    if (list[i] === list[i + 1]) {\n      swap(list, i, i + 1)\n      swapped = true\n      break\n    }\n  }\n\n  if (!swapped) {\n    return list\n  }\n\n  swapped = false\n  for (let i = len - 1; i > 0; i--) {\n    if (list[i] === list[i - 1]) {\n      swap(list, i, i - 1)\n      swapped = true\n      break\n    }\n  }\n\n  if (!swapped) {\n    return list\n  }\n\n  return list\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if(a > 0 && b > 0 && c > 0) {\n    return ((a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))).toFixed(2);\n  } else if(a < 0 && b < 0 && c < 0) {\n    return -1;\n  } else {\n    return -1;\n  }\n};\n\nconsole.log(triangleArea(3, 4, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let head = q.shift();\n  let tail = q.shift();\n  let tailTail = q.shift();\n\n  if (q.length === 0) return true;\n\n  if (q.length === 1) {\n    if (head === tail) {\n      if (w <= head) return true;\n      else return false;\n    }\n    return false;\n  }\n\n  return willItFly(q, w);\n};\n\n// console.log(willItFly([3, 2, 3], 1));\n// console.log(willItFly([3, 2, 3], 9));\n// console.log(willItFly([3], 5));\n// console.log(willItFly([3, 2, 3], 6));\n// console.log(willItFly([3, 2, 3], 10));\n// console.log(willItFly([3, 2, 3], 13));\n// console.log(willItFly([3, 2, 3], 14));\n// console.log(willItFly([3, 2, 3], 15));\n// console.log(willItFly([3, 2, 3], 16));\n// console.log(willItFly([3, 2, 3], 18));\n// console.log(willItFly([3, 2, 3], 21));\n// console.log(willItFly([3, 2, 3], 22));\n// console.log(willItFly([3, 2, 3], 23));\n// console.log(willItFly([3, 2, 3], 24));\n// console.log(willItFly([3, 2, 3], 25));\n// console.log(willItFly([3, 2, 3], 26));\n// console.log(willItFly([3, 2, 3], 27));\n// console.log(willItFly([3, 2, 3], 28));\n// console.log(willItFly([3, 2, 3], 29));\n// console.log(willItFly([3, 2, 3], 30));\n// console.log(willItFly([3, 2, 3], 31));\n// console.log(willItFly([3, 2, 3], 32));\n// console.log(willItFly([3, 2, 3], 33));\n// console.log(willItFly([3, 2, 3], 34));\n// console.log(willItFly([3, 2, 3], 35));\n// console.log(willItFly([3, 2, 3], 36));\n// console.log(willItFly([3, 2, 3], 37));\n// console.log(willItFly([3, 2, 3], 38));\n// console.log(willItFly([3, 2, 3], 39));\n// console.log(willItFly([3, 2, 3], 40));\n// console.log(willItFly([3, 2, 3], 41));\n// console.log(willItFly([3, 2, 3], 42));\n// console.log(willItFly([3, 2, 3], 43));\n// console.log(willItFly([3, 2, 3], 44));\n// console.log(willItFly([3, 2, 3], 45));\n// console.log(willItFly([3, 2, 3], 46));\n// console.log(willItFly([3, 2, 3], 47));\n// console.log(willItFly([3, 2, 3], 48));\n// console.log(willItFly([3, 2, 3], 49));\n// console.log(willItFly([3, 2, 3], 50));\n// console.log(willItFly([3, 2, 3], 51));\n// console.log(willItFly([3, 2, 3], 52));\n// console.log(willItFly([3, 2, 3], 53));\n// console.log(willItFly([3, 2, 3], 54));\n// console.log(willItFly([3, 2, 3], 55));\n// console.log(willItFly([3, 2, 3], 56));\n// console.log(willItFly([3, 2, 3], 57));\n// console.log(willItFly([3, 2, 3], 58));\n// console.log(willItFly([3, 2, 3], 59));\n// console.log(willItFly([3, 2, 3], 60));\n// console.log(willItFly([3, 2, 3], 61));\n// console.log(willItFly([3, 2, 3], 62));\n// console.log(willItFly([3, 2, 3], 63));\n// console.log(willItFly([3, 2, 3], 64));\n// console.log(willItFly([3, 2, 3], 65));\n// console.log(willItFly([3, 2, 3], 66));\n// console.log(willItFly([3, 2, 3], 67));\n// console.log(willItFly([3, 2, 3], 68));\n// console.log(willItFly([3, 2, 3], 69));\n// console.log(willItFly([3, 2, 3], 70));\n// console.log(willItFly([3, 2, 3], 71));\n// console.log(willItFly([3, 2, 3], 72));\n// console.log(willItFly([3, 2, 3], 73));\n// console.log(willItFly([3, 2, 3], 74));\n// console.log(willItFly([3, 2, 3], 75));\n// console.log(willItFly([3, 2, 3], 76));\n// console.log(willItFly([3, 2, 3], 77));\n// console.log(willItFly"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr.reduce((previous, current) => previous < current? previous : current)\n  arr.forEach((element, index) => {\n    if (arr[index] < min) min = arr[index]\n  })\n  return min\n}\n\n// console.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\n// console.log(smallestChange([1, 2, 3, 2, 1]))\n// console.log(smallestChange([1, 2, 3, 2, 1, 3, 4]))\n// console.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]))\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const matchLength = (lst1.length === lst2.length)? lst1 : lst2;\n  const matchCount = matchLength.reduce((count, current) => {\n    return count + (current.length === matchLength.length)? current.length : count;\n  }, 0);\n  return matchLength.length === matchCount? lst1 : lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const result = [2, 3, 5];\n  const index = Math.floor(Math.sqrt(a)) - 1;\n  for (let i = 0; i < result.length; i++) {\n    if (a % result[i]!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default isMultiplyPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const int = x.toString().length;\n  if (int === n.toString().length) {\n    let power = 1;\n    for (let i = int - 1; i >= 0; i--) {\n      power *= n;\n    }\n    return x === power;\n  }\n  return false;\n};\n\nisSimplePower(2, 2); //true\nisSimplePower(1, 4); //true\nisSimplePower(8, 2); //true\nisSimplePower(3, 2); //false\nisSimplePower(3, 1); //false\nisSimplePower(5, 3); //false\n\n/*\n  Your task is to write a function that takes a string as a parameter and returns true if the string has all the characters in the English alphabet.\n  */\nconst isAllAlpha = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (!/[A-Z]/.test(string[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nisAllAlpha('A'); //true\nisAllAlpha('F'); //false\nisAllAlpha('C'); //false\n\n/*\n  Your task is to write a function that takes a string as a parameter and returns true if the string contains all the characters in the English alphabet, or is the empty string.\n  */\nconst isAlphaOrEmpty = (string) => {\n  if (string.length === 0) {\n    return true;\n  }\n  for (let i = 0; i < string.length; i++) {\n    if (!/[A-Z]/.test(string[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nisAlphaOrEmpty('A'); //true\nisAlphaOrEmpty('F'); //true\nisAlphaOrEmpty('C'); //true\nisAlphaOrEmpty(' '); //true\n\n/*\n  Your task is to write a function that takes a string as a parameter and returns true if the string contains only the English alphabet (a-z, A-Z).\n  */\nconst isAlphabet = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (!/[A-Z]/.test(string[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nisAlphabet('A'); //true\nisAlphabet('F'); //false\nisAlphabet('C'); //false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a < 0? iscube(-a) : a % 6 === 0? true : iscube(a - (a % 6)) && iscube(a - (a % 6) - 6) && iscube(a - (a % 6) - 12)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(64) ==> true\n  iscube(0) ==> false\n  iscube(180) ==> true\n  */\nconst iscube2 = (a) => {\n  return a < 0? iscube2(-a) : a % 6 === 0? true : a % 6 === 1? iscube2(a - 6) : a % 6 === 2? iscube2(a - 12) : iscube2(a - (a % 6) - 6) && iscube2(a - (a % 6) - 12) && iscube2(a - (a % 6) - 18) && iscube2(a - (a % 6) - 24) && iscube2(a - (a % 6) - 30) && iscube2(a - (a % 6) - 36) && iscube2(a - (a % 6) - 42) && iscube2(a - (a % 6) - 48) && iscube2(a - (a % 6) - 54)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(64) ==> true\n  iscube(0) ==> false\n  iscube(180) ==> true\n  */\nconst iscube3 = (a) => {\n  return a < 0? iscube3(-a) : a % 6 === 0? true : a % 6 === 1? iscube3(a - 6) : a % 6 === 2? iscube3(a - 12) : a % 6 === 3? iscube3(a - (a % 6) - 6) && iscube3(a - (a % 6) - 12) : a % 6 === 4? iscube3(a - (a % 6) - 18) && iscube3(a - (a % 6) - 24) : a % 6 === 5? iscube3(a - (a % 6) - 30) && iscube3(a - (a % 6) - 36) && iscube3(a - (a % 6) - 42) && iscube3(a - (a % 6) - 48) && iscube3(a - (a % 6) - 54) : a % 6 === 6? iscube3(a - (a % 6) - 60) && iscube3(a - (a % 6) - 66) && iscube3(a - (a % 6) - 72) && iscube3(a - (a % 6) - 78) && iscube3(a - (a % 6) - 84) && iscube3(a - (a % 6) - 90) && iscube3(a - (a % 6) - 96) && iscube3(a - (a % 6) - 102) && iscube3(a - (a % 6) - 108)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(64) ==> true\n  iscube(0) ==> false\n  iscube(180) ==> true\n  */\nconst iscube4 = (a) => {\n  return a < 0? iscube4(-a) : a % 6 === 0? true : a % 6 === 1? iscube4(a - 6) : a % 6 === 2? iscube4(a - 12) : a % 6 === 3? iscube4(a - (a % 6) - 6) && iscube4(a - (a % 6) - 12) : a % 6 === 4? iscube4(a - (a % 6) - 18) && iscube4(a - (a % 6) - 24) : a % 6 === 5? iscube4(a - (a % 6) - 30) && iscube4(a - (a % 6) - 36) && iscube4(a - (a % 6) - 42) && iscube4(a - (a % 6) - 48) && iscube4(a - (a % 6) - 54) : a % 6 === 6? iscube4(a - (a % 6) - 60) && iscube4(a - (a % 6) - 66) && iscube4(a - (a % 6) - 72) && iscube4(a - (a % 6) - 78) && iscube4(a - (a % 6) - 84) && iscube4(a - (a % 6) - 90) && iscube4(a - (a % 6) - 96) && iscube4(a - (a % 6) - 102) && iscube4(a - (a % 6) - 108)\n}\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a cube of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(64) ==> true\n  iscube(0) ==> false\n  iscube(180) ==> true\n  */\nconst iscube5 = (a) => {\n  return a < 0? iscube5(-a) : a % 6 === 0? true : a % 6 === 1? iscube5(a - 6) : a % 6 === 2? iscube5(a - 12)"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const res = []\n  for (let i = 0; i < num.length; i++) {\n    const key = num[i]\n    if (key === 'A' || key === 'B' || key === 'C' || key === 'D' || key === 'E' || key === 'F') {\n      res.push(1)\n    } else {\n      res.push(0)\n    }\n  }\n  return res.reduce((sum, elem, i) => sum + elem, 0)\n}\n\nconsole.log(hexKey(\"123456789ABCDEF0\"))\n// => 6\nconsole.log(hexKey(\"1077E\"))\n// => 2\nconsole.log(hexKey(\"ABED1A33\"))\n// => 4\nconsole.log(hexKey(\"AB\"))\n// => 1\nconsole.log(hexKey(\"\"))\n// => 0\nconsole.log(hexKey(\"123456789ABCDEF0\"))\n// => 6\nconsole.log(hexKey(\"ABCDEF\"))\n// => 0\nconsole.log(hexKey(\"1234\"))\n// => 1\nconsole.log(hexKey(\"1\"))\n// => 1\nconsole.log(hexKey(\"01\"))\n// => 0\nconsole.log(hexKey(\"\"))\n// => 0\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n\n  while (decimal > 0) {\n    binary += (decimal % 2)? \"1\" : \"0\";\n    decimal = decimal >> 1;\n  }\n\n  return \"db\" + binary + \"db\";\n};\n\n//console.log(decimalToBinary(15));\n//console.log(decimalToBinary(32));\n\n// Reflection\n/*\nWhat was the most difficult part of this challenge?\n  I was not really familiar with how to convert numbers to binary. I thought I would try to figure out the\n  binary representation of the number. I did not have a way to do it. I then started to try to figure out\n  how to use the string. I thought I could just take a substring of the string, and then convert the\n  characters to binary and then take the substring again. I thought I could take the substring, and then\n  convert the characters to binary and then take the substring again. I was not even sure if I was using\n  binary or string. I then tried to convert the number to binary, and then to string, and then to binary.\n  I thought I was not sure if I was using binary or string. I finally tried to convert the number to\n  binary, and then to string, and then to binary. I thought I was not sure if I was using binary or\n  string. I finally tried to convert the number to binary, and then to string, and then to binary. I thought\n  I was not sure if I was using binary or string. I finally tried to convert the number to binary, and then\n  to string, and then to binary. I thought I was not sure if I was using binary or string. I finally tried\n  to convert the number to binary, and then to string, and then to binary. I thought I was not sure if I was\n  using binary or string. I finally tried to convert the number to binary, and then to string, and then to\n  binary. I thought I was not sure if I was using binary or string. I finally tried to convert the number to\n  binary, and then to string, and then to binary. I thought I was not sure if I was using binary or\n  string. I finally tried to convert the number to binary, and then to string, and then to binary. I thought\n  I was not sure if I was using binary or string. I finally tried to convert the number to binary, and then\n  to string, and then to binary. I thought I was not sure if I was using binary or string. I finally tried to\n  convert the number to binary, and then to string, and then to binary. I thought I was not sure if I was using\n  binary or string. I finally tried to convert the number to binary, and then to string, and then to binary.\n  I thought I was not sure if I was using binary or string. I finally tried to convert the number to binary,\n  and then to string, and then to binary. I thought I was not sure if I was using binary or string. I finally\n  tried to convert the number to binary, and then to string, and then to binary. I thought I was not sure if I\n  was using binary or string. I finally tried to convert the number to binary, and then to string, and then to\n  binary. I thought I was not sure if I was using binary or string. I finally tried to convert the number to\n  binary, and then to string, and then to binary. I thought I was not sure if I was using binary or string.\n  I finally tried to convert the number to binary, and then to string, and then to binary. I thought I was not\n  sure if I was using binary or string. I finally tried to convert the number to binary, and then to string,\n  and then to binary. I thought I was not sure if I was using binary or string. I finally tried to convert the\n  number to binary, and then to string, and then to binary. I thought I was not sure if I was using binary or\n  string. I finally tried to convert the number to binary, and then to string, and then to binary. I thought I\n  was not sure if I was using binary or string. I finally tried to convert the number to binary, and then to\n  string, and then to binary. I thought I was not sure if I was using binary or string. I finally tried to\n  convert the number to binary, and then to string, and then to binary. I thought I was not sure if I was using\n  binary or string. I finally tried to convert the number to binary, and then to string, and then to binary.\n  I thought I was not sure if I was using binary or string. I finally tried to convert the number to binary, and\n  then to string, and then to binary. I thought I was not sure if I was using binary or string. I finally tried to\n  convert the number to binary, and then to string, and then to binary. I thought I was not sure if I was using\n  binary or string. I finally tried to convert the number to binary, and then to string, and then to binary. I\n  thought I was not sure if I was using binary or string. I finally tried to convert the number to binary, and\n  then to string, and then to binary. I thought I was not sure if I was using binary or string. I finally tried to\n  convert the number to binary, and then to string, and then to binary. I thought I was not sure if I was using\n  binary or string. I finally tried to convert the number to binary, and then to string, and then to binary. I\n  thought I was not sure if I was using binary or string. I finally tried to convert the number to binary, and\n  then to string, and then to binary. I thought I was not sure if I was using binary or string. I finally tried to\n  convert the number to binary, and then to string, and then to binary. I thought I was not sure if I was using\n  binary or string. I finally tried to convert the number to binary, and then to string, and then to binary. I\n  thought I was not sure if I was using binary or string. I finally tried to convert"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    let visited = new Map();\n    let stack = [];\n    let maxLen = 0;\n    for (let i = 0; i < s.length; i++) {\n        let sum = 0;\n        for (let j = i + 1; j < s.length; j++) {\n            sum += Math.pow(s[i] - s[j], 2);\n        }\n        stack.push(sum);\n    }\n    for (let i = 0; i < stack.length; i++) {\n        if (stack[i] === 0) {\n            stack.splice(i, 1);\n            i--;\n        } else if (stack[i] === 1) {\n            stack.splice(i, 1);\n            i--;\n        } else if (stack[i] === 2) {\n            stack.splice(i, 1);\n            i--;\n        } else if (stack[i] > 3) {\n            stack.splice(i, 1);\n            i--;\n        }\n    }\n    for (let i = stack.length - 1; i >= 0; i--) {\n        maxLen = Math.max(maxLen, stack[i]);\n    }\n    return maxLen >= 3 && maxLen <= 4 && stack.length === 0;\n}\n\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('xyy'));\nconsole.log(isHappy('a'));\nconsole.log(isHappy('dd'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArr = Array.from(grades);\n  const gradesArray = gradesArr.map(n => parseFloat(n));\n\n  const gradesArrSort = gradesArray.sort((a, b) => a - b);\n\n  let i = 0;\n  let gradesArrLength = gradesArrSort.length;\n\n  while (i < gradesArrLength) {\n    const grade = gradesArrSort[i];\n    const letterGrade = 'D';\n\n    if (grade >= 4.0) {\n      letterGrade = 'A+';\n    }\n    else if (grade > 3.7) {\n      letterGrade = 'A';\n    }\n    else if (grade > 3.3) {\n      letterGrade = 'A-';\n    }\n    else if (grade > 3.0) {\n      letterGrade = 'B+';\n    }\n    else if (grade > 2.7) {\n      letterGrade = 'B';\n    }\n    else if (grade > 2.3) {\n      letterGrade = 'B-';\n    }\n    else if (grade > 2.0) {\n      letterGrade = 'C+';\n    }\n    else if (grade > 1.7) {\n      letterGrade = 'C';\n    }\n    else if (grade > 1.3) {\n      letterGrade = 'C-';\n    }\n    else if (grade > 1.0) {\n      letterGrade = 'D+';\n    }\n    else if (grade > 0.7) {\n      letterGrade = 'D';\n    }\n    else if (grade > 0.0) {\n      letterGrade = 'D-';\n    }\n    else {\n      letterGrade = 'E';\n    }\n\n    console.log(letterGrade);\n    i++;\n  }\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length > 0) {\n    const isPrime = primeLength(string.substring(1));\n    if (isPrime) {\n      return string.length > 1 && primeLength(string.substring(2));\n    }\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let res = 0;\n    for (let i = 1; i <= n; i++) {\n      for (let j = 1; j < i; j++) {\n        res += 1;\n      }\n      if (i === n) {\n        res += 1;\n      }\n    }\n    return res;\n  }\n  /*\n  Write a function that finds the total number of positive integers of n digits that start with 1 and end with 9. * / const startsAndEnds = (n) = > {\n    let res = 0;\n    for (let i = 1; i <= n; i++) {\n      for (let j = 1; j < i; j++) {\n        res += 1;\n      }\n      if (i === n) {\n        res += 1;\n      }\n    }\n    return res;\n  }\n  // console.log(startsOneEnds(1));\n  // console.log(startsOneEnds(2));\n  // console.log(startsOneEnds(3));\n  // console.log(startsOneEnds(4));\n  // console.log(startsOneEnds(5));\n  // console.log(startsOneEnds(6));\n  // console.log(startsOneEnds(7));\n  // console.log(startsOneEnds(8));\n  // console.log(startsOneEnds(9));\n  // console.log(startsOneEnds(10));\n  // console.log(startsOneEnds(11));\n  // console.log(startsOneEnds(12));\n  // console.log(startsOneEnds(13));\n  // console.log(startsOneEnds(14));\n  // console.log(startsOneEnds(15));\n  // console.log(startsOneEnds(16));\n  // console.log(startsOneEnds(17));\n  // console.log(startsOneEnds(18));\n  // console.log(startsOneEnds(19));\n  // console.log(startsOneEnds(20));\n  // console.log(startsOneEnds(21));\n  // console.log(startsOneEnds(22));\n  // console.log(startsOneEnds(23));\n  // console.log(startsOneEnds(24));\n  // console.log(startsOneEnds(25));\n  // console.log(startsOneEnds(26));\n  // console.log(startsOneEnds(27));\n  // console.log(startsOneEnds(28));\n  // console.log(startsOneEnds(29));\n  // console.log(startsOneEnds(30));\n  // console.log(startsOneEnds(31));\n  // console.log(startsOneEnds(32));\n  // console.log(startsOneEnds(33));\n  // console.log(startsOneEnds(34));\n  // console.log(startsOneEnds(35));\n  // console.log(startsOneEnds(36));\n  // console.log(startsOneEnds(37));\n  // console.log(startsOneEnds(38));\n  // console.log(startsOneEnds(39));\n  // console.log(startsOneEnds(40));\n  // console.log(startsOneEnds(41));\n  // console.log(startsOneEnds(42));\n  // console.log(startsOneEnds(43));\n  // console.log(startsOneEnds(44));\n  // console.log(startsOneEnds(45));\n  // console.log(startsOneEnds(46));\n  // console.log(startsOneEnds(47));\n  // console.log(startsOneEnds(48));\n  // console.log(startsOneEnds(49));\n  // console.log(startsOneEnds(50));\n  // console.log(startsOneEnds(51));\n  // console.log(startsOneEnds(52));\n  // console.log(startsOneEnds(53));\n  // console.log(startsOneEnds(54));\n  // console.log(startsOneEnds(55));\n  // console.log(startsOneEnds(56));\n  // console.log(startsOneEnds(57));\n  // console.log(startsOneEnds(58));\n  // console.log(startsOneEnds(59));\n  // console.log(startsOneEnds(60));\n  // console.log(startsOneEnds(61));\n  // console.log(startsOneEnds(62));\n  // console.log(startsOneEnds(63));\n  // console.log(startsOneEnds(64));\n  // console.log(startsOneEnds(65));\n  // console.log(startsOneEnds(66));\n  // console.log(startsOneEnds(67));\n  // console.log(startsOneEnds(68));\n  // console.log(startsOneEnds(69));\n  // console.log(startsOneEnds(70));\n  // console.log(startsOneEnds(71));\n  // console.log(startsOneEnds(72));\n  // console.log(startsOneEnds(73));\n  // console.log(startsOneEnds(74));\n  // console.log(startsOneEnds(75));\n  // console.log(startsOneEnds(76));\n  // console.log(startsOneEnds(77));\n  // console.log(startsOneEnds(78));\n  // console.log(startsOneEnds(79));\n  // console.log(startsOneEnds(80));\n  // console.log(startsOneEnds(81));\n  // console.log(startsOneEnds(82));\n  // console.log(startsOneEnds(83));\n  // console.log(startsOneEnds(84));\n  // console.log(startsOneEnds(85));\n  // console.log(startsOneEnds(86));\n  // console.log(startsOneEnd"}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let s = '';\n  for (let i = 1; i <= N; i++) {\n    s += parseInt(i).toString(2);\n  }\n  return s;\n};\n\n/*\n  \n  Time Complexity  : O(N)\n  Space Complexity : O(1)\n  Trace: \n  \n  */\nconst test = () => {\n  let N = 1000;\n  let s = solve(N);\n  console.log(s);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i += 1) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  return s.split(/\\s+/).sort((a, b) => {\n    const as = a.charCodeAt(0)\n    const bs = b.charCodeAt(0)\n    return as - bs\n  }).join(' ')\n}\n\n// const antiShuffle = (s) => {\n//   let words = s.split(/\\s+/)\n//   words = words.sort((a, b) => {\n//     const as = a.charCodeAt(0)\n//     const bs = b.charCodeAt(0)\n//     return as - bs\n//   })\n//   return words.join(' ')\n// }\n\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('hi'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if(!lst) return []\n  const row = lst.slice()\n   .sort((a, b) => {\n      return (a[0] > b[0])? 1 : ((a[0] < b[0])? -1 : 0)\n    })\n   .filter((n, index) => index < x)\n   .map(([x, y], i) => [x, y])\n  const col = row.slice()\n   .sort((a, b) => {\n      return (a[1] > b[1])? 1 : ((a[1] < b[1])? -1 : 0)\n    })\n   .filter(([, y], i) => i < x)\n   .map(([, y], i) => [i, y])\n  return [...row,...col]\n}\n\n/*\n  Given an integer x, and a list of lists,\n  return index of the first element of the list\n  that is equal to x.\n  Return -1 if not found.\n  \n  Examples:\n  getIndex([1, 2, 3, 4, 5, 6], 5) == 4\n  getIndex([1, 2, 3, 4, 5, 6], 7) == -1\n  getIndex([1, 2, 3, 4, 5, 6], 8) == -1\n  getIndex([[1,2,3], [4,5,6], [7,8,9]], 3) == 1\n*/\nconst getIndex = (lst, x) => {\n  const l = lst.length\n  if(l === 0) return -1\n  let i = 0\n  while(i < l && lst[i][0]!== x) i++\n  if(i === l) return -1\n  return i\n}\n\n/*\n  Given a matrix and integer, return index of the first element\n  of the matrix that is equal to x.\n  Return -1 if not found.\n  \n  Examples:\n  getIndex([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]], 5) == 4\n  getIndex([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]], 7) == -1\n  getIndex([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]], 8) == -1\n  getIndex([[1,2,3], [4,5,6], [7,8,9]], 3) == 1\n*/\nconst getIndexMatrix = (lst, x) => {\n  const [l, m] = lst.length\n  if(l === 0 || m === 0) return -1\n  let i = 0\n  while(i < l && i < m && lst[i][i]!== x) i++\n  if(i === l) return -1\n  return i\n}\n\nconst getRowAndCol = (lst, x) => {\n  const [row, col] = getRow(lst, x)\n  return [row, col]\n}\n\nconst getRowCol = (lst, x) => {\n  const [row, col] = getRowAndCol(lst, x)\n  return [row, col]\n}\n\nconst getRowColMatrix = (lst, x) => {\n  const [row, col] = getRowCol(lst, x)\n  return [row, col]\n}\n\nconst getRowColInMatrix = (lst, x) => {\n  const [row, col] = getRowColMatrix(lst, x)\n  return [row, col]\n}\n\nconst main = () => {\n  const [lst, x] = parse(process.argv.slice(2))\n  const [row, col] = getRowCol(lst, x)\n  console.log(row, col)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  return array.sort(\n    (a, b) => a - b,\n    (a, b) => a > b? 1 : a < b? -1 : 0\n  );\n};\n\nconst testArray = [1, 4, 2, 3, 6, 7, 5, 9, 8, 11, 10, 13, 12, 14, 16, 15];\n\nconsole.log(sortArray(testArray));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let b = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let i = 0;\n  let s1 = [];\n  let s2 = [];\n  let s3 = [];\n  let r = a.slice(i);\n  for (let j = 0; j < s.length; j++) {\n    s1.push(a[(i + 2) % 26]);\n    s2.push(b[(i + 2) % 10]);\n    s3.push(s[j]);\n    i = (i + 2) % 26;\n  }\n  return s1.join('') + s2.join('') + s3.join('');\n}\n\n/*DEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'ghi'\n  encrypt('asdfghjkl') returns 'ijklmnop'\n  encrypt('gf') returns 'ghf'\n  encrypt('et') returns 'ihf'\n  */\nconst decrypt = (s) => {\n  let a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let b = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let i = 0;\n  let s1 = [];\n  let s2 = [];\n  let s3 = [];\n  let r = a.slice(i);\n  for (let j = 0; j < s.length; j++) {\n    s1.push(a[(i - 2) % 26]);\n    s2.push(b[(i - 2) % 10]);\n    s3.push(s[j]);\n    i = (i - 2) % 26;\n  }\n  return s1.join('') + s2.join('') + s3.join('');\n}\n\n/*EXAMPLE\n  encrypt('hi')\n  encrypt('asdfghjkl')\n  encrypt('gf')\n  encrypt('et')\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  let {length} = lst;\n  let {length - 1} = lst;\n  let {[length - 1]} = lst;\n  if (length === 1) {\n    return null;\n  }\n  let smallest = lst[0];\n  let next = lst[1];\n  let {[smallest]} = lst;\n  while (nextSmallest(next) === null) {\n    smallest = next;\n    next = nextSmallest(next);\n    if (next === null) {\n      return null;\n    }\n    {[smallest]} = next;\n  }\n  return next;\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const { isBlank, isPunct } = isPunctuation(S);\n  const isPunctuation = (S) => isBlank(S) || isPunct(S);\n  const hasBored = (S) => isBlank(S) || isPunctuation(S) && S.startsWith('I');\n  return hasBored(S);\n};\n\n/*\n  isSentence is a sentence that begins with the word \"The\"\n  >>> isSentence(\"The sky is blue. The sun is shining. I love this weather\")\n  true\n  >>> isSentence(\"The sky is blue. The sun is shining. I love this weather. How cool\")\n  false\n  */\nconst isSentence = (S) => {\n  const { isBlank, isPunct } = isPunctuation(S);\n  const isPunctuation = (S) => isBlank(S) || isPunct(S);\n  const isSentence = (S) => isBlank(S) || isPunctuation(S) && S.startsWith('The');\n  return isSentence(S);\n};\n\nconst isQuotation = (S) => {\n  const { isBlank, isPunct } = isPunctuation(S);\n  const isPunctuation = (S) => isBlank(S) || isPunct(S);\n  const isSentence = (S) => isBlank(S) || isPunctuation(S) && S.startsWith('The');\n  return isSentence(S);\n};\n\n/*\n  isNumber is a sentence that begins with a number\n  >>> isNumber(\"The sky is blue. The sun is shining. I love this weather\")\n  true\n  >>> isNumber(\"The sky is blue. The sun is shining. I love this weather. How cool\")\n  false\n  */\nconst isNumber = (S) => {\n  const { isBlank, isPunct } = isPunctuation(S);\n  const isPunctuation = (S) => isBlank(S) || isPunct(S);\n  const isNumber = (S) => isBlank(S) || isPunctuation(S) && S.startsWith('1');\n  return isNumber(S);\n};\n\nconst isPunctuation = (S) => {\n  return isBlank(S) || isPunct(S) || S.startsWith('.') || S.startsWith(':') || S.startsWith('?') || S.startsWith('!') || S.startsWith('-') || S.startsWith('—') || S.startsWith(';') || S.startsWith('#') || S.startsWith('$') || S.startsWith('%') || S.startsWith('&') || S.startsWith('*') || S.startsWith('+') || S.startsWith('-') || S.startsWith('/') || S.startsWith('=') || S.startsWith('\\\\') || S.startsWith('@') || S.startsWith('_');\n};\n\nconst isPunctuationRegex = /[.,:?\\-\\!—\\?\\!\\;\\)\\(\\-\\)\\#\\$\\%\\&\\*\\+\\-|\\/\\=\\^\\{}\\[\\]\\|\\(\\)<>\\+\\(\\)\\@\\~\\_\\^\\?\\$]/;\nconst isPunctuation = (S) => {\n  return isBlank(S) || isPunctuationRegex.test(S);\n};\n\nconst isWhitespace = (S) => {\n  return isBlank(S) || S.startsWith(' ');\n};\n\nconst isWhitespaceRegex = /^[\\t\\r\\n]/;\nconst isWhitespace = (S) => {\n  return isBlank(S) || isWhitespaceRegex.test(S);\n};\n\nexport default { isBored, isSentence, isNumber, isQuotation, isPunctuation, isPunctuationRegex, isWhitespace, isWhitespaceRegex };\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const total = x + y + z;\n  return x === total || y === total || z === total;\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/(?=(?:[A-Z]{2}))/g, (match, index) => {\n    return index? match.toUpperCase() : match.toLowerCase();\n  });\n};\n\n/*\n  Write a function that reverses a string of lowercase letters. Let's say a message.\n  Examples:\n  >>> encode('this is a message')\n  'this is a message'\n  >>> encode('This is a message')\n  'this is a message'\n  >>> encode('THIS is a message')\n  'this is a message'\n  */\nconst decode = (message) => {\n  return message.split('').reverse().join('');\n};\n\n/*\n  Write a function that adds a prefix to a string. Let's say a message.\n  Examples:\n  >>> addPrefix('this is a message', 'Welcome to ')\n  'Welcome to this is a message'\n  >>> addPrefix('This is a message', 'Welcome to ')\n  'Welcome to This is a message'\n  */\nconst addPrefix = (message, prefix) => {\n  return prefix + message;\n};\n\nmodule.exports = {\n  encode,\n  decode,\n  addPrefix\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = (a, b) => a > b? a : b;\n  const sumDigits = (digits) => {\n    const max = (a, b) => a > b? a : b;\n    const lst = [];\n    for (let i = 0; i < digits.length; i++) {\n      lst.push(digits.slice(i, i + 1));\n    }\n    return lst.reduce(max, 0);\n  };\n  return sumDigits(lst);\n};\n\nconst tests = [\n  [\n    [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3],\n    10\n  ],\n  [\n    [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1],\n    25\n  ],\n  [\n    [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3],\n    13\n  ],\n  [\n    [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6],\n    3\n  ],\n  [\n    [0, 8, 1, 2, 1, 7],\n    7\n  ],\n];\n\ntests.forEach(([lst, expected]) => {\n  console.log(`Lst: ${lst}`);\n  console.log(`Sum of digits: ${skjkasdkd(lst)}`);\n  console.log(`Expected: ${expected}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict).sort();\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (dict[key].length > 1) {\n      if (key.length === 1) {\n        return false;\n      } else if (key.length === 2) {\n        if (key[0] === key[0].toUpperCase() && key[1] === key[1].toLowerCase()) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } else {\n      if (key.length === 1) {\n        if (key.toUpperCase() === key.toLowerCase()) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  return false;\n}\n\nmodule.exports = {\n  checkDictCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n <= 0) return [];\n  let counter = 2;\n  let result = [];\n  while (counter <= n) {\n    if (isPrime(counter)) {\n      result.push(counter);\n    }\n    counter++;\n  }\n  return result;\n};\n\nfunction isPrime(n) {\n  let counter = 2;\n  while (counter <= Math.sqrt(n)) {\n    if (n % counter === 0) {\n      return false;\n    }\n    counter++;\n  }\n  return true;\n}\n\nconsole.log(countUpTo(20));\n\n//# sourceMappingURL=countUpTo.js.map<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const result = a * b;\n  let product = result;\n  while (result < 0) {\n    product = -product;\n  }\n  return product;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/*\n  For a string s, the number of digits in even indexes is counted.\n  \n  For example:\n  countDigits('aBCdEf') returns 1\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/\\d/)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nmodule.exports = {\n    countUpper,\n    countLower,\n    countDigits\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (isNaN(value)) {\n    return NaN\n  }\n  let number = parseFloat(value);\n  let rounded = Math.round(number);\n  if (Math.abs(rounded - number) < 0.5) {\n    return rounded\n  }\n  return rounded + (rounded < 0? -1 : 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n\n  for (let i = 0; i < n; i++) {\n    levels.push(i + 1);\n  }\n\n  return levels;\n};\n\nexport default makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s*/g);\n  words = words.filter(w => w.length > 0);\n  return words;\n};\n\n/*\n  A string is written using a specific set of characters. The set of allowed characters is specified in the string.\n  \n  For example:\n  alphabetString(\"Hello\") == \"Hello\"\n  alphabetString(\"hello\") == \"hello\"\n  alphabetString(\"hello123\") == \"hello123\"\n  */\nconst alphabetString = (s) => {\n  return s.split('').map((c) => c.toLowerCase());\n};\n\n/*\n  Given a string, return a string that contains only the letters of the string.\n  \n  For example:\n  lettersOnly(\"Hello\") == \"Hello\"\n  lettersOnly(\"hello\") == \"hello\"\n  lettersOnly(\"hello123\") == \"hello123\"\n  */\nconst lettersOnly = (s) => {\n  return s.split('').map((c) => c.toUpperCase()).join('');\n};\n\n/*\n  Given a string, return the string with all the vowels replaced with \"v\"\n  \n  For example:\n  vowelsReplaced(\"Hello\") == \"Hello\"\n  vowelsReplaced(\"hello\") == \"hello\"\n  vowelsReplaced(\"hello123\") == \"hello123\"\n  */\nconst vowelsReplaced = (s) => {\n  return s.split('').map((c) => {\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      return c + c;\n    }\n    return c;\n  }).join('');\n};\n\n/*\n  Given a string, return a string where the letters are in alphabetical order.\n  \n  For example:\n  alphabetical(\"Hello\") == \"Hello\"\n  alphabetical(\"hello\") == \"hello\"\n  alphabetical(\"hello123\") == \"hello123\"\n  */\nconst alphabetical = (s) => {\n  const wordArray = wordsString(s).sort();\n  return wordArray.join('');\n};\n\n/*\n  Given a string, return the string with all the vowels replaced with \"v\"\n  \n  For example:\n  vowelsReplaced(\"Hello\") == \"Hello\"\n  vowelsReplaced(\"hello\") == \"hello\"\n  vowelsReplaced(\"hello123\") == \"hello123\"\n  */\nconst vowelsReplacedAll = (s) => {\n  return vowelsReplaced(s).split('').join('');\n};\n\n/*\n  Given a string, return a string where all the letters are lowercase.\n  \n  For example:\n  lowerCase(\"Hello\") == \"hello\"\n  lowerCase(\"hello\") == \"hello\"\n  lowerCase(\"hello123\") == \"hello123\"\n  */\nconst lowerCase = (s) => {\n  return s.toLowerCase();\n};\n\n/*\n  Given a string, return a string where all the letters are uppercase.\n  \n  For example:\n  upperCase(\"Hello\") == \"HELLO\"\n  upperCase(\"hello\") == \"HELLO\"\n  upperCase(\"hello123\") == \"HELLO123\"\n  */\nconst upperCase = (s) => {\n  return s.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the vowels replaced with \"v\"\n  \n  For example:\n  vowelsReplaced(\"Hello\") == \"Hello\"\n  vowelsReplaced(\"hello\") == \"hello\"\n  vowelsReplaced(\"hello123\") == \"hello123\"\n  */\nconst vowelsReplacedLowerCase = (s) => {\n  return vowelsReplaced(lowerCase(s)).split('').join('');\n};\n\n/*\n  Given a string, return a string where all the vowels are replaced with \"v\"\n  \n  For example:\n  vowelsReplaced(\"Hello\") == \"Hello\"\n  vowelsReplaced(\"hello\") == \"hello\"\n  vowelsReplaced(\"hello123\") == \"hello123\"\n  */\nconst vowelsReplacedUpperCase = (s) => {\n  return vowelsReplaced(upperCase(s)).split('').join('');\n};\n\nconst main = () => {\n  let s = \"Hello\";\n  console.log(wordsString(s));\n  console.log(alphabetString(s));\n  console.log(lettersOnly(s));\n  console.log(vowelsReplaced(s));\n  console.log(vowelsReplacedLowerCase(s));\n  console.log(vowelsReplacedUpperCase(s));\n  console.log(alphabetical(s));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let n = x;\n  if (x < y) {\n    n = y;\n  }\n  while (n % 2 == 0) {\n    n -= 1;\n  }\n  return n;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let nbits = n.toString(2).length,\n      mbits = m.toString(2).length,\n      nBits = nbits + 1,\n      mBits = mbits + 1;\n  if (nBits > mBits) return -1;\n  let sum = 0,\n      sumBits = 0;\n  for (let i = 0; i < nBits; i++) {\n    sum += Math.pow(2, i);\n    sumBits += i;\n  }\n  for (let i = nBits; i < mBits; i++) {\n    sum += Math.pow(2, i - nBits);\n    sumBits += i - nBits;\n  }\n  return sum / (Math.pow(2, mBits) - Math.pow(2, nbits));\n};\n\nconst test = () => {\n  let testData = [\n    [1, 5, \"0b11\"],\n    [7, 5, \"-1\"],\n    [10, 20, \"0b1111\"],\n    [20, 33, \"0b11010\"],\n  ];\n  for (let i = 0; i < testData.length; i++) {\n    let [n, m, expected] = testData[i];\n    let actual = roundedAvg(n, m);\n    if (expected === -1) {\n      assert.strictEqual(actual, -1);\n    } else {\n      assert.strictEqual(actual, expected);\n    }\n  }\n};\n\nmodule.exports = {\n  test,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  return x.filter(x =>!(x % 2)).sort().filter(x => x > 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  arr = arr.sort((a, b) => a - b)\n  arr.reverse()\n  arr.forEach((item, index) => arr[index] = arr[index].toLocaleLowerCase())\n  return arr\n}\n\n/*\n  For an array of strings, you sort the strings in the array by converting them to lower case, then reverse the resulting array, and then replace each string with its corresponding number.\n\n  For example:\n    arr = [\"Three\", \"One\", \"Two\", \"Four\", \"Five\"]\n          -> sort arr -> [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n          -> reverse arr -> [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"A\", \"B\", \"C\", \"D\"]\n          -> sort arr -> [\"A\", \"B\", \"C\", \"D\"]\n          -> reverse arr -> [\"D\", \"C\", \"B\", \"A\"]\n    return = [\"1\", \"2\", \"3\", \"4\"]\n  */\nconst byNumeric = (arr) => {\n  arr = arr.map((item) => item.toLocaleLowerCase())\n  arr = arr.sort((a, b) => a - b)\n  arr.reverse()\n  arr.forEach((item, index) => arr[index] = arr[index].toLocaleUpperCase())\n  return arr\n}\n\n/*\n  For an array of characters, you sort the characters in the array by converting them to upper case, then reverse the resulting array, and then replace each character with its corresponding number.\n\n  For example:\n    arr = [\"Z\", \"A\", \"B\", \"C\", \"D\"]\n          -> sort arr -> [\"A\", \"B\", \"C\", \"D\", \"Z\"]\n          -> reverse arr -> [\"Z\", \"D\", \"C\", \"B\", \"A\"]\n    return [\"1\", \"2\", \"3\", \"4\", \"5\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"A\", \"B\", \"C\", \"D\"]\n          -> sort arr -> [\"A\", \"B\", \"C\", \"D\"]\n          -> reverse arr -> [\"D\", \"C\", \"B\", \"A\"]\n    return = [\"1\", \"2\", \"3\", \"4\"]\n  */\nconst byLetter = (arr) => {\n  arr = arr.map((item) => item.toLocaleUpperCase())\n  arr = arr.sort((a, b) => a - b)\n  arr.reverse()\n  arr.forEach((item, index) => arr[index] = arr[index].toLocaleLowerCase())\n  return arr\n}\n\n/*\n  For an array of numbers, you sort the numbers in the array by reversing the resulting array, then replace each number with its corresponding name of \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNumber = (arr) => {\n  arr = arr.sort((a, b) => a - b)\n  arr.reverse()\n  arr.forEach((item, index) => arr[index] = arr[index].toLocaleLowerCase())\n  return arr\n}\n\n/*\n  For an array of strings, you sort the strings in the array by converting them to upper case, then reverse the resulting array, and then replace each string with its corresponding number.\n\n  For example:\n    arr = [\"Three\", \"One\", \"Two\", \"Four\", \"Five\"]\n          -> sort arr -> [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n          -> reverse arr -> [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    return = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"A\", \"B\", \"C\", \"D\"]\n          -> sort arr -> [\"A\", \"B\", \"C\", \"D\"]\n          -> reverse arr -> [\"D\", \"C\", \"B\", \"A\"]\n    return = [\"1\", \"2\", \"3\", \"4\"]\n  */\nconst byString = (arr) => {\n  arr = arr.map((item) => item.toLoc"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let list = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      list.push(1);\n    }else{\n      list.push(i * list[i-1-1]);\n    }\n  }\n  return list;\n}\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let result = 0;\n  const check = (n) => {\n    const sum = 0;\n    for (let i = 1; i <= n; i++) {\n      if (isPalindrome(i)) {\n        sum += (i % 2)? 1 : -1;\n      }\n    }\n    if (sum > 0) result++;\n    if (sum < 0) result--;\n  };\n  check(n);\n  return result;\n};\n\nexport { evenOddPalindrome };<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const dp = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const newArr = [...arr, arr[i]];\n    if (newArr[0] < 0) {\n      newArr[0] *= -1;\n    }\n    const sum = newArr.reduce((acc, val) => acc + val, 0);\n    if (sum > 0 &&!dp.has(sum)) {\n      dp.set(sum, i);\n    }\n  }\n  return dp.size;\n};\n\n/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits < 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([1, 1, 2]) == 1\n  >>> countNums([1, 1, 2, -3, -1]) == 3\n  >>> countNums([-1, 11, -11]) == 2\n  */\nconst countNegNums = (arr) => {\n  const dp = new Map();\n  for (let i = 0; i < arr.length; i++) {\n    const newArr = [...arr, arr[i]];\n    if (newArr[0] < 0) {\n      newArr[0] *= -1;\n    }\n    const sum = newArr.reduce((acc, val) => acc + val, 0);\n    if (sum < 0 &&!dp.has(sum)) {\n      dp.set(sum, i);\n    }\n  }\n  return dp.size;\n};\n\nconst arr = [-1, 11, -11];\n\nconsole.log(countNums(arr));\nconsole.log(countNegNums(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (arr.length === 0) return true;\n    let index = arr.length - 1;\n    let left = arr[index];\n    let right = arr[0];\n    while (index > 0) {\n        index--;\n        arr[index + 1] = arr[index];\n        arr[index] = right;\n        right = left;\n        left = arr[index];\n    }\n    arr[0] = right;\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // return `true` if `lst1` and `lst2` are of the same size and\n  // the elements of `lst1` are sorted in increasing order.\n  const areSorted = lst1.every((v, i) => lst1[i] <= lst1[i + 1])\n\n  // return `true` if `lst1` and `lst2` are of the same size and\n  // all the elements of `lst1` are even and all the elements of `lst2`\n  // are odd.\n  const isExchangeable = lst1.every((v, i) => v % 2 === 0 && v % 2 === 1)\n\n  if (areSorted && isExchangeable) {\n    return 'YES'\n  }\n  return 'NO'\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])) // => 'YES'\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])) // => 'NO'\nconsole.log(exchange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])) // => 'YES'\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const input = test.toLowerCase().split(/\\s+/);\n  const output = {};\n  for (let i = 0; i < input.length; i++) {\n    const letter = input[i];\n    const max = output[letter] || 0;\n    output[letter] = max + 1;\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  while (s.length) {\n    if (c.includes(s.charAt(0))) {\n      result.push(s.charAt(0));\n      s = s.substr(1);\n    } else {\n      break;\n    }\n  }\n  let newString = s.substr(1);\n  return [newString, newString.length === 0];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const output = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    output.push(`the number of odd elements ${lst[i]} of the ${lst[i]}`);\n  }\n  return output;\n};\n\nconst evenCount = (lst) => {\n  const output = [];\n  for (let i = 0; i < lst.length; i += 1) {\n    output.push(`the number of even elements ${lst[i]} of the ${lst[i]}`);\n  }\n  return output;\n};\n\nmodule.exports = {\n  oddCount,\n  evenCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = -1;\n  const arr = [];\n  for (let i = 0; i < nums.length; i++) {\n    arr.push(nums[i]);\n  }\n  const maxLength = arr.length;\n  const sum = arr.reduce((a, b) => a + b);\n  let tempSum = sum;\n  for (let i = 1; i < maxLength; i++) {\n    for (let j = i; j < maxLength; j++) {\n      tempSum -= arr[i - 1];\n      tempSum += arr[j];\n      if (tempSum < minSum || minSum < 0) {\n        minSum = tempSum;\n      }\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1);\nconsole.log(minSubArraySum([-1, -2, -3]) === -6);\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n\n    let count = 0;\n    for (let i = 0; i < rows; i++) {\n        let row = grid[i];\n        let count = 0;\n        for (let j = 0; j < cols; j++) {\n            if (row[j] === 1) {\n                count++;\n            }\n        }\n        if (count >= capacity) {\n            count = 0;\n        }\n        count += count;\n        if (count > capacity) {\n            count = capacity;\n        }\n        if (count === capacity) {\n            count = 0;\n        }\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count = count > capacity? capacity : count;\n        count--;\n        count++;\n        count = count < 0? 0 : count;\n        count ="}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  const arrLength = arr.length;\n  for (let i = 0; i < arrLength; i++) {\n    sortedArr.push(arr[i]);\n  }\n  arr.forEach((x, i) => {\n    let sortedArrIndex = 0;\n    while (sortedArrIndex < arrLength) {\n      const nextValue = sortedArr[sortedArrIndex];\n      const nextArrIndex = i;\n      if (nextValue < x) {\n        sortedArrIndex++;\n      } else if (nextValue === x) {\n        sortedArrIndex = sortedArrIndex + 1;\n        if (nextArrIndex!== sortedArrIndex) {\n          sortedArr[nextArrIndex] = sortedArr[sortedArrIndex];\n          sortedArr[nextArrIndex] = x;\n        }\n      }\n    }\n  });\n  return sortedArr;\n};\n\nexport {\n  sortArray,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const l = s.length;\n  const set = new Set();\n  const map = new Map();\n  const list = [];\n  const count = 0;\n  for (let i = 0; i < l; i++) {\n    const c = s[i];\n    if (isConsonant(c)) {\n      if (count === n) {\n        list.push(s.substring(i, i + n));\n      }\n      count++;\n    } else {\n      if (count!== 0) {\n        list.push(s.substring(i, i + count));\n        count = 0;\n      }\n    }\n  }\n  if (count!== 0) {\n    list.push(s.substring(i, i + count));\n  }\n  return list;\n}\n\nconst isConsonant = (c) => {\n  return [\n    'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n  ].includes(c);\n}\n\nconst getCount = (list) => {\n  const map = new Map();\n  for (let i = 0; i < list.length; i++) {\n    const count = list[i].length;\n    if (map.has(count)) {\n      map.set(count, map.get(count) + 1);\n    } else {\n      map.set(count, 1);\n    }\n  }\n  return map;\n}\n\nconst sortByCount = (a, b) => {\n  return getCount(a).get(b) - getCount(b).get(a);\n}\n\n/*\n  Given a string s and a string t, you have to implement a function that returns \n  whether the string t is a substring of the string s.\n  Note: The strings do not have any leading or trailing spaces and the string \n  s contains only lowercase letters.\n  Examples:\n  isSubstring(\"abc\", \"abc\") ==> true\n  isSubstring(\"abc\", \"bc\") ==> false\n  isSubstring(\"abc\", \"ac\") ==> false\n  isSubstring(\"abc\", \"aaa\") ==> false\n  isSubstring(\"abac\", \"acb\") ==> true\n  isSubstring(\"abc\", \"\") ==> false\n  isSubstring(\"\", \"\") ==> true\n  isSubstring(\"abc\", \"a\") ==> false\n  isSubstring(\"abc\", \"aabc\") ==> true\n  isSubstring(\"abc\", \"\") ==> true\n  isSubstring(\"abc\", \"a\") ==> false\n  isSubstring(\"ab\", \"aab\") ==> false\n  isSubstring(\"ab\", \"aba\") ==> true\n  isSubstring(\"ab\", \"ba\") ==> true\n  isSubstring(\"ab\", \"b\") ==> true\n  isSubstring(\"ab\", \"bab\") ==> true\n  isSubstring(\"ab\", \"\") ==> true\n  isSubstring(\"\", \"\") ==> true\n  isSubstring(\"ab\", \"bab\") ==> true\n  isSubstring(\"\", \"a\") ==> false\n  isSubstring(\"\", \"b\") ==> false\n  isSubstring(\"a\", \"\") ==> false\n  isSubstring(\"b\", \"\") ==> false\n  isSubstring(\"a\", \"a\") ==> false\n  isSubstring(\"a\", \"aa\") ==> true\n  isSubstring(\"aa\", \"a\") ==> true\n  isSubstring(\"aa\", \"aaa\") ==> false\n  isSubstring(\"aaa\", \"a\") ==> false\n  isSubstring(\"aaa\", \"aa\") ==> true\n  isSubstring(\"aaa\", \"aab\") ==> false\n  isSubstring(\"aa\", \"b\") ==> true\n  isSubstring(\"aaa\", \"ba\") ==> false\n  isSubstring(\"b\", \"a\") ==> true\n  isSubstring(\"b\", \"aa\") ==> true\n  isSubstring(\"b\", \"aaa\") ==> false\n  isSubstring(\"aa\", \"\") ==> false\n  isSubstring(\"b\", \"\") ==> false\n  isSubstring(\"b\", \"a\") ==> true\n  isSubstring(\"b\", \"b\") ==> true\n  isSubstring(\"b\", \"ba\") ==> false\n  isSubstring(\"b\", \"bab\") ==> false\n  isSubstring(\"b\", \"\") ==> true\n  isSubstring(\"\", \"\") ==> true\n  isSubstring(\"a\", \"\") ==> false\n  isSubstring(\"\", \"a\") ==> false\n  isSubstring(\"\", \"b\") ==> false\n  isSubstring(\"a\", \"aa\") ==> true\n  isSubstring(\"aa\", \"a\") ==> true\n  isSubstring(\"aa\", \"aaa\") ==> true\n  isSubstring(\"aaa\", \"a\") ==> true\n  isSubstring(\"aaa\", \"aa\") ==> true\n  isSubstring(\"aaa\", \"aaa\") ==> true\n  isSubstring(\"aaa\", \"aa\") ==> true\n  isSubstring(\"aaa\", \"a\") ==> false\n  isSubstring(\"aaa\", \"\") ==> true\n  isSubstring(\"\", \"a\") ==> false\n  isSubstring(\"\", \"b\") ==> false\n  isSubstring(\"a\", \"a\") ==> true\n  isSubstring(\"a\", \"aa\") ==> true\n  isSubstring(\"aa\", \"a\") ==> true\n  isSubstring(\"aa\", \"aaa\") ==> true\n  isSubstring(\"aaa\", \"a\") ==> true\n  isSubstring(\"aaa\", \"aa\") ==> true\n  isSubstring(\"aaa\", \"aa\") ==> true\n  isSubstring(\"aaa"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (word.length <= 1) return ''\n  const first = word[0]\n  const last = word[word.length - 1]\n  let index = 0\n  let closestVowel = ''\n  while (index < word.length) {\n    const next = word[index + 1]\n    if (isVowel(first) && isVowel(last) && isVowel(next)) {\n      closestVowel = word[index + 1]\n      break\n    }\n    index += 1\n  }\n  return closestVowel\n}\n\n// test\n// getClosestVowel(\"Yogurt\") ==> \"u\"\n// getClosestVowel(\"FULL\") ==> \"U\"\n// getClosestVowel(\"quick\") ==> \"\"\n// getClosestVowel(\"ab\") ==> \"\"\n// getClosestVowel(\"abcd\") ==> \"\"\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const openBracket = '('\n  const closeBracket = ')'\n  const openBrackets = []\n  const closeBrackets = []\n  const length = lst.length\n\n  for (let i = 0; i < length; i++) {\n    const char = lst[i]\n\n    if (char === openBracket) {\n      openBrackets.push(i)\n    } else if (char === closeBracket) {\n      closeBrackets.push(i)\n    }\n  }\n\n  if (openBrackets.length === 0 || closeBrackets.length === 0) {\n    return 'No'\n  }\n\n  if (openBrackets.length!== closeBrackets.length) {\n    return 'No'\n  }\n\n  for (let i = 0; i < openBrackets.length; i++) {\n    const index = openBrackets[i]\n\n    if (lst[index]!== closeBracket) {\n      return 'No'\n    }\n  }\n\n  return 'Yes'\n}\n\nconst findParens = (lst) => {\n  const openBracket = '('\n  const closeBracket = ')'\n  const openBrackets = []\n  const closeBrackets = []\n  const length = lst.length\n\n  for (let i = 0; i < length; i++) {\n    const char = lst[i]\n\n    if (char === openBracket) {\n      openBrackets.push(i)\n    } else if (char === closeBracket) {\n      closeBrackets.push(i)\n    }\n  }\n\n  if (openBrackets.length === 0 || closeBrackets.length === 0) {\n    return 'No'\n  }\n\n  if (openBrackets.length!== closeBrackets.length) {\n    return 'No'\n  }\n\n  for (let i = 0; i < openBrackets.length; i++) {\n    const index = openBrackets[i]\n\n    if (lst[index]!== closeBracket) {\n      return 'No'\n    }\n  }\n\n  return 'Yes'\n}\n\nconst matchParens = (lst) => {\n  const openBracket = '('\n  const closeBracket = ')'\n  const openBrackets = []\n  const closeBrackets = []\n  const length = lst.length\n\n  for (let i = 0; i < length; i++) {\n    const char = lst[i]\n\n    if (char === openBracket) {\n      openBrackets.push(i)\n    } else if (char === closeBracket) {\n      closeBrackets.push(i)\n    }\n  }\n\n  if (openBrackets.length === 0 || closeBrackets.length === 0) {\n    return 'No'\n  }\n\n  if (openBrackets.length!== closeBrackets.length) {\n    return 'No'\n  }\n\n  for (let i = 0; i < openBrackets.length; i++) {\n    const index = openBrackets[i]\n\n    if (lst[index]!== closeBracket) {\n      return 'No'\n    }\n  }\n\n  return 'Yes'\n}\n\nconst findParens = (lst) => {\n  const openBracket = '('\n  const closeBracket = ')'\n  const openBrackets = []\n  const closeBrackets = []\n  const length = lst.length\n\n  for (let i = 0; i < length; i++) {\n    const char = lst[i]\n\n    if (char === openBracket) {\n      openBrackets.push(i)\n    } else if (char === closeBracket) {\n      closeBrackets.push(i)\n    }\n  }\n\n  if (openBrackets.length === 0 || closeBrackets.length === 0) {\n    return 'No'\n  }\n\n  if (openBrackets.length!== closeBrackets.length) {\n    return 'No'\n  }\n\n  for (let i = 0; i < openBrackets.length; i++) {\n    const index = openBrackets[i]\n\n    if (lst[index]!== closeBracket) {\n      return 'No'\n    }\n  }\n\n  return 'Yes'\n}\n\nmodule.exports = {\n  findParens,\n  matchParens,\n  findParens,\n  matchParens\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const sortedArr = sortedArray(arr);\n    const half = Math.floor(k / 2);\n    const max = sortedArr[k - 1];\n\n    return [...sortedArr.slice(0, half), max,...sortedArr.slice(half + 1, k)];\n};\n\n// tester\nconst tester = (actual, expected) => {\n    if (actual!== expected) {\n        throw new Error(`expected: ${expected}, actual: ${actual}`);\n    }\n};\n\ndescribe('Maximum', () => {\n    it('Maximum', () => {\n        const arr = [2, 1, -1, 2, 1, -1, 2, 1, -1];\n        const k = 3;\n        tester(maximum(arr, k), [2, 2, 2]);\n    });\n\n    it('Maximum', () => {\n        const arr = [-3, -4, 5];\n        const k = 3;\n        tester(maximum(arr, k), [-4, -3, 5]);\n    });\n\n    it('Maximum', () => {\n        const arr = [4, -4, 4];\n        const k = 2;\n        tester(maximum(arr, k), [4, 4]);\n    });\n\n    it('Maximum', () => {\n        const arr = [-3, 2, 1, 2, -1, -2, 1];\n        const k = 1;\n        tester(maximum(arr, k), [2]);\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const even = lst.filter((num) => num % 2 === 0)\n  return even.reduce((sum, num) => sum + num, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const add = (a, b) => a + b;\n  const add3 = (a, b, c) => a + b + c;\n\n  const isSumTwo = arr.every((a, i) => i < k? add(a, arr[i]) <= 10 : add(a, arr[i]) <= 100);\n  if (isSumTwo) {\n    return add(arr[k - 1], arr[k]);\n  }\n  return add3(arr[k - 1], arr[k], arr[k + 1]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const result = [];\n    while (n > 1) {\n      if (n % 2 === 1) {\n        n = n / 2;\n        result.push(n);\n      } else {\n        n = 3 * n + 1;\n        result.push(n);\n      }\n    }\n    return result;\n  }\n  return collatz(n);\n}\n\nconsole.log(getOddCollatz(10));<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n\n  let days = {\n    '01': 31,\n    '03': 28,\n    '05': 31,\n    '07': 31,\n    '08': 30,\n    '10': 31,\n    '12': 30,\n  }\n  let months = {\n    '01': 31,\n    '03': 28,\n    '05': 31,\n    '07': 31,\n    '08': 30,\n    '10': 31,\n    '12': 30,\n  }\n\n  let months2 = {\n    '01': 31,\n    '03': 29,\n    '05': 31,\n    '07': 31,\n    '08': 30,\n    '10': 31,\n    '12': 30,\n  }\n\n  let days2 = {\n    '01': 31,\n    '02': 29,\n    '03': 31,\n    '04': 30,\n    '05': 31,\n    '06': 30,\n    '07': 31,\n    '08': 31,\n    '09': 30,\n    '10': 31,\n    '11': 30,\n    '12': 31,\n  }\n\n  let dates = /^(0[1-9]|1[0-2])\\-((0[1-9]|1[0-2]))\\-((19|20)\\d\\d)$/;\n\n  if (!dates.test(date)) {\n    return false;\n  }\n\n  let [y, m, d] = date.match(dates)[1].split('-');\n\n  if (isNaN(y) || isNaN(m) || isNaN(d)) {\n    return false;\n  }\n\n  if (y.length > 4) {\n    return false;\n  }\n\n  if (m.length > 2) {\n    return false;\n  }\n\n  if (d.length > 2) {\n    return false;\n  }\n\n  if (y < 100) {\n    if (m > 12 || m < 1) {\n      return false;\n    }\n  }\n\n  if (y > 1900 && y < 2100) {\n    if (m > 12 || m < 1) {\n      return false;\n    }\n  }\n\n  if (y > 2000) {\n    if (m > 12 || m < 1) {\n      return false;\n    }\n  }\n\n  if (y < 2000) {\n    if (m > 11 || m < 1) {\n      return false;\n    }\n  }\n\n  if (y > 1901 && y < 2000) {\n    if (m > 12 || m < 1) {\n      return false;\n    }\n  }\n\n  if (y < 2000) {\n    if (m > 11 || m < 1) {\n      return false;\n    }\n  }\n\n  if (y > 2000) {\n    if (m > 11 || m < 1) {\n      return false;\n    }\n  }\n\n  if (m > 12 || m < 1) {\n    return false;\n  }\n\n  if (d > days[m] || d < 1) {\n    return false;\n  }\n\n  if (m > 1 && m < 3 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 3 && m < 5 && d > days2[m]) {\n    return false;\n  }\n\n  if (m > 5 && m < 7 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 7 && m < 8 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 8 && m < 10 && d > days2[m]) {\n    return false;\n  }\n\n  if (m > 10 && m < 12 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 12 && m < 13 && d > days2[m]) {\n    return false;\n  }\n\n  if (m > 12 && m < 14 && d > days2[m]) {\n    return false;\n  }\n\n  if (m > 14 && m < 16 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 16 && m < 18 && d > days2[m]) {\n    return false;\n  }\n\n  if (m > 18 && m < 20 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 20 && m < 22 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 22 && m < 24 && d > days2[m]) {\n    return false;\n  }\n\n  if (m > 24 && m < 26 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 26 && m < 28 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 28 && m < 30 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 30 && m < 32 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 32 && m < 34 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 34 && m < 36 && d > days[m]) {\n    return false;\n  }\n\n  if (m > 36 && m < 38 && d >"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  if (!txt) return []\n  let word = \"\", words = [], i = 0\n  while ((i = txt.indexOf(\" \", i + 1))!== -1) {\n    words.push(word)\n    word = \"\"\n  }\n  words.push(word)\n  return words\n}\n\n/**\n  splitWordsBySpace(txt) -> [{\n    txt: \"Hello world!\",\n    words: [\"Hello\", \"world!\"]\n  },...]\n\n  Return a list of objects with \"txt\" and \"words\" properties. Each object is a word split\n  by a space.\n  */\nconst splitWordsBySpace = (txt) => {\n  if (!txt) return []\n  let words = splitWords(txt), word = {\n    txt: \"\",\n    words: []\n  }\n  for (let i = 0; i < words.length; i++) {\n    word.txt += words[i] + \" \"\n    word.words.push(words[i])\n  }\n  return [word]\n}\n\n/**\n  getOccurences(txt, word) -> number\n\n  Return the number of occurences of the word in the text.\n  */\nconst getOccurences = (txt, word) => {\n  if (!txt) return 0\n  let count = 0, i = 0\n  while ((i = txt.indexOf(word, i + 1))!== -1) {\n    count++\n  }\n  return count\n}\n\n/**\n  getOccurencesBySpace(txt, word) -> number\n\n  Return the number of occurences of the word in the text, split by a space.\n  */\nconst getOccurencesBySpace = (txt, word) => {\n  if (!txt) return 0\n  let count = 0, i = 0, words = splitWords(txt), wordCount = 0\n  while ((i = words.indexOf(word, i + 1))!== -1) {\n    wordCount++\n  }\n  return wordCount\n}\n\n/**\n  getWords(txt) -> [{\n    txt: \"Hello world!\",\n    words: [\"Hello\", \"world!\"]\n  },...]\n\n  Return a list of objects with \"txt\" and \"words\" properties. Each object is a word split\n  by a space.\n  */\nconst getWords = (txt) => {\n  if (!txt) return []\n  let words = splitWords(txt), word = {\n    txt: \"\",\n    words: []\n  }\n  for (let i = 0; i < words.length; i++) {\n    word.txt += words[i] + \" \"\n    word.words.push(words[i])\n  }\n  return [word]\n}\n\n/**\n  getWordsBySpace(txt) -> [{\n    txt: \"Hello world!\",\n    words: [\"Hello\", \"world!\"]\n  },...]\n\n  Return a list of objects with \"txt\" and \"words\" properties. Each object is a word split\n  by a space.\n  */\nconst getWordsBySpace = (txt) => {\n  if (!txt) return []\n  let words = splitWords(txt), word = {\n    txt: \"\",\n    words: []\n  }\n  for (let i = 0; i < words.length; i++) {\n    word.txt += words[i] + \" \"\n    word.words.push(words[i])\n  }\n  return [word]\n}\n\n/**\n  getWords(txt) -> [{\n    txt: \"Hello world!\",\n    words: [\"Hello\", \"world!\"]\n  },...]\n\n  Return a list of objects with \"txt\" and \"words\" properties. Each object is a word split\n  by a space.\n  */\nconst getWordsByWord = (txt) => {\n  if (!txt) return []\n  let words = splitWords(txt), word = {\n    txt: \"\",\n    words: []\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (words[i]!== \" \") {\n      word.txt += words[i] + \" \"\n    } else {\n      word.words.push(words[i])\n    }\n  }\n  return [word]\n}\n\nexport default {\n  getOccurences,\n  getOccurencesBySpace,\n  getWords,\n  getWordsBySpace,\n  getWordsByWord\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 1) return true\n  let n = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < n) return false\n    n = lst[i]\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\"\n  }\n\n  const start = Math.max(interval1.start, interval2.start)\n  const end = Math.min(interval1.end, interval2.end)\n\n  if (end - start < 2) {\n    return \"NO\"\n  }\n\n  const interval = [start, end]\n  const startIndex = interval.indexOf(start)\n  const endIndex = interval.indexOf(end)\n\n  let max = interval[startIndex]\n  let maxIndex = startIndex\n  let maxLength = interval[maxIndex]\n\n  for (let i = startIndex + 1; i < endIndex; i++) {\n    if (interval[i] > max) {\n      max = interval[i]\n      maxIndex = i\n      maxLength = interval[maxIndex]\n    }\n  }\n\n  if (maxLength < 2) {\n    return \"NO\"\n  }\n\n  return \"YES\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let prod = 1;\n    for (let n of arr) {\n        let sign = 1;\n        if (n < 0) {\n            sign = -1;\n            n = Math.abs(n);\n        }\n        prod *= n;\n        if (prod % 3 === 0) {\n            prod = Math.pow(prod, 1.0/3);\n        }\n        if (prod % 5 === 0) {\n            prod = Math.pow(prod, 1.0/5);\n        }\n        if (prod % 7 === 0) {\n            prod = Math.pow(prod, 1.0/7);\n        }\n        if (prod % 11 === 0) {\n            prod = Math.pow(prod, 1.0/11);\n        }\n        prod = sign * prod;\n    }\n    return prod;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const len = k;\n  const dp = new Array(n);\n  dp[0] = grid[0];\n  dp[1] = grid[1];\n  dp[2] = grid[2];\n  const dp_1 = dp.slice();\n  for (let i = 3; i < n; i++) {\n    dp[i] = {};\n    for (let j = 0; j < i; j++) {\n      dp[i][j] = {};\n      dp[i][j][1] = grid[i][j];\n      for (let x = 1; x < len; x++) {\n        let next = dp[i - 1][j][x];\n        dp[i][j][x + 1] = (dp[i - 1][j][x] < dp[i - 1][j][x - 1]? dp[i - 1][j][x] : dp[i - 1][j][x - 1]);\n        dp[i][j][x] = Math.min(dp[i][j][x], next);\n      }\n    }\n  }\n  return dp[n - 1][len - 1][len];\n};\n\nconst test = [\n  [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n  ],\n  [\n    [5,9,3],\n    [4,1,6],\n    [7,8,2]\n  ],\n  [\n    [1,2,3],\n    [4,1,6],\n    [7,8,2]\n  ]\n];\n\nfor (const t of test) {\n  console.log(minPath(t, 2));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let i = 1, j = 2, c = 3;\n  let res = [1];\n  while (i < n) {\n    res.push(c);\n    c = j;\n    j = i + j;\n    i = c;\n  }\n  return res;\n};\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  let d = n % 10;\n  return d === 0? 0 : d * (digits(n / 10) + 1);\n};\n\n//\n// @function digits(n)\n// @description Compute the number of digits in the number n\n// @param {number} n\n// @return {number}\n// @example\n// digits(233); // 3\n// digits(1234); // 4\n// digits(15); // 1\n// digits(0); // 0\n//\nexport const digits = (n) => {\n  const length = 0;\n  let m;\n\n  if (n === 0) {\n    return length;\n  }\n\n  while (n > 0) {\n    m = n % 10;\n    length++;\n    n = n / 10;\n  }\n\n  return length;\n};\n\n//\n// @function reverse(n)\n// @description Reverses a number\n// @param {number} n\n// @return {number}\n// @example\n// reverse(9); // 9\n// reverse(99); // 99\n//\nexport const reverse = (n) => {\n  const reversed = 0;\n\n  while (n > 0) {\n    reversed = reversed * 10 + n % 10;\n    n = n / 10;\n  }\n\n  return reversed;\n};\n\n//\n// @function reverse(n)\n// @description Reverses a number\n// @param {number} n\n// @return {number}\n// @example\n// reverse(9); // 9\n// reverse(99); // 99\n//\nexport const reverse = (n) => {\n  const reversed = 0;\n\n  while (n > 0) {\n    reversed = reversed * 10 + n % 10;\n    n = n / 10;\n  }\n\n  return reversed;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  return string.split('').every(element => element === '[')\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[[]][[[]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    if (!lst) return 0;\n    const result = lst.reduce((acc, n) => (acc + Math.pow(n, 2)), 0);\n    return result;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const reg = /(^[a-zA-Z]+|[a-zA-Z]+[0-9]+[a-zA-Z]+$)/\n  return reg.test(txt)\n}\n\n// Create a function that returns true if the first character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\nconst checkIfFirstCharIsALetter = (txt) => {\n  const reg = /(^[a-zA-Z]+|[a-zA-Z]+[0-9]+[a-zA-Z]+$)/\n  return reg.test(txt)\n}\n\n/* Create a function that returns true if the last character in a given string is an alphabetic character, and not part of a word, and the first character is an alphabetic character, and not part of a word, and the first and last characters are not both alphabetic characters, and the string is not empty. Note: \"Word\" is a group of characters separated by spaces.\nExamples:\ncheckIfLastCharIsALetter(\"apple pie\") ➞ false\ncheckIfLastCharIsALetter(\"apple pi e\") ➞ true\ncheckIfLastCharIsALetter(\"apple pi e \") ➞ false\ncheckIfLastCharIsALetter(\"\") ➞ false\ncheckIfLastCharIsALetter(\"abcd\") ➞ false\ncheckIfLastCharIsALetter(\"ab cd\") ➞ false\n*/\nconst checkIfLastCharIsALetterAndFirstCharIsALetter = (txt) => {\n  const reg = /(^[a-zA-Z]+|[a-zA-Z]+[0-9]+[a-zA-Z]+$)/\n  return reg.test(txt)\n}\n\n/* Create a function that returns true if the first character in a given string is an alphabetic character, and not part of a word, and the last character is an alphabetic character, and not part of a word, and the first and last characters are not both alphabetic characters, and the string is not empty. Note: \"Word\" is a group of characters separated by spaces.\nExamples:\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pie\") ➞ true\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pi e\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pi e \") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"ab cd\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"ab cd \") ➞ false\n*/\nconst checkIfFirstCharIsALetterAndLastCharIsALetter = (txt) => {\n  const reg = /(^[a-zA-Z]+|[a-zA-Z]+[0-9]+[a-zA-Z]+$)/\n  return reg.test(txt)\n}\n\n/* Create a function that returns true if the last character in a given string is an alphabetic character, and not part of a word, and the first character is an alphabetic character, and not part of a word, and the first and last characters are not both alphabetic characters, and the string is not empty. Note: \"Word\" is a group of characters separated by spaces.\nExamples:\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pie\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pi e\") ➞ true\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pi e \") ➞ true\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"ab cd\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"ab cd \") ➞ false\n*/\nconst checkIfFirstAndLastCharAreALetter = (txt) => {\n  const reg = /(^[a-zA-Z]+|[a-zA-Z]+[0-9]+[a-zA-Z]+$)/\n  return reg.test(txt)\n}\n\n/* Create a function that returns true if the first and last characters in a given string are both alphabetic characters, and not part of a word, and the string is not empty. Note: \"Word\" is a group of characters separated by spaces.\nExamples:\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pie\") ➞ true\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pi e\") ➞ true\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"apple pi e \") ➞ true\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"ab cd\") ➞ false\ncheckIfLastCharIsALetterAndFirstCharIsALetter(\"ab cd \") ➞ false\n*/\nconst checkIfFirstAndLastCharAreALetterAndBothAreALetter = (txt) => {\n  const reg = /(^[a-zA-Z]+|[a-zA-Z]+[0-9]+[a-zA-Z]+$)/\n  return reg.test(txt)\n}\n\n// Create a function that returns true if the last character in a given string is an alphabetic character, and not part of a word, and the first character is an alphabetic character, and not part of a word, and the first and last characters are not both alphabetic characters, and the string is not empty. Note: \"Word\" is a group of characters separated by spaces.\nconst checkIfLastCharIsALetterAndFirstCharIsALetterAndBothAreALetter = (txt) => {\n  const reg = /(^[a-zA-"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if(!Array.isArray(arr)) {\n    throw new Error('expected an array as first argument');\n  }\n  if(arr.length === 0) {\n    throw new Error('the array is empty');\n  }\n  let last = arr.length - 1;\n  let i = 0;\n  while(i <= last && arr[i] <= arr[i + 1]) {\n    i++;\n  }\n  return i;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest, smallest;\n  if (lst.length === 0) {\n    return largestSmallestIntegers([0]);\n  }\n  let max = lst[0];\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  if (max < min) {\n    return largestSmallestIntegers([max, min]);\n  }\n  return largestSmallestIntegers([min, max]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === typeof b) {\n    if (typeof a ==='string') {\n      if (typeof b ==='string') {\n        return a > b? a : b;\n      }\n    }\n    return a > b? a : b;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? b : a;\n    }\n    return b > a? a : b;\n  }\n  return a > b? a : b;\n};\n\n/*\n  Create a function that takes two real numbers, and returns the larger number\n  of them.\n  Return null if the numbers are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (typeof a === typeof b) {\n    if (typeof a ==='string') {\n      if (typeof b ==='string') {\n        return a > b? a : b;\n      }\n    }\n    return a > b? a : b;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? b : a;\n    }\n    return b > a? a : b;\n  }\n  return a > b? a : b;\n};\n\nexport { compareOne, compareTwo };\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n    var sum = n;\n    while (sum > 0) {\n        if (sum % 2 === 0) {\n            sum = sum / 2;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isEqualToSumEven(6));\nconsole.log(isEqualToSumEven(8));\nconsole.log(isEqualToSumEven(16));\nconsole.log(isEqualToSumEven(18));\nconsole.log(isEqualToSumEven(28));\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // base case\n  if (n < 1) {\n    return 1;\n  }\n\n  // recursive case\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n}\n\n/* The function will accept an integer as input and should return the sum of the\n  special factorials of the first n terms of the Fibonacci sequence.\n  */\nconst fibonacciSum = (n) => {\n  // base case\n  if (n < 2) {\n    return 1;\n  }\n\n  // recursive case\n  return fibonacciSum(n - 1) + fibonacciSum(n - 2);\n}\n\n// console.log(fibonacciSum(15));\n\n// console.log(specialFactorial(3));\n// console.log(specialFactorial(10));\n// console.log(specialFactorial(20));\n// console.log(specialFactorial(30));\n// console.log(specialFactorial(100));\n// console.log(specialFactorial(500));\n\n/*The function will accept an integer as input and should return the sum of the\n  special factorials of the first n terms of the Lucas sequence.\n  */\nconst lucasSum = (n) => {\n  // base case\n  if (n < 2) {\n    return 1;\n  }\n\n  // recursive case\n  return lucasSum(n - 1) + lucasSum(n - 2);\n}\n\n// console.log(lucasSum(20));\n// console.log(lucasSum(30));\n// console.log(lucasSum(100));\n// console.log(lucasSum(500));\n\n// console.log(fibonacciSum(30));\n// console.log(fibonacciSum(100));\n// console.log(fibonacciSum(500));\n\n// console.log(lucasSum(30));\n// console.log(lucasSum(100));\n// console.log(lucasSum(500));\n\n// console.log(specialFactorial(10));\n// console.log(specialFactorial(20));\n// console.log(specialFactorial(30));\n// console.log(specialFactorial(100));\n// console.log(specialFactorial(500));\n// console.log(specialFactorial(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text.replace(/\\s+/g, '_')\n  let hasSpace = result.indexOf(' ') >= 0\n  if (hasSpace) {\n    while (hasSpace) {\n      let lastSpace = result.lastIndexOf(' ')\n      result = result.substring(0, lastSpace) + '-' + result.substring(lastSpace)\n      hasSpace = result.indexOf(' ') >= 0\n    }\n  }\n  return result\n}\n\n/*\n  Remove all whitespace from a string\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\" Example \") == \"Example\"\n  fixSpaces(\" Example   \") == \"Example\"\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s+/g, '')\n}\n\nconst getText = (string) => {\n  let result = removeWhitespace(string)\n  result = fixSpaces(result)\n  return result\n}\n\nconst hasSpace = (text) => {\n  return text.indexOf(' ') >= 0\n}\n\nconst getTextWithSpaces = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getFirstLetters = (string) => {\n  let result = removeWhitespace(string)\n  let hasSpace = result.indexOf(' ') >= 0\n  if (hasSpace) {\n    let split = result.split(' ')\n    return split[0]\n  } else {\n    return result\n  }\n}\n\nconst getLastLetters = (string) => {\n  let result = removeWhitespace(string)\n  let hasSpace = result.indexOf(' ') >= 0\n  if (hasSpace) {\n    let split = result.split(' ')\n    return split[1]\n  } else {\n    return result\n  }\n}\n\nconst getNumber = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getNumberWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getWord = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getWordWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getNumberWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getNumberWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getLetters = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getLettersWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getNumberLetters = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getNumberLettersWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getNumberLettersWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getNumberLettersWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getNumberWordsLetters = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getNumberWordsLettersWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getNumberWordsLettersWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getNumberWordsLettersWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getAllLetters = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getAllLettersWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getAllLettersWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getAllLettersWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getAllLettersWordsWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getAllLettersWordsWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getAllWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getAllWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getAllWordsWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getAllWordsWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n\nconst getAllWordsWordsWords = (string) => {\n  let result = getText(string)\n  return result\n}\n\nconst getAllWordsWordsWordsWithSpaces = (string) => {\n  let result = getTextWithSpaces(string)\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let name = file_name;\n  let valid = false;\n  \n  //Check the name length\n  if (name.length <= 3) {\n    valid = true;\n  }\n  else {\n    valid = false;\n  }\n  \n  //Check the name contains exactly one '.'\n  let dotCount = 0;\n  for (let i = 0; i < name.length; i++) {\n    if (name[i] === '.') {\n      dotCount++;\n    }\n  }\n  if (dotCount === 1) {\n    valid = true;\n  }\n  else {\n    valid = false;\n  }\n  \n  //Check the file's name start with a latin alphapet letter\n  let startChar = false;\n  for (let i = 0; i < name.length; i++) {\n    if (name[i] >= 'a' && name[i] <= 'z') {\n      startChar = true;\n    }\n    else if (name[i] >= 'A' && name[i] <= 'Z') {\n      startChar = true;\n    }\n    else {\n      startChar = false;\n    }\n  }\n  if (startChar) {\n    valid = true;\n  }\n  else {\n    valid = false;\n  }\n  \n  //Check the file's name contains the file extension\n  let fileExt = false;\n  for (let i = 0; i < name.length; i++) {\n    if (name[i] >= 'a' && name[i] <= 'z') {\n      fileExt = true;\n    }\n    else if (name[i] >= 'A' && name[i] <= 'Z') {\n      fileExt = true;\n    }\n    else if (name[i] >= '0' && name[i] <= '9') {\n      fileExt = true;\n    }\n    else if (name[i] === '.') {\n      fileExt = true;\n    }\n    else {\n      fileExt = false;\n    }\n  }\n  if (fileExt) {\n    valid = true;\n  }\n  else {\n    valid = false;\n  }\n  \n  return valid;\n};\n\nmodule.exports = fileNameCheck;<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  var sum = 0;\n  var len = lst.length;\n  for(var i = 0; i < len; i++){\n    if(i % 3 === 0 && i % 4 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \")\n  let wordsLength = words.length\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  let isPrime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) return false\n      i += 1\n    }\n    return true\n  }\n  let sortedWords = []\n  let word = \"\"\n  let index = 0\n  while (index < wordsLength) {\n    if (words[index]!== \"\") {\n      word += words[index]\n      sortedWords.push(word)\n      word = \"\"\n    }\n    index += 1\n  }\n  if (word!== \"\") {\n    sortedWords.push(word)\n  }\n  let sortedWordsLength = sortedWords.length\n  let sortedWordsIndex = 0\n  while (sortedWordsIndex < sortedWordsLength) {\n    if (isPrime(sortedWords[sortedWordsIndex].length)) {\n      words.push(sortedWords[sortedWordsIndex])\n    }\n    sortedWordsIndex += 1\n  }\n  return words\n}\n\nlet sentence = \"This is a test\"\nconsole.log(wordsInSentence(sentence))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [num, den] = parse(x);\n  const [xn, dn] = parse(n);\n  return num === xn && den === dn;\n};\n\nexport default simplify;\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    const map = {};\n    let sum = 0;\n    nums.forEach(n => {\n        let p = n.toString().split(\"\");\n        p.forEach(digit => {\n            if (!map[digit]) {\n                map[digit] = 0;\n            }\n            map[digit]++;\n        });\n        sum += p.reduce((a, b) => {\n            return a + b;\n        });\n    });\n    let result = [];\n    Object.keys(map).sort().forEach(digit => {\n        let count = map[digit];\n        while (count > 0) {\n            result.push(parseInt(digit));\n            count--;\n        }\n    });\n    return result;\n};\n\n// Test\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\nconsole.log(orderByPoints([]));\nconsole.log(orderByPoints([1, 11, -1, -11, -12, 12, 99, 999, 1000]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num))) - 1) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter2 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 1)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter3 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 2)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter4 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 3)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter5 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 4)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter6 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 5)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter7 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 6)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter8 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 7)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter9 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 8)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter10 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 9)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter11 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 10)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter12 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 11)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter13 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 12)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter14 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 13)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter15 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 14)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter16 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 15)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter17 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 16)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter18 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) - 17)) {\n            return true;\n        }\n        return false;\n    });\n};\n\nconst specialFilter19 = (nums) => {\n    return nums.filter((num) => {\n        if (num % 2 === 1 && num === Math.pow(10, Math.floor(Math.log10(num)) -"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const result = [];\n  const mod = (a, b) => a % b;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const k = n - j;\n      if (mod(i, j) === 0 && mod(j, k) === 0) {\n        result.push([i, j, k]);\n      }\n    }\n  }\n\n  return result.length;\n};\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of pairs (a [i], a [j]) from a where i < j and a [i] + a [j] = a[i] + a[j] + 1 is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 3)\n      a = [1, 4, 9, 16, 25]\n      The only valid pair is (1, 4)\n  */\nconst getMaxPairs = (n) => {\n  const result = [];\n  const mod = (a, b) => a % b;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const k = n - j;\n      if (mod(i, j) === 0 && mod(i, k) === 0) {\n        result.push([i, j]);\n      }\n    }\n  }\n\n  return result.length;\n};\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of odd triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] = a[i] + a[j] + 1 is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid odd triple is (1, 3, 7).\n      a = [1, 4, 9, 16, 25]\n      The only valid odd triple is (1, 4, 9).\n      a = [1, 5, 11, 17, 29]\n      The only valid odd triple is (1, 5, 11).\n  */\nconst getMaxOddTriples = (n) => {\n  const result = [];\n  const mod = (a, b) => a % b;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const k = n - j;\n      if (mod(i, j) === 0 && mod(i, k) === 0) {\n        if (mod(j, k) === 0) {\n          result.push([i, j, k]);\n        }\n      }\n    }\n  }\n\n  return result.length;\n};\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of odd pairs (a [i], a [j]) from a where i < j and a [i] + a [j] = a[i] + a[j] + 1 is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid odd pair is (1, 3)\n      a = [1, 4, 9, 16, 25]\n      The only valid odd pair is (1, 4)\n  */\nconst getMaxOddPairs = (n) => {\n  const result = [];\n  const mod = (a, b) => a % b;\n\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const k = n - j;\n      if (mod(i, j) === 0 && mod(i, k) === 0) {\n        if (mod(j, k) === 0) {\n          result.push([i, j]);\n        }\n      }\n    }\n  }\n\n  return result.length;\n};\n\nexport { getMaxTriples, getMaxPairs, getMaxOddTriples, getMaxOddPairs };\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = [planet1, planet2];\n  let minDist = Infinity;\n  let minPlanet = null;\n  for (let i = 0; i < planets.length; i++) {\n    for (let j = i + 1; j < planets.length; j++) {\n      let dist = distance(planet1, planet2);\n      if (dist < minDist) {\n        minDist = dist;\n        minPlanet = planets[j];\n      }\n    }\n  }\n  return (minPlanet);\n}\n\nlet planet1 = \"Mercury\";\nlet planet2 = \"Neptune\";\nconsole.log(bf(planet1, planet2));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  if (!lst) {\n    return [];\n  }\n  const result = [];\n  for (let i = 0, len = lst.length; i < len; i++) {\n    if (i === 0) {\n      result.push(lst[i]);\n    } else {\n      const last = result[result.length - 1];\n      if (lst[i].length === last.length) {\n        if (lst[i].localeCompare(last) > 0) {\n          result.push(lst[i]);\n        }\n      } else if (lst[i].length > last.length) {\n        result.push(lst[i]);\n      }\n    }\n  }\n  return result.sort((a, b) => a.length - b.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) {\n    return true\n  } else if (n === 1 || n % 2 === 0) {\n    return false\n  } else {\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/*A program that should return the value of x if n is a prime and should return the value of y otherwise.\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst mod = (n, x, y) => {\n  if (n === 2 || n === 3) {\n    return x\n  } else if (n === 1 || n % 2 === 0) {\n    return y\n  } else {\n    let k = 3;\n    while (k * k <= n) {\n      if (n % k === 0) {\n        return x\n      }\n      k += 2\n    }\n    return y\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst.length) {\n    return 0\n  }\n\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\nconst list = [1, 3, 2, 0]\nconsole.log(doubleTheDifference(list))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let errors = 0;\n  for (let i = 0; i < game.length; i++) {\n    let score = game[i];\n    let guess = guess[i];\n    if (score === guess) {\n      errors += 0;\n    } else if (score < guess) {\n      errors += Math.abs(guess - score);\n    } else {\n      errors += Math.abs(guess - score);\n    }\n  }\n  return errors;\n};\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));\nconsole.log(compare([4,1,1,0,0,6],[0,0,0,0,0,0]));<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = 0;\n  const extension = '';\n  for (let extension_name of extensions) {\n    if (extension_name.length > strength) {\n      extension = extension_name;\n      strength = strengthOfExtension(extension_name);\n    }\n  }\n  return class_name + '.' + extension;\n}\n\nconst strengthOfExtension = extension => {\n  return extension.match(/[A-Z]/g).reduce((acc, curr) => {\n    return (curr.toUpperCase().charCodeAt(0) - acc) / (curr.length + 1);\n  }, -1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const arr = a.split(\"\");\n  const bArr = b.split(\"\");\n  const length = Math.max(a.length, b.length);\n  for(let i = 0; i < length; i++){\n    if(arr[i] === bArr[i] || arr[i].toLowerCase() === bArr[i].toLowerCase()){\n      continue;\n    }\n    for(let j = i + 1; j < length; j++){\n      if(arr[i] === bArr[j] || arr[i].toLowerCase() === bArr[j].toLowerCase()){\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n//\n// function fib(n) {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// }\n//\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n// const fib = (n) => {\n//   if (n <= 1) {\n//     return 1;\n//   }\n//   return fib(n - 1) + fib(n - 2);\n// };\n//\n// console.log(fib(10));\n//\n"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    const count = [0, 0];\n    for (let i = 0; i < num.length; i++) {\n        const n = num[i];\n        if (n % 2 === 0) count[0]++;\n        else count[1]++;\n    }\n    return [count[0], count[1]];\n};\n\n/*\n  Gets the greatest common divisor of two numbers\n\n   Example:\n      greatestCommonDivisor(3, 7) ==> 3\n\n      greatestCommonDivisor(5, 5) ==> 5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (a === 0) return b;\n    if (b === 0) return a;\n    return greatestCommonDivisor(Math.abs(b), Math.abs(a));\n};\n\n/*\n  Gets the number of digits in a number\n\n   Example:\n      numberOfDigits(1) ==> 1\n      numberOfDigits(3) ==> 1\n      numberOfDigits(5) ==> 2\n      numberOfDigits(123) ==> 3\n  */\nconst numberOfDigits = (num) => {\n    let count = 0;\n    while (num > 0) {\n        num = num / 10;\n        count++;\n    }\n    return count;\n};\n\n/*\n  Gets the next highest power of two number\n\n   Example:\n      nextHighestPowerOfTwo(1) ==> 2\n      nextHighestPowerOfTwo(2) ==> 4\n      nextHighestPowerOfTwo(3) ==> 4\n      nextHighestPowerOfTwo(4) ==> 4\n      nextHighestPowerOfTwo(5) ==> 8\n      nextHighestPowerOfTwo(6) ==> 8\n      nextHighestPowerOfTwo(7) ==> 8\n      nextHighestPowerOfTwo(8) ==> 8\n  */\nconst nextHighestPowerOfTwo = (num) => {\n    if (num === 1) return 1;\n    const bits = [];\n    while (num!== 0) {\n        bits.push(num & 1);\n        num = num >> 1;\n    }\n    return Math.pow(2, bits.length - 1) - 1;\n};\n\n/*\n  Gets the number of 1s in an array\n\n   Example:\n      numberOfOnes([1, 0, 1]) ==> 2\n      numberOfOnes([1, 0, 0]) ==> 1\n      numberOfOnes([1, 1, 1]) ==> 3\n      numberOfOnes([0, 0, 0]) ==> 0\n  */\nconst numberOfOnes = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] === 1) count++;\n    }\n    return count;\n};\n\n/*\n  Gets the number of 0s in an array\n\n   Example:\n      numberOfZeroes([1, 0, 1]) ==> 1\n      numberOfZeroes([1, 0, 0]) ==> 2\n      numberOfZeroes([1, 1, 1]) ==> 0\n      numberOfZeroes([0, 0, 0]) ==> 3\n  */\nconst numberOfZeroes = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] === 0) count++;\n    }\n    return count;\n};\n\n/*\n  Gets the number of 1s in an array that are not the first in the array\n\n   Example:\n      numberOfOnesNotFirst([1, 0, 1]) ==> 1\n      numberOfOnesNotFirst([1, 0, 0]) ==> 2\n      numberOfOnesNotFirst([1, 1, 1]) ==> 0\n      numberOfOnesNotFirst([0, 0, 0]) ==> 3\n  */\nconst numberOfOnesNotFirst = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] === 1 && i > 0) count++;\n    }\n    return count;\n};\n\n/*\n  Gets the number of 0s in an array that are not the first in the array\n\n   Example:\n      numberOfZeroesNotFirst([1, 0, 1]) ==> 1\n      numberOfZeroesNotFirst([1, 0, 0]) ==> 2\n      numberOfZeroesNotFirst([1, 1, 1]) ==> 0\n      numberOfZeroesNotFirst([0, 0, 0]) ==> 3\n  */\nconst numberOfZeroesNotFirst = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i] === 0 && i > 0) count++;\n    }\n    return count;\n};\n\n/*\n  Gets the total number of 1s in an array\n\n   Example:\n      numberOfOnesTotal([1, 0, 1]) ==> 3\n      numberOfOnesTotal([1, 0, 0]) ==> 2\n      numberOfOnesTotal([1, 1, 1]) ==> 3\n      numberOfOnesTotal([0, 0, 0]) ==> 1\n  */\nconst numberOfOnesTotal = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        count += num[i];\n    }\n    return count;\n};\n\n/*\n  Gets the total number of 0s in an array\n\n   Example:\n      numberOfZeroesTotal([1, 0, 1]) ==> 1\n      numberOfZeroesTotal([1, 0, 0]) ==> 2\n      numberOfZeroesTotal([1, 1, 1]) ==> 0\n      numberOfZeroesTotal([0, 0, 0]) ==> 3\n  */\nconst numberOfZeroesTotal = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        count += num[i];\n    }\n    return count;\n};\n\n/*\n  Gets the number"}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if(number === 0) {\n    return 'zero';\n  } else if(number === 1) {\n    return 'one';\n  } else if(number === 2) {\n    return 'two';\n  } else if(number === 3) {\n    return 'three';\n  } else if(number === 4) {\n    return 'four';\n  } else if(number === 5) {\n    return 'five';\n  } else if(number === 6) {\n    return'six';\n  } else if(number === 7) {\n    return'seven';\n  } else if(number === 8) {\n    return 'eight';\n  } else if(number === 9) {\n    return 'nine';\n  } else if(number === 10) {\n    return 'ten';\n  } else if(number === 11) {\n    return 'eleven';\n  } else if(number === 12) {\n    return 'twelve';\n  } else if(number === 13) {\n    return 'thirteen';\n  } else if(number === 14) {\n    return 'fourteen';\n  } else if(number === 15) {\n    return 'fifteen';\n  } else if(number === 16) {\n    return'sixteen';\n  } else if(number === 17) {\n    return'seventeen';\n  } else if(number === 18) {\n    return 'eighteen';\n  } else if(number === 19) {\n    return 'nineteen';\n  } else if(number === 20) {\n    return 'twenty';\n  } else if(number === 30) {\n    return 'thirty';\n  } else if(number === 40) {\n    return 'forty';\n  } else if(number === 50) {\n    return 'fifty';\n  } else if(number === 60) {\n    return'sixty';\n  } else if(number === 70) {\n    return'seventy';\n  } else if(number === 80) {\n    return 'eighty';\n  } else if(number === 90) {\n    return 'ninety';\n  } else {\n    let ones = number % 10;\n    let tens = number % 100;\n    let hundreds = number % 1000;\n    let thousands = number % 10000;\n    let thousands_and_hundreds = hundreds / 100;\n    let hundreds_and_tens = hundreds % 100;\n    let hundreds_and_ones = ones + tens;\n\n    if(hundreds_and_tens === 1) {\n      return 'one';\n    } else if(hundreds_and_tens === 2) {\n      return 'two';\n    } else if(hundreds_and_tens === 3) {\n      return 'three';\n    } else if(hundreds_and_tens === 4) {\n      return 'four';\n    } else if(hundreds_and_tens === 5) {\n      return 'five';\n    } else if(hundreds_and_tens === 6) {\n      return'six';\n    } else if(hundreds_and_tens === 7) {\n      return'seven';\n    } else if(hundreds_and_tens === 8) {\n      return 'eight';\n    } else if(hundreds_and_tens === 9) {\n      return 'nine';\n    } else if(hundreds_and_tens === 10) {\n      return 'ten';\n    } else if(hundreds_and_tens === 11) {\n      return 'eleven';\n    } else if(hundreds_and_tens === 12) {\n      return 'twelve';\n    } else if(hundreds_and_tens === 13) {\n      return 'thirteen';\n    } else if(hundreds_and_tens === 14) {\n      return 'fourteen';\n    } else if(hundreds_and_tens === 15) {\n      return 'fifteen';\n    } else if(hundreds_and_tens === 16) {\n      return'sixteen';\n    } else if(hundreds_and_tens === 17) {\n      return'seventeen';\n    } else if(hundreds_and_tens === 18) {\n      return 'eighteen';\n    } else if(hundreds_and_tens === 19) {\n      return 'nineteen';\n    } else if(hundreds_and_tens === 20) {\n      return 'twenty';\n    } else if(hundreds_and_tens === 30) {\n      return 'thirty';\n    } else if(hundreds_and_tens === 40) {\n      return 'forty';\n    } else if(hundreds_and_tens === 50) {\n      return 'fifty';\n    } else if(hundreds_and_tens === 60) {\n      return'sixty';\n    } else if(hundreds_and_tens === 70) {\n      return'seventy';\n    } else if(hundreds_and_tens === 80) {\n      return 'eighty';\n    } else if(hundreds_and_tens === 90) {\n      return 'ninety';\n    } else if(thousands > 0) {\n      return `${thousands} thousand`;\n    } else if(thousands_and_hundreds === 1) {\n      return 'one hundred';\n    } else if(thousands_and_hundreds === 2) {\n      return 'two hundred';\n    } else if(thousands_and_hundreds === 3) {\n      return 'three hundred';\n    } else if(thousands_and_hundreds === 4) {\n      return 'four hundred';\n    } else if(thousands_and_hundreds === 5) {\n      return 'five hundred';\n    } else if(thousands_and_hundreds === 6) {\n      return'six hundred';\n    } else if(thousands_and_hundreds === 7) {\n      return'seven hundred';\n    } else if(thousands_and_hundreds === 8) {\n      return 'eight hundred';\n    } else if(thousands_and"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b) {\n    return false;\n  }\n  if (a === c) {\n    return false;\n  }\n  if (b === c) {\n    return false;\n  }\n  return (a + b < c) && (a + c < b) && (b + c < a);\n};\n\nconst triangle = {\n  leftAngleTriangle: leftAngleTriangle,\n  rightAngleTriangle: rightAngleTriangle,\n};\n\nmodule.exports = triangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const all = words.reduce((prev, curr) => prev + curr, '')\n  const max = words.reduce((prev, curr) => Math.max(prev, curr.length), 0)\n  const unique = {}\n  let maxChar = 0\n  words.forEach(word => {\n    for (let i = 0; i < word.length; i++) {\n      if (unique[word[i]] === undefined) {\n        unique[word[i]] = 1\n      } else {\n        unique[word[i]]++\n      }\n      if (unique[word[i]] > maxChar) {\n        maxChar = unique[word[i]]\n        max = word\n      }\n    }\n  })\n  return max\n}\n\nconst words = [\n  \"the\",\n  \"in\",\n  \"of\",\n  \"and\",\n  \"the\",\n  \"to\",\n  \"that\",\n  \"it\"\n]\n\nconsole.log(findMax(words))<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    return [number + need - remaining, remaining];\n}\n\nconst numberOfCarrots = (number, need, remaining) => {\n    return eat(number, need, remaining);\n}\n\nconst run = (numberOfCarrots, need, remaining) => {\n    return numberOfCarrots(numberOfCarrots, need, remaining);\n}\n\nconsole.log(run(numberOfCarrots, need, remaining));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // Base Case:\n  if (operand.length === 0) {\n    throw new Error(\"Array must have at least one element\");\n  }\n\n  if (operand.length === 1) {\n    // Operand is a list of one element\n    return operand[0];\n  }\n\n  // Algebraic Operations\n  const isOperator = operator.length === operand.length;\n\n  if (!isOperator) {\n    throw new Error(\"Operator list and Operand list must be of same length\");\n  }\n\n  return _reduce(operand, (acc, element) => {\n    let result = acc;\n    for (let i = 0; i < operator.length; i++) {\n      const operatorItem = operator[i];\n      const operandItem = operand[i];\n      if (operatorItem === '+') {\n        result += operandItem;\n      } else if (operatorItem === '-') {\n        result -= operandItem;\n      } else if (operatorItem === '*') {\n        result *= operandItem;\n      } else if (operatorItem === '/') {\n        result /= operandItem;\n      } else if (operatorItem === '**') {\n        result = Math.pow(result, operandItem);\n      } else {\n        throw new Error(\"Operation not supported\");\n      }\n    }\n    return result;\n  }, 0);\n};\n\nconst _reduce = (array, acc, index) => {\n  if (index < array.length - 1) {\n    return acc + array[index + 1];\n  }\n  return acc;\n};\n\nexport default doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const reversed = s.split('').reverse().join('');\n  return reversed.split('').reverse().join('');\n}\n\nconsole.log(solve('1234'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  text = text.trim();\n  if (text === \"\") return \"0000000000000000000000000000000000000000\";\n\n  let hash = crypto.createHash(\"md5\");\n  hash.update(text);\n  return hash.digest(\"hex\");\n};\n\n/**\n  Takes a string and returns a function that will take a string to produce a string.\n\n  >>> (f(\"Hello world\"))(\"World!\") == \"World!\"\n  */\nconst f = (text) => (world) => text + world;\n\nmodule.exports = {\n  stringToMd5,\n  f\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('Arguments must be sorted');\n  }\n\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
