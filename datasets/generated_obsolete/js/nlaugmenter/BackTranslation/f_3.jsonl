{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = sorted(numbers);\n\n  const distance = (x, y) => {\n    return Math.abs(x - y);\n  };\n\n  const distanceIsSmallerThanThreshold = (x, y) => {\n    return distance(x, y) < threshold;\n  };\n\n  const anyTwoElementsAreSmallerThanThreshold = (x, y) => {\n    return distanceIsSmallerThanThreshold(x, y) || distanceIsSmallerThanThreshold(y, x);\n  };\n\n  return!all(\n    numbers.map(x => anyTwoElementsAreSmallerThanThreshold(sortedNumbers, x))\n  );\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let list = [];\n  const paren_groups = paren_string.split(/\\(|\\)/g);\n  for (let i = 0; i < paren_groups.length; i++) {\n    if (paren_groups[i].length > 0) {\n      list.push(separateParenGroups(paren_groups[i]));\n    }\n  }\n  return list;\n};\n\nexport default {\n  parse,\n  separateParenGroups,\n  replaceBrackets\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integralPart = Math.floor(number);\n  let decimalPart = number - integralPart;\n\n  // If the decimal part is equal to 0, return the integral part\n  if (decimalPart === 0) return integralPart;\n\n  // Get the largest integer smaller than the number\n  const largestInteger = Math.floor(Math.pow(10, Math.log(decimalPart) / Math.log(10)));\n\n  // Return the integral part of the number\n  return integralPart - largestInteger;\n};\n\n/*\n  * Function that returns the total number of integers in the given string\n  *\n  * @param {String} number\n  * @returns {Number}\n  */\nconst getNumberOfIntegers = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the integer part of the string\n  let integerPart = parseInt(number, 10);\n\n  // Check if the string is not a number\n  if (!isNaN(integerPart)) {\n    // Get the number of digits in the string\n    let numberOfDigits = number.length - (number.indexOf('.') === -1? 0 : number.indexOf('.'));\n\n    // Return the total number of integers in the string\n    return numberOfDigits * Math.pow(10, Math.floor(Math.log(integerPart) / Math.log(10)));\n  }\n\n  return 0;\n};\n\n/*\n  * Function that returns the total number of decimal places in the given number\n  *\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst getNumberOfDecimalPlaces = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the integer part of the string\n  let integerPart = parseInt(number, 10);\n\n  // Check if the string is a number\n  if (!isNaN(integerPart)) {\n    // Get the number of digits in the string\n    let numberOfDigits = number.length - (number.indexOf('.') === -1? 0 : number.indexOf('.'));\n\n    // Return the total number of decimal places in the string\n    return numberOfDigits - integerPart.toString().length;\n  }\n\n  return 0;\n};\n\n/*\n  * Function that returns the number of zeros in the given string\n  *\n  * @param {String} number\n  * @returns {Number}\n  */\nconst getNumberOfZeros = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the number of digits in the string\n  let numberOfDigits = number.length - (number.indexOf('.') === -1? 0 : number.indexOf('.'));\n\n  // Return the number of zeros in the string\n  return numberOfDigits - number.toString().replace(/\\d/g, '').length;\n};\n\n/*\n  * Function that returns the number of decimal digits in the given number\n  *\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst getNumberOfDecimalDigits = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the number of digits in the string\n  let numberOfDigits = number.toString().replace(/\\d/g, '').length;\n\n  // Return the number of decimal digits in the string\n  return numberOfDigits - number.toString().replace(/\\d/g, '').length;\n};\n\n/*\n  * Function that returns the total number of digits in the given number\n  *\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst getNumberOfDigits = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the number of digits in the string\n  let numberOfDigits = number.toString().length;\n\n  // Return the number of decimal digits in the string\n  return numberOfDigits - number.toString().replace(/\\d/g, '').length;\n};\n\n/*\n  * Function that returns the total number of digits in the given string\n  *\n  * @param {String} number\n  * @returns {Number}\n  */\nconst getNumberOfDigitsInString = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the number of digits in the string\n  let numberOfDigits = number.toString().replace(/\\d/g, '').length;\n\n  // Return the number of decimal digits in the string\n  return numberOfDigits;\n};\n\n/*\n  * Function that returns the string with the specified number of zeros\n  *\n  * @param {Number} number\n  * @param {Number} numberOfZeros\n  * @returns {String}\n  */\nconst getNumberOfZerosInString = (number, numberOfZeros) => {\n  // Check if the number of zeros is not empty\n  if (!numberOfZeros) return number;\n\n  // Get the number of digits in the string\n  let numberOfDigits = number.toString().replace(/\\d/g, '').length;\n\n  // Get the number of zeros in the string\n  let numberOfZerosInString = numberOfZeros;\n\n  // Return the number of zeros in the string\n  return numberOfZerosInString > numberOfDigits - numberOfZerosInString? numberOfZerosInString : numberOfDigits - numberOfZerosInString;\n};\n\n/*\n  * Function that returns the number of decimal digits in the given number\n  *\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst getNumberOfDecimalDigitsInString = (number) => {\n  // Check if the string is not empty\n  if (!number) return 0;\n\n  // Get the number of digits in the string\n  let numberOfDigits = number.toString().replace(/\\d/g, '').length;\n\n  // Return the number of decimal digits in the"}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let total = 0;\n\n  operations.forEach( (val) => {\n    total += val;\n  });\n\n  if (total < 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  return (n) => {\n    return Math.abs(n - mean);\n  };\n};\n\n/**\n  * @function\n  * @description\n  * <p>Calculates the median of a list of numbers.</p>\n  *\n  * @param {array} numbers - An array of numbers.\n  * @returns {number} The median.\n  *\n  * @example\n  *\n  * For a given list of input numbers, calculate the median of this dataset.\n  * The median is the middle value of a sorted list of numbers.\n  * >>> median([1.0, 2.0, 3.0, 4.0])\n  * 2.0\n  */\nconst median = (numbers) => {\n  let array = _.sortBy(numbers, (number) => number);\n  if (array.length % 2 === 0) {\n    return (array[Math.floor(array.length / 2) - 1] + array[Math.floor(array.length / 2)]) / 2;\n  } else {\n    return array[Math.floor(array.length / 2)];\n  }\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  median\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4], \"&\")\n  '1&2&4&3'\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"&\")\n  '1&2&4&3&5'\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"*\")\n  '1*2*4*3*5'\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"x\")\n  '1x2x4x3x5'\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"^\")\n  '1^2^4^3^5'\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"x\")\n  '1x2x4x3x5'\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"x\")\n  '1x2x4x3x5'\n  */\nconst intersperse8 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([1, 2, 3, 4, 5], \"x\")\n  '1x2x4x3x5'\n  */\nconst intersperse9 = (numbers, delimeter) => {\n  const length = numbers.length\n  const nums = []\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      nums.push(numbers[i])\n    } else {\n      nums.push(numbers[i] + delimeter)\n    }\n  }\n  return nums.join(delimeter)\n}\n\n/*\n  # Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  paren_string = paren_string.replace(/\\s+/g, \" \");\n  let output = [];\n  let stack = [];\n  let level = 0;\n  paren_string.split(\" \").forEach(char => {\n    if (char === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (char === '(') {\n      level += 1;\n      stack.push(level);\n    }\n  });\n  let i = 0;\n  while (i < paren_string.length) {\n    let char = paren_string[i];\n    if (char === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (char === '(') {\n      level += 1;\n      stack.push(level);\n    }\n    i++;\n  }\n  if (stack.length === 0) {\n    return 0;\n  } else {\n    return stack.length;\n  }\n}\n\n// Your NumArray object will be instantiated and called as such:\n// var obj = Object.create(NumArray).createNestedParens(s);\n// obj.sum(n);\n// obj.sum(n);\n// obj.sum(n);\n// obj.sum(n);\n// var arr = parseNestedParens(\"(()()) ((())) () ((())()())\");\n\nlet parseNestedParens = (paren_string) => {\n  paren_string = paren_string.replace(/\\s+/g, \" \");\n  let output = [];\n  let stack = [];\n  let level = 0;\n  paren_string.split(\" \").forEach(char => {\n    if (char === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (char === '(') {\n      level += 1;\n      stack.push(level);\n    }\n  });\n  let i = 0;\n  while (i < paren_string.length) {\n    let char = paren_string[i];\n    if (char === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (char === '(') {\n      level += 1;\n      stack.push(level);\n    }\n    i++;\n  }\n  if (stack.length === 0) {\n    return 0;\n  } else {\n    return stack.length;\n  }\n}\n\n/*\n  Your NumArray object will be instantiated and called as such:\n  var obj = Object.create(NumArray).createNestedParens(s);\n  obj.sum(n);\n  obj.sum(n);\n  obj.sum(n);\n  obj.sum(n);\n  var arr = parseNestedParens(\"(()()) ((())) () ((())()())\");\n*/\n\n/*\n  s: String\n  n: int\n  Returns: int\n */\n\n/*\n  s: String\n  n: int\n  Returns: int\n */\nconst parseNestedParens = (s, n) => {\n  s = s.replace(/\\s+/g, \" \");\n  let stack = [];\n  let level = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (s[i] === '(') {\n      level += 1;\n      stack.push(level);\n    }\n  }\n  if (stack.length === 0) {\n    return 0;\n  } else {\n    return stack.length;\n  }\n}\n\nlet parseNestedParens = (s, n) => {\n  s = s.replace(/\\s+/g, \" \");\n  let stack = [];\n  let level = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (s[i] === '(') {\n      level += 1;\n      stack.push(level);\n    }\n  }\n  if (stack.length === 0) {\n    return 0;\n  } else {\n    return stack.length;\n  }\n}\n\n/*\n  s: String\n  Returns: int\n */\nconst parseNestedParens = (s) => {\n  s = s.replace(/\\s+/g, \" \");\n  let stack = [];\n  let level = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === ')') {\n      level -= 1;\n      stack.pop();\n    } else if (s[i] === '(') {\n      level += 1;\n      stack.push(level);\n    }\n  }\n  if (stack.length === 0) {\n    return 0;\n  } else {\n    return stack.length;\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return strings\n  }\n\n  let res = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      res.push(strings[i])\n    }\n  }\n\n  return res\n}\n\n/**\n  * Return the index of the largest element of the list\n  *\n  * @param {Array} list\n  * @returns {number}\n  */\nconst largestIndex = (list) => {\n  let max = 0\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i]\n    }\n  }\n\n  return max\n}\n\n/**\n  * Sort the list in descending order\n  *\n  * @param {Array} list\n  */\nconst sortDescending = (list) => {\n  list.sort((a, b) => b - a)\n}\n\nexport {\n  sortDescending,\n  largestIndex,\n  filterBySubstring,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return (sum, product);\n}\n\n//TODO: Add an example\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return (sum, product);\n}\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    let max = numbers[0];\n    let min = max;\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return [min, max];\n};\n\n// Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n// This one uses a memoization to save some memory\nconst rollingMaxMemoized = (numbers) => {\n    let max = numbers[0];\n    let min = max;\n    let map = new Map();\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        map.set(i, max);\n    }\n    return [min, max];\n};\n\n// Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n// This one uses a memoization to save some memory\nconst rollingMaxMemoized2 = (numbers) => {\n    let max = numbers[0];\n    let min = max;\n    let map = new Map();\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (!map.has(i)) {\n            map.set(i, max);\n        } else {\n            let val = map.get(i);\n            if (val < max) {\n                max = val;\n            }\n        }\n    }\n    return [min, max];\n};\n\n// Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n// This one uses a memoization to save some memory\nconst rollingMaxMemoized3 = (numbers) => {\n    let max = numbers[0];\n    let min = max;\n    let map = new Map();\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (!map.has(i)) {\n            map.set(i, max);\n        } else {\n            let val = map.get(i);\n            if (val < max) {\n                max = val;\n            }\n        }\n    }\n    return [min, max];\n};\n\n// Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n// This one uses a memoization to save some memory\nconst rollingMaxMemoized4 = (numbers) => {\n    let max = numbers[0];\n    let min = max;\n    let map = new Map();\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (!map.has(i)) {\n            map.set(i, max);\n        } else {\n            let val = map.get(i);\n            if (val < max) {\n                max = val;\n            }\n        }\n    }\n    return [min, max];\n};\n\nconst numbers = [1, 2, 3, 2, 3, 4, 2];\nconsole.log(rollingMax(numbers));\nconsole.log(rollingMaxMemoized(numbers));\nconsole.log(rollingMaxMemoized2(numbers));\nconsole.log(rollingMaxMemoized3(numbers));\nconsole.log(rollingMaxMemoized4(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = getLongestPalindrome(string);\n  return string.slice(0, string.length - suffix.length) + suffix.split('').reverse().join('');\n}\n\n/* Find the longest postfix of supplied string that is a palindrome. */\nconst getLongestPalindrome = (string) => {\n  let suffix = string;\n  while (!isPalindrome(suffix)) {\n    suffix = suffix.slice(0, suffix.length - 1);\n  }\n  return suffix;\n}\n\n/* Determine if a string is a palindrome.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  */\nconst isPalindrome = (string) => {\n  const len = string.length;\n  return string.split('').reduce((result, char, index) => {\n    if (index === len - 1) {\n      return result && char === string.charAt(index);\n    } else {\n      return result && char === string.charAt(index) && string.charAt(index + 1) === char;\n    }\n  }, true);\n}\n\n/*\n  Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = getLongestPalindrome(string);\n  return string.slice(0, string.length - suffix.length) + suffix.split('').reverse().join('');\n}\n\n/* Determine if a string is a palindrome.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  */\nconst isPalindrome = (string) => {\n  const len = string.length;\n  return string.split('').reduce((result, char, index) => {\n    if (index === len - 1) {\n      return result && char === string.charAt(index);\n    } else {\n      return result && char === string.charAt(index) && string.charAt(index + 1) === char;\n    }\n  }, true);\n}\n\n/*\n  Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const suffix = getLongestPalindrome(string);\n  return string.slice(0, string.length - suffix.length) + suffix.split('').reverse().join('');\n}\n\n/* Determine if a string is a palindrome.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  */\nconst isPalindrome = (string) => {\n  const len = string.length;\n  return string.split('').reduce((result, char, index) => {\n    if (index === len - 1) {\n      return result && char === string.charAt(index);\n    } else {\n      return result && char === string.charAt(index) && string.charAt(index + 1) === char;\n    }\n  }, true);\n}\n\nmodule.exports = {\n  makePalindrome,\n  isPalindrome,\n  getLongestPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    return '';\n  }\n  let i = 0;\n  let result = [];\n  for (; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return 0;\n  return _.maxBy(strings, (s) => s.length);\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  while (a % b!== 0) {\n    a = b;\n    b = a % b;\n  }\n  return b;\n};\n\n//\n// ### function gcd (a, b)\n// Returns the greatest common divisor of two integers a and b\n//\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return greatestCommonDivisor(a, b);\n};\n\n//\n// ### function gcd (a, b, c)\n// Returns the greatest common divisor of three integers a, b, and c\n//\nconst gcd = (a, b, c) => {\n  if (a === 0) return gcd(b, c);\n  if (b === 0) return gcd(a, c);\n  if (c === 0) return gcd(a, b);\n  if (a < b) {\n    return gcd(b, c, a);\n  }\n  if (b < c) {\n    return gcd(a, b, c);\n  }\n  if (c < a) {\n    return gcd(c, a, b);\n  }\n  let gcd = gcd(a, b);\n  while (c!== 0) {\n    c = c % b;\n    if (c === 0) {\n      break;\n    }\n    gcd = gcd(gcd, c);\n  }\n  return gcd;\n};\n\n//\n// ### function lcm (a, b)\n// Returns the least common multiple of two integers a and b\n//\nconst lcm = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  return (a * b) / greatestCommonDivisor(a, b);\n};\n\n//\n// ### function lcm (a, b, c)\n// Returns the least common multiple of three integers a, b, and c\n//\nconst lcm = (a, b, c) => {\n  if (a === 0) return lcm(b, c);\n  if (b === 0) return lcm(a, c);\n  if (c === 0) return lcm(a, b);\n  if (a < b) {\n    return lcm(b, c, a);\n  }\n  if (b < c) {\n    return lcm(a, b, c);\n  }\n  if (c < a) {\n    return lcm(c, a, b);\n  }\n  return (a * b * c) / greatestCommonDivisor(a, b, c);\n};\n\n//\n// ### function factorial (n)\n// Returns the factorial of the given integer\n//\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return (n * factorial(n - 1));\n};\n\n//\n// ### function factorial (n)\n// Returns the factorial of the given integer\n//\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return (n * factorial(n - 1));\n};\n\n//\n// ### function nextPrime (n)\n// Returns the next prime number after n\n//\nconst nextPrime = (n) => {\n  if (n === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  let i = 1;\n  while (true) {\n    if (isPrime(i)) {\n      return i;\n    }\n    i++;\n  }\n};\n\n//\n// ### function isPrime (n)\n// Returns true if n is prime, false otherwise\n//\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n//\n// ### function getPrimeCount (n)\n// Returns the number of prime numbers below n\n//\nconst getPrimeCount = (n) => {\n  if (n === 1) {\n    return 0;\n  }\n  if (isPrime(n)) {\n    return 1;\n  }\n  let i = 2;\n  while (true) {\n    if (i * i > n) {\n      break;\n    }\n    if (isPrime(i)) {\n      i++;\n    }\n    if (i * i > n) {\n      break;\n    }\n  }\n  return i - 2;\n};\n\n//\n// ### function getPrimeFactorization (n)\n// Returns the prime factorization of the given integer n\n//\nconst getPrimeFactorization = (n) => {\n  if (n === 1) {\n    return [];\n  }\n  if (isPrime(n)) {\n    return [n];\n  }\n  let i = 2;\n  let primeFactorization = [];\n  while (true) {\n    if (i * i > n) {\n      break;\n    }\n    if (isPrime(i)) {\n      primeFactorization.push(i);\n      n = n - i * i;\n    }\n    i++;\n  }\n  return primeFactorization;\n};\n\n//\n// ### function getPrimeFactorial (n)\n// Returns the factorial of the prime factorization of the given integer n\n//\nconst getPrimeFactorial = (n) => {\n  let primeFactorization = getPrimeFactorization(n);\n  let factorial = 1;\n  for (let i = 0; i < primeFactorization.length; i++) {\n    factorial *= primeFactorization[i];\n  }\n  return factorial;\n};\n\n//\n// ### function getPrimeFact"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const len = string.length;\n  let index = 0;\n  while (index < len) {\n    let prefix = string.slice(0, index + 1);\n    prefixes.push(prefix);\n    index++;\n  }\n  return prefixes;\n};\n\n// Returns a list of all prefixes from the shortest to the longest of the input strings\nconst allPrefixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all suffixes from the shortest to the longest of the input strings\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const len = string.length;\n  let index = 0;\n  while (index < len) {\n    let suffix = string.slice(index);\n    suffixes.push(suffix);\n    index++;\n  }\n  return suffixes;\n};\n\n// Returns a list of all suffixes from the shortest to the longest of the input strings\nconst allSuffixesSorted = (string) => {\n  const suffixes = allSuffixes(string);\n  suffixes.sort();\n  return suffixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n\n// Returns a list of all prefixes and suffixes from the shortest to the longest of the input strings\nconst allPrefixesAndSuffixesSorted = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  prefixes.concat(suffixes);\n  prefixes.sort();\n  return prefixes;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  while (n-- > 0) {\n    s +='';\n  }\n  return s;\n};\n\n/*\n  Returns a string containing a sequence of increasing numbers from 0 to n inclusive.\n  >>> sequence(0)\n  '0'\n  >>> sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst sequence = (n) => {\n  let s = '';\n  while (n-- > 0) {\n    s += n;\n  }\n  return s;\n};\n\n/*\n  Returns a string containing a sequence of increasing numbers from 0 to n inclusive.\n  >>> sequence(5, true)\n  '5 4 3 2 1 0'\n  >>> sequence(5, false)\n  '1 2 3 4 5'\n  */\nconst sequence2 = (n, decreasing) => {\n  let s = '';\n  while (n-- > 0) {\n    s += n;\n    if (decreasing) {\n      s = s.substr(1);\n    }\n  }\n  return s;\n};\n\nmodule.exports = {\n  stringSequence,\n  sequence,\n  sequence2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += 1;\n  }\n  return count;\n};\n\n/*\n  ## Exercise 2\n  */\nconst getRandomNumber = () => {\n  const randomNumber = Math.floor(Math.random() * 9);\n  return randomNumber;\n};\n\nconst getRandomString = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 3\n  */\nconst getRandomStringWithCapitalLetter = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toUpperCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 4\n  */\nconst getRandomStringWithCapitalLetterAndNumbers = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toUpperCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n    if (chars[i].toLowerCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 5\n  */\nconst getRandomStringWithLowerCaseLetter = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toUpperCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 6\n  */\nconst getRandomStringWithLowerCaseLetterAndNumbers = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toUpperCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n    if (chars[i].toLowerCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 7\n  */\nconst getRandomStringWithUpperCaseLetter = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toLowerCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 8\n  */\nconst getRandomStringWithUpperCaseLetterAndNumbers = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toLowerCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n    if (chars[i].toUpperCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\n/*\n  ## Exercise 9\n  */\nconst getRandomStringWithLowerCaseLetterAndNumbers = (size) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let randomString = '';\n  for (let i = 0; i < size; i++) {\n    randomString += chars[getRandomNumber()];\n    if (chars[i].toLowerCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n    if (chars[i].toUpperCase() === chars[i]) {\n      randomString += chars[getRandomNumber()];\n    }\n  }\n  return randomString;\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  getRandomString,\n  getRandomStringWithCapitalLetter,\n  getRandomStringWithCapitalLetterAndNumbers,\n  getRandomStringWithLowerCaseLetter,\n  getRandomStringWithLowerCaseLetterAndNumbers,\n  getRandomStringWithUpperCaseLetter,\n  getRandomStringWithUpperCaseLetterAndNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    let beats = [];\n    let beat_count = 0;\n\n    for (let i = 0; i < music_string.length; i++) {\n        if (music_string[i] === 'o') {\n            if (beat_count === 0) {\n                beats.push(4);\n            } else {\n                beats.push(2);\n            }\n        } else if (music_string[i] === '|' || music_string[i] === '-' || music_string[i] === '|' || music_string[i] === '|' || music_string[i] === '|' || music_string[i] === '|') {\n            if (beat_count === 0) {\n                beats.push(4);\n            } else {\n                beats.push(2);\n            }\n        } else {\n            beats.push(1);\n        }\n        beat_count++;\n    }\n\n    return beats;\n};\n\n/*\n  > function isPitched(note)\n\n  > @param {string} note\n  >\n  > @return {boolean}\n\n  > Checks if a given note is a pitch.\n\n  > For example, \"c\" is a pitch, but \"c.|\" is not a pitch.\n  */\nconst isPitched = (note) => {\n    let note_length = note.length;\n\n    if (note_length === 1) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  > function isNote(note)\n\n  > @param {string} note\n  >\n  > @return {boolean}\n\n  > Checks if a given note is a note.\n\n  > For example, \"c\" is a note, but \"c.|\" is not a note.\n  */\nconst isNote = (note) => {\n    let note_length = note.length;\n\n    if (note_length === 1) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  > function isValidNote(note)\n\n  > @param {string} note\n  >\n  > @return {boolean}\n\n  > Checks if a given note is valid.\n\n  > For example, \"c\" is valid, but \"c.|\" is not.\n  */\nconst isValidNote = (note) => {\n    let note_length = note.length;\n\n    if (note_length === 1) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  > function isValidPitch(pitch)\n\n  > @param {string} pitch\n  >\n  > @return {boolean}\n\n  > Checks if a given pitch is valid.\n\n  > For example, \"c\" is valid, but \"c.|\" is not.\n  */\nconst isValidPitch = (pitch) => {\n    let note_length = pitch.length;\n\n    if (note_length === 1) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  > function isValidNoteLength(note_length)\n\n  > @param {number} note_length\n  >\n  > @return {boolean}\n\n  > Checks if a given note length is valid.\n\n  > For example, 4 is valid, but 5 is not.\n  */\nconst isValidNoteLength = (note_length) => {\n    if (note_length === 1 || note_length === 2 || note_length === 3 || note_length === 4) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  > function isValidPitchLength(pitch_length)\n\n  > @param {number} pitch_length\n  >\n  > @return {boolean}\n\n  > Checks if a given pitch length is valid.\n\n  > For example, 4 is valid, but 5 is not.\n  */\nconst isValidPitchLength = (pitch_length) => {\n    if (pitch_length === 1 || pitch_length === 2 || pitch_length === 3 || pitch_length === 4) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nmodule.exports = {\n    parseMusic,\n    isPitched,\n    isNote,\n    isValidPitch,\n    isValidNoteLength,\n    isValidPitchLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const index = string.indexOf(substring);\n  if (index === -1) {\n    return 0;\n  }\n  return Math.min(string.length, index + 1) - index;\n};\n\n/*\n  Given a string, determine how many times the substring 'a' appears in the string.\n  Do this without modifying the string.\n  >>> numRepeats('abcda')\n  1\n  >>> numRepeats('aaaa')\n  2\n  >>> numRepeats('a')\n  1\n  */\nconst numRepeats = (string) => {\n  const index = string.indexOf('a');\n  if (index === -1) {\n    return 0;\n  }\n  return string.length - index;\n};\n\n/*\n  Given a string, return a string of all the distinct strings that can be formed by deleting\n  characters from the string.\n  Do this without modifying the string.\n  >>> unique('')\n  ''\n  >>> unique('abc')\n  'abc'\n  >>> unique('abcd')\n  'abcd'\n  >>> unique('abcde')\n  'abcde'\n  >>> unique('abcdef')\n  'abcdef'\n  >>> unique('abcdefg')\n  'abcdefg'\n  >>> unique('abcdefgh')\n  'abcdefgh'\n  >>> unique('abcdefghi')\n  'abcdefghi'\n  >>> unique('abcdefghij')\n  'abcdefghij'\n  >>> unique('abcdefghijk')\n  'abcdefghijk'\n  >>> unique('abcdefghijkl')\n  'abcdefghijkl'\n  >>> unique('abcdefghijklm')\n  'abcdefghijklm'\n  >>> unique('abcdefghijklmn')\n  'abcdefghijklmn'\n  >>> unique('abcdefghijklmno')\n  'abcdefghijklmno'\n  >>> unique('abcdefghijklmnop')\n  'abcdefghijklmnop'\n  >>> unique('abcdefghijklmnopq')\n  'abcdefghijklmnopq'\n  >>> unique('abcdefghijklmnopqr')\n  'abcdefghijklmnopqr'\n  >>> unique('abcdefghijklmnopqrs')\n  'abcdefghijklmnopqrs'\n  >>> unique('abcdefghijklmnopqrst')\n  'abcdefghijklmnopqrst'\n  >>> unique('abcdefghijklmnopqrstu')\n  'abcdefghijklmnopqrstu'\n  >>> unique('abcdefghijklmnopqrstuv')\n  'abcdefghijklmnopqrstuv'\n  >>> unique('abcdefghijklmnopqrstuvw')\n  'abcdefghijklmnopqrstuvw'\n  >>> unique('abcdefghijklmnopqrstuvwx')\n  'abcdefghijklmnopqrstuvwx'\n  >>> unique('abcdefghijklmnopqrstuvwxy')\n  'abcdefghijklmnopqrstuvwxy'\n  >>> unique('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> unique('abcdefghijklmnopqrstuvwxyza')\n  'abcdefghijklmnopqrstuvwxyza'\n  >>> unique('abcdefghijklmnopqrstuvwxyzab')\n  'abcdefghijklmnopqrstuvwxyzab'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabc')\n  'abcdefghijklmnopqrstuvwxyzabc'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcde')\n  'abcdefghijklmnopqrstuvwxyzabcde'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdef')\n  'abcdefghijklmnopqrstuvwxyzabcdef'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefg')\n  'abcdefghijklmnopqrstuvwxyzabcdefg'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefgh')\n  'abcdefghijklmnopqrstuvwxyzabcdefgh'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghi')\n  'abcdefghijklmnopqrstuvwxyzabcdefghi'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghij')\n  'abcdefghijklmnopqrstuvwxyzabcdefghij'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghijk')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijk'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghijkl')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijkl'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghijklm')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklm'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghijklmn')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmn'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghijklmno')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmno'\n  >>> unique('abcdefghijklmnopqrstuvwxyzabcdefghijklmnop')\n  '"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split('').map(x => parseInt(x))\n  const sortedArray = numbersArray.sort()\n  return sortedArray.join('')\n}\n\n/*\n  Sort a string of numbers. Input is a string of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  >>> sortNumbers('three one five two')\n  'one two three five'\n  >>> sortNumbers('three one five three')\n  'three one five'\n  */\nconst sortNumbersByLength = (numbers) => {\n  const numbersArray = numbers.split('').map(x => parseInt(x))\n  const sortedArray = numbersArray.sort((a, b) => a.length - b.length)\n  return sortedArray.join('')\n}\n\nconst sortNumbersByLex = (numbers) => {\n  const numbersArray = numbers.split('').map(x => parseInt(x))\n  const sortedArray = numbersArray.sort((a, b) => a - b)\n  return sortedArray.join('')\n}\n\nexport {\n  sortNumbers,\n  sortNumbersByLength,\n  sortNumbersByLex\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallest = numbers[0], largest = numbers[0];\n  let smallestIndex = 0;\n  let largestIndex = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n      smallestIndex = i;\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n      largestIndex = i;\n    }\n  }\n\n  return [smallest, largest];\n}\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) min = numbers[i];\n    if (numbers[i] > max) max = numbers[i];\n  }\n  let minValue = -min;\n  let maxValue = max - min;\n  let minPercent = 0.0;\n  let maxPercent = 1.0;\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let percent = (numbers[i] - min) / maxValue;\n    newNumbers.push(minPercent + percent * (maxPercent - minPercent));\n  }\n  return newNumbers;\n};\n\n/* Given a list of numbers, return the index of the highest number.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  4\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  4\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  4\n  */\nconst rescaleToUnitIndex = (numbers) => {\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) max = numbers[i];\n  }\n  let maxValue = max;\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] == max) {\n      maxIndex = i;\n      break;\n    }\n  }\n  return maxIndex;\n};\n\n/* Given a list of numbers, return the median of the numbers.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.5\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  3.0\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  3.5\n  */\nconst rescaleToUnitMedian = (numbers) => {\n  let list = rescaleToUnit(numbers);\n  let middle = list.length / 2;\n  return list[middle];\n};\n\n/* Given a list of numbers, return the sum of the numbers.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  10.0\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  21.0\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  28.0\n  */\nconst rescaleToUnitSum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the mean of the numbers.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.5\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  3.0\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  3.5\n  */\nconst rescaleToUnitMean = (numbers) => {\n  let mean = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n  }\n  return mean / numbers.length;\n};\n\nexport {\n  rescaleToUnit,\n  rescaleToUnitIndex,\n  rescaleToUnitMedian,\n  rescaleToUnitSum,\n  rescaleToUnitMean\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = []\n  const len = values.length\n  for (let i = 0; i < len; i++) {\n    const v = values[i]\n    if (typeof v === 'number' &&!isNaN(v)) {\n      filtered.push(v)\n    }\n  }\n  return filtered\n}\n\n/**\n  * Returns a string with each letter capitalized\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toCapitalizedString = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    output.push(c.toUpperCase())\n  }\n  return output.join('')\n}\n\n/**\n  * Returns a string with each letter in lowercase\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toLowerCaseString = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    output.push(c.toLowerCase())\n  }\n  return output.join('')\n}\n\n/**\n  * Returns a string with each letter in uppercase\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toUpperCaseString = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    output.push(c.toUpperCase())\n  }\n  return output.join('')\n}\n\n/**\n  * Returns a string with each letter in uppercase and capitalized\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toCapitalizedUpperCaseString = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    output.push(c.toUpperCase())\n  }\n  return output.join('')\n}\n\n/**\n  * Converts a string to camelCase\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toCamelCase = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    if (i === 0) {\n      output.push(c.toLowerCase())\n    } else {\n      output.push(c.toUpperCase())\n    }\n  }\n  return output.join('')\n}\n\n/**\n  * Converts a string to camelCase\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toCamelCaseUpperCase = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    if (i === 0) {\n      output.push(c.toLowerCase())\n    } else {\n      output.push(c.toUpperCase())\n    }\n  }\n  return output.join('')\n}\n\n/**\n  * Converts a string to snake_case\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toSnakeCase = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    if (i === 0) {\n      output.push(c.toLowerCase())\n    } else {\n      output.push(c.toLowerCase())\n    }\n  }\n  return output.join('')\n}\n\n/**\n  * Converts a string to snake_case\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toSnakeCaseUpperCase = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    if (i === 0) {\n      output.push(c.toLowerCase())\n    } else {\n      output.push(c.toUpperCase())\n    }\n  }\n  return output.join('')\n}\n\n/**\n  * Converts a string to dash_case\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toDashCase = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    if (i === 0) {\n      output.push(c.toLowerCase())\n    } else {\n      output.push(c.toLowerCase())\n    }\n  }\n  return output.join('-')\n}\n\n/**\n  * Converts a string to dash_case\n  *\n  * @param {string} s\n  * @return {string}\n  */\nconst toDashCaseUpperCase = (s) => {\n  const len = s.length\n  const output = []\n  for (let i = 0; i < len; i++) {\n    const c = s.charAt(i)\n    if (i === 0) {\n      output.push(c.toLowerCase())\n    } else {\n      output.push(c.toUpperCase())\n    }\n  }\n  return output.join('-')\n}\n\n/**\n  * Converts a string to hyp"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length\n}\n\n/* Returns a new string with the given character repeated n times\n  >>> strrep('abc', 3)\n  'abcabcabc'\n  >>> strrep('abc', -3)\n  ''\n  */\nconst strrep = (string, n) => {\n    let result = ''\n\n    if (n > 0) {\n        for (let i = 0; i < n; i++) {\n            result += string\n        }\n    }\n\n    return result\n}\n\n/* Returns the characters in the string.\n  >>> strchars('')\n  []\n  >>> strchars('abc')\n  ['a', 'b', 'c']\n  */\nconst strchars = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.charAt(i))\n    }\n\n    return result\n}\n\n/* Returns the lines in the string.\n  >>> strlines('')\n  []\n  >>> strlines('abc')\n  ['abc']\n  >>> strlines('a\\nb\\nc')\n  ['a', 'b', 'c']\n  */\nconst strlines = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) === '\\n') {\n            result.push(string.slice(i + 1))\n        }\n    }\n\n    return result\n}\n\n/* Returns the words in the string.\n  >>> strwords('')\n  []\n  >>> strwords('abc')\n  ['abc']\n  >>> strwords('a\\nb\\nc')\n  ['a', 'b', 'c']\n  */\nconst strwords = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) ==='') {\n            result.push(string.slice(i + 1))\n        }\n    }\n\n    return result\n}\n\n/* Returns the lines of the string, with newlines removed.\n  >>> strnl('')\n  []\n  >>> strnl('abc')\n  ['abc']\n  >>> strnl('a\\nb\\nc')\n  ['abc']\n  */\nconst strnl = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)!== '\\n') {\n            result.push(string.slice(i))\n        }\n    }\n\n    return result\n}\n\n/* Returns the words in the string, with spaces removed.\n  >>> strsp('')\n  []\n  >>> strsp('abc')\n  ['abc']\n  >>> strsp('a b c')\n  ['abc']\n  */\nconst strsp = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i)!=='') {\n            result.push(string.slice(i))\n        }\n    }\n\n    return result\n}\n\n/* Returns the number of words in the string.\n  >>> strcount('')\n  0\n  >>> strcount('abc')\n  1\n  >>> strcount('a b c')\n  3\n  */\nconst strcount = (string) => {\n    return strwords(string).length\n}\n\n/* Returns the number of lines in the string.\n  >>> strcount('')\n  0\n  >>> strcount('abc')\n  1\n  >>> strcount('a\\nb\\nc')\n  3\n  */\nconst strcount = (string) => {\n    return strlines(string).length\n}\n\n/* Returns the number of characters in the string.\n  >>> strcount('')\n  0\n  >>> strcount('abc')\n  3\n  >>> strcount('a b c')\n  6\n  */\nconst strcount = (string) => {\n    return string.length\n}\n\n/* Returns a new string with the given character repeated n times.\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', -3)\n  ''\n  */\nconst strrep = (string, n) => {\n    let result = ''\n\n    for (let i = 0; i < n; i++) {\n        result += string\n    }\n\n    return result\n}\n\n/* Returns a new string with the given character repeated n times.\n  >>> strrep('a', 3)\n  'aaa'\n  >>> strrep('a', -3)\n  ''\n  */\nconst strrep = (string, n) => {\n    let result = ''\n\n    if (n > 0) {\n        for (let i = 0; i < n; i++) {\n            result += string\n        }\n    }\n\n    return result\n}\n\n/* Returns the characters in the string.\n  >>> strchars('')\n  []\n  >>> strchars('abc')\n  ['a', 'b', 'c']\n  */\nconst strchars = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.charAt(i))\n    }\n\n    return result\n}\n\n/* Returns the characters in the string.\n  >>> strchars('')\n  []\n  >>> strchars('abc')\n  ['a', 'b', 'c']\n  */\nconst strchars = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.charAt(i))\n    }\n\n    return result\n}\n\n/* Returns the lines in the string.\n  >>> strlines('')\n  []\n  >>> strlines('abc')\n  ['abc']\n  >>> strlines('a\\nb\\nc')\n  ['a', 'b', 'c']\n  */\nconst strlines = (string) => {\n    let result = []\n\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) === '\\n') {\n            result.push(string"}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let res = 1\n  let count = 0\n  while (res <= n) {\n    if (n % res === 0) {\n      count += 1\n      res *= Math.pow(10, count)\n    }\n  }\n  return res\n}\n\nexport default largestDivisor\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  let factors_sum = 1\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      factors.push(i)\n      n /= i\n      factors_sum *= i\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n    factors_sum *= n\n  }\n  return factors\n}\n\n/* Returns the number of prime numbers less than a given number.\n  >>> countPrimes(0)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(1000)\n  999\n  >>> countPrimes(2000)\n  1999\n  >>> countPrimes(5000)\n  4900\n  >>> countPrimes(9000)\n  8801\n  >>> countPrimes(10000)\n  9001\n  >>> countPrimes(11000)\n  9901\n  >>> countPrimes(12000)\n  11901\n  >>> countPrimes(13000)\n  13001\n  >>> countPrimes(14000)\n  14001\n  >>> countPrimes(15000)\n  15001\n  >>> countPrimes(16000)\n  16001\n  >>> countPrimes(17000)\n  17001\n  >>> countPrimes(18000)\n  18001\n  >>> countPrimes(19000)\n  19001\n  >>> countPrimes(20000)\n  20001\n  >>> countPrimes(21000)\n  21001\n  >>> countPrimes(22000)\n  22001\n  >>> countPrimes(23000)\n  23001\n  >>> countPrimes(24000)\n  24001\n  >>> countPrimes(25000)\n  25001\n  >>> countPrimes(26000)\n  26001\n  >>> countPrimes(27000)\n  27001\n  >>> countPrimes(28000)\n  28001\n  >>> countPrimes(29000)\n  29001\n  >>> countPrimes(30000)\n  30001\n  >>> countPrimes(31000)\n  31001\n  >>> countPrimes(32000)\n  32001\n  >>> countPrimes(33000)\n  33001\n  >>> countPrimes(34000)\n  34001\n  >>> countPrimes(35000)\n  35001\n  >>> countPrimes(36000)\n  36001\n  >>> countPrimes(37000)\n  37001\n  >>> countPrimes(38000)\n  38001\n  >>> countPrimes(39000)\n  39001\n  >>> countPrimes(40000)\n  40001\n  >>> countPrimes(41000)\n  41001\n  >>> countPrimes(42000)\n  42001\n  >>> countPrimes(43000)\n  43001\n  >>> countPrimes(44000)\n  44001\n  >>> countPrimes(45000)\n  45001\n  >>> countPrimes(46000)\n  46001\n  >>> countPrimes(47000)\n  47001\n  >>> countPrimes(48000)\n  48001\n  >>> countPrimes(49000)\n  49001\n  >>> countPrimes(50000)\n  50001\n  >>> countPrimes(51000)\n  51001\n  >>> countPrimes(52000)\n  52001\n  >>> countPrimes(53000)\n  53001\n  >>> countPrimes(54000)\n  54001\n  >>> countPrimes(55000)\n  55001\n  >>> countPrimes(56000)\n  56001\n  >>> countPrimes(57000)\n  57001\n  >>> countPrimes(58000)\n  58001\n  >>> countPrimes(59000)\n  59001\n  >>> countPrimes(60000)\n  60001\n  >>> countPrimes(61000)\n  61001\n  >>> countPrimes(62000)\n  62001\n  >>> countPrimes(63000)\n  63001\n  >>> countPrimes(64000)\n  64001\n  >>> countPrimes(65000)\n  65001\n  >>> countPrimes(66000)\n  66001\n  >>> countPrimes(67000)\n  67001\n  >>> countPrimes(68000)\n  68001\n  >>> countPrimes(69000)\n  69001\n  >>> countPrimes(70000)\n  70001\n  >>> countPrimes(71000)\n  71001\n  >>> countPrimes(72000)\n  72001\n  >>> countPrimes(73000)\n  73001\n  >>> countPrimes(74000)\n  74001\n  >>> countPrimes(75000)\n  75001\n  >>> countPrimes(76000)\n  76001\n  >>> countPrimes(77000)\n  77001\n  >>> countPrimes(78000)\n  78001\n  >>> countPrimes(79000)\n  79001\n  >>> countPrimes(80000)\n  80001\n  >>> countPrimes(81000)\n  81001\n  >>> countPrimes(82000)\n  82001\n  >>> countPrimes(83000)\n  83001\n  >>> countPrimes(84000)\n  84001\n  >>> countPrimes(85000)\n  85001\n  >>> countPrimes(86000)\n  86001\n  >>> countPrimes(87000)\n  87001\n  >>> countPrimes(88000)\n  88001\n  >>> countPrimes(89000)\n  89001\n  >>> countPrimes(90000)\n  90001\n  >>> countPrimes(91000)\n  91001\n  >>> countPrimes(92000)\n  92001\n  >>> countPrimes(93000)\n  93001\n  >>> countPrimes(94000)\n  94001\n  >>> countPrimes(95000)\n  95001\n  >>> countPrimes(96000)\n  96001\n  "}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let list = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (list.indexOf(numbers[i]) < 0) {\n      list.push(numbers[i]);\n    }\n  }\n  return list;\n};\n\n/*\n  * Given two integers, return their sum.\n  *\n  * Do not use the built-in sum function.\n  *\n  * Tags: Math, Recursion\n  * Similar Problems: (M) Add Two Numbers, (H) Add Two Numbers II\n  */\nconst add = (a, b) => a + b;\n\nconst sum = (a, b) => {\n  if (a > b) {\n    return a + b;\n  } else if (a < b) {\n    return a + b + 1;\n  } else {\n    return a;\n  }\n};\n\nconst main = async () => {\n  let sum = await add(1, 3);\n  let sum2 = await add(2, 5);\n  console.log(sum);\n  console.log(sum2);\n  let sum3 = await add(sum, sum2);\n  console.log(sum3);\n  let sum4 = await add(sum3, sum);\n  console.log(sum4);\n  console.log('-------------------');\n  let list = [1, 3, 4, 3, 1, 3, 5, 5, 6];\n  list = removeDuplicates(list);\n  console.log(list);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase()\n  })\n}\n\n/*\n  The function is a generator.\n  It will generate a word from a dictionary.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  The function will return a string\n  until the word is generated.\n  "}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n    if (strings.length === 0) {\n        return ''\n    }\n    return strings.reduce((previous, current) => previous + current, '')\n}\n\n// Merge Strings of Different Lengths\n/* Merge List of Strings into a Single String\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2])\n  '12'\n  >>> concatenate([1])\n  '1'\n  */\nconst concatenate = (strings) => {\n    if (strings.length === 0) {\n        return ''\n    }\n    let length = strings[0].length\n    let result = strings[0]\n    for (let i = 1; i < strings.length; i++) {\n        length += strings[i].length\n        result = result + strings[i]\n    }\n    return result.substring(0, length)\n}\n\n// Sort a List of Strings\n/* Sort a List of Strings\n  >>> sort([])\n  []\n  >>> sort(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sort = (strings) => {\n    return strings.sort()\n}\n\n// Concatenate Strings\n/* Concatenate Strings\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate([1, 2])\n  '12'\n  >>> concatenate([1])\n  '1'\n  */\nconst concatenate = (strings) => {\n    return concatenate(strings, '')\n}\n\n// Concatenate Strings of Different Lengths\n/* Concatenate Strings\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2])\n  '12'\n  >>> concatenate([1])\n  '1'\n  */\nconst concatenate = (strings, separator) => {\n    if (strings.length === 0) {\n        return ''\n    }\n    let length = strings[0].length\n    let result = strings[0]\n    for (let i = 1; i < strings.length; i++) {\n        length += strings[i].length\n        result = result + strings[i]\n    }\n    return result.substring(0, length)\n}\n\n// Remove Duplicates\n/* Remove Duplicates\n  >>> removeDuplicates([])\n  []\n  >>> removeDuplicates(['a', 'b', 'c', 'c', 'b'])\n  ['a', 'b', 'c']\n  >>> removeDuplicates(['a', 'b', 'a'])\n  ['a', 'b']\n  >>> removeDuplicates(['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a'])\n  ['a', 'b']\n  */\nconst removeDuplicates = (strings) => {\n    return strings.filter(s => s.length > 0)\n}\n\n// Sort a List of Numbers\n/* Sort a List of Numbers\n  >>> sort([])\n  []\n  >>> sort(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  */\nconst sort = (strings) => {\n    return strings.sort()\n}\n\n// Remove Duplicates\n/* Remove Duplicates\n  >>> removeDuplicates([])\n  []\n  >>> removeDuplicates(['a', 'b', 'c', 'c', 'b'])\n  ['a', 'b', 'c']\n  >>> removeDuplicates(['a', 'b', 'a'])\n  ['a', 'b']\n  >>> removeDuplicates(['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a'])\n  ['a', 'b']\n  */\nconst removeDuplicates = (strings) => {\n    return strings.filter(s => s.length > 0)\n}\n\n// Convert a List of Strings to an Array of Numbers\n/* Convert a List of Strings to an Array of Numbers\n  >>> toArray(['a', 'b', 'c'])\n  [1, 2, 3]\n  */\nconst toArray = (strings) => {\n    return strings.map(s => Number(s))\n}\n\n// Convert an Array of Numbers to a List of Strings\n/* Convert an Array of Numbers to a List of Strings\n  >>> toString(toArray(['a', 'b', 'c']))\n  ['1', '2', '3']\n  */\nconst toString = (numbers) => {\n    return numbers.map(Number)\n}\n\n// Remove Duplicates\n/* Remove Duplicates\n  >>> removeDuplicates([])\n  []\n  >>> removeDuplicates(['a', 'b', 'c', 'c', 'b'])\n  ['a', 'b', 'c']\n  >>> removeDuplicates(['a', 'b', 'a'])\n  ['a', 'b']\n  >>> removeDuplicates(['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a'])\n  ['a', 'b']\n  */\nconst removeDuplicates = (strings) => {\n    return strings.filter(s => s.length > 0)\n}\n\n// Remove Duplicates\n/* Remove Duplicates\n  >>> removeDuplicates([])\n  []\n  >>> removeDuplicates(['a', 'b', 'c', 'c', 'b'])\n  ['a', 'b', 'c']\n  >>> removeDuplicates(['a', 'b', 'a'])\n  ['a', 'b']\n  >>> removeDuplicates(['a', 'b', 'a', 'a', 'b', 'b', 'b', 'a', 'a'])\n  ['a', 'b']\n  */\nconst removeDuplicates = (strings) => {\n    return strings."}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const ret = []\n  for (let i = 0, len = strings.length; i < len; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      ret.push(strings[i])\n    }\n  }\n  return ret\n}\n\nmodule.exports = {\n  filterByPrefix\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  l.forEach((val) => {\n    if (val > 0) {\n      res.push(val);\n    }\n  });\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    let num = 2;\n    while (num * num <= n) {\n        if (n % num == 0) {\n            return false;\n        }\n        num++;\n    }\n    return true;\n};\n\n/* Return the number of prime numbers less than or equal to N.\n  >>> primes(10)\n  5\n  >>> primes(100)\n  25\n  >>> primes(1000)\n  981\n  >>> primes(10000)\n  9901\n  >>> primes(100000)\n  99098\n  >>> primes(1000000)\n  990622\n  >>> primes(10000000)\n  9901652\n  */\nconst primes = (n) => {\n    let count = 0;\n    let num = 2;\n    while (num * num <= n) {\n        if (isPrime(num)) {\n            count++;\n        }\n        num++;\n    }\n    return count;\n};\n\nmodule.exports = {\n    primes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('List must be even length');\n  }\n  const length = xs.length;\n  let sign = 1;\n  let x = -1;\n  for (let i = 0; i < length; i++) {\n    const p = xs[i];\n    if (p === 0) {\n      return x;\n    }\n    x = x + sign * p;\n    sign *= -1;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst evaluate9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev"}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const newList = [...l];\n    newList.sort((a, b) => a - b);\n    let p = 0;\n    let q = 0;\n    while (p < newList.length) {\n        if (newList[p] % 3 === 0) {\n            q = p;\n        } else {\n            newList.splice(p, 1);\n        }\n        p++;\n    }\n    return newList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (result.indexOf(l[i]) < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (result.indexOf(l[i]) < 0 && l[i]!== undefined) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\nconst find = (l, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === v) {\n      return i\n    }\n  }\n}\n\nconst remove = (l, v) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== v) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\nconst count = (l) => {\n  let c = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== undefined) {\n      c++\n    }\n  }\n  return c\n}\n\nconst isSorted = (l) => {\n  if (l.length < 2) {\n    return true\n  }\n  for (let i = 1; i < l.length; i++) {\n    if (l[i - 1] > l[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  true\n  >>> isSorted([1, 2, 3])\n  true\n  >>> isSorted([1, 2, 3, 4, 5, 6])\n  false\n  */\nconst isSortedWith = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === undefined) {\n      continue\n    }\n    if (result.indexOf(l[i]) < 0 && l[i]!== undefined) {\n      result.push(l[i])\n    }\n  }\n  if (result.length < 2) {\n    return true\n  }\n  for (let i = 1; i < result.length; i++) {\n    if (result[i - 1] > result[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst partition = (l) => {\n  const sorted = []\n  let i = 0\n  while (i < l.length) {\n    while (l[i] === undefined) {\n      i++\n    }\n    sorted.push([l[i], i])\n    while (l[i]!== undefined) {\n      i++\n    }\n    i++\n  }\n  return sorted\n}\n\nconst partitionWith = (l) => {\n  const result = []\n  let i = 0\n  while (i < l.length) {\n    while (l[i] === undefined) {\n      i++\n    }\n    if (l[i] === undefined) {\n      continue\n    }\n    result.push([l[i], i])\n    while (l[i]!== undefined) {\n      i++\n    }\n    i++\n  }\n  return result\n}\n\nconst countWithout = (l, v) => {\n  let c = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== v) {\n      c++\n    }\n  }\n  return c\n}\n\nconst sort = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== undefined) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted.sort((a, b) => a - b)\n}\n\nconst sortWith = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === undefined) {\n      continue\n    }\n    result.push([l[i], i])\n  }\n  return result.sort((a, b) => a[0] - b[0])\n}\n\nconst sortReverse = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== undefined) {\n      sorted.push(l[i])\n    }\n  }\n  return sorted.sort((a, b) => b - a)\n}\n\nconst sortReverseWith = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === undefined) {\n      continue\n    }\n    result.push([l[i], i])\n  }\n  return result.sort((a, b) => b[0] - a[0])\n}\n\nexport {\n  find,\n  remove,\n  count,\n  isSorted,\n  isSortedWith,\n  partition,\n  partitionWith,\n  sort,\n  sortWith,\n  sortReverse,\n  sortReverseWith,\n  countWithout,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((prev, current) => current > prev? current : prev, 0);\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 11 === 0) {\n    return 1\n  } else if (n % 13 === 0) {\n    return 2\n  } else {\n    return 0\n  }\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (i === l.length - 1) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicBack = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups2.push(group[2] + group.slice(0, 2));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic = encodeCyclic;\nconst decode_cyclic = decodeCyclic;\nconst decode_cyclic_back = decodeCyclicBack;\n\nmodule.exports = {\n  encode_cyclic,\n  decode_cyclic,\n  decode_cyclic_back\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 3\n  } else {\n    const a = primeFib(n - 2)\n    const b = primeFib(n - 3)\n    return a + b\n  }\n}\n\n/*\n  primeFib2 returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 = (n) => {\n  if (n < 2) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 3\n  } else {\n    return primeFib2(n - 2) + primeFib2(n - 3)\n  }\n}\n\n/*\n  primeFib3 returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib3(1)\n  2\n  >>> primeFib3(2)\n  3\n  >>> primeFib3(3)\n  5\n  >>> primeFib3(4)\n  13\n  >>> primeFib3(5)\n  89\n  */\nconst primeFib3 = (n) => {\n  if (n < 2) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 3\n  } else if (n === 4) {\n    return 5\n  } else if (n === 5) {\n    return 13\n  } else {\n    return primeFib3(n - 2) + primeFib3(n - 3) + primeFib3(n - 4)\n  }\n}\n\n/*\n  primeFib4 returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib4(1)\n  2\n  >>> primeFib4(2)\n  3\n  >>> primeFib4(3)\n  5\n  >>> primeFib4(4)\n  13\n  >>> primeFib4(5)\n  89\n  */\nconst primeFib4 = (n) => {\n  if (n < 2) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 3\n  } else if (n === 4) {\n    return 5\n  } else if (n === 5) {\n    return 13\n  } else if (n === 6) {\n    return 89\n  } else {\n    return primeFib4(n - 2) + primeFib4(n - 3) + primeFib4(n - 4) + primeFib4(n - 5)\n  }\n}\n\n/*\n  primeFib5 returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib5(1)\n  2\n  >>> primeFib5(2)\n  3\n  >>> primeFib5(3)\n  5\n  >>> primeFib5(4)\n  13\n  >>> primeFib5(5)\n  89\n  */\nconst primeFib5 = (n) => {\n  if (n < 2) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 3\n  } else if (n === 4) {\n    return 5\n  } else if (n === 5) {\n    return 13\n  } else if (n === 6) {\n    return 89\n  } else if (n === 7) {\n    return 4711\n  } else {\n    return primeFib5(n - 2) + primeFib5(n - 3) + primeFib5(n - 4) + primeFib5(n - 5) + primeFib5(n - 6) + primeFib5(n - 7)\n  }\n}\n\n/*\n  primeFib6 returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib6(1)\n  2\n  >>> primeFib6(2)\n  3\n  >>> primeFib6(3)\n  5\n  >>> primeFib6(4)\n  13\n  >>> primeFib6(5)\n  89\n  >>> primeFib6(6)\n  4711\n  */\nconst primeFib6 = (n) => {\n  if (n < 2) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 3\n  } else if (n === 4) {\n    return 5\n  } else if (n === 5) {\n    return 13\n  } else if (n === 6) {\n    return 89\n  } else if (n === 7) {\n    return 4711\n  } else {\n    return primeFib6(n - 2) + primeFib6(n - 3) + primeFib6(n - 4) + primeFib6(n - 5) + primeFib6(n - 6) + primeFib6(n - 7) + primeFib6(n - 8)\n  }\n}\n\n/*\n  primeFib7 returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib7(1)\n  2\n  >>> primeFib7(2)\n  3\n  >>> primeFib7(3)\n  5\n  >>> primeFib7(4)\n  13\n  >>> primeFib7(5)\n  "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const seen = {};\n    return l.filter((x) => seen.hasOwnProperty(x) === false && x % 3 === 0).length === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  const car1 = []\n  const car2 = []\n  const collision = []\n  const direction = []\n  const count = []\n  let i = 0\n  let j = 0\n  let collisionCount = 0\n\n  for (let k = 0; k < n; k++) {\n    direction[k] = k + 1\n  }\n\n  for (let k = 0; k < n; k++) {\n    car1[k] = k + 1\n    car2[k] = n - k + 1\n  }\n\n  while (i < n && j < n) {\n    collisionCount = 0\n    for (let k = 0; k < n; k++) {\n      if (car1[k] < car2[k]) {\n        car1[k] += 1\n        car2[k] -= 1\n      } else {\n        collision[k] = car2[k] - car1[k]\n        car1[k] -= 1\n        car2[k] += 1\n        collisionCount += 1\n      }\n    }\n\n    if (collisionCount!== 0) {\n      collisionCount = 0\n      for (let k = 0; k < n; k++) {\n        if (collision[k]!== 0) {\n          collisionCount += 1\n        }\n      }\n      collisionCount = collisionCount - 1\n    }\n\n    i += 1\n    j += 1\n  }\n\n  return collisionCount\n}\n\nexport { carRaceCollision }\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const a = l.slice();\n  a.push(l.length);\n  return a;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let unique = [];\n  l.forEach(x => {\n    if (x < 0) {\n      x = -x;\n    }\n    if (unique.indexOf(x) === -1) {\n      unique.push(x);\n    }\n  });\n  if (unique.length === 1) {\n    return false;\n  }\n  for (let i = 0; i < unique.length; i++) {\n    for (let j = i + 1; j < unique.length; j++) {\n      if (unique[i] + unique[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let string = '';\n  while (x > 0) {\n    string = (x % base).toString() + string;\n    x = Math.floor(x / base);\n  }\n  return string;\n};\n\n/*Cadds the numbers in the string. The string contains only digits.\n  >>> add(2, 3)\n  '5'\n  >>> add(2, '3')\n  '5'\n  >>> add('2', '3')\n  '5'\n  >>> add('2', 3)\n  '5'\n  >>> add('2', '3')\n  '5'\n  >>> add('2', '3', '2')\n  '2'\n  */\nconst add = (x, y, z) => {\n  let result = '';\n  if (typeof x ==='string' && typeof y ==='string') {\n    result = x + y;\n  } else if (typeof x ==='string') {\n    result = x + y.toString();\n  } else if (typeof y ==='string') {\n    result = x.toString() + y;\n  } else {\n    result = x.toString() + y.toString();\n  }\n  if (typeof z ==='string') {\n    result = result + z;\n  }\n  return result;\n};\n\n/*Csubtracts the numbers in the string. The string contains only digits.\n  >>> subtract(2, 3)\n  '1'\n  >>> subtract(2, '3')\n  '1'\n  >>> subtract('2', '3')\n  '1'\n  >>> subtract('2', 3)\n  '1'\n  >>> subtract('2', '3', '2')\n  '1'\n  */\nconst subtract = (x, y, z) => {\n  let result = '';\n  if (typeof x ==='string' && typeof y ==='string') {\n    result = x - y;\n  } else if (typeof x ==='string') {\n    result = x - y.toString();\n  } else if (typeof y ==='string') {\n    result = x.toString() - y;\n  } else {\n    result = x.toString() - y.toString();\n  }\n  if (typeof z ==='string') {\n    result = result - z;\n  }\n  return result;\n};\n\n/*Cdivides the numbers in the string. The string contains only digits.\n  >>> divide(2, 3)\n  '0.66'\n  >>> divide(2, '3')\n  '0.66'\n  >>> divide('2', '3')\n  '0.66'\n  >>> divide('2', 3)\n  '0.66'\n  >>> divide('2', '3', '2')\n  '0.66'\n  */\nconst divide = (x, y, z) => {\n  let result = '';\n  if (typeof x ==='string' && typeof y ==='string') {\n    result = x / y;\n  } else if (typeof x ==='string') {\n    result = x / y.toString();\n  } else if (typeof y ==='string') {\n    result = x.toString() / y;\n  } else {\n    result = x.toString() / y.toString();\n  }\n  if (typeof z ==='string') {\n    result = result / z;\n  }\n  return result;\n};\n\n/*Cmultiplies the numbers in the string. The string contains only digits.\n  >>> multiply(2, 3)\n  '6'\n  >>> multiply(2, '3')\n  '6'\n  >>> multiply('2', '3')\n  '6'\n  >>> multiply('2', 3)\n  '6'\n  >>> multiply('2', '3', '2')\n  '6'\n  */\nconst multiply = (x, y, z) => {\n  let result = '';\n  if (typeof x ==='string' && typeof y ==='string') {\n    result = x * y;\n  } else if (typeof x ==='string') {\n    result = x * y.toString();\n  } else if (typeof y ==='string') {\n    result = x.toString() * y;\n  } else {\n    result = x.toString() * y.toString();\n  }\n  if (typeof z ==='string') {\n    result = result * z;\n  }\n  return result;\n};\n\n/*Cchecks if the number is divisible by the number in the string.\n  >>> divisible(2, 3)\n  'false'\n  >>> divisible(2, '3')\n  'false'\n  >>> divisible('2', '3')\n  'false'\n  >>> divisible('2', 3)\n  'false'\n  >>> divisible('2', '3', '2')\n  'false'\n  */\nconst divisible = (x, y, z) => {\n  let result = false;\n  if (typeof x ==='string' && typeof y ==='string') {\n    result = (x % y === 0);\n  } else if (typeof x ==='string') {\n    result = (x % y.toString() === 0);\n  } else if (typeof y ==='string') {\n    result = (x.toString() % y === 0);\n  } else {\n    result = (x.toString() % y.toString() === 0);\n  }\n  if (typeof z ==='string') {\n    result = result && (z === 0);\n  }\n  return result;\n};\n\n/*Cchecks if the number is even.\n  >>> even(2)\n  'false'\n  >>> even(2, '2')\n  'false'\n  >>> even('2')\n  'false'\n  >>> even('2', '2')\n  'false'\n  >>> even('2', '4')\n  'false'\n  >>> even('4', '2')\n  'false'\n  >>> even"}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*GThe area of a square is the same as the length of one side and the return face is high for a square.\n  >>> squareArea(3)\n  9\n  */\nconst squareArea = (a) => {\n  return a * a;\n};\n\n/*GThe area of a cube is the same as the length of one side, and the return face is high for a cube.\n  >>> cubeArea(6)\n  36\n  */\nconst cubeArea = (a) => {\n  return a * a * a;\n};\n\n/*GThe volume of a cube is the same as the area of one side, and the return face is high for a cube.\n  >>> cubeVolume(6)\n  8\n  */\nconst cubeVolume = (a) => {\n  return a * a * a;\n};\n\n/*GThe volume of a sphere is the same as the area of a sphere and the return face is high for a sphere.\n  >>> sphereVolume(4)\n  16\n  */\nconst sphereVolume = (a) => {\n  return (4/3) * Math.pow(a, 3);\n};\n\n/*GThe volume of a cube is the same as the area of a cube and the return face is high for a cube.\n  >>> cubeVolume(2)\n  8\n  */\nconst cubeVolume = (a) => {\n  return a * a * a;\n};\n\n/*GThe volume of a sphere is the same as the area of a sphere and the return face is high for a sphere.\n  >>> sphereVolume(3)\n  9\n  */\nconst sphereVolume = (a) => {\n  return (4/3) * Math.pow(a, 3);\n};\n\n/*GThe volume of a sphere is the same as the area of a sphere and the return face is high for a sphere.\n  >>> sphereVolume(4)\n  16\n  */\nconst sphereVolume = (a) => {\n  return (4/3) * Math.pow(a, 3);\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a side, and the return face is high for a sphere.\n  >>> sphereArea(3)\n  4 * Math.sqrt(3)\n  */\nconst sphereArea = (a) => {\n  return Math.sqrt(3) * a;\n};\n\n/*GThe area of a sphere is the same as the length of a"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) return 1\n  return fib4(n-2) + fib4(n-1)\n}\n\n// ### The Fib5 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib5 (0) - > 0 fib5 (1) - > 0 fib5 (2) - > 2 fib5 (3) - > 4 fib5 (n-1) - > fib5 (n-2) + fib5 (n-3) + fib5 (n-4) + fib5 (n-5).\nconst fib5 = (n) => {\n  if (n < 2) return 1\n  return fib5(n-2) + fib5(n-1)\n}\n\n// ### The Fib6 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib6 (0) - > 0 fib6 (1) - > 0 fib6 (2) - > 2 fib6 (3) - > 6 fib6 (n-1) - > fib6 (n-2) + fib6 (n-3) + fib6 (n-4) + fib6 (n-5) + fib6 (n-6).\nconst fib6 = (n) => {\n  if (n < 2) return 1\n  return fib6(n-2) + fib6(n-1)\n}\n\n// ### The Fib7 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib7 (0) - > 0 fib7 (1) - > 0 fib7 (2) - > 2 fib7 (3) - > 6 fib7 (n-1) - > fib7 (n-2) + fib7 (n-3) + fib7 (n-4) + fib7 (n-5) + fib7 (n-6) + fib7 (n-7).\nconst fib7 = (n) => {\n  if (n < 2) return 1\n  return fib7(n-2) + fib7(n-1)\n}\n\n// ### The Fib8 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib8 (0) - > 0 fib8 (1) - > 0 fib8 (2) - > 2 fib8 (3) - > 8 fib8 (n-1) - > fib8 (n-2) + fib8 (n-3) + fib8 (n-4) + fib8 (n-5) + fib8 (n-6) + fib8 (n-7) + fib8 (n-8).\nconst fib8 = (n) => {\n  if (n < 2) return 1\n  return fib8(n-2) + fib8(n-1)\n}\n\n// ### The Fib9 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib9 (0) - > 0 fib9 (1) - > 0 fib9 (2) - > 2 fib9 (3) - > 8 fib9 (n-1) - > fib9 (n-2) + fib9 (n-3) + fib9 (n-4) + fib9 (n-5) + fib9 (n-6) + fib9 (n-7) + fib9 (n-8) + fib9 (n-9).\nconst fib9 = (n) => {\n  if (n < 2) return 1\n  return fib9(n-2) + fib9(n-1)\n}\n\n// ### The Fib10 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib10 (0) - > 0 fib10 (1) - > 0 fib10 (2) - > 2 fib10 (3) - > 8 fib10 (n-1) - > fib10 (n-2) + fib10 (n-3) + fib10 (n-4) + fib10 (n-5) + fib10 (n-6) + fib10 (n-7) + fib10 (n-8) + fib10 (n-9) + fib10 (n-10).\nconst fib10 = (n) => {\n  if (n < 2) return 1\n  return fib10(n-2) + fib10(n-1)\n}\n\n// ### The Fib11 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib11 (0) - > 0 fib11 (1) - > 0 fib11 (2) - > 2 fib11 (3) - > 8 fib11 (n-1) - > fib11 (n-2) + fib11 (n-3) + fib11 (n-4) + fib11 (n-5) + fib11 (n-6) + fib11 (n-7) + fib11 (n-8) + fib11 (n-9) + fib11 (n-10) + fib11 (n-11).\nconst fib11 = (n) => {\n  if (n < 2) return 1\n  return fib11(n-2) + fib11(n-1)\n}\n\n// ### The Fib12 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib12 (0) - > 0 fib12 (1) - > 0 fib12 (2) - > 2 fib12 (3) - > 8 fib12 (n-1) - > fib12 (n-2) + fib12 (n-3) + fib12 (n-4) + fib12 (n-5) + fib12 (n-6) + fib12 (n-7) + fib12 (n-8) + fib12 (n-9) + fib12 (n-10) + fib12 (n-11) + fib12 (n-12).\nconst fib12 = (n) => {\n  if (n < 2) return 1\n  return fib12(n-2) + fib12(n-1)\n}\n\n// ### The Fib13 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib13 (0) - > 0 fib13 (1) - > 0 fib13 (2) - > 2 fib13 (3) - > 8 fib13 (n-1"}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = Array.from(l).sort();\n  if (l.length % 2 === 1) {\n    return sorted[Math.floor(l.length / 2)];\n  } else {\n    const l1 = sorted.slice(0, l.length / 2);\n    const l2 = sorted.slice(l.length / 2, l.length);\n    return (l1[l1.length - 1] + l2[0]) / 2;\n  }\n};\n\n/*\n  RThe average number of items in the list.\n  >>> average([3, 1, 2, 4, 5])\n  3.0\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  13.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*\n  RThe sum of the items in the list.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  45\n  */\nconst sum = (l) => {\n  return l.reduce((sum, val) => sum + val, 0);\n};\n\n/*\n  RThe number of items in the list.\n  >>> length([3, 1, 2, 4, 5])\n  5\n  >>> length([-10, 4, 6, 1000, 10, 20])\n  7\n  */\nconst length = (l) => {\n  return l.length;\n};\n\n/*\n  RThe number of items in the list that are equal to the argument.\n  >>> length([3, 1, 2, 4, 5], 3)\n  3\n  >>> length([3, 1, 2, 4, 5], 10)\n  0\n  */\nconst length = (l, item) => {\n  return l.filter(v => v === item).length;\n};\n\n/*\n  RThe number of times the item occurs in the list.\n  >>> count([3, 1, 2, 4, 5], 3)\n  2\n  >>> count([3, 1, 2, 4, 5], 10)\n  0\n  */\nconst count = (l, item) => {\n  return l.filter(v => v === item).length;\n};\n\n/*\n  RThe number of times the item occurs in the list, excluding duplicates.\n  >>> distinct([3, 1, 2, 4, 5])\n  4\n  >>> distinct([3, 1, 2, 4, 5, 3])\n  3\n  >>> distinct([3, 1, 2, 4, 5, 3, 2])\n  4\n  */\nconst distinct = (l) => {\n  return l.reduce((d, v) => {\n    if (d.indexOf(v) === -1) {\n      d.push(v);\n    }\n    return d;\n  }, []);\n};\n\n/*\n  RThe number of elements in the list that are greater than the argument.\n  >>> count([3, 1, 2, 4, 5], 3)\n  1\n  >>> count([3, 1, 2, 4, 5], 10)\n  0\n  */\nconst count = (l, item) => {\n  return l.filter(v => v > item).length;\n};\n\n/*\n  RThe number of elements in the list that are less than the argument.\n  >>> count([3, 1, 2, 4, 5], 3)\n  2\n  >>> count([3, 1, 2, 4, 5], 10)\n  1\n  */\nconst count = (l, item) => {\n  return l.filter(v => v < item).length;\n};\n\n/*\n  RThe number of elements in the list that are strictly greater than the argument.\n  >>> count([3, 1, 2, 4, 5], 3)\n  0\n  >>> count([3, 1, 2, 4, 5], 10)\n  0\n  */\nconst count = (l, item) => {\n  return l.filter(v => v > item).length;\n};\n\n/*\n  RThe number of elements in the list that are strictly less than the argument.\n  >>> count([3, 1, 2, 4, 5], 3)\n  1\n  >>> count([3, 1, 2, 4, 5], 10)\n  1\n  */\nconst count = (l, item) => {\n  return l.filter(v => v < item).length;\n};\n\n/*\n  RThe maximum number in the list.\n  >>> max([3, 1, 2, 4, 5])\n  5\n  >>> max([3, 1, 2, 4, 5, 3])\n  5\n  >>> max([3, 1, 2, 4, 5, 3, 2])\n  5\n  */\nconst max = (l) => {\n  return l.reduce((max, v) => Math.max(max, v), -Infinity);\n};\n\n/*\n  RThe minimum number in the list.\n  >>> min([3, 1, 2, 4, 5])\n  1\n  >>> min([3, 1, 2, 4, 5, 3])\n  1\n  >>> min([3, 1, 2, 4, 5, 3, 2])\n  1\n  */\nconst min = (l) => {\n  return l.reduce((min, v) => Math.min(min, v), Infinity);\n};\n\n/*\n  RThe number of elements in the list that are equal to the argument.\n  >>> count([3, 1, 2, 4, 5], 3)\n  2\n  >>> count([3, 1, 2, 4, 5, 3], 10)\n  1\n  */\nconst count = (l, item) => {\n  return l.filter(v => v === item).length;\n};\n\n/*\n  RThe list that contains the numbers that are greater than the argument.\n  >>> distinct([3, 1, 2, 4, 5], 3)\n  [4, 5]\n  >>> distinct([3, 1, 2, 4, 5, 3], 10)\n  [3, 4, 5]\n  */\nconst distinct = (l, item) => {\n  return l.filter(v => v > item).map(v => v);\n};\n\n"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const newString = text.split('').reverse().join('');\n  return text === newString;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)? modp(n, p) + p : n;\n};\n\nexport default modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\nmodule.exports = {\n  encode: encodeShift,\n  decode: decodeShift\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text === '') {\n    return '';\n  }\n  text = text.replace(/[aeiouAEIOU]/g, '');\n  return text;\n};\n\nconst removeAllVowels = (text) => {\n  if (text === '') {\n    return '';\n  }\n  text = text.replace(/[aeiouAEIOU]/g, '');\n  text = text.replace(/[AEIOU]/g, '');\n  return text;\n};\n\n// This is for the case of 'abcd' or 'abdcd'\nconst removeRepeatingVowels = (text) => {\n  if (text === '') {\n    return '';\n  }\n  let lastLetter = text[text.length - 1];\n  let vowels = [lastLetter];\n  let vowelsCount = 0;\n  let lastVowel = lastLetter;\n  let lastVowelCount = 1;\n  for (let i = text.length - 2; i >= 0; i--) {\n    let letter = text[i];\n    if (vowels.indexOf(letter)!== -1) {\n      vowelsCount++;\n      lastVowel = letter;\n      lastVowelCount++;\n      if (vowelsCount === 3) {\n        return text.substr(0, text.length - 2) + lastVowel;\n      }\n    } else {\n      vowels.push(letter);\n      vowelsCount = 1;\n      lastVowel = lastVowel;\n      lastVowelCount = 1;\n    }\n  }\n  return text;\n};\n\nconst removeRepeatingVowels2 = (text) => {\n  if (text === '') {\n    return '';\n  }\n  let lastLetter = text[text.length - 1];\n  let vowels = [lastLetter];\n  let vowelsCount = 0;\n  let lastVowel = lastLetter;\n  let lastVowelCount = 1;\n  for (let i = text.length - 2; i >= 0; i--) {\n    let letter = text[i];\n    if (vowels.indexOf(letter)!== -1) {\n      vowelsCount++;\n      lastVowel = letter;\n      lastVowelCount++;\n      if (vowelsCount === 3) {\n        return text.substr(0, text.length - 2) + lastVowel;\n      }\n    } else {\n      vowels.push(letter);\n      vowelsCount = 1;\n      lastVowel = lastVowel;\n      lastVowelCount = 1;\n    }\n  }\n  return text;\n};\n\nconst removeRepeatingVowels3 = (text) => {\n  if (text === '') {\n    return '';\n  }\n  let lastLetter = text[text.length - 1];\n  let vowels = [lastLetter];\n  let vowelsCount = 0;\n  let lastVowel = lastLetter;\n  let lastVowelCount = 1;\n  for (let i = text.length - 2; i >= 0; i--) {\n    let letter = text[i];\n    if (vowels.indexOf(letter)!== -1) {\n      vowelsCount++;\n      lastVowel = letter;\n      lastVowelCount++;\n      if (vowelsCount === 3) {\n        return text.substr(0, text.length - 2) + lastVowel;\n      }\n    } else {\n      vowels.push(letter);\n      vowelsCount = 1;\n      lastVowel = lastVowel;\n      lastVowelCount = 1;\n    }\n  }\n  return text;\n};\n\nexport default {\n  removeVowels,\n  removeAllVowels,\n  removeRepeatingVowels,\n  removeRepeatingVowels2,\n  removeRepeatingVowels3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  if (l.length === 0) return false\n  return l.reduce((acc, n) => {\n    return n <= t && acc\n  }, true)\n}\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\ndescribe('belowThreshold', () => {\n  it('should return true if all numbers in list l are below the t threshold', () => {\n    expect(belowThreshold([1, 2, 4, 10], 5)).toEqual(true)\n    expect(belowThreshold([1, 20, 4, 10], 5)).toEqual(false)\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares = (n) => {\n  return n * (n + 1) * (2 * n + 1) / 6;\n}\n\n/*\n  Create a function that adds the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares2 = (n) => {\n  return n * (n + 1) * (2 * n + 1);\n}\n\n/*\n  Create a function that adds the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares3 = (n) => {\n  return n * n + n * n * n;\n}\n\n/*\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares4 = (n) => {\n  return n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares5 = (n) => {\n  return n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares6 = (n) => {\n  return n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares7 = (n) => {\n  return n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares8 = (n) => {\n  return n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares9 = (n) => {\n  return n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares10 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares11 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares12 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares13 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares14 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares15 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares16 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  2516411200\n  */\nconst sumSquares17 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n}\n\n/*\n  Create a function that sums the squares of the numbers 1 to n.\n  >>> sumSquares(3)\n  25\n  >>> sumSquares(100)\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    return s0.split('').every((char, i) => s1.includes(char));\n};\n\n// https://judge.softuni.bg/Contests/Contest-3/Problem-3-1#2\n/**\n  Write a function that takes as an argument a string, and return true if\n  it contains only letters and spaces.\n  >>> containsOnlyLetters('a')\n  true\n  >>> containsOnlyLetters(' a')\n  true\n  >>> containsOnlyLetters('a ')\n  true\n  >>> containsOnlyLetters(' a ')\n  true\n  >>> containsOnlyLetters(' a ')\n  true\n  >>> containsOnlyLetters(' a b c ')\n  true\n  >>> containsOnlyLetters(' a b c ')\n  true\n  >>> containsOnlyLetters(' a b c ')\n  true\n  >>> containsOnlyLetters(' a b c ')\n  true\n  >>> containsOnlyLetters(' a b c d ')\n  false\n  >>> containsOnlyLetters(' a b c d ')\n  false\n  >>> containsOnlyLetters(' a b c d ')\n  false\n  */\nconst containsOnlyLetters = (str) => {\n    return str.split('').every((char, i) => char.match(/[a-zA-Z]/));\n};\n\n// https://judge.softuni.bg/Contests/Contest-3/Problem-3-2#2\n/**\n  Write a function that takes as an argument a string, and return true if\n  it contains only spaces and hyphens.\n  >>> containsOnlySpacesAndHyphens('a')\n  false\n  >>> containsOnlySpacesAndHyphens(' a')\n  false\n  >>> containsOnlySpacesAndHyphens('a ')\n  false\n  >>> containsOnlySpacesAndHyphens(' a ')\n  false\n  >>> containsOnlySpacesAndHyphens(' a ')\n  false\n  >>> containsOnlySpacesAndHyphens(' a b c ')\n  true\n  >>> containsOnlySpacesAndHyphens(' a b c ')\n  true\n  >>> containsOnlySpacesAndHyphens(' a b c ')\n  true\n  >>> containsOnlySpacesAndHyphens(' a b c d ')\n  false\n  >>> containsOnlySpacesAndHyphens(' a b c d ')\n  false\n  >>> containsOnlySpacesAndHyphens(' a b c d ')\n  false\n  */\nconst containsOnlySpacesAndHyphens = (str) => {\n    return str.split('').every((char, i) => char.match(/[-_]/));\n};\n\n// https://judge.softuni.bg/Contests/Contest-3/Problem-3-3#2\n/**\n  Write a function that takes as an argument a string, and return true if\n  it contains only lowercase letters and spaces.\n  >>> containsOnlyLowercaseLetters('a')\n  false\n  >>> containsOnlyLowercaseLetters(' a')\n  false\n  >>> containsOnlyLowercaseLetters('a ')\n  false\n  >>> containsOnlyLowercaseLetters(' a ')\n  false\n  >>> containsOnlyLowercaseLetters(' a ')\n  false\n  >>> containsOnlyLowercaseLetters(' a b c ')\n  true\n  >>> containsOnlyLowercaseLetters(' a b c ')\n  true\n  >>> containsOnlyLowercaseLetters(' a b c ')\n  true\n  >>> containsOnlyLowercaseLetters(' a b c d ')\n  false\n  >>> containsOnlyLowercaseLetters(' a b c d ')\n  false\n  >>> containsOnlyLowercaseLetters(' a b c d ')\n  false\n  */\nconst containsOnlyLowercaseLetters = (str) => {\n    return str.split('').every((char, i) => char.match(/[a-z]/));\n};\n\n// https://judge.softuni.bg/Contests/Contest-3/Problem-3-4#2\n/**\n  Write a function that takes as an argument a string, and return true if\n  it contains only digits and spaces.\n  >>> containsOnlyDigits('a')\n  false\n  >>> containsOnlyDigits(' a')\n  false\n  >>> containsOnlyDigits('a ')\n  false\n  >>> containsOnlyDigits(' a ')\n  false\n  >>> containsOnlyDigits(' a ')\n  false\n  >>> containsOnlyDigits(' a b c ')\n  true\n  >>> containsOnlyDigits(' a b c ')\n  true\n  >>> containsOnlyDigits(' a b c ')\n  true\n  >>> containsOnlyDigits(' a b c d ')\n  false\n  >>> containsOnlyDigits(' a b c d ')\n  false\n  >>> containsOnlyDigits(' a b c d ')\n  false\n  */\nconst containsOnlyDigits = (str) => {\n    return str.split('').every((char, i) => char.match(/[0-9]/));\n};\n\n// https://judge.softuni.bg/Contests/Contest-3/Problem-3-5#2\n/**\n  Write a function that takes as an argument a string, and return true if\n  it contains only upper case letters, spaces and hyphens.\n  >>> containsOnlyUppercaseLetters('a')\n  false\n  >>> containsOnlyUppercaseLetters(' a')\n  false\n  >>> containsOnlyUppercaseLetters('a ')\n  false\n  >>> containsOnlyUppercaseLetters(' a ')\n  false\n  >>> containsOnlyUppercaseLetters(' a ')\n  false\n  >>> containsOnlyUppercaseLetters(' a b c ')\n  true\n  >>> containsOnlyUppercaseLetters(' a b c ')\n  true\n  >>> containsOnlyUppercaseLet"}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, counter = 0;\n  while (counter < n) {\n    a = b;\n    b = a + b;\n    counter++;\n  }\n  return b;\n};\n\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  const left = brackets.charAt(0) === \">\"\n  const right = brackets.charAt(len - 1) === \"<\"\n  return left && right\n}\n\n/*\n  Given a string, convert all brackets into their correct form, and return the new string.\n  If brackets are not balanced, then they are assumed to be balanced and a RuntimeError is raised.\n  */\nconst convertBrackets = (s) => {\n  if (s.length === 0) return s\n  const len = s.length\n  const brackets = []\n  let index = 0\n  while (index < len) {\n    let char = s.charAt(index)\n    if (char === \">\") {\n      brackets.push(\"<\")\n    } else if (char === \"<\") {\n      brackets.push(\">\")\n    } else {\n      throw new RuntimeError(`invalid brackets: ${s}`)\n    }\n    index++\n  }\n  return brackets.join(\"\")\n}\n\n/*\n  Given a string, return the index of the first matching opening bracket, or -1 if no opening bracket is found.\n  */\nconst firstOpeningBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index))!== -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the first matching closing bracket, or -1 if no opening bracket is found.\n  */\nconst firstClosingBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index))!== -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the last matching closing bracket, or -1 if no closing bracket is found.\n  */\nconst lastClosingBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index))!== -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the first unmatched opening bracket, or -1 if no unmatched opening bracket is found.\n  */\nconst firstUnmatchedOpeningBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index)) === -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the first unmatched closing bracket, or -1 if no unmatched closing bracket is found.\n  */\nconst firstUnmatchedClosingBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index)) === -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the last unmatched closing bracket, or -1 if no unmatched closing bracket is found.\n  */\nconst lastUnmatchedClosingBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index)) === -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the first unmatched opening or closing bracket, or -1 if no unmatched bracket is found.\n  */\nconst firstUnmatchedBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index)) === -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return the index of the last unmatched opening or closing bracket, or -1 if no unmatched bracket is found.\n  */\nconst lastUnmatchedBracket = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index)) === -1) {\n      return index\n    }\n    index++\n  }\n  return -1\n}\n\n/*\n  Given a string, return a new string with all matching brackets removed, and all opening brackets converted to their correct form.\n  */\nconst stripBrackets = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  let newString = \"\"\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index)) === -1) {\n      newString += s.charAt(index)\n    } else {\n      newString += brackets[brackets.indexOf(s.charAt(index))]\n    }\n    index++\n  }\n  return newString\n}\n\n/*\n  Given a string, return a new string with all opening brackets converted to their correct form.\n  */\nconst convertOpeningBrackets = (s) => {\n  const brackets = [\"<\", \">\"]\n  let index = 0\n  let newString = \"\"\n  while (index < s.length) {\n    if (brackets.indexOf(s.charAt(index))!== -1) {\n      newString +="}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < last) {\n      return false\n    }\n    last = l[i]\n  }\n  return true\n}\n\n/*RGiven two lists A and B, write a function that returns true if B is a\n  permutation of A, i.e. every element in B is in A, and no element in B is\n  in A.\n  >>> permutation([1, 2, 3], [1, 2, 3])\n  true\n  >>> permutation([1, 2, 3], [1, 2, 2])\n  false\n  >>> permutation([1, 2, 3], [1, 2, 4])\n  false\n  >>> permutation([1, 2, 3], [1, 2, 4, 5])\n  false\n  >>> permutation([1, 2, 3], [2, 1, 3])\n  false\n  >>> permutation([1, 2, 3], [2, 1, 3, 4])\n  false\n  >>> permutation([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> permutation([1, 2, 3], [2, 1, 3, 4])\n  false\n  >>> permutation([1, 2, 3, 4], [1, 2, 3, 5])\n  false\n  >>> permutation([1, 2, 3, 4], [2, 1, 3, 5])\n  false\n  >>> permutation([1, 2, 3, 4], [2, 1, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4], [2, 1, 3, 5])\n  false\n  >>> permutation([1, 2, 3, 4], [1, 2, 3, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> permutation([1, 2, 3, 4, 5], [2, 1, 3, 4, 5])\n  false\n  >>> permutation([1, 2, 3, 4, 5], [2, 1, 3, 5, 4])\n  false\n  >>> permutation([1, 2, 3, 4, 5], [2, 1, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5], [2, 1, 3, 5, 4, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 5, 4, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 5, 4, 6])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6], [2, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const a = l1.slice().sort();\n  const b = l2.slice().sort();\n  return a.filter(v => b.indexOf(v)!== -1);\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factorization = [2]\n  const isPrime = (p) => {\n    if (p === 1) {\n      return false\n    } else if (p === 2) {\n      return true\n    } else if (p % 2 === 0) {\n      return false\n    } else {\n      return p === largestPrimeFactor(p * p - 2)\n    }\n  }\n  const max = Math.floor(Math.sqrt(n))\n  for (let i = 3; i <= max; i += 2) {\n    if (isPrime(i)) {\n      factorization.push(i)\n    }\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (isPrime(n / i)) {\n      factorization.push(n / i)\n    }\n  }\n  return Math.max(...factorization)\n}\n\n//RSuppose n > 1 and is not a prime number.\n//RImplement a method that finds the greatest common divisor (GCD) of two numbers.\n//RExample\n//R>>> gcd(15, 20)\n//R>>> gcd(3, 6)\n//R>>> gcd(8, 12)\n//R>>> gcd(5, 20)\n//R>>> gcd(5, 25)\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a\n  } else if (a === 0) {\n    return b\n  }\n  const c = a\n  while (c % b!== 0) {\n    c = b\n    b = a % b\n    a = c\n  }\n  return b\n}\n\n//RImplement a method that finds the smallest positive number that is evenly divisible by all of the numbers from 1 to 20.\n//RExample\n//R>>> smallestPositive(5)\n//R>>> smallestPositive(11)\n//R>>> smallestPositive(13)\n//R>>> smallestPositive(20)\nconst smallestPositive = (n) => {\n  const factorization = []\n  for (let i = 2; i <= 20; i++) {\n    while (n % i === 0) {\n      factorization.push(i)\n      n = n / i\n    }\n  }\n  if (n > 1) {\n    factorization.push(n)\n  }\n  return Math.max.apply(Math, factorization)\n}\n\n//RImplement a method that finds the largest positive number that is evenly divisible by all of the numbers from 1 to 20.\n//RExample\n//R>>> largestPositive(5)\n//R>>> largestPositive(11)\n//R>>> largestPositive(13)\n//R>>> largestPositive(20)\nconst largestPositive = (n) => {\n  const factorization = []\n  for (let i = 2; i <= 20; i++) {\n    while (n % i === 0) {\n      factorization.push(i)\n      n = n / i\n    }\n  }\n  if (n > 1) {\n    factorization.push(n)\n  }\n  return Math.min.apply(Math, factorization)\n}\n\n//RImplement a method that finds the difference of the sum of the squares of the first n natural numbers and the sum of the squares of the second n natural numbers.\n//RExample\n//R>>> difference(5, 5)\n//R>>> difference(5, 10)\n//R>>> difference(10, 5)\n//R>>> difference(15, 12)\n//R>>> difference(15, 15)\n//R>>> difference(12, 15)\nconst difference = (n, m) => {\n  const a = largestPositive(n)\n  const b = largestPositive(m)\n  return (a + b) * (a + b) - (a * b)\n}\n\n//RImplement a method that finds the sum of the squares of the first n natural numbers.\n//RExample\n//R>>> sumSquares(5)\n//R>>> sumSquares(10)\n//R>>> sumSquares(15)\n//R>>> sumSquares(12)\n//R>>> sumSquares(20)\nconst sumSquares = (n) => {\n  return largestPositive(n) * largestPositive(n)\n}\n\n//RImplement a method that finds the sum of the squares of the first n natural numbers.\n//RExample\n//R>>> sumSquares(5)\n//R>>> sumSquares(10)\n//R>>> sumSquares(15)\n//R>>> sumSquares(12)\n//R>>> sumSquares(20)\nconst sumSquares = (n) => {\n  return largestPositive(n) * largestPositive(n)\n}\n\n//RImplement a method that finds the difference of the sum of the squares of the first n natural numbers and the sum of the squares of the second n natural numbers.\n//RExample\n//R>>> difference(5, 5)\n//R>>> difference(5, 10)\n//R>>> difference(10, 5)\n//R>>> difference(15, 12)\n//R>>> difference(15, 15)\n//R>>> difference(12, 15)\nconst difference = (n, m) => {\n  return largestPositive(n) * largestPositive(n) - largestPositive(m) * largestPositive(m)\n}\n\n//RImplement a method that finds the sum of the squares of the first n natural numbers.\n//RExample\n//R>>> sumSquares(5)\n//R>>> sumSquares(10)\n//R>>> sumSquares(15)\n//R>>> sumSquares(12)\n//R>>> sumSquares(20)\nconst sumSquares = (n) => {\n  return largestPositive(n) * largestPositive(n)\n}\n\n//RImplement a method that finds the difference of the sum of the squares of the first n natural numbers and the sum of the squares of the second n natural numbers.\n//RExample\n//R>>> difference(5, 5)\n//R>>> difference(5, 10)\n//R>>> difference(10, 5)\n//R>>> difference(15, 12)\n//R>>> difference(15, 15)\n//R>>> difference(12, 15)\nconst difference = (n, m) => {\n  return largest"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumToN = (n) => {\n  let"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  let numOpen = 0\n  let numClose = 0\n  let index = 0\n  while (index < len) {\n    if (brackets[index] === '(') {\n      numOpen += 1\n    }\n    if (brackets[index] === ')') {\n      numClose += 1\n    }\n    index += 1\n  }\n  return numOpen === numClose\n}\n\n/*\n  * Brackets is a string of opening brackets and closing brackets\n  * and spaces.\n  * Returns the minimum number of brackets that we need to insert\n  * to make it correct.\n  *\n  * For example:\n  *\n  *      correctBrackets(\"(()())\")\n  *\n  * returns 1\n  *\n  *      correctBrackets(\"(()()\")\n  *\n  * returns 0\n  *\n  *      correctBrackets(\"()()\")\n  *\n  * returns 1\n  *\n  *      correctBrackets(\"()\")\n  *\n  * returns 1\n  *\n  *      correctBrackets(\"()\")\n  *\n  * returns 0\n  *\n  *      correctBrackets(\"()\")\n  *\n  * returns 0\n  */\nconst correctBrackets = (brackets) => {\n  const len = brackets.length\n  let index = 0\n  let numOpen = 0\n  let numClose = 0\n  let count = 0\n  while (index < len) {\n    if (brackets[index] === '(') {\n      numOpen += 1\n      count += 1\n    }\n    if (brackets[index] === ')') {\n      numClose += 1\n      count -= 1\n    }\n    index += 1\n  }\n  return count\n}\n\n/*\n  * Brackets is a string of opening brackets and closing brackets\n  * and spaces.\n  * Returns a string with the opening brackets and the closing brackets\n  * inserted between them.\n  *\n  * For example:\n  *\n  *      insertBrackets(\"()()\")\n  *\n  * returns \"(()())\"\n  *\n  *      insertBrackets(\"()()\")\n  *\n  * returns \"(()())\"\n  *\n  *      insertBrackets(\"()()\")\n  *\n  * returns \"((()()))\"\n  *\n  *      insertBrackets(\"()\")\n  *\n  * returns \"()(())\"\n  *\n  *      insertBrackets(\"()\")\n  *\n  * returns \"()(())\"\n  *\n  *      insertBrackets(\"()\")\n  *\n  * returns \"()(())\"\n  *\n  *      insertBrackets(\"()\")\n  *\n  * returns \"()(())\"\n  */\nconst insertBrackets = (brackets) => {\n  let insertString = ''\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      insertString += '('\n    }\n    if (brackets[i] === ')') {\n      insertString += ')'\n    }\n  }\n  return insertString\n}\n\nmodule.exports = {\n  correctBracketing,\n  correctBrackets,\n  insertBrackets\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return [...xs.slice(1).concat(xs[0])];\n};\n\n/**\n  * Returns an array containing the values of the polynomial at given values.\n  * @param {number[]} xs - Array of values for which to evaluate polynomial.\n  * @returns {number[]} Array of values of the polynomial.\n  * @example\n  *\n  * >>> function poly(xs) {\n  *     return [...xs.slice(1).concat(xs[0])];\n  * }\n  *\n  * >>> poly([1, 2, 3])\n  * [1, 2, 3]\n  *\n  * >>> poly([1, 2, 3, 4])\n  * [1, 4, 12, 20]\n  */\nconst poly = (xs) => {\n  return [...xs.slice(1).concat(xs[0])];\n};\n\nexport {\n  add,\n  subtract,\n  multiply,\n  divide,\n  pow,\n  multiply_two,\n  add_two,\n  subtract_two,\n  negate,\n  derivative,\n  poly,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1 || n === 2) return n;\n  else return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\nconsole.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let v = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' && i === s.length - 1) {\n      v++\n    }\n  }\n  return v\n}\n\n// console.log(vowelsCount(\"ABCD\"))\n// console.log(vowelsCount(\"AEDY\"))\n// console.log(vowelsCount(\"ACEDY\"))\n// console.log(vowelsCount(\"ABCDE\"))\n// console.log(vowelsCount(\"AACEDY\"))\n// console.log(vowelsCount(\"AACEDYY\"))\n// console.log(vowelsCount(\"AACEDYY\"))\n// console.log(vowelsCount(\"AACEDYX\"))\n// console.log(vowelsCount(\"AACEDYXY\"))\n// console.log(vowelsCount(\"AACEDYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXYX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXX\"))\n// console.log(vowelsCount(\"AACEDYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXYXY\"))\n// console.log(vowelsCount(\"AACEDY"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let y = parseInt(x.toString());\n    if (y < 0) {\n        y = -y;\n    }\n    if (shift > 0) {\n        y = y + Math.pow(10, shift);\n    } else {\n        y = y - Math.pow(10, -shift);\n    }\n    return y.toString();\n};\n\n/*Given two numbers, return their sum.\n  >>> add(1, 2)\n  3\n  >>> add(12, 2)\n  14\n  >>> add(12, -2)\n  10\n  >>> add(0, 2)\n  0\n  >>> add(12, 0)\n  12\n  >>> add(0, 0)\n  0\n  */\nconst add = (x, y) => {\n    let z = x + y;\n    if (z >= 10) {\n        return z - 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their difference.\n  >>> subtract(1, 2)\n  1\n  >>> subtract(12, 2)\n  10\n  >>> subtract(12, -2)\n  10\n  >>> subtract(0, 2)\n  2\n  >>> subtract(12, 0)\n  12\n  >>> subtract(0, 0)\n  0\n  */\nconst subtract = (x, y) => {\n    let z = x - y;\n    if (z < 0) {\n        return z + 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their product.\n  >>> multiply(1, 2)\n  2\n  >>> multiply(12, 2)\n  24\n  >>> multiply(12, -2)\n  -24\n  >>> multiply(0, 2)\n  0\n  >>> multiply(12, 0)\n  12\n  >>> multiply(0, 0)\n  0\n  */\nconst multiply = (x, y) => {\n    let z = x * y;\n    if (z < 0) {\n        return z - 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their quotient.\n  >>> divide(12, 6)\n  2\n  >>> divide(12, -6)\n  -2\n  >>> divide(0, 6)\n  0\n  >>> divide(12, 0)\n  12\n  >>> divide(0, 0)\n  0\n  */\nconst divide = (x, y) => {\n    let z = x / y;\n    if (z < 0) {\n        return z - 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their remainder after division.\n  >>> remainder(12, 6)\n  2\n  >>> remainder(12, -6)\n  2\n  >>> remainder(0, 6)\n  0\n  >>> remainder(12, 0)\n  12\n  >>> remainder(0, 0)\n  0\n  */\nconst remainder = (x, y) => {\n    let z = x % y;\n    if (z < 0) {\n        return z + 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their absolute value.\n  >>> absolute(1)\n  1\n  >>> absolute(-1)\n  1\n  >>> absolute(0)\n  0\n  */\nconst absolute = (x) => {\n    let z = Math.abs(x);\n    if (x < 0) {\n        return z - 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their greatest common divisor.\n  >>> gcd(12, 6)\n  6\n  >>> gcd(12, -6)\n  6\n  >>> gcd(0, 6)\n  6\n  >>> gcd(12, 0)\n  12\n  >>> gcd(0, 0)\n  0\n  */\nconst gcd = (x, y) => {\n    let z = x % y;\n    if (z == 0) {\n        return y;\n    }\n    return gcd(y, z);\n};\n\n/*Given two numbers, return their least common multiple.\n  >>> lcm(12, 6)\n  12\n  >>> lcm(12, -6)\n  12\n  >>> lcm(0, 6)\n  6\n  >>> lcm(12, 0)\n  12\n  >>> lcm(0, 0)\n  0\n  */\nconst lcm = (x, y) => {\n    let z = x * y / gcd(x, y);\n    if (z < 0) {\n        return z - 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their sum.\n  >>> sum(1, 2)\n  3\n  >>> sum(12, 2)\n  14\n  >>> sum(12, -2)\n  10\n  >>> sum(0, 2)\n  0\n  >>> sum(12, 0)\n  12\n  >>> sum(0, 0)\n  0\n  */\nconst sum = (x, y) => {\n    let z = x + y;\n    if (z >= 10) {\n        return z - 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their difference.\n  >>> difference(1, 2)\n  1\n  >>> difference(12, 2)\n  10\n  >>> difference(12, -2)\n  10\n  >>> difference(0, 2)\n  2\n  >>> difference(12, 0)\n  12\n  >>> difference(0, 0)\n  0\n  */\nconst difference = (x, y) => {\n    let z = x - y;\n    if (z < 0) {\n        return z + 10;\n    }\n    return z;\n};\n\n/*Given two numbers, return their product.\n  >>> product(1, 2)\n  2\n  >>> product(12, 2)\n  24\n  >>> product(12, -2)\n  -24\n  >>> product(0, 2)\n  0\n  >>> product(12, 0)\n  12\n  >>> product(0, 0)\n  0\n  */"}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const charCode = s.charCodeAt(0);\n  return (charCode >= 'A' && charCode <= 'Z')? charCode - 'A' + 10 * (s.charCodeAt(1) - 'A') : 0;\n}\n\n// Task 4\n\n/*Task Writes a function that takes a string as input and returns the number of\nletters in the string.\n  Examples:\n      digitCount(\"\") => 0\n      digitCount(\"a\") => 1\n      digitCount(\"ab\") => 2\n      digitCount(\"abcd\") => 4\n      digitCount(\"helloE\") => 5\n      digitCount(\"woArBld\") => 7\n      digitCount(\"aAaaaXa\") => 10\n*/\nconst digitCount = (s) => {\n  return s.split('').filter((e) => {\n    return e.match(/[a-z]/i);\n  }).length;\n}\n\n// Task 5\n\n/*Task Writes a function that takes a string as input and returns a string with\nthe same content but only in upper case.\n  Examples:\n      upperCase(\"abc\") => \"ABC\"\n      upperCase(\"aBc\") => \"ABC\"\n      upperCase(\"ABc\") => \"ABC\"\n      upperCase(\"A bc\") => \"A BC\"\n*/\nconst upperCase = (s) => {\n  return s.toUpperCase();\n}\n\n// Task 6\n\n/*Task Writes a function that takes a string as input and returns a string with\nthe same content but with all the characters converted to upper case.\n  Examples:\n      upperCase(\"abc\") => \"ABC\"\n      upperCase(\"aBc\") => \"ABC\"\n      upperCase(\"ABc\") => \"ABC\"\n      upperCase(\"A bc\") => \"A BC\"\n*/\nconst upperCaseAll = (s) => {\n  return s.toUpperCase();\n}\n\n// Task 7\n\n/*Task Writes a function that takes a string as input and returns a string with\nall the characters converted to lower case.\n  Examples:\n      lowerCase(\"ABC\") => \"abc\"\n      lowerCase(\"aBC\") => \"abc\"\n      lowerCase(\"ABc\") => \"abc\"\n      lowerCase(\"A bC\") => \"a bc\"\n*/\nconst lowerCaseAll = (s) => {\n  return s.toLowerCase();\n}\n\n// Task 8\n\n/*Task Writes a function that takes a string as input and returns a string with\nthe first letter capitalized.\n  Examples:\n      capitalize(\"abc\") => \"Abc\"\n      capitalize(\"abcd\") => \"AbcD\"\n      capitalize(\"Hello World\") => \"Hello World\"\n*/\nconst capitalize = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n// Task 9\n\n/*Task Writes a function that takes a string as input and returns a string with\nthe first letter in lower case.\n  Examples:\n      lowerCase(\"abc\") => \"abc\"\n      lowerCase(\"aBC\") => \"abc\"\n      lowerCase(\"ABc\") => \"abc\"\n      lowerCase(\"A bC\") => \"a bc\"\n*/\nconst lowerCaseFirst = (s) => {\n  return s.charAt(0).toLowerCase() + s.slice(1);\n}\n\n// Task 10\n\n/*Task Writes a function that takes a string as input and returns a string with\nall the letters lower cased.\n  Examples:\n      lowerCase(\"abc\") => \"abc\"\n      lowerCase(\"aBC\") => \"abc\"\n      lowerCase(\"ABc\") => \"abc\"\n      lowerCase(\"A bC\") => \"a bc\"\n*/\nconst lowerCaseAll = (s) => {\n  return s.toLowerCase();\n}\n\n// Task 11\n\n/*Task Writes a function that takes a string as input and returns a string with\nall the letters in upper case.\n  Examples:\n      upperCase(\"abc\") => \"ABC\"\n      upperCase(\"aBC\") => \"ABC\"\n      upperCase(\"ABc\") => \"ABC\"\n      upperCase(\"A bC\") => \"A BC\"\n*/\nconst upperCaseAll = (s) => {\n  return s.toUpperCase();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n    let i = 0;\n    while (i <= n) {\n        s = s.replace(/[^0-9]/g, '');\n        i = parseInt(s);\n    }\n    return i;\n}\n\nmodule.exports = fruitDistribution;<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const minIndex = arr.reduce((acc, x) => x < acc? x : acc, 0);\n  return arr.filter(x => x - 2 === minIndex)\n     .map((x) => [x, x - 2]);\n};\n\nconst main = () => {\n  console.log(pluck([4,2,3]));\n  console.log(pluck([1,2,3]));\n  console.log(pluck([]));\n  console.log(pluck([5, 0, 3, 0, 4, 2]));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let max = -1,\n        result = -1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (lst[i] > max) {\n                max = lst[i];\n                result = i;\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const arr = lst.slice().sort((a, b) => a - b);\n  const max = arr.reduce((pre, cur) => Math.max(pre, cur), 0);\n  const min = arr.reduce((pre, cur) => Math.min(pre, cur), max);\n  const diff = max - min;\n\n  if (diff) {\n    return [min, max].concat(arr.slice().reverse());\n  }\n  return arr;\n}\n\nexport default strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n\n/*\n  Given the length of the sides of a right triangle, return the area of the triangle rounded to 2 decimal points. If the sides of the triangle do not form a right angle, return -1.\n  Example:\n  rightTriangleArea(3, 4, 5) == 8.50\n  rightTriangleArea(1, 2, 10) == -1\n  */\nconst rightTriangleArea = (a, b, c) => {\n  if (a + b > c) {\n    let area = triangleArea(a, b, c)\n    let p = triangleArea(a, c, b)\n    if (p > 0 && area > 0) {\n      return Math.round((area + p) / 2)\n    }\n  }\n  return -1\n}\n\n/*\n  Given the length of the sides of a triangle, return the area of the triangle rounded to 2 decimal points.\n  Example:\n  triangleArea(4, 4, 5) == 8.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaRound = (a, b, c) => {\n  return Math.round(triangleArea(a, b, c))\n}\n\n/*\n  Given the length of the sides of a right triangle, return the area of the triangle rounded to 2 decimal points.\n  Example:\n  rightTriangleArea(4, 4, 5) == 8.00\n  rightTriangleArea(1, 2, 10) == -1\n  */\nconst rightTriangleAreaRound = (a, b, c) => {\n  return Math.round(rightTriangleArea(a, b, c))\n}\n\n/*\n  Given the length of the sides of a triangle, return the area of the triangle rounded to 2 decimal points.\n  Example:\n  triangleArea(4, 4, 5) == 8.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaRound = (a, b, c) => {\n  return Math.round(triangleArea(a, b, c))\n}\n\n/*\n  Given the length of the sides of a right triangle, return the area of the triangle rounded to 2 decimal points.\n  Example:\n  rightTriangleArea(4, 4, 5) == 8.00\n  rightTriangleArea(1, 2, 10) == -1\n  */\nconst rightTriangleAreaRound = (a, b, c) => {\n  return Math.round(rightTriangleArea(a, b, c))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let l = q.length;\n  let sum = 0;\n  for(let i = 0; i < l; i++) {\n    sum += q[i];\n  }\n\n  return sum <= w && (l === 2 || (l - 1 === sum && sum <= w) || (l - 2 === sum && sum <= w));\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  if (!Array.isArray(arr)) {\n    return 0\n  }\n  const result = []\n  for (let i = 0, j = arr.length - 1; i < j; i++, j--) {\n    if (arr[i]!== arr[j]) {\n      result.push(arr[i] - arr[j])\n    }\n  }\n  return Math.min(...result)\n}\n\nconst test = () => {\n  console.log(smallestChange([1,2,3,4,3,2,2]))\n  console.log(smallestChange([1, 2, 3, 2, 1]))\n  console.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) return lst1;\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n\n  const total = lst1.length + lst2.length;\n  const intersect = new Set(lst1).intersection(new Set(lst2));\n  const union = new Set(lst1).union(new Set(lst2));\n\n  return [...intersect,...union];\n}\n\n/*\n  Write a function that takes a list of strings and returns a list of strings where all strings are the same length, and each string is composed of a combination of a letter and a number.\n  Examples\n  combineLists([]) ➞ []\n  combineLists(['a1', 'b2', 'c3', 'd4']) ➞ ['a1b2c3d4', 'b2c3d4a1', 'c3d4a1b2', 'd4a1b2c3']\n  combineLists(['a1', 'b2', 'c3', 'd4'], 'hello') ➞ ['hello', 'b2c3d4a1', 'c3d4a1b2', 'd4a1b2c3']\n  combineLists(['a1', 'b2', 'c3', 'd4'], 'hello', 'world') ➞ ['hello', 'b2c3d4a1', 'c3d4a1b2', 'd4a1b2c3', 'hello', 'world']\n  combineLists(['a1', 'b2', 'c3', 'd4'], 'hello', 'world', '!') ➞ ['hello', 'b2c3d4a1', 'c3d4a1b2', 'd4a1b2c3', 'hello', 'world', '!']\n  */\nconst combineLists = (lst, delimiter ='') => {\n  let result = [];\n  let current = [];\n  for (let i = 0; i < lst.length; i++) {\n    let char = lst[i];\n    let digit = lst[i].charCodeAt(0) - 97;\n    if (digit >= 0 && digit <= 9) {\n      if (current.length === 0) {\n        current = [char];\n        continue;\n      }\n      current.push(char);\n    } else {\n      result.push(current.join(delimiter));\n      current = [];\n      current.push(char);\n    }\n  }\n  if (current.length > 0) {\n    result.push(current.join(delimiter));\n  }\n  return result;\n}\n\n/*\n  Write a function that takes two lists of strings and returns the shortest list of strings from both lists.\n\n  Examples\n  shortest([], []) ➞ []\n  shortest(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI']\n  shortest(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  shortest(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  shortest(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst shortest = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) return lst1;\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n\n  const intersection = new Set(lst1).intersection(new Set(lst2));\n  const union = new Set(lst1).union(new Set(lst2));\n\n  return [...intersection,...union];\n}\n\nconst lst1 = [\n  'hi',\n  'admin',\n  '4',\n  '5',\n  '1',\n  '2',\n  '3'\n];\n\nconst lst2 = [\n  'hI',\n  'Hi',\n  'admin',\n  'project'\n];\n\nconsole.log(combineLists(lst1));\nconsole.log(combineLists(lst1, 'hello'));\nconsole.log(combineLists(lst1, 'hello', 'world'));\nconsole.log(combineLists(lst1, 'hello', 'world', '!'));\nconsole.log(shortest(lst1, lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 1) {\n    return false;\n  }\n\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default isMultiplyPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let count = 0;\n  while (x % n === 0) {\n    x = x / n;\n    count++;\n  }\n  return count === n;\n};\n\n/*\n  Our task is to write a function that finds the largest number that is not a perfect power of any number\n  For example:\n  isPerfectPower(1, 1) => 1\n  isPerfectPower(2, 2) => 2\n  isPerfectPower(3, 3) => 3\n  isPerfectPower(5, 5) => 5\n  isPerfectPower(3, 7) => 3\n  isPerfectPower(10, 3) => 3\n  isPerfectPower(5, 5) => 5\n  isPerfectPower(15, 3) => 3\n  */\nconst isPerfectPower = (x, n) => {\n  let i = 1;\n  while (x % i === 0) {\n    if (isSimplePower(x, i) && i!== n) {\n      return false;\n    }\n    i++;\n  }\n  return x;\n};\n\nexport {\n  isPerfectPower,\n  isSimplePower,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const divisor = Math.sqrt(a);\n  return a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2)));\n};\n\nconst iscube2 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))));\n};\n\nconst iscube3 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1));\n};\n\nconst iscube4 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1));\n};\n\nconst iscube5 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1));\n};\n\nconst iscube6 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1));\n};\n\nconst iscube7 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1));\n};\n\nconst iscube8 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1));\n};\n\nconst iscube9 = (a) => {\n  return (a === Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))) || a === Math.pow(2, Math.floor(Math.log(a) / Math.log(2))) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) + 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1) || a === Math.pow(2, (Math.log(a) / Math.log(2)) - 1));\n};\n\nconst iscube10 = (a) => {\n  return"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let c = num;\n  let count = 0;\n  while(c.length > 0){\n    let dec = parseInt(c.slice(0, c.length - 1), 16);\n    if(isPrime(dec)){\n      count++;\n    }\n    c = c.slice(1);\n  }\n  return count;\n}\n\nconst isPrime = (num) => {\n  let isPrime = true;\n  for(let i = 2; i <= num / 2; i++){\n    if(num % i === 0){\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if (decimal === 0) return 'db';\n\n  let num = decimal;\n  let binary = 'b';\n  while (num > 0) {\n    binary = (num & 1) + binary;\n    num = num >> 1;\n  }\n\n  return 'db' + binary + 'db';\n};\n\nconsole.log(decimalToBinary(15));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    const len = s.length;\n    let count = 0;\n    let sum = 0;\n    let newSum = 0;\n    let count1 = 0;\n    let count2 = 0;\n    let count3 = 0;\n    const arr = s.split('');\n    let result = true;\n\n    for (let i = 0; i < len; i++) {\n        newSum = 0;\n        for (let j = i; j < len; j++) {\n            sum += parseInt(arr[j], 10);\n            newSum += sum;\n            if (sum >= 10) {\n                sum = 0;\n            } else if (sum < 10) {\n                sum = sum * 10;\n            }\n        }\n        if (newSum === sum) {\n            count++;\n            if (count >= 3) {\n                if (i - count >= 0) {\n                    count1++;\n                    if (count1 === 1) {\n                        count2 = 0;\n                        count3 = 0;\n                    }\n                    if (count2 === 1) {\n                        count3 = 0;\n                    }\n                    result = false;\n                } else {\n                    result = false;\n                }\n            } else {\n                result = false;\n            }\n        } else {\n            result = false;\n        }\n    }\n    return result;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const map = {\n    4: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1: 'D+',\n    0.7: 'D',\n    0.0: 'D-'\n  };\n\n  const output = [];\n\n  for (let i = 0; i < grades.length; i++) {\n    let grade = map[grades[i]];\n\n    if (grade) {\n      output.push(grade);\n    }\n  }\n\n  return output;\n};\n\nconst letterGrade = (grades) => {\n  const map = {\n    A: 'A+',\n    B: 'B+',\n    C: 'C+',\n    D: 'D+',\n    E: 'E'\n  };\n\n  const output = [];\n\n  for (let i = 0; i < grades.length; i++) {\n    let grade = map[grades[i]];\n\n    if (grade) {\n      output.push(grade);\n    }\n  }\n\n  return output;\n};\n\n/*\n  This is a helper function that converts the letter grade\n  to a numerical grade.\n  */\nconst letterToNumericalGrade = (letterGrade) => {\n  const map = {\n    A: 4,\n    B: 3,\n    C: 2,\n    D: 1,\n    E: 0\n  };\n\n  const output = [];\n\n  for (let i = 0; i < letterGrade.length; i++) {\n    let num = map[letterGrade[i]];\n\n    if (num) {\n      output.push(num);\n    }\n  }\n\n  return output;\n};\n\nconst letterGradeArray = (grades) => {\n  const map = {\n    A: 4,\n    B: 3,\n    C: 2,\n    D: 1,\n    E: 0\n  };\n\n  const output = [];\n\n  for (let i = 0; i < grades.length; i++) {\n    let grade = map[grades[i]];\n\n    if (grade) {\n      output.push(grade);\n    }\n  }\n\n  return output;\n};\n\nmodule.exports = {\n  numericalLetterGrade,\n  letterGrade,\n  letterToNumericalGrade,\n  letterGradeArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 1;\n  while (i < string.length) {\n    if (string.charAt(i) % 2 === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n * Write a function that takes an integer n and returns the smallest prime\n * greater than or equal to n.\n * Examples\n * smallestPrime(3) == 5\n * smallestPrime(4) == 7\n * smallestPrime(6) == 11\n * smallestPrime(9) == 13\n * smallestPrime(15) == 23\n * smallestPrime(21) == 3\n * smallestPrime(26) == 7\n * smallestPrime(30) == 23\n */\nconst smallestPrime = (n) => {\n  let i = 1;\n  while (i < n) {\n    if (primeLength(i + \"\")) {\n      return i + 1;\n    }\n    i++;\n  }\n  return n + 1;\n};\n\n/*\n * Write a function that takes an integer n and returns the smallest prime\n * greater than n.\n * Examples\n * smallestPrime(3) == 5\n * smallestPrime(4) == 7\n * smallestPrime(6) == 11\n * smallestPrime(9) == 13\n * smallestPrime(15) == 23\n * smallestPrime(21) == 3\n * smallestPrime(26) == 7\n * smallestPrime(30) == 23\n */\nconst smallestPrimePrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (primeLength(i + \"\")) {\n      return i + 1;\n    }\n    i++;\n  }\n  return n + 1;\n};\n\nconst findSmallestPrime = (n) => {\n  if (primeLength(n + \"\")) {\n    return n + 1;\n  }\n  return smallestPrimePrime(n);\n};\n\nconsole.log(findSmallestPrime(9));\nconsole.log(findSmallestPrime(19));\nconsole.log(findSmallestPrime(25));\nconsole.log(findSmallestPrime(29));\nconsole.log(findSmallestPrime(31));\nconsole.log(findSmallestPrime(39));\nconsole.log(findSmallestPrime(43));\nconsole.log(findSmallestPrime(49));\nconsole.log(findSmallestPrime(57));\nconsole.log(findSmallestPrime(61));\nconsole.log(findSmallestPrime(79));\nconsole.log(findSmallestPrime(89));\nconsole.log(findSmallestPrime(91));\nconsole.log(findSmallestPrime(99));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let i = 1;\n    while (i <= n) {\n      if (i > 1) {\n        let res = 0;\n        let i = 1;\n        while (i <= n) {\n          if (i === n) {\n            break;\n          }\n          if (i === 1) {\n            res++;\n          }\n          i++;\n        }\n        console.log(res);\n      }\n      i++;\n    }\n  }\n*/\nconst startsOneEnds = (n) => {\n  const start = n - 1;\n  let result = 0;\n  let i = start;\n  while (i >= 1) {\n    if (i === start) {\n      result++;\n    }\n    i--;\n  }\n  return result;\n};\n\n//export { startsOneEnds };\n\n/*\n  For a positive integer n, the number of positive integers between 1 and n which are also prime is returned. * / const primeNumbers = (n) = > {\n    let i = 1;\n    let j = 2;\n    while (i <= n) {\n      while (j <= n) {\n        if (j === n) {\n          break;\n        }\n        if (i === 1) {\n          continue;\n        }\n        if (isPrime(j)) {\n          break;\n        }\n        j++;\n      }\n      i++;\n    }\n    console.log(i - 1);\n  }\n*/\nconst primeNumbers = (n) => {\n  let result = 0;\n  let i = 1;\n  let j = 2;\n  while (i <= n) {\n    while (j <= n) {\n      if (j === n) {\n        break;\n      }\n      if (i === 1) {\n        continue;\n      }\n      if (isPrime(j)) {\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  result = i - 1;\n  return result;\n};\n\n//export { primeNumbers };\n\n/*\n  For a positive integer n, the number of positive integers between 1 and n which are also prime is returned. * / const primeNumbers = (n) = > {\n    let i = 1;\n    let j = 2;\n    let count = 0;\n    while (i <= n) {\n      while (j <= n) {\n        if (j === n) {\n          break;\n        }\n        if (i === 1) {\n          continue;\n        }\n        if (isPrime(j)) {\n          count++;\n          break;\n        }\n        j++;\n      }\n      i++;\n    }\n    console.log(count);\n  }\n*/\nconst isPrime = (n) => {\n  let result = false;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  if (result === true) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n//export { isPrime };\n\n/*\n  For a positive integer n, the number of positive integers between 1 and n which are also prime is returned. * / const primeNumbers = (n) = > {\n    let i = 1;\n    let j = 2;\n    let count = 0;\n    while (i <= n) {\n      while (j <= n) {\n        if (j === n) {\n          break;\n        }\n        if (i === 1) {\n          continue;\n        }\n        if (isPrime(j)) {\n          count++;\n          break;\n        }\n        j++;\n      }\n      i++;\n    }\n    console.log(count);\n  }\n*/\nconst isPrime = (n) => {\n  let result = false;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  if (result === true) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  For a positive integer n, the number of positive integers between 1 and n which are also prime is returned. * / const primeNumbers = (n) = > {\n    let i = 1;\n    let j = 2;\n    let count = 0;\n    while (i <= n) {\n      while (j <= n) {\n        if (j === n) {\n          break;\n        }\n        if (i === 1) {\n          continue;\n        }\n        if (isPrime(j)) {\n          count++;\n          break;\n        }\n        j++;\n      }\n      i++;\n    }\n    console.log(count);\n  }\n*/\nconst isPrime = (n) => {\n  let result = false;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  if (result === true) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  For a positive integer n, the number of positive integers between 1 and n which are also prime is returned. * / const primeNumbers = (n) = > {\n    let i = 1;\n    let j = 2;\n    let count = 0;\n    while (i <= n) {\n      while (j <= n) {\n        if (j === n) {\n          break;\n        }\n        if (i === 1) {\n          continue;\n        }\n        if (isPrime(j)) {\n          count++;\n          break;\n        }\n        j++;\n      }\n      i++;\n    }\n    console.log(count);\n  }\n*/\nconst isPrime = (n) => {\n  let result = false;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result = false;\n      break;\n    }\n    i++;\n  }\n  if (result === true) {\n    return true;\n  } else {\n    return false;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const bin = (num) => {\n    return new Array(num + 1).join('0').split('').map((digit) => {\n      return digit.charCodeAt(0);\n    });\n  };\n\n  const sum = (num) => {\n    return parseInt(bin(num).join(''));\n  };\n\n  return sum(N);\n};\n\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\nGiven two lists lst1 and lst2, merge them into a list of sorted elements.\n\nExample:\n  merge([1, 2, 3, 4], [5, 6, 7, 8]) ==> [1, 2, 3, 4, 5, 6, 7, 8]\n\nIf two elements are equal, leave the first element in lst1.\n\n\n  Examples:\n      merge([1, 2, 3, 4], [2, 4, 6, 8]) ==> [1, 2, 2, 3, 4, 6, 8]\n  */\nconst merge = (lst1, lst2) => {\n  let sorted = [];\n  let index = 0;\n  let index2 = 0;\n  while (index < lst1.length && index2 < lst2.length) {\n    if (lst1[index] < lst2[index2]) {\n      sorted.push(lst1[index++]);\n    } else if (lst1[index] > lst2[index2]) {\n      sorted.push(lst2[index2++]);\n    } else {\n      sorted.push(lst1[index++]);\n      sorted.push(lst2[index2++]);\n    }\n  }\n  while (index < lst1.length) {\n    sorted.push(lst1[index++]);\n  }\n  while (index2 < lst2.length) {\n    sorted.push(lst2[index2++]);\n  }\n  return sorted;\n};\n\n/*\nGiven two lists lst1 and lst2, merge them into a list of sorted elements.\n\nExample:\n  merge([1, 2, 3, 4], [2, 4, 6, 8]) ==> [1, 2, 4, 6, 8]\n\nIf two elements are equal, leave the first element in lst1.\n\n\n  Examples:\n      merge([1, 2, 3, 4], [2, 4, 6, 8]) ==> [1, 2, 2, 3, 4, 6, 8]\n  */\nconst merge_sorted = (lst1, lst2) => {\n  let sorted = [];\n  let index = 0;\n  let index2 = 0;\n  while (index < lst1.length && index2 < lst2.length) {\n    if (lst1[index] < lst2[index2]) {\n      sorted.push(lst1[index++]);\n    } else if (lst1[index] > lst2[index2]) {\n      sorted.push(lst2[index2++]);\n    } else {\n      sorted.push(lst1[index++]);\n      sorted.push(lst2[index2++]);\n    }\n  }\n  while (index < lst1.length) {\n    sorted.push(lst1[index++]);\n  }\n  while (index2 < lst2.length) {\n    sorted.push(lst2[index2++]);\n  }\n  return sorted;\n};\n\n/*\nGiven two lists lst1 and lst2, merge them into a list of sorted elements.\n\nExample:\n  merge([1, 2, 3, 4], [2, 4, 6, 8]) ==> [1, 2, 2, 3, 4, 6, 8]\n\nIf two elements are equal, leave the first element in lst1.\n\n\n  Examples:\n      merge([1, 2, 3, 4], [2, 4, 6, 8]) ==> [1, 2, 4, 6, 8]\n  */\nconst merge_sorted_2 = (lst1, lst2) => {\n  let sorted = [];\n  let index = 0;\n  let index2 = 0;\n  while (index < lst1.length && index2 < lst2.length) {\n    if (lst1[index] < lst2[index2]) {\n      sorted.push(lst1[index++]);\n    } else if (lst1[index] > lst2[index2]) {\n      sorted.push(lst2[index2++]);\n    } else {\n      sorted.push(lst1[index++]);\n      sorted.push(lst2[index2++]);\n    }\n  }\n  while (index < lst1.length) {\n    sorted.push(lst1[index++]);\n  }\n  while (index2 < lst2.length) {\n    sorted.push(lst2[index2++]);\n  }\n  return sorted;\n};\n\nmodule.exports = {\n  add,\n  merge,\n  merge_sorted,\n  merge_sorted_2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    let result = [];\n    let i = 0;\n    while(i < s.length) {\n        let j = 0;\n        let word = '';\n        while(j < s.length) {\n            if(s[j] ==='') {\n                if(word.length > 0) {\n                    result.push(word);\n                    word = '';\n                }\n            }\n            else {\n                word += s[j];\n            }\n            j++;\n        }\n        i++;\n    }\n    if(word.length > 0) {\n        result.push(word);\n    }\n    return result.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const arr = lst.map((r) => r.slice(x).reverse());\n  const arr2 = arr.map((r, i) => [x + i,...r]);\n  const rows = arr.concat(arr2);\n  rows.sort(function(a, b) {\n    return a[0] > b[0]? 1 : -1;\n  });\n  return rows;\n};\n\nmodule.exports = getRow;\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sum = 0\n  let reverse = false\n  let sorted = []\n\n  for (let i = 0; i < array.length - 1; i++) {\n    sum += array[i]\n  }\n\n  if (sum % 2 === 0) {\n    reverse = true\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    sorted.push(array[i])\n  }\n\n  if (reverse) {\n    sorted.reverse()\n  }\n\n  return sorted\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = [\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  ];\n\n  const newAlphabet = alphabet.slice(0, alphabet.length - 2);\n\n  let result = '';\n\n  for (let i = 0; i < s.length; i += 2) {\n    const first = s.charCodeAt(i);\n    const second = s.charCodeAt(i + 1);\n    const index = Math.floor(Math.random() * newAlphabet.length);\n\n    result += newAlphabet[index] + newAlphabet[index];\n\n    newAlphabet.splice(index, 1);\n  }\n\n  return result;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'i'\n  encrypt('asdfghjkl') returns 'fghjkl'\n  encrypt('gf') returns 'j'\n  encrypt('et') returns 't'\n  */\nconst decrypt = (s) => {\n  const alphabet = [\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  ];\n\n  const newAlphabet = alphabet.slice(2, alphabet.length);\n\n  let result = '';\n\n  for (let i = 0; i < s.length; i += 2) {\n    const first = s.charCodeAt(i);\n    const second = s.charCodeAt(i + 1);\n    const index = Math.floor(Math.random() * newAlphabet.length);\n\n    result += newAlphabet[index] + newAlphabet[index];\n\n    newAlphabet.splice(index, 1);\n  }\n\n  return result;\n};\n\nexport { encrypt, decrypt };\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  const smallest = lst[0];\n  const smallestIndex = lst.findIndex(function (item) {\n    return item < smallest;\n  });\n  if (smallestIndex === -1) return null;\n  return lst[smallestIndex + 1];\n}\n//*/\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    if(typeof S!== \"string\")\n        return false;\n    const list = S.split(/[?\\.,]/);\n    const start = list[0].toLowerCase();\n    const end = list[list.length-1].toLowerCase();\n    return start === \"i\" && end === \"i\";\n}\n\nmodule.exports = isBored;<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\nconst isInteger = (x) => {\n  return x % 1 === 0;\n};\n\nconst isInt = (x) => {\n  return typeof x === 'number' && isInteger(x);\n};\n\nconst main = () => {\n  console.log(anyInt(5, 2, 7)); // true\n  console.log(anyInt(3, 2, 2)); // false\n  console.log(anyInt(3, -2, 1)); // true\n  console.log(anyInt(3.6, -2.2, 2)); // false\n  console.log(isInt(3.6)); // true\n  console.log(isInt(3.6 + -2.2)); // true\n  console.log(isInt(3)); // true\n  console.log(isInt(3.6 + -2.2)); // true\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let buffer = '';\n  message.split(' ').forEach((letter) => {\n    buffer += letter.toUpperCase();\n  });\n  return buffer.split('').reverse().join('').replace(/[aeiou]/g, (match) => {\n    let letter = encode(match);\n    return letter;\n  });\n};\n\nconst decode = (message) => {\n  let buffer = '';\n  message.split('').forEach((letter) => {\n    buffer += letter.toLowerCase();\n  });\n  return buffer.split('').reverse().join('');\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const len = lst.length;\n  let res = 0;\n  for (let i = 0; i < len; i++) {\n    res += lst[i];\n  }\n  return res;\n};\n\nexport default skjkasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    return Object.keys(dict).every(key => {\n        if (key.length === 1) {\n            return key.toUpperCase() === key.toLowerCase();\n        } else {\n            return key.toUpperCase() === key.toLowerCase();\n        }\n    });\n};\n\nconst checkDictValue = (dict, key) => {\n    if (key.length === 1) {\n        return key.toUpperCase() === key.toLowerCase();\n    } else {\n        return key.toUpperCase() === key.toLowerCase();\n    }\n};\n\n/*\n  If the specified dictionary is not empty, return true if any key string is a valid number, otherwise return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictNumber({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictNumber({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictNumber({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictNumber({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictNumber({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictNumber = (dict) => {\n    return Object.keys(dict).every(key => {\n        if (isNaN(key)) {\n            return false;\n        } else {\n            return true;\n        }\n    });\n};\n\nconst checkDictKey = (dict, key) => {\n    return Object.keys(dict).indexOf(key) > -1;\n};\n\nconst checkDictValueInRange = (dict, key, min, max) => {\n    return dict[key] >= min && dict[key] <= max;\n};\n\nconst checkDictValueNotInRange = (dict, key, min, max) => {\n    return dict[key] < min || dict[key] > max;\n};\n\nconst checkDictValueEquals = (dict, key, value) => {\n    return dict[key] === value;\n};\n\nconst checkDictValueNotEquals = (dict, key, value) => {\n    return dict[key]!== value;\n};\n\nconst checkDictValueEqualsRange = (dict, key, value, min, max) => {\n    return dict[key] >= min && dict[key] <= max && dict[key] === value;\n};\n\nconst checkDictValueNotEqualsRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotInRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotEqualsRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotEquals = (dict, key, value) => {\n    return dict[key]!== value;\n};\n\nconst checkDictValueInRange = (dict, key, value, min, max) => {\n    return dict[key] >= min && dict[key] <= max && dict[key] === value;\n};\n\nconst checkDictValueInRange = (dict, key, value, min, max) => {\n    return dict[key] >= min && dict[key] <= max && dict[key] === value;\n};\n\nconst checkDictValueNotInRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotInRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotEqualsRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotEqualsRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotEquals = (dict, key, value) => {\n    return dict[key]!== value;\n};\n\nconst checkDictValueInRange = (dict, key, value, min, max) => {\n    return dict[key] >= min && dict[key] <= max && dict[key] === value;\n};\n\nconst checkDictValueInRange = (dict, key, value, min, max) => {\n    return dict[key] >= min && dict[key] <= max && dict[key] === value;\n};\n\nconst checkDictValueNotInRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDictValueNotInRange = (dict, key, value, min, max) => {\n    return dict[key] < min || dict[key] > max || dict[key]!== value;\n};\n\nconst checkDict"}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const prime = primeNumbers(n)\n  const primes = prime.slice(0, n)\n  const primeNumbers = [...new Array(n)].map(() => 0)\n  const primeNumber = primeNumbers.reduce((acc, i) => {\n    if (prime[i] === true) {\n      acc++\n    }\n    return acc\n  }, 0)\n  const primeNumbersLength = primeNumber\n  return [...new Array(n)].map(() => primeNumber)\n}\n\nconsole.log(countUpTo(10))\nconsole.log(countUpTo(15))\nconsole.log(countUpTo(17))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  // Complete this function\n}\n\n// Test cases\nconst testCases = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [0, 0, 0],\n    [1, 1, 1],\n    [2, 2, 2]\n  ],\n  [\n    [9, 8, 7],\n    [6, 5, 4],\n    [3, 2, 1]\n  ],\n  [\n    [18, 13, 7],\n    [3, 6, 9],\n    [5, 8, 10]\n  ],\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [0, 0, 0],\n    [1, 1, 1],\n    [2, 2, 2]\n  ],\n  [\n    [9, 8, 7],\n    [6, 5, 4],\n    [3, 2, 1]\n  ],\n  [\n    [18, 13, 7],\n    [3, 6, 9],\n    [5, 8, 10]\n  ]\n];\n\nconsole.log(multiply(...testCases[0]));\nconsole.log(multiply(...testCases[1]));\nconsole.log(multiply(...testCases[2]));\nconsole.log(multiply(...testCases[3]));\nconsole.log(multiply(...testCases[4]));\nconsole.log(multiply(...testCases[5]));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const n = s.length\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const n = parseFloat(value);\n  const nInt = Math.floor(n);\n  const nFrac = n - nInt;\n\n  if (nInt === n) {\n    return nInt;\n  }\n\n  const nearest = Math.abs(nInt - nFrac) < Math.abs(nInt + nFrac)? nInt : nInt + 1;\n\n  return nearest;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const numOfStmts = [\n    `if (n % 2 === 1) { return n + 1; } else { return n; }`,\n    `return n + (n / 2)`,\n  ];\n\n  return numOfStmts.map((stmt) => {\n    const stmtParts = stmt.split(' ');\n    return [\n     ...stmtParts.slice(0, stmtParts.length - 1),\n      stmtParts[stmtParts.length - 1],\n    ].join(' ');\n  });\n};\n\nconsole.log(makeAPile(4));\n// [3, 5, 7, 9]\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/g)\n  return words\n}\n\nconst wordsArray = (s) => {\n  const words = s.split(/\\s+/)\n  return words\n}\n\nconst wordsSet = (s) => {\n  const words = s.split(/\\s+/g)\n  return new Set(words)\n}\n\nconst wordsMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsMapSet = (s) => {\n  const map = wordsMap(s)\n  const set = new Set()\n  for(let key of map.keys()) {\n    set.add(key)\n  }\n  return set\n}\n\nconst wordsArraySet = (s) => {\n  const words = wordsArray(s)\n  const set = new Set()\n  for(let i=0; i < words.length; i++) {\n    set.add(words[i])\n  }\n  return set\n}\n\nconst wordsStringSet = (s) => {\n  const words = wordsArray(s)\n  const set = new Set()\n  for(let i=0; i < words.length; i++) {\n    set.add(words[i])\n  }\n  return set\n}\n\nconst wordsArrayMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsMapSet = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsArrayMapSet = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsSetMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsSetMapSet = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsSetMapSetSet = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsSetMapSetMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsMapSetMapSet = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsArrayMapMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsArrayMapMapSet = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsArrayMapMapMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nconst wordsArrayMapMapMapMap = (s) => {\n  const words = wordsArray(s)\n  const map = new Map()\n  for(let i=0; i < words.length; i++) {\n    map.set(words[i], 1)\n  }\n  return map\n}\n\nexport {\n  wordsString,\n  wordsArray,\n  wordsSet,\n  wordsMap,\n  wordsMapSet,\n  wordsArraySet,\n  wordsStringSet,\n  wordsArrayMap,\n  wordsMapSet,\n  wordsArrayMapSet,\n  wordsSetMap,\n  wordsMapSetSet,\n  wordsArrayMapMap,\n  wordsArrayMapMapSet,\n  wordsArrayMapMapMap,\n  wordsArrayMapMapMapMap,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let a = Math.ceil(x / 2);\n  let b = Math.floor(y / 2);\n  let l = a;\n  let r = b;\n  while (l < r) {\n    let mid = Math.floor((l + r) / 2);\n    if (mid % 2 === 0) {\n      return mid;\n    }\n    l = mid + 1;\n  }\n  return l - 1;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) return -1;\n  const avg = (n + m) / 2;\n  return parseInt(avg.toString(2));\n};\n\n/*\n  find the difference between two numbers, n and m\n  Example:\n  findDifference(1, 5) => \"3\"\n  findDifference(5, 1) => \"4\"\n  findDifference(10, 20) => \"11\"\n  findDifference(20, 33) => \"21\"\n  */\nconst findDifference = (n, m) => {\n  const diff = Math.abs(n - m);\n  return parseInt(diff.toString(2));\n};\n\n/*\n  Return the number of different numbers between two strings n and m.\n  Example:\n  countDifference(\"1\", \"5\") => \"3\"\n  countDifference(\"5\", \"1\") => \"4\"\n  countDifference(\"10\", \"20\") => \"11\"\n  countDifference(\"20\", \"33\") => \"21\"\n  */\nconst countDifference = (n, m) => {\n  const diff = m - n;\n  return parseInt(diff.toString(2));\n};\n\n/*\n  Given a string n, calculate the number of different numbers between n and m.\n  Example:\n  difference(\"1\", \"5\") => \"3\"\n  difference(\"5\", \"1\") => \"4\"\n  difference(\"10\", \"20\") => \"11\"\n  difference(\"20\", \"33\") => \"21\"\n  */\nconst difference = (n, m) => {\n  let total = 0;\n  let diff = 0;\n  const nStr = n.split(\"\");\n  const mStr = m.split(\"\");\n  const nLen = nStr.length;\n  const mLen = mStr.length;\n\n  for (let i = 0; i < nLen; i++) {\n    for (let j = 0; j < mLen; j++) {\n      if (nStr[i] === mStr[j]) {\n        if (i === 0 && j === 0) {\n          total++;\n          continue;\n        }\n        if (nStr[i - 1] === mStr[j - 1]) {\n          total++;\n          continue;\n        }\n        diff++;\n      }\n    }\n  }\n\n  return diff;\n};\n\n/*\n  Given a string n, return the number of different numbers in the string.\n  Example:\n  numberOfDifference(\"1\") => 1\n  numberOfDifference(\"5\") => 3\n  numberOfDifference(\"10\") => 6\n  numberOfDifference(\"20\") => 10\n  */\nconst numberOfDifference = (n) => {\n  let total = 0;\n  const nStr = n.split(\"\");\n  const nLen = nStr.length;\n\n  for (let i = 0; i < nLen; i++) {\n    if (nStr[i] === \"\") {\n      total++;\n      continue;\n    }\n    total += difference(nStr[i - 1], nStr[i]);\n  }\n\n  return total;\n};\n\n/*\n  Given two strings n and m, return the number of different numbers between n and m.\n  Example:\n  findDifferenceBetween(\"1\", \"5\") => \"3\"\n  findDifferenceBetween(\"5\", \"1\") => \"4\"\n  findDifferenceBetween(\"10\", \"20\") => \"11\"\n  findDifferenceBetween(\"20\", \"33\") => \"21\"\n  */\nconst findDifferenceBetween = (n, m) => {\n  return difference(n, m);\n};\n\n/*\n  Given a string n, return the number of different numbers in the string.\n  Example:\n  numberOfDifference(\"1\") => 1\n  numberOfDifference(\"5\") => 3\n  numberOfDifference(\"10\") => 6\n  numberOfDifference(\"20\") => 10\n  */\nconst numberOfDifferenceBetween = (n) => {\n  return numberOfDifference(n);\n};\n\n/*\n  Given two strings n and m, return the difference between the two strings.\n  Example:\n  differenceBetween(\"1\", \"5\") => \"3\"\n  differenceBetween(\"5\", \"1\") => \"4\"\n  differenceBetween(\"10\", \"20\") => \"11\"\n  differenceBetween(\"20\", \"33\") => \"21\"\n  */\nconst differenceBetween = (n, m) => {\n  return findDifferenceBetween(n, m);\n};\n\n/*\n  Given two strings n and m, return the number of different numbers between n and m.\n  Example:\n  differenceBetween(\"1\", \"5\") => \"3\"\n  differenceBetween(\"5\", \"1\") => \"4\"\n  differenceBetween(\"10\", \"20\") => \"11\"\n  differenceBetween(\"20\", \"33\") => \"21\"\n  */\nconst differenceBetweenNum = (n, m) => {\n  return findDifferenceBetweenNum(n, m);\n};\n\n/*\n  Given two strings n and m, return the difference between the two strings.\n  Example:\n  findDifferenceBetween(\"1\", \"5\") => \"3\"\n  findDifferenceBetween(\"5\", \"1\") => \"4\"\n  findDifferenceBetween(\"10\", \"20\") => \"11\"\n  findDifferenceBetween(\"20\", \"33\") => \"21\"\n  */\nconst findDifferenceBetweenNum = (n, m) => {\n  return findDifferenceBetween(n, m);\n};\n\nmodule.exports = {\n  roundedAvg,\n  findDifference,\n  countDifference,\n  differenceBetween,\n  numberOfDifferenceBetween,\n  findDifferenceBetweenNum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let result = [];\n    let counter = 0;\n    while(x > 0) {\n        counter += (x % 10)? 0 : 1;\n        x /= 10;\n    }\n    x = counter;\n    while(x > 0) {\n        result.push(x % 10);\n        x /= 10;\n    }\n    result.sort();\n    return result;\n}\n\n/*GWhen given a string s, return a list of the string characters. Note: Each character must be in lowercase.\n  >>> charList(\"abc\")\n  ['a', 'b', 'c']\n  >>> charList(\"ABC\")\n  []\n  */\nconst charList = (s) => {\n    let result = [];\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].toLowerCase() === s[i]) {\n            result.push(s[i]);\n        }\n    }\n    return result;\n}\n\n/*GGiven two strings s and t, return the longest string that is a permutation of the other.\n  >>> permutation(\"abc\", \"cde\")\n  'cde'\n  >>> permutation(\"abc\", \"cde\")\n  'abc'\n  >>> permutation(\"ab\", \"cde\")\n  'ab'\n  >>> permutation(\"abc\", \"\")\n  'abc'\n  >>> permutation(\"abc\", \"def\")\n  'abc'\n  */\nconst permutation = (s, t) => {\n    let result = [];\n    let sList = charList(s);\n    let tList = charList(t);\n    for(let i = 0; i < sList.length; i++) {\n        for(let j = 0; j < tList.length; j++) {\n            if(sList[i] === tList[j]) {\n                result.push(sList[i]);\n            }\n        }\n    }\n    return result.sort().join(\"\");\n}\n\n/*GGiven two strings s and t, return the longest string that is a permutation of the other, or the empty string if there is none.\n  >>> permutation(\"ab\", \"cde\")\n  ''\n  >>> permutation(\"abc\", \"cde\")\n  'cde'\n  >>> permutation(\"abc\", \"\")\n  'abc'\n  >>> permutation(\"ab\", \"def\")\n  'ab'\n  */\nconst permutationRecursive = (s, t) => {\n    if(s.length === 0) {\n        return t;\n    }\n    if(t.length === 0) {\n        return s;\n    }\n    let left = permutationRecursive(s.substring(1), t.substring(1));\n    if(left!== \"\") {\n        return left + s.charAt(0) + t.charAt(0);\n    }\n    let right = permutationRecursive(s, t.substring(1));\n    if(right!== \"\") {\n        return s.charAt(0) + right;\n    }\n    return \"\";\n}\n\n/*GReturn the longest string that is a permutation of the other string.\n  >>> permutationRecursive(\"abc\", \"cde\")\n  'cde'\n  >>> permutationRecursive(\"abc\", \"cde\")\n  'abc'\n  >>> permutationRecursive(\"ab\", \"cde\")\n  'ab'\n  >>> permutationRecursive(\"ab\", \"def\")\n  ''\n  */\nconst permutationRecursive = (s, t) => {\n    if(s.length === 0) {\n        return t;\n    }\n    if(t.length === 0) {\n        return s;\n    }\n    let left = permutationRecursive(s.substring(1), t.substring(1));\n    if(left!== \"\") {\n        return left + s.charAt(0) + t.charAt(0);\n    }\n    let right = permutationRecursive(s, t.substring(1));\n    if(right!== \"\") {\n        return s.charAt(0) + right;\n    }\n    return \"\";\n}\n\n/*\n\n*/\nconst longestCommonSubstring = (s, t) => {\n    let max = 0;\n    let start = 0;\n    let end = 0;\n    while(end < s.length && start < t.length) {\n        if(s[end] === t[start]) {\n            max = Math.max(max, end - start);\n            start++;\n            end++;\n        }\n        else if(s[end] < t[start]) {\n            end++;\n        }\n        else {\n            start++;\n        }\n    }\n    return max;\n}\n\n/*\n\n*/\nconst longestCommonSubstring = (s, t) => {\n    let i = 0;\n    let j = 0;\n    let lcs = 0;\n    while(i < s.length && j < t.length) {\n        if(s[i] === t[j]) {\n            lcs = Math.max(lcs, i - j);\n            i++;\n            j++;\n        }\n        else if(s[i] < t[j]) {\n            i++;\n        }\n        else {\n            j++;\n        }\n    }\n    return lcs;\n}\n\nconst main = () => {\n    let testString = \"abcdefg\";\n    let testString2 = \"cd\";\n    let testString3 = \"abcd\";\n    console.log(longestCommonSubstring(testString, testString2));\n    console.log(longestCommonSubstring(testString, testString3));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let nums = arr.slice();\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n\n  while (i <= j) {\n    while (nums[i] < 10 && i < len - 1) {\n      i++;\n    }\n    while (nums[j] > 0 && j > 0) {\n      j--;\n    }\n    if (i <= j) {\n      let t = nums[i];\n      nums[i] = nums[j];\n      nums[j] = t;\n    }\n  }\n\n  return nums.reverse().map((x) => (x === 0? \"zero\" : x));\n};\n\nconst byLength2 = (arr) => {\n  let nums = arr.slice();\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let num = nums[i];\n  let last = nums[j];\n  let sum = 0;\n\n  while (i <= j) {\n    while (num < 10 && i < len - 1) {\n      i++;\n      num = nums[i];\n    }\n    while (last > 0 && j > 0) {\n      j--;\n      last = nums[j];\n    }\n    if (i <= j) {\n      sum += num - nums[i];\n      let t = nums[i];\n      nums[i] = nums[j];\n      nums[j] = t;\n      num = nums[i];\n    }\n  }\n\n  return sum;\n};\n\nconst byLength3 = (arr) => {\n  let nums = arr.slice();\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n\n  while (i <= j) {\n    while (nums[i] < 10 && i < len - 1) {\n      i++;\n    }\n    while (nums[j] > 0 && j > 0) {\n      j--;\n    }\n    if (i <= j) {\n      let t = nums[i];\n      nums[i] = nums[j];\n      nums[j] = t;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n  }\n\n  return sum;\n};\n\nconst byLength4 = (arr) => {\n  let nums = arr.slice();\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n\n  while (i <= j) {\n    while (nums[i] < 10 && i < len - 1) {\n      i++;\n    }\n    while (nums[j] > 0 && j > 0) {\n      j--;\n    }\n    if (i <= j) {\n      let t = nums[i];\n      nums[i] = nums[j];\n      nums[j] = t;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n  }\n\n  return sum;\n};\n\nconst byLength5 = (arr) => {\n  let nums = arr.slice();\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n  let num = nums[i];\n  let last = nums[j];\n  let sumLast = 0;\n\n  while (i <= j) {\n    while (num < 10 && i < len - 1) {\n      i++;\n      num = nums[i];\n    }\n    while (last > 0 && j > 0) {\n      j--;\n      last = nums[j];\n    }\n    if (i <= j) {\n      sum += num - nums[i];\n      let t = nums[i];\n      nums[i] = nums[j];\n      nums[j] = t;\n      num = nums[i];\n    }\n  }\n\n  return sum;\n};\n\nconst byLength6 = (arr) => {\n  let nums = arr.slice();\n  let len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let sum = 0;\n\n  while (i <= j) {\n    while (nums[i] < 10 && i < len - 1) {\n      i++;\n    }\n    while (nums[j] > 0 && j > 0) {\n      j--;\n    }\n    if (i <= j) {\n      let t = nums[i];\n      nums[i] = nums[j];\n      nums[j] = t;\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n  }\n\n  return sum;\n};\n\nmodule.exports = {\n  byLength,\n  byLength2,\n  byLength3,\n  byLength4,\n  byLength5,\n  byLength6\n};\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const n_2 = f(n - 1);\n  const result = [];\n\n  for (let i = 0; i < n; i += 2) {\n    result.push(n_2[i]);\n  }\n\n  return result;\n};\n\nmodule.exports = f;<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const numOfEven = 0\n  const numOfOdd = 0\n  let num = 1\n  while (num <= n) {\n    if (isPalindrome(num)) {\n      if (isEven(num)) {\n        numOfEven++\n      } else {\n        numOfOdd++\n      }\n    }\n    num++\n  }\n  return (numOfEven, numOfOdd)\n}\n\n/*\n  If you return a tuple with the number of even and odd integer palindromes within the range (1, n), including,\n  you should not return a tuple of a negative integer.\n\n  Example:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n      3. return value should be a tuple.\n  */\nconst evenOddPalindrome2 = (n) => {\n  const numOfEven = 0\n  const numOfOdd = 0\n  let num = 1\n  while (num <= n) {\n    if (isPalindrome(num)) {\n      if (isEven(num)) {\n        numOfEven++\n      } else {\n        numOfOdd++\n      }\n    }\n    num++\n  }\n  return (numOfEven, numOfOdd)\n}\n\nfunction isPalindrome(n) {\n  return n === parseInt(n, 10)\n}\n\nfunction isEven(n) {\n  return n % 2 === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        if (num > 0) {\n            if (isNaN(num)) {\n                result++;\n            } else {\n                result += num.toString().split('').reduce((a, c) => a + parseInt(c, 10) > 0? 1 : 0, 0);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Write a function that takes an array of strings and returns the number of strings in the array with length > 1.\n  >>> countStrings([]) == 0\n  >>> countStrings([\"Hello\", \"World\", \"!\"]) == 1\n  >>> countStrings([\"Hello\", \"World\", \"!\", \"!\"]) == 2\n  >>> countStrings([\"Hello\", \"World\", \"!\", \"!\"]) == 2\n  */\nconst countStrings = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let str = arr[i];\n        if (str.length > 1) {\n            result++;\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    countNums,\n    countStrings\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let cnt = arr.length;\n  if (cnt === 0) {\n    return true;\n  }\n  let prev = arr[cnt - 1];\n  let idx = cnt - 2;\n  while (idx >= 0) {\n    if (arr[idx] > prev) {\n      arr[idx + 1] = arr[idx];\n      idx--;\n      continue;\n    }\n    arr[idx + 1] = prev;\n    break;\n  }\n  return (cnt === 1) || (moveOneBall(arr.slice(idx + 1)));\n};\n\nconst moveOneBallSlow = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let max = arr[arr.length - 1];\n  let idx = arr.length - 2;\n  while (idx >= 0) {\n    if (arr[idx] > max) {\n      arr[idx + 1] = arr[idx];\n      idx--;\n      continue;\n    }\n    arr[idx + 1] = max;\n    break;\n  }\n  return (idx === 0) || (moveOneBallSlow(arr.slice(idx + 1)));\n};\n\nconst moveOneBallQuick = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let idx = arr.length - 2;\n  while (idx >= 0) {\n    if (arr[idx] > arr[idx + 1]) {\n      arr[idx + 1] = arr[idx];\n      idx--;\n      continue;\n    }\n    break;\n  }\n  return (idx === 0) || (moveOneBallQuick(arr.slice(idx + 1)));\n};\n\nconst test = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(moveOneBallSlow(arr));\n  console.log(moveOneBall(arr));\n  console.log(moveOneBallQuick(arr));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Copy = lst1.slice(0);\n  const lst2Copy = lst2.slice(0);\n\n  const result = [];\n\n  for (let i = 0; i < lst1Copy.length; i++) {\n    for (let j = 0; j < lst2Copy.length; j++) {\n      if (lst1Copy[i] === lst2Copy[j]) {\n        lst1Copy.splice(i, 1);\n        lst2Copy.splice(j, 1);\n        result.push(lst1Copy.shift() + lst2Copy.shift());\n        break;\n      }\n    }\n  }\n\n  return result.length === 0? \"YES\" : \"NO\";\n};\n\nexport default exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const count = {}\n  let maxCount = 0\n  let currentLetter = ''\n  let currentCount = 0\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].length > currentLetter.length) {\n      currentLetter = letters[i]\n      currentCount = 0\n    }\n    if (letters[i].length === currentLetter.length) {\n      if (letters[i] < currentLetter) {\n        currentCount++\n      }\n      if (currentCount > maxCount) {\n        maxCount = currentCount\n      }\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let result = [],\n        i = 0,\n        j = 0;\n    while (i < s.length) {\n        if (s.charAt(i) === c.charAt(j)) {\n            i += 1;\n            j += 1;\n        } else {\n            result.push(s.charAt(i));\n            i += 1;\n        }\n    }\n    return [result.reverse(), result.length === s.length];\n};\n\nconst test = [\n    [\"abcde\", \"ae\"],\n    [\"abcdef\", \"b\"],\n    [\"abcdedcba\", \"ab\"],\n];\n\ntest.forEach(t => {\n    console.log(t[0], reverseDelete(t[0], t[1])[0]);\n});\n\n/*\n  Task\n  Given a string s and a character c, you have to replace all occurrences of c with c**, and then return the resulting string.\n  Example\n  For s = \"abcdef\", c = \"b\"  the result should be \"acdef\".\n  For s = \"aacaa\", c = \"c\"  the result should be \"acacaa\".\n  For s = \"abcdef\", c = \"d\"  the result should be \"abcdef\".\n  */\nconst reverseString = (s, c) => {\n    let result = \"\";\n    for (let i = s.length - 1; i >= 0; i -= 1) {\n        if (s.charAt(i) === c) {\n            result += c;\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n};\n\nconst test2 = [\n    [\"abcdef\", \"b\"],\n    [\"aacaa\", \"c\"],\n    [\"abcdef\", \"d\"],\n];\n\ntest2.forEach(t => {\n    console.log(t[0], reverseString(t[0], t[1]));\n});\n\n/*\n  Task\n  Given two strings s and t, you have to return a new string with all the characters of t in s.\n  Example\n  For s = \"abcdef\", t = \"abc\", the result should be \"abcdef\".\n  For s = \"abcdef\", t = \"xyz\", the result should be \"defxyz\".\n  For s = \"abcdef\", t = \"xyz\", the result should be \"xyzdef\".\n  For s = \"abcdef\", t = \"xyz\", the result should be \"xyzdef\".\n  */\nconst reverse = (s, t) => {\n    let result = \"\";\n    for (let i = 0; i < t.length; i += 1) {\n        result += s.charAt(i);\n    }\n    return result;\n};\n\nconst test3 = [\n    [\"abcdef\", \"abc\"],\n    [\"abcdef\", \"xyz\"],\n    [\"abcdef\", \"xyz\"],\n];\n\ntest3.forEach(t => {\n    console.log(t[0], reverse(t[0], t[1]));\n});\n\n/*\n  Task\n  Given a string s, you have to return the index of the first position in s where the substring (s, s.indexOf(s, i + 1)) doesn't contain a sub-string of the same length.\n  Example\n  For s = \"abracadabra\", the result should be 4.\n  */\nconst findLast = (s) => {\n    let result = 0,\n        i = 0;\n    while (i < s.length) {\n        if (s.indexOf(s, i + 1)!== -1) {\n            result = i + 1;\n        }\n        i += 1;\n    }\n    return result;\n};\n\nconst test4 = [\n    [\"abracadabra\", \"abracadabra\"],\n    [\"abracadabra\", \"abracad\"],\n    [\"abracadabra\", \"abrac\"],\n];\n\ntest4.forEach(t => {\n    console.log(t[0], findLast(t[0]));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i].charAt(j) === '1') {\n        temp.push(lst[i].charAt(j));\n      }\n    }\n    let count = 0;\n    for (let j = 0; j < temp.length; j++) {\n      if (temp[j] === '1') count++;\n    }\n    result.push(count);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const array = nums.sort((a, b) => a - b);\n  let minSum = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const minSubArray = array.slice(i);\n    const sum = minSubArray.reduce((prev, cur) => prev + cur, 0);\n    if (minSum + sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    if (grid.length === 1) return 0;\n    let left = 0, right = grid.length - 1;\n    let i, j;\n    while (left <= right) {\n        i = left;\n        j = right;\n        while (i <= right && j >= left) {\n            if (grid[i][j] === 1) {\n                if (i - 1 > 0 && grid[i - 1][j] === 0) {\n                    return Math.min(grid[i][j], capacity);\n                }\n                if (j + 1 < grid.length && grid[i][j + 1] === 0) {\n                    return Math.min(grid[i][j], capacity);\n                }\n            }\n            j--;\n        }\n        left = i;\n        right = j;\n    }\n    return 0;\n}\n\nconsole.log(maxFill([[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 0, 1]], 1));\nconsole.log(maxFill([[0, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 0]], 2));\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5));\nconsole.log(maxFill([[1, 1, 1], [0, 1, 1]], 1));\nconsole.log(maxFill([[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 1));\nconsole.log(maxFill([[0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  // Get the number of ones\n  let ones = 0;\n  for (let i = 0; i < arr.length; i++) {\n    ones += (arr[i] > 0? 1 : 0);\n  }\n  // Sort by the number of ones\n  if (ones > 0) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => a * b);\n  }\n};\n\n// Tests\nsortArray([1, 5, 2, 3, 4]);\nsortArray([-2, -3, -4, -5, -6]);\nsortArray([1, 0, 2, 3, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if(s.length === 0) return [];\n  let words = [];\n  let i = 0;\n  while(i < s.length) {\n    let j = i + 1;\n    while(j < s.length && s.charAt(j) ==='') j++;\n    let word = s.slice(i, j);\n    if(word.length === n) {\n      words.push(word);\n    }\n    i = j;\n  }\n  return words;\n}\n\nconst selectWords2 = (s, n) => {\n  let words = [];\n  let i = 0;\n  while(i < s.length) {\n    let j = i + 1;\n    while(j < s.length && s.charAt(j) ==='') j++;\n    let word = s.slice(i, j);\n    if(word.length === n) {\n      words.push(word);\n    }\n    i = j;\n  }\n  return words;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowel = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n  const consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"]\n  const length = word.length\n  const start = length - 1\n  const end = 0\n  let i = start\n  let j = end\n\n  let char = \"\"\n  while (i >= 0) {\n    char = word[i]\n    if (vowel.includes(char.toLowerCase()) && consonants.includes(word[j].toLowerCase())) {\n      return word[i]\n    }\n    i--\n  }\n\n  return \"\"\n}\n\nexport default getClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [],\n    len = lst.length,\n    i = 0;\n\n  while (i < len) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      } else {\n        stack.pop();\n      }\n    }\n    i++;\n  }\n\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconsole.log(matchParens(['()()', ')']));\nconsole.log(matchParens(['())', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k <= 0 || k > arr.length) return arr\n  return [arr[0],...arr.slice(1, k),...arr.slice(k + 1)]\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        if (arr[i] < 1000) {\n            result[i] = arr[i];\n        } else {\n            result[i] = arr[i] - 1000;\n            if (max < result[i]) {\n                max = result[i];\n            }\n        }\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test = (arr, k) => {\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        if (arr[i] < 1000) {\n            return arr[i];\n        } else {\n            sum += arr[i];\n        }\n    }\n    return sum + max;\n};\n\nconst addElements_test_2 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        if (arr[i] < 1000) {\n            result[i] = arr[i];\n        } else {\n            result[i] = arr[i] - 1000;\n            if (max < result[i]) {\n                max = result[i];\n            }\n        }\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test_3 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test_4 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        result[i] = arr[i] - 1000;\n        if (max < result[i]) {\n            max = result[i];\n        }\n    }\n    return sum + max;\n};\n\nconst addElements_test_5 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        result[i] = arr[i] - 1000;\n        if (max < result[i]) {\n            max = result[i];\n        }\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test_6 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test_7 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        result[i] = arr[i] - 1000;\n        if (max < result[i]) {\n            max = result[i];\n        }\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test_8 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        sum += arr[i];\n    }\n    return sum + max;\n};\n\nconst addElements_test_9 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {\n        result[i] = arr[i];\n    }\n    for (i = k; i < arrLen; i++) {\n        sum += arr[i];\n        if (max < result[i]) {\n            max = result[i];\n        }\n    }\n    return sum + max;\n};\n\nconst addElements_test_10 = (arr, k) => {\n    const result = new Array(k);\n    const arrLen = arr.length;\n    let i, max = 0, sum = 0;\n    for (i = 0; i < k; i++) {"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    const odd = [];\n    let n = n;\n    while(n > 1) {\n        if(n % 2 === 1) {\n            odd.push(n);\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    return odd;\n};\n\nconst testGetOddCollatz = (n) => {\n    const odd = getOddCollatz(n);\n    for(let i = 0; i < odd.length; i++) {\n        if(odd[i]!== i + 1) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(testGetOddCollatz(5));<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  // return true if the date string is not empty\n  if (date.length === 0) return false;\n  // return false if the number of days is less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const monthsList = months.slice();\n  const dateList = date.split('-');\n  if (dateList.length < 3 || dateList.length > 3) return false;\n  const month = monthsList[parseInt(dateList[1]) - 1];\n  const day = dateList[2];\n  if (parseInt(day) < 1 || parseInt(day) > 31) return false;\n  if (month === 'February' && parseInt(day) > 30) return false;\n  if (month === 'March' && parseInt(day) > 31) return false;\n  if (month === 'April' && parseInt(day) > 30) return false;\n  if (month === 'May' && parseInt(day) > 31) return false;\n  if (month === 'June' && parseInt(day) > 30) return false;\n  if (month === 'July' && parseInt(day) > 31) return false;\n  if (month === 'August' && parseInt(day) > 31) return false;\n  if (month === 'September' && parseInt(day) > 30) return false;\n  if (month === 'October' && parseInt(day) > 31) return false;\n  if (month === 'November' && parseInt(day) > 30) return false;\n  if (month === 'December' && parseInt(day) > 31) return false;\n  return true;\n};\n\nconst validNumber = (number) => {\n  // return true if the number is not empty\n  if (number.length === 0) return false;\n  // return false if the number is less than 1 or higher than 12\n  if (parseInt(number) < 1 || parseInt(number) > 12) return false;\n  return true;\n};\n\nconst validDateTime = (dateTime) => {\n  // return true if the date time is not empty\n  if (dateTime.length === 0) return false;\n  // return false if the number of days is less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const monthsList = months.slice();\n  const dateList = dateTime.split('-');\n  if (dateList.length < 3 || dateList.length > 3) return false;\n  const month = monthsList[parseInt(dateList[1]) - 1];\n  const day = dateList[2];\n  if (parseInt(day) < 1 || parseInt(day) > 31) return false;\n  if (month === 'February' && parseInt(day) > 30) return false;\n  if (month === 'March' && parseInt(day) > 31) return false;\n  if (month === 'April' && parseInt(day) > 30) return false;\n  if (month === 'May' && parseInt(day) > 31) return false;\n  if (month === 'June' && parseInt(day) > 30) return false;\n  if (month === 'July' && parseInt(day) > 31) return false;\n  if (month === 'August' && parseInt(day) > 31) return false;\n  if (month === 'September' && parseInt(day) > 30) return false;\n  if (month === 'October' && parseInt(day) > 31) return false;\n  if (month === 'November' && parseInt(day) > 30) return false;\n  if (month === 'December' && parseInt(day) > 31) return false;\n  return true;\n};\n\n// ************* END OF TESTS ******************\n\n// ************* START OF FUNCTIONS ******************\n\nconst add = (first, second) => {\n  return first + second;\n};\n\nconst subtract = (first, second) => {\n  return first - second;\n};\n\nconst multiply = (first, second) => {\n  return first * second;\n};\n\nconst divide = (first, second) => {\n  return first / second;\n};\n\nconst dateToString = (date) => {\n  let day = date.getDate();\n  let month = months[date.getMonth()];\n  let year = date.getFullYear();\n  let dayString = pad(day, 2);\n  let monthString = pad(month, 2);\n  let yearString = pad(year, 4);\n  return dayString + '-' + monthString + '-' + yearString;\n};\n\nconst dateTimeToString = (dateTime) => {\n  let day = dateTime.getDate();\n  let month = months[dateTime.getMonth()];\n  let year = dateTime.getFullYear();\n  let dayString = pad(day, 2);\n  let monthString = pad(month, 2);\n  let yearString = pad(year, 4);\n  let hour = dateTime.getHours();\n  let minute = dateTime"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  for (let i = 0; i < txt.length; i += 1) {\n    let currentWord = txt.slice(i, i + 1);\n    if (currentWord.match(/\\s/)) {\n      words.push(currentWord);\n    } else {\n      break;\n    }\n  }\n  if (words.length === 0) {\n    words = txt.split('').filter((c) => c.match(/\\w/));\n  }\n  return words;\n};\n\nconst getWordCount = (txt) => {\n  let wordCount = 0;\n  for (let i = 0; i < txt.length; i += 1) {\n    let currentWord = txt.slice(i, i + 1);\n    if (currentWord.match(/\\s/)) {\n      wordCount += 1;\n    }\n  }\n  return wordCount;\n};\n\nconst getLetterCount = (txt) => {\n  let letterCount = 0;\n  for (let i = 0; i < txt.length; i += 1) {\n    let currentWord = txt.slice(i, i + 1);\n    if (currentWord.match(/\\w/)) {\n      letterCount += 1;\n    }\n  }\n  return letterCount;\n};\n\nconst getWordLength = (txt) => {\n  let wordLength = 0;\n  for (let i = 0; i < txt.length; i += 1) {\n    let currentWord = txt.slice(i, i + 1);\n    if (currentWord.match(/\\s/)) {\n      wordLength += 1;\n    }\n  }\n  return wordLength;\n};\n\nconst getWordRatio = (txt) => {\n  return getWordCount(txt) / getLetterCount(txt);\n};\n\nconst getLongestWord = (txt) => {\n  let longestWord = \"\";\n  let wordCount = 0;\n  for (let i = 0; i < txt.length; i += 1) {\n    let currentWord = txt.slice(i, i + 1);\n    if (currentWord.match(/\\s/)) {\n      wordCount += 1;\n    } else {\n      if (wordCount > wordLength) {\n        longestWord = currentWord;\n        wordCount = 1;\n      }\n    }\n  }\n  return longestWord;\n};\n\nconst getShortestWord = (txt) => {\n  let shortestWord = \"\";\n  let wordLength = Infinity;\n  for (let i = 0; i < txt.length; i += 1) {\n    let currentWord = txt.slice(i, i + 1);\n    if (currentWord.match(/\\s/)) {\n      wordLength = Math.min(wordLength, getWordLength(currentWord));\n    }\n  }\n  return shortestWord;\n};\n\nmodule.exports = {\n  getWordCount,\n  getLetterCount,\n  getWordLength,\n  getWordRatio,\n  getLongestWord,\n  getShortestWord\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const hasDuplicates = lst.reduce((prev, current) => {\n    if (prev) {\n      return (current > prev)\n    }\n    return false\n  }, false)\n  return!hasDuplicates\n}\n\nexport default isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  const mod = length % 2\n\n  return mod === 0? \"YES\" : \"NO\"\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n*/\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  const mod = length % 2\n\n  return mod === 0? \"YES\" : \"NO\"\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n*/\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  const mod = length % 2\n\n  return mod === 0? \"YES\" : \"NO\"\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n*/\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  const mod = length % 2\n\n  return mod === 0? \"YES\" : \"NO\"\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1;\n  arr.forEach(num => {\n    prod *= Math.abs(num);\n    if (num < 0) {\n      prod *= -1;\n    }\n  });\n  return prod;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]) === -9);\nconsole.log(prodSigns([0, 1]) === 0);\nconsole.log(prodSigns([]) === null);\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [N, row, col] = grid.map((cells, i) => [cells.length, i, i])\n  const [min, dp] = [0, new Map()]\n  const dfs = (i, j) => {\n    const [min_j, min_k] = [dp.get(row + i, j), dp.get(col + i, j)]\n    if (min_j === undefined || min_k < min_j) {\n      min = j\n      dp.set(row + i, j, min_j)\n    }\n  }\n  for (let i = 0; i < N; ++i) {\n    for (let j = 0; j < N; ++j) {\n      dfs(i, j)\n    }\n  }\n  return min === undefined? [] : dp.get(row + N - 1, min).map(n => n - 1)\n}\n\nconst [N, row, col] = grid.map((cells, i) => [cells.length, i, i])\n\nconst find_min_path = (grid, k) => {\n  const [N, row, col] = grid.map((cells, i) => [cells.length, i, i])\n  const dp = new Map()\n  let min_path = []\n  for (let i = 0; i < N; ++i) {\n    for (let j = 0; j < N; ++j) {\n      if (dp.get(row + i, j) === undefined) {\n        min_path = []\n        dfs(i, j)\n        min_path = dp.get(row + i, j)\n      }\n    }\n  }\n  return min_path.map(n => n - 1)\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconst [N, row, col] = grid.map((cells, i) => [cells.length, i, i])\n\nconst find_min_path = (grid, k) => {\n  const [N, row, col] = grid.map((cells, i) => [cells.length, i, i])\n  const dp = new Map()\n  let min_path = []\n  for (let i = 0; i < N; ++i) {\n    for (let j = 0; j < N; ++j) {\n      if (dp.get(row + i, j) === undefined) {\n        min_path = []\n        dfs(i, j)\n        min_path = dp.get(row + i, j)\n      }\n    }\n  }\n  return min_path.map(n => n - 1)\n}\n\n/*\n  Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n  Output: [1, 2, 1]\n\n  Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n  Output: [1]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)\n    t.unshift(1)\n    return t.concat(tri(n - 2))\n}\n\nconst tri = (n) => {\n    if (n <= 1) return []\n    const t = tri(n - 1)"}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let d = 1\n  while (n > 0) {\n    d = (d * n) % 10\n    n = (n - d) / 10\n  }\n  return d\n}\n\n/*GYou are given an integer n and an array of digits, a1, a2,..., an.\n  Write a function that returns the sum of the products of the digits in the array.\n  If the sum of the products equals n, return n.\n  Note: The length of the array is at most 1000.\n  */\nconst addDigits = (n, a) => {\n  let i = 0\n  while (i < a.length) {\n    n = n + a[i] * (n - digits(n))\n    i++\n  }\n  return n\n}\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a palindrome.\n  Do not use a library to solve the problem.\n  */\nconst isPalindrome = (n) => {\n  let a = []\n  while (n > 0) {\n    a.push(n % 10)\n    n = (n - a[a.length - 1]) / 10\n  }\n  return a.every((x, i) => x === a[i])\n}\n\n//console.log(isPalindrome(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is prime.\n  Do not use a library to solve the problem.\n  */\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isPrime(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a perfect number.\n  Do not use a library to solve the problem.\n  */\nconst isPerfect = (n) => {\n  let sum = 0\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      sum += i\n      n /= i\n    }\n    i++\n  }\n  return sum === n\n}\n\n//console.log(isPerfect(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is an abundant number.\n  Do not use a library to solve the problem.\n  */\nconst isAbundant = (n) => {\n  let sum = 0\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      sum += n\n      n /= i\n    }\n    i++\n  }\n  return sum > n\n}\n\n//console.log(isAbundant(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a composite number.\n  Do not use a library to solve the problem.\n  */\nconst isComposite = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isComposite(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is an even number.\n  Do not use a library to solve the problem.\n  */\nconst isEven = (n) => {\n  let i = 0\n  while (i < n) {\n    if (n % 2 === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isEven(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is an odd number.\n  Do not use a library to solve the problem.\n  */\nconst isOdd = (n) => {\n  let i = 0\n  while (i < n) {\n    if (n % 2 === 1) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isOdd(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a triangular number.\n  Do not use a library to solve the problem.\n  */\nconst isTriangular = (n) => {\n  let i = 1\n  while (i < n) {\n    if (n % (i + i - 1) === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isTriangular(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a pentagonal number.\n  Do not use a library to solve the problem.\n  */\nconst isPentagonal = (n) => {\n  let i = 1\n  while (i < n) {\n    if (n % (3 * i - 1) === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isPentagonal(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a hexagonal number.\n  Do not use a library to solve the problem.\n  */\nconst isHexagonal = (n) => {\n  let i = 1\n  while (i < n) {\n    if (n % (2 * i - 1) === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n//console.log(isHexagonal(1234))\n\n/*GWrite a program that asks the user for a number, and then tells them whether or not the number is a heptagonal number.\n  Do not use a library to solve the problem.\n  */\nconst isHept"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n    const stack = []\n    let prev = null\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i])\n        } else if (string[i] === ']') {\n            if (prev === '[' && stack.length > 0) {\n                stack.pop()\n            } else if (prev === ']' && stack.length > 0) {\n                stack.pop()\n            } else {\n                return false\n            }\n        } else {\n            prev = string[i]\n        }\n    }\n    return stack.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[[]][[)'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n};\n\nmodule.exports = sumSquares;<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    txt = txt.toLowerCase();\n    if (txt.length > 0) {\n        return txt.charAt(txt.length - 1).match(/[a-z]/) &&!txt.match(/\\b\\w+\\b/);\n    }\n    return false;\n};\n\nconst getLastWord = (txt) => {\n    txt = txt.toLowerCase();\n    const words = txt.split(\" \");\n    if (words.length > 0) {\n        return words[words.length - 1];\n    }\n    return \"\";\n};\n\nconst isWord = (txt) => {\n    const lastWord = getLastWord(txt);\n    return lastWord.length > 0 && checkIfLastCharIsALetter(lastWord);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains at least one letter in the alphabet (a-z).\n  Examples:\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi e\") ➞ false\n  containsALetter(\"apple pi e \") ➞ true\n  containsALetter(\"\") ➞ false\n  */\nconst containsALetter = (txt) => {\n    return txt.match(/[a-z]/i);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains at least one number in the range 0-9.\n  Examples:\n  containsNumber(\"0\") ➞ true\n  containsNumber(\"a\") ➞ false\n  containsNumber(\"a1\") ➞ true\n  containsNumber(\"a1 \") ➞ false\n  */\nconst containsNumber = (txt) => {\n    return txt.match(/\\d/i);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains at least one special character, like colon or dot.\n  Examples:\n  containsSpecialCharacter(\"apple pie\") ➞ true\n  containsSpecialCharacter(\"apple pi e\") ➞ false\n  containsSpecialCharacter(\"apple pi e \") ➞ true\n  containsSpecialCharacter(\"\") ➞ false\n  */\nconst containsSpecialCharacter = (txt) => {\n    return txt.match(/[:|.]/i);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains at least one of the following: lowercase letters, uppercase letters, numbers, or special characters (colon or dot).\n  Examples:\n  containsAnyCharacter(\"apple pie\") ➞ true\n  containsAnyCharacter(\"apple pi e\") ➞ true\n  containsAnyCharacter(\"apple pi e \") ➞ true\n  containsAnyCharacter(\"apple pi\") ➞ true\n  containsAnyCharacter(\"apple pi \") ➞ true\n  containsAnyCharacter(\"apple pie \") ➞ true\n  containsAnyCharacter(\"apple pie.\") ➞ true\n  containsAnyCharacter(\"apple pie:\") ➞ true\n  containsAnyCharacter(\"apple pie;\") ➞ true\n  containsAnyCharacter(\"apple pie, \") ➞ true\n  containsAnyCharacter(\"apple pie,\") ➞ true\n  containsAnyCharacter(\"\") ➞ false\n  */\nconst containsAnyCharacter = (txt) => {\n    return containsALetter(txt) || containsNumber(txt) || containsSpecialCharacter(txt);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains only letters and numbers.\n  Examples:\n  isAlphanumeric(\"apple pie\") ➞ true\n  isAlphanumeric(\"apple pi e\") ➞ false\n  isAlphanumeric(\"apple pi e \") ➞ true\n  isAlphanumeric(\"apple pi\") ➞ true\n  isAlphanumeric(\"apple pie \") ➞ false\n  isAlphanumeric(\"apple pie.\") ➞ true\n  isAlphanumeric(\"apple pie:\") ➞ false\n  isAlphanumeric(\"apple pie;\") ➞ true\n  isAlphanumeric(\"apple pie, \") ➞ true\n  isAlphanumeric(\"apple pie,\") ➞ true\n  isAlphanumeric(\"\") ➞ false\n  */\nconst isAlphanumeric = (txt) => {\n    return txt.match(/[a-z0-9]/i);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains only numbers.\n  Examples:\n  isNumeric(\"0\") ➞ true\n  isNumeric(\"a\") ➞ false\n  isNumeric(\"a1\") ➞ true\n  isNumeric(\"a1 \") ➞ true\n  isNumeric(\"\") ➞ false\n  */\nconst isNumeric = (txt) => {\n    return txt.match(/\\d/i);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains only numbers and letters.\n  Examples:\n  isAlphaNumeric(\"0\") ➞ true\n  isAlphaNumeric(\"a\") ➞ true\n  isAlphaNumeric(\"a1\") ➞ true\n  isAlphaNumeric(\"a1 \") ➞ true\n  isAlphaNumeric(\"\") ➞ false\n  */\nconst isAlphaNumeric = (txt) => {\n    return txt.match(/[a-zA-Z0-9]/i);\n};\n\n/*\n  Create a function that takes a string as an argument, and checks if it contains only numbers and letters.\n  Examples:\n  isAllAlphaNumeric(\"0\") ➞ true\n  isAllAlphaNumeric(\"a\") ➞ true\n  isAllAlphaNumeric(\"a1\") ➞ true\n  isAllAlphaNumeric(\"a1 \") ➞ true\n  isAllAlphaN"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let l = arr.length\n  let i = 0\n  while (i < l) {\n    let j = l - 1\n    while (j >= i) {\n      if (arr[i] < arr[j]) {\n        return j\n      } else {\n        j--\n      }\n    }\n    i++\n  }\n  return -1\n}\n\nmodule.exports = canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null)\n  }\n  return largestSmallestIntegers(lst.slice(1).concat([0]).concat(lst.slice(0, lst.length - 1)))\n}\n\nconst largestSmallestIntegersTest = (test) => {\n  const lst = [2, 4, 1, 3, 5, 7]\n  test.deepEqual(largestSmallestIntegers(lst), (null, 1))\n  test.deepEqual(largestSmallestIntegers([]), (null, null))\n  test.deepEqual(largestSmallestIntegers([0]), (null, null))\n}\n\nlargestSmallestIntegersTest.only = 'largestSmallestIntegers'\nlargestSmallestIntegersTest.displayName = 'largestSmallestIntegers'\ntest.only('largestSmallestIntegers', largestSmallestIntegersTest)\n\n/* Create a function that returns the sum of two lists. If the lists are empty, return the empty list.\n  Examples:\n  sumLists([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n  sumLists([1, 2, 3, 4], []) == [1, 2, 3, 4]\n  sumLists([], [1, 2, 3, 4]) == [1, 2, 3, 4]\n  */\nconst sumLists = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return []\n  }\n  return [...lst1,...lst2]\n}\n\nconst sumListsTest = (test) => {\n  const lst1 = [1, 2, 3, 4]\n  const lst2 = [5, 6, 7]\n  test.deepEqual(sumLists(lst1, lst2), [1, 2, 3, 4, 5, 6, 7])\n  test.deepEqual(sumLists([1, 2, 3, 4], []), [1, 2, 3, 4])\n  test.deepEqual(sumLists([], [1, 2, 3, 4]), [1, 2, 3, 4])\n}\n\nsumListsTest.only ='sumLists'\nsumListsTest.displayName ='sumLists'\ntest.only('sumLists', sumListsTest)\n\n/* Create a function that returns a string of \"a\" \"b\" \"c\"... \"z\" in a list. If the list is empty, return an empty string.\n  Examples:\n  upperCaseLetters([1, 2, 3, 4]) == 'A'\n  upperCaseLetters([]) == ''\n  */\nconst upperCaseLetters = (lst) => {\n  if (lst.length === 0) {\n    return ''\n  }\n  return lst.map(lst => lst.toUpperCase()).join('')\n}\n\nconst upperCaseLettersTest = (test) => {\n  test.deepEqual(upperCaseLetters([1, 2, 3, 4]), 'A')\n  test.deepEqual(upperCaseLetters([1, 2, 3, 4, 5, 6, 7]), 'ABCDEFGH')\n  test.deepEqual(upperCaseLetters([1, 2, 3, 4, 5, 6, 7, 8]), 'ABCDEFGHI')\n  test.deepEqual(upperCaseLetters([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  test.deepEqual(upperCaseLetters([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return null\n  if (typeof a ==='string' && typeof b ==='string') {\n    a = a.replace(/\\D/g, '')\n    b = b.replace(/\\D/g, '')\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    a = a.replace(/\\D/g, '')\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    b = b.replace(/\\D/g, '')\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.max(a, b)\n  }\n}\n\nconst compare = compareOne\n\n// compare(1, 2) === compareOne(1, 2)\n\nconsole.log(compare(1, 2))\nconsole.log(compare(1, '2,3'))\nconsole.log(compare(1, '2,3.4'))\nconsole.log(compare(1, '2.3'))\nconsole.log(compare(1, '2.3'))\n\n/*\n  Create a function that takes strings, and returns a string that is the\n  sum of the values of all the strings.\n\n  Return null if the given string is empty.\n\n  Note: this function can be written in multiple ways,\n  for example, the following will be the same as the one below\n\n  compare(1, 2) + \"3\"\n  */\nconst sum = (a, b) => {\n  if (a === '') return null\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a + b\n  }\n}\n\nconsole.log(sum('1', '2'))\n\n/*\n  Create a function that takes strings, and returns a string that is the\n  average of the values of all the strings.\n\n  Return null if the given string is empty.\n\n  Note: this function can be written in multiple ways,\n  for example, the following will be the same as the one below\n\n  compare(1, 2) + \"3\"\n  */\nconst average = (a, b) => {\n  if (a === '') return null\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a + b\n  }\n}\n\nconsole.log(average('1', '2'))\n\n/*\n  Create a function that takes two strings, and returns a string that is the\n  combined values of the first string and the second string.\n\n  Return null if either string is empty.\n\n  Note: this function can be written in multiple ways,\n  for example, the following will be the same as the one below\n\n  a + b\n  */\nconst concat = (a, b) => {\n  if (a === '') return null\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a + b\n  }\n}\n\nconsole.log(concat('1', '2'))\n\n/*\n  Create a function that takes two strings, and returns the smaller of the\n  two strings.\n\n  Return null if the given strings are equal.\n\n  Note: this function can be written in multiple ways,\n  for example, the following will be the same as the one below\n\n  compare(1, 2) < compare(1, 2)\n  */\nconst min = (a, b) => {\n  if (compare(a, b) === null) return null\n  if (typeof a ==='string' && typeof b ==='string') {\n    a = a.replace(/\\D/g, '')\n    b = b.replace(/\\D/g, '')\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    a = a.replace(/\\D/g, '')\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    b = b.replace(/\\D/g, '')\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.min(a, b)\n  }\n}\n\nconsole.log(min('1', '2'))\nconsole.log(min('1', '2.3'))\nconsole.log(min('1', '2,3'))\nconsole.log(min('1', '2,3.4'))\n\n/*\n  Create a function that takes two strings, and returns the larger of the\n  two strings.\n\n  Return null if the given strings are equal.\n\n  Note: this function can be written in multiple ways,\n  for example, the following will be the same as the one below\n\n  compare(1, 2) > compare(1, 2)\n  */\nconst max = (a, b) => {\n  if (compare(a, b) === null) return null\n  if (typeof a ==='string' && typeof b ==='string') {\n    a = a.replace(/\\D/g, '')\n    b = b.replace(/\\D/g, '')\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    a = a.replace(/\\D/g, '')\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    b = b.replace(/\\D/g, '')\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return Math.max(a, b)\n  }\n}\n\nconsole.log(max('1', '2'))\nconsole.log(max('1', '2.3'))\nconsole.log(max('1"}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let total = 0\n  for (let i = 0; i < 4; i++) {\n    let candidate = 2 * n - 4 * i\n    if (candidate < 0) {\n      return false\n    }\n    total += candidate\n  }\n  return total === n\n}\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  isEqualToSumOdd(10) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let total = 0\n  for (let i = 0; i < 4; i++) {\n    let candidate = 2 * n - 4 * i\n    if (candidate < 0) {\n      return false\n    }\n    total += candidate\n  }\n  return total % 2 === 1\n}\n\n/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  or odd numbers\n  Example\n  isEqualToSumEvenOrOdd(4) == false\n  isEqualToSumEvenOrOdd(6) == false\n  isEqualToSumEvenOrOdd(8) == false\n  isEqualToSumEvenOrOdd(10) == true\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  let total = 0\n  for (let i = 0; i < 4; i++) {\n    let candidate = 2 * n - 4 * i\n    if (candidate < 0) {\n      return false\n    }\n    total += candidate\n  }\n  return total === n || total % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  or odd numbers\n  Example\n  isEqualToSumEvenOrOdd(5) == false\n  isEqualToSumEvenOrOdd(6) == false\n  isEqualToSumEvenOrOdd(8) == false\n  isEqualToSumEvenOrOdd(10) == true\n  isEqualToSumEvenOrOdd(15) == false\n  */\nconst isEqualToSumEvenOrOddMore = (n) => {\n  let total = 0\n  for (let i = 0; i < 5; i++) {\n    let candidate = 2 * n - 4 * i\n    if (candidate < 0) {\n      return false\n    }\n    total += candidate\n  }\n  return total === n || total % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  or even numbers\n  Example\n  isEqualToSumEvenOrOdd(5) == false\n  isEqualToSumEvenOrOdd(6) == false\n  isEqualToSumEvenOrOdd(8) == false\n  isEqualToSumEvenOrOdd(10) == false\n  isEqualToSumEvenOrOdd(15) == true\n  */\nconst isEqualToSumEvenOrOddMore = (n) => {\n  let total = 0\n  for (let i = 0; i < 5; i++) {\n    let candidate = 2 * n - 4 * i\n    if (candidate < 0) {\n      return false\n    }\n    total += candidate\n  }\n  return total % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  or odd numbers\n  Example\n  isEqualToSumEvenOrOdd(5) == false\n  isEqualToSumEvenOrOdd(6) == false\n  isEqualToSumEvenOrOdd(8) == false\n  isEqualToSumEvenOrOdd(10) == false\n  isEqualToSumEvenOrOdd(15) == true\n  */\nconst isEqualToSumEvenOrOddMore = (n) => {\n  let total = 0\n  for (let i = 0; i < 5; i++) {\n    let candidate = 2 * n - 4 * i\n    if (candidate < 0) {\n      return false\n    }\n    total += candidate\n  }\n  return total === n || total % 2 === 1\n}\n\nexport default {\n  isEqualToSumEven,\n  isEqualToSumOdd,\n  isEqualToSumEvenOrOdd,\n  isEqualToSumEvenOrOddMore\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const f = (i) => {\n    if (i === 1) {\n      return 1;\n    }\n    return (n * f(i - 1));\n  };\n  return f(n);\n};\n\nconst f = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return (n * f(n - 1));\n};\n\n// Test\n\nconsole.log(specialFactorial(4));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, '_').replace(/\\s+/g, '-');\n};\n\n/*\n  Given a string, returns a string with all spaces in it replaced with _ and all _ in it replaced with spaces.\n\n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example_1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixAllSpaces = (text) => {\n  return text.replace(/ /g, '_').replace(/_/g,'');\n};\n\n/*\n  Given a string, replaces all _s with a space.\n\n  fixAllSpaces(\"Example\") == \"Example\"\n  fixAllSpaces(\"Example_1\") == \"Example_1\"\n  fixAllSpaces(\" Example 2\") == \"Example 2\"\n  fixAllSpaces(\" Example   3\") == \"Example   3\"\n  */\nconst fixAllUnderscores = (text) => {\n  return text.replace(/_/g,'');\n};\n\n/*\n  Given a string, replaces all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replaces all consecutive spaces with - fixAllSpaces (\"Example\") == \"Example\"\n  fixAllSpaces(\"Example 1\") == \"Example_1\"\n  fixAllSpaces(\" Example 2\") == \"Example-2\"\n  fixAllSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixAll = (text) => {\n  return fixAllSpaces(fixAllUnderscores(text));\n};\n\nconst test = (text) => {\n  console.log(text, fixSpaces(text), fixAllSpaces(text), fixAll(text));\n};\n\ntest(\"Example\");\ntest(\"Example_1\");\ntest(\" Example 2\");\ntest(\" Example   3\");\ntest(\"Example1\");\ntest(\"Example1\");\ntest(\"Example2\");\ntest(\"Example2\");\ntest(\"Example3\");\ntest(\"Example3\");\ntest(\"Example4\");\ntest(\"Example4\");\ntest(\"Example5\");\ntest(\"Example5\");\ntest(\"Example6\");\ntest(\"Example6\");\ntest(\"Example7\");\ntest(\"Example7\");\ntest(\"Example8\");\ntest(\"Example8\");\ntest(\"Example9\");\ntest(\"Example9\");\ntest(\"Example10\");\ntest(\"Example10\");\ntest(\"Example11\");\ntest(\"Example11\");\ntest(\"Example12\");\ntest(\"Example12\");\ntest(\"Example13\");\ntest(\"Example13\");\ntest(\"Example14\");\ntest(\"Example14\");\ntest(\"Example15\");\ntest(\"Example15\");\ntest(\"Example16\");\ntest(\"Example16\");\ntest(\"Example17\");\ntest(\"Example17\");\ntest(\"Example18\");\ntest(\"Example18\");\ntest(\"Example19\");\ntest(\"Example19\");\ntest(\"Example20\");\ntest(\"Example20\");\ntest(\"Example21\");\ntest(\"Example21\");\ntest(\"Example22\");\ntest(\"Example22\");\ntest(\"Example23\");\ntest(\"Example23\");\ntest(\"Example24\");\ntest(\"Example24\");\ntest(\"Example25\");\ntest(\"Example25\");\ntest(\"Example26\");\ntest(\"Example26\");\ntest(\"Example27\");\ntest(\"Example27\");\ntest(\"Example28\");\ntest(\"Example28\");\ntest(\"Example29\");\ntest(\"Example29\");\ntest(\"Example30\");\ntest(\"Example30\");\ntest(\"Example31\");\ntest(\"Example31\");\ntest(\"Example32\");\ntest(\"Example32\");\ntest(\"Example33\");\ntest(\"Example33\");\ntest(\"Example34\");\ntest(\"Example34\");\ntest(\"Example35\");\ntest(\"Example35\");\ntest(\"Example36\");\ntest(\"Example36\");\ntest(\"Example37\");\ntest(\"Example37\");\ntest(\"Example38\");\ntest(\"Example38\");\ntest(\"Example39\");\ntest(\"Example39\");\ntest(\"Example40\");\ntest(\"Example40\");\ntest(\"Example41\");\ntest(\"Example41\");\ntest(\"Example42\");\ntest(\"Example42\");\ntest(\"Example43\");\ntest(\"Example43\");\ntest(\"Example44\");\ntest(\"Example44\");\ntest(\"Example45\");\ntest(\"Example45\");\ntest(\"Example46\");\ntest(\"Example46\");\ntest(\"Example47\");\ntest(\"Example47\");\ntest(\"Example48\");\ntest(\"Example48\");\ntest(\"Example49\");\ntest(\"Example49\");\ntest(\"Example50\");\ntest(\"Example50\");\ntest(\"Example51\");\ntest(\"Example51\");\ntest(\"Example52\");\ntest(\"Example52\");\ntest(\"Example53\");\ntest(\"Example53\");\ntest(\"Example54\");\ntest(\"Example54\");\ntest(\"Example55\");\ntest(\"Example55\");\ntest(\"Example56\");\ntest(\"Example56\");\ntest(\"Example57\");\ntest(\"Example57\");\ntest(\"Example58\");\ntest(\"Example58\");\ntest(\"Example59\");\ntest(\"Example59\");\ntest(\"Example60\");\ntest(\"Example60\");\ntest(\"Example61\");\ntest(\"Example61\");\ntest(\"Example62\");\ntest(\"Example62\");\ntest(\"Example63\");\ntest(\"Example63\");\ntest(\"Example64\");\ntest(\"Example64\");\ntest(\"Example65\");\ntest(\"Example65\");\ntest(\"Example66\");\ntest(\"Example66\");\ntest(\"Example67\");\ntest(\"Example67\");\ntest(\"Example68\");\ntest(\"Example68\");\ntest(\"Example69\");\ntest(\"Example69\");\ntest(\"Example70\");\ntest(\"Example70\");\ntest(\"Example71\");\ntest(\"Example71\");\ntest(\"Example72\");\ntest(\"Example72\");\ntest(\"Example73\");\ntest(\"Example73\");\ntest(\"Example74\");\ntest(\"Example74\");\ntest(\"Example75\");\ntest(\"Example75\");\ntest(\"Example76\");\ntest(\"Example76\");\ntest(\"Example77\");\ntest(\"Example77\");\ntest(\"Example78\");\ntest(\"Example78\");\ntest(\"Example79\");\ntest(\"Example79\");\ntest(\"Example80\");\ntest(\"Example80\");\ntest(\"Example81\");\ntest(\"Example81\");\ntest(\"Example82"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const file_name_array = file_name.split(\".\");\n    const file_name_length = file_name_array.length;\n    let is_valid = true;\n    for (let i = 0; i < file_name_length; i++) {\n        let num = file_name_array[i].length;\n        if (num > 3) {\n            is_valid = false;\n            break;\n        }\n        else if (num < 1) {\n            is_valid = false;\n            break;\n        }\n        let ch = file_name_array[i].charAt(0);\n        if (ch < 'a' || ch > 'z' || ch < 'A' || ch > 'Z') {\n            is_valid = false;\n            break;\n        }\n    }\n    if (is_valid && file_name_array[0].length > 1) {\n        if (file_name_array[0].charAt(0) === \".\") {\n            is_valid = false;\n        }\n    }\n    if (is_valid && file_name_array[1] === \"exe\" || file_name_array[1] === \"dll\") {\n        is_valid = false;\n    }\n    return is_valid;\n};\n\nconst check = (file_name) => {\n    const file_name_array = file_name.split(\".\");\n    const file_name_length = file_name_array.length;\n    let is_valid = true;\n    for (let i = 0; i < file_name_length; i++) {\n        let num = file_name_array[i].length;\n        if (num > 3) {\n            is_valid = false;\n            break;\n        }\n        else if (num < 1) {\n            is_valid = false;\n            break;\n        }\n        let ch = file_name_array[i].charAt(0);\n        if (ch < 'a' || ch > 'z' || ch < 'A' || ch > 'Z') {\n            is_valid = false;\n            break;\n        }\n    }\n    if (is_valid && file_name_array[0].length > 1) {\n        if (file_name_array[0].charAt(0) === \".\") {\n            is_valid = false;\n        }\n    }\n    if (is_valid && file_name_array[1] === \"exe\" || file_name_array[1] === \"dll\") {\n        is_valid = false;\n    }\n    return is_valid;\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name should start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The file's name contains exactly one dot '.'\n  - The substring after the dot should be one of these: ['exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n    const file_name_array = file_name.split(\".\");\n    const file_name_length = file_name_array.length;\n    let is_valid = true;\n    for (let i = 0; i < file_name_length; i++) {\n        let num = file_name_array[i].length;\n        if (num > 3) {\n            is_valid = false;\n            break;\n        }\n        else if (num < 1) {\n            is_valid = false;\n            break;\n        }\n        let ch = file_name_array[i].charAt(0);\n        if (ch < 'a' || ch > 'z' || ch < 'A' || ch > 'Z') {\n            is_valid = false;\n            break;\n        }\n    }\n    if (is_valid && file_name_array[0].length > 1) {\n        if (file_name_array[0].charAt(0) === \".\") {\n            is_valid = false;\n        }\n    }\n    if (is_valid && file_name_array[1] === \"exe\" || file_name_array[1] === \"dll\") {\n        is_valid = false;\n    }\n    return is_valid;\n};\n\nconst check2 = (file_name) => {\n    const file_name_array = file_name.split(\".\");\n    const file_name_length = file_name_array.length;\n    let is_valid = true;\n    for (let i = 0; i < file_name_length; i++) {\n        let num = file_name_array[i].length;\n        if (num > 3) {\n            is_valid = false;\n            break;\n        }\n        else if (num < 1) {\n            is_valid = false;\n            break;\n        }\n        let ch = file_name_array[i].charAt(0);\n        if (ch < 'a' || ch > 'z' || ch < 'A' || ch > 'Z') {\n            is"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i%3 === 0 || i%4 === 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall concatenate the string entry if its index is a \n  multiple of 3 and will concatenate the string entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the concatenated string. \n  \n  Examples:\n  For lst = [\"a\",\"b\",\"c\"] the output should be abc\n  For lst = [\"\",\"\",\"\"] the output should be \"\"\n  For lst = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"] the output should be aabcdef\n  */\nconst concat = (lst) => {\n  let concat = \"\";\n  for(let i = 0; i < lst.length; i++){\n    if(i%3 === 0 || i%4 === 0){\n      concat += lst[i];\n    }\n  }\n  return concat;\n}\n\nconst sumString = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i%3 === 0 || i%4 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst addToList = (num, lst) => {\n  lst.push(num);\n  return lst;\n}\n\nconst testList = [1,2,3,4,5,6,7,8,9];\nconst lst = addToList(5, testList);\n\nconsole.log(sumSquares(lst));\nconsole.log(concat(lst));\nconsole.log(sumString(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let result = sentence\n  let chars = []\n  for (let i = 0; i < sentence.length; i++) {\n    chars.push(sentence[i])\n  }\n  let index = 0\n  let last = 0\n  let i = 0\n  let flag = true\n  while (index < sentence.length) {\n    let char = chars[index]\n    if (flag) {\n      if (char!== sentence[index]) {\n        let temp = chars[index]\n        chars[index] = sentence[index]\n        result = result + chars[index]\n        chars[index] = temp\n      }\n    } else {\n      if (char === sentence[index]) {\n        if (index!== last) {\n          result = result + sentence[index]\n        }\n      }\n    }\n    index++\n    last++\n  }\n  return result\n}\n\nconsole.log(wordsInSentence('This is a test'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xSplit = x.split('/');\n  const nSplit = n.split('/');\n  if (xSplit[0] === nSplit[0]) {\n    return (parseInt(xSplit[1], 10) === parseInt(nSplit[1], 10));\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = [];\n  let lastSum = 0;\n  nums.forEach((num, index) => {\n    let sum = getSum(num);\n    if(lastSum!== sum) {\n      sorted.push([index, num]);\n      lastSum = sum;\n    }\n  });\n  sorted.sort((a, b) => {\n    return b[0] - a[0];\n  });\n  return sorted;\n};\n\nconst getSum = (num) => {\n  let sum = 0;\n  while(num > 0) {\n    sum += num % 10;\n    num = num / 10;\n  }\n  return sum;\n};\n\n// console.log(orderByPoints([-1, -11, 1, 11, -12]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter((element, index, array) => {\n    return index === 0 || index === array.length - 1;\n  });\n}\n\nconsole.log(specialFilter([15, -73, 14, -15, 22, -19]));\n\n/*\n  filter is a function that takes a number array as input and returns a new array with the elements that match the given predicate.\n  For example:\n  filter([1, 2, 3, 4, 5, 6], x => x % 2 === 1) => [1, 3, 5]\n  */\nconst filter = (nums, predicate) => {\n  return nums.filter(predicate);\n}\n\nconsole.log(filter([1, 2, 3, 4, 5, 6], x => x % 2 === 1));\n\n/*\n  reject is a function that takes a number array as input and returns a new array with the elements that don't match the given predicate.\n  For example:\n  reject([1, 2, 3, 4, 5, 6], x => x % 2 === 1) => [2, 4, 6]\n  */\nconst reject = (nums, predicate) => {\n  return nums.filter(predicate, (element, index, array) => {\n    return index === 0 || index === array.length - 1;\n  });\n}\n\nconsole.log(reject([1, 2, 3, 4, 5, 6], x => x % 2 === 1));\n\n/*\n  reduce is a function that takes a number array as input and returns the result of the first argument and the result of applying the second argument to the rest of the arguments.\n  For example:\n  reduce([1, 2, 3, 4, 5, 6], (sum, x) => sum + x) => 15\n  */\nconst reduce = (nums, func) => {\n  return nums.reduce(func);\n}\n\nconsole.log(reduce([1, 2, 3, 4, 5, 6], (sum, x) => sum + x));\n\n/*\n  map is a function that takes a number array as input and returns a new array with the result of applying the given function to the elements of the array.\n  For example:\n  map([1, 2, 3, 4, 5, 6], x => x * x) => [1, 4, 9, 16, 25, 36]\n  */\nconst map = (nums, func) => {\n  return nums.map(func);\n}\n\nconsole.log(map([1, 2, 3, 4, 5, 6], x => x * x));\n\n/*\n  sortBy is a function that takes a number array as input and returns a new array with the elements sorted in increasing order.\n  For example:\n  sortBy([1, 2, 3, 4, 5, 6], x => x) => [1, 2, 3, 4, 5, 6]\n  */\nconst sortBy = (nums, func) => {\n  return nums.sort(function(a, b) {\n    return func(a) - func(b);\n  });\n}\n\nconsole.log(sortBy([1, 2, 3, 4, 5, 6], x => x));\n\n/*\n  take is a function that takes a number array as input and returns a new array with the first n elements of the array.\n  For example:\n  take([1, 2, 3, 4, 5, 6], 3) => [1, 2, 3]\n  */\nconst take = (nums, n) => {\n  return nums.slice(0, n);\n}\n\nconsole.log(take([1, 2, 3, 4, 5, 6], 3));\n\n/*\n  drop is a function that takes a number array as input and returns a new array with the last n elements of the array.\n  For example:\n  drop([1, 2, 3, 4, 5, 6], 3) => [2, 3, 4, 5, 6]\n  */\nconst drop = (nums, n) => {\n  return nums.slice(-n);\n}\n\nconsole.log(drop([1, 2, 3, 4, 5, 6], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    let sum = i * i - i + 1\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        sum += j * k\n        if (sum % 3 === 0) {\n          max++\n        }\n      }\n    }\n  }\n  return max\n}\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of pairs (a [i], a [j]) from a where i < j and a [i] + a [j] is a multiple of 2.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 7).\n  */\nconst getMaxPairs = (n) => {\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    let sum = i * i - i + 1\n    for (let j = i + 1; j <= n; j++) {\n      sum += j\n      if (sum % 2 === 0) {\n        max++\n      }\n    }\n  }\n  return max\n}\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of pairs (a [i], a [j]) from a where i < j and a [i] + a [j] is a multiple of 5.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 7).\n  */\nconst getMaxPairs5 = (n) => {\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    let sum = i * i - i + 1\n    for (let j = i + 1; j <= n; j++) {\n      sum += j\n      if (sum % 5 === 0) {\n        max++\n      }\n    }\n  }\n  return max\n}\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of pairs (a [i], a [j]) from a where i < j and a [i] + a [j] is a multiple of 7.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 7).\n  */\nconst getMaxPairs7 = (n) => {\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    let sum = i * i - i + 1\n    for (let j = i + 1; j <= n; j++) {\n      sum += j\n      if (sum % 7 === 0) {\n        max++\n      }\n    }\n  }\n  return max\n}\n\nconst solution = (n) => {\n  let max = getMaxTriples(n)\n  let maxPair = getMaxPairs(n)\n  let maxPair5 = getMaxPairs5(n)\n  let maxPair7 = getMaxPairs7(n)\n  return maxPair + maxPair5 + maxPair7 + max\n}\n\n/*\n  Time: O(n^3)\n  Space: O(1)\n*/\nconsole.log(solution(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let result = []\n\n  for (let planetName of planetNames) {\n    let distance = distanceBetween(planetName, planet2)\n    let radius = radiusOf(planetName)\n    let distanceFromCenter = distance - radius\n\n    if (distanceBetween(planetName, planet1) <= distanceBetween(planet2, planet1)) {\n      result.push((\n        planetName,\n        distanceFromCenter,\n        radius,\n        planet1,\n        planet2\n      ))\n    }\n  }\n\n  return result\n}\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Earth\", \"Mercury\")\n\nbf(\"Earth\", \"Mars\")\n\nbf(\"Jupiter\", \"Earth\")\n\nbf(\"Jupiter\", \"Saturn\")\n\nbf(\"Jupiter\", \"Uranus\")\n\nbf(\"Jupiter\", \"Neptune\")\n\nbf(\"Jupiter\", \"Saturn\")\n\nbf(\"Jupiter\", \"Mars\")\n\nbf(\"Saturn\", \"Neptune\")\n\nbf(\"Saturn\", \"Earth\")\n\nbf(\"Saturn\", \"Jupiter\")\n\nbf(\"Saturn\", \"Uranus\")\n\nbf(\"Saturn\", \"Mars\")\n\nbf(\"Uranus\", \"Jupiter\")\n\nbf(\"Uranus\", \"Neptune\")\n\nbf(\"Uranus\", \"Mars\")\n\nbf(\"Uranus\", \"Saturn\")\n\nbf(\"Uranus\", \"Earth\")\n\nbf(\"Mars\", \"Jupiter\")\n\nbf(\"Mars\", \"Saturn\")\n\nbf(\"Mars\", \"Uranus\")\n\nbf(\"Mars\", \"Earth\")\n\nbf(\"Mercury\", \"Uranus\")\n\nbf(\"Mercury\", \"Mars\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury\", \"Jupiter\")\n\nbf(\"Mercury\", \"Saturn\")\n\nbf(\"Mercury\", \"Neptune\")\n\nbf(\"Mercury\", \"Earth\")\n\nbf(\"Mercury"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  if (!lst || lst.length === 0) return [];\n  let len = lst.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i].length % 2 === 1) {\n      res.push(lst.splice(i, 1)[0]);\n      len--;\n    }\n  }\n  res = res.concat(lst.sort((a, b) => a.length - b.length));\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum * sum;\n};\n\nexport default doubleTheDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let guessIndex = 0;\n  let gameIndex = 0;\n  const gameLength = game.length;\n  const gameResult = [];\n  while (gameIndex < gameLength) {\n    const guessValue = guess[guessIndex];\n    const gameValue = game[gameIndex];\n    if (gameValue < guessValue) {\n      gameResult.push(gameIndex - guessIndex);\n      guessIndex++;\n    } else if (gameValue > guessValue) {\n      gameResult.push(guessIndex - gameIndex);\n      gameIndex++;\n    } else {\n      gameResult.push(0);\n      guessIndex++;\n      gameIndex++;\n    }\n  }\n  return gameResult;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => strength[ext.toUpperCase()] = strength[ext.toLowerCase()] || strength[ext] || 0);\n  const cap = 0;\n  const sm = 0;\n  for (let i in strength) {\n    if (strength[i] > cap) cap = strength[i];\n    if (strength[i] > sm) sm = strength[i];\n  }\n  let name = class_name;\n  let count = 0;\n  for (let i in strength) {\n    if (strength[i] === cap) {\n      count += 1;\n      name = name + '.' + i;\n    }\n  }\n  if (count === 1) return name;\n  for (let i in strength) {\n    if (strength[i] === sm) {\n      name = name + '.' + i;\n    }\n  }\n  return name;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const s1 = a.split(\"\");\n  const s2 = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < s1.length && j < s2.length) {\n    if (s1[i] === s2[j]) {\n      i++;\n      j++;\n    }\n    else if (s1[i].charCodeAt(0) === s2[j].charCodeAt(0)) {\n      const rot = s1[i].charAt(1) + s1[i].charAt(0) + s1[i].charAt(2) + s1[i].charAt(3);\n      if (rot === s2[j + 1]) {\n        i++;\n        j++;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 1;\n  let odd = 0;\n  while (num) {\n    if (num % 2) {\n      odd += 1;\n    } else {\n      even += 1;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\n/*GReturns the number of consecutive digits in a number.\n\n   Example:\n      digitCount(1) ==> 1\n      digitCount(10) ==> 2\n      digitCount(123) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(9876) ==> 5\n      digitCount(12123) ==> 6\n      digitCount(123456) ==> 7\n      digitCount(1234567) ==> 8\n      digitCount(12345678) ==> 9\n      digitCount(123456789) ==> 10\n      digitCount(1234567890) ==> 11\n      digitCount(12345678901) ==> 12\n      digitCount(123456789012) ==> 13\n      digitCount(1234567890123) ==> 14\n      digitCount(12345678901234) ==> 15\n      digitCount(123456789012345) ==> 16\n      digitCount(1234567890123456) ==> 17\n      digitCount(12345678901234567) ==> 18\n      digitCount(123456789012345678) ==> 19\n      digitCount(1234567890123456789) ==> 20\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num) {\n    count += 1;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*GReturns the number of consecutive digits in a number.\n\n   Example:\n      digitCount(1) ==> 1\n      digitCount(10) ==> 2\n      digitCount(123) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(9876) ==> 5\n      digitCount(12123) ==> 6\n      digitCount(123456) ==> 7\n      digitCount(1234567) ==> 8\n      digitCount(12345678) ==> 9\n      digitCount(123456789) ==> 10\n      digitCount(1234567890) ==> 11\n      digitCount(12345678901) ==> 12\n      digitCount(123456789012) ==> 13\n      digitCount(1234567890123) ==> 14\n      digitCount(12345678901234) ==> 15\n      digitCount(123456789012345) ==> 16\n      digitCount(1234567890123456) ==> 17\n      digitCount(12345678901234567) ==> 18\n      digitCount(123456789012345678) ==> 19\n      digitCount(1234567890123456789) ==> 20\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num) {\n    count += 1;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*GReturns the number of consecutive digits in a number.\n\n   Example:\n      digitCount(1) ==> 1\n      digitCount(10) ==> 2\n      digitCount(123) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(9876) ==> 5\n      digitCount(12123) ==> 6\n      digitCount(123456) ==> 7\n      digitCount(1234567) ==> 8\n      digitCount(12345678) ==> 9\n      digitCount(123456789) ==> 10\n      digitCount(1234567890) ==> 11\n      digitCount(12345678901) ==> 12\n      digitCount(123456789012) ==> 13\n      digitCount(1234567890123) ==> 14\n      digitCount(12345678901234) ==> 15\n      digitCount(123456789012345) ==> 16\n      digitCount(1234567890123456) ==> 17\n      digitCount(12345678901234567) ==> 18\n      digitCount(123456789012345678) ==> 19\n      digitCount(1234567890123456789) ==> 20\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num) {\n    count += 1;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*GReturns the number of consecutive digits in a number.\n\n   Example:\n      digitCount(1) ==> 1\n      digitCount(10) ==> 2\n      digitCount(123) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(9876) ==> 5\n      digitCount(12123) ==> 6\n      digitCount(123456) ==> 7\n      digitCount(1234567) ==> 8\n      digitCount(12345678) ==> 9\n      digitCount(123456789) ==> 10\n      digitCount(1234567890) ==> 11\n      digitCount(12345678901) ==> 12\n      digitCount(123456789012) ==> 13\n      digitCount(1234567890123) ==> 14\n      digitCount(12345678901234) ==> 15\n      digitCount(123456789012345) ==> 16\n      digitCount(1234567890123456) ==> 17\n      digitCount(12345678901234567) ==> 18\n      digitCount(123456789012345678) ==> 19\n      digitCount(1234567890123456789) ==> 20\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num) {\n    count += 1;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*GReturns the number of consecutive digits in a number.\n\n   Example:\n      digitCount(1) ==> 1\n      digitCount(10) ==> 2\n      digitCount(123) ==> 3\n      digitCount(1234) ==> 4\n      digitCount"}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000\n  }\n\n  const string = ''\n\n  for (let i = 0; i < number; i++) {\n    if (number - i >= roman[i]) {\n      string += roman[i]\n      number -= roman[i]\n    } else {\n      string += 'x'\n    }\n  }\n\n  return string.toLowerCase()\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    let x = b * b - 4 * a * c\n    if (x < 0) {\n        return false\n    }\n    if (x === 0) {\n        return (a === c)\n    }\n    let y = Math.sqrt(x)\n    return (y === Math.abs(b))\n}\n\n/**\n Given the length of a side of a rectangle, returns true if the length is equal to that of the opposite side of the rectangle. Otherwise returns false.\n  Example:\n  equalLength(1, 2, 3) == true\n  equalLength(1, 2, 4) == false\n */\nconst equalLength = (a, b, c) => {\n    return (a + b > c && b + c > a && a + c > b)\n}\n\n/**\n Given the lengths of the three sides of a rectangle, returns true if the sum of the two sides is equal to the third side. Otherwise returns false.\n  Example:\n  sumLength(1, 2, 3) == true\n  sumLength(1, 2, 4) == false\n */\nconst sumLength = (a, b, c) => {\n    return (a + b === c)\n}\n\n/**\n Given a triangle, returns the smallest length of the opposite side. Otherwise returns -1.\n  Example:\n  oppositeSide(1, 2, 3) == 2\n  oppositeSide(1, 2, 4) == 3\n */\nconst oppositeSide = (a, b, c) => {\n    if (sumLength(a, b, c)) {\n        return Math.min(a, b, c)\n    } else {\n        return -1\n    }\n}\n\n/**\n Given a triangle, returns the sum of the lengths of the opposite sides.\n  Example:\n  oppositeSideSums(1, 2, 3) == 6\n  oppositeSideSums(1, 2, 4) == 9\n */\nconst oppositeSideSums = (a, b, c) => {\n    return (a + b + c)\n}\n\n/**\n Given the lengths of the two opposite sides of a triangle, returns true if the sum of the two sides is equal to the length of the third side. Otherwise returns false.\n  Example:\n  oppositeSideSum(1, 2, 3) == true\n  oppositeSideSum(1, 2, 4) == false\n */\nconst oppositeSideSum = (a, b, c) => {\n    return (a + b === c)\n}\n\n/**\n Given the lengths of the three opposite sides of a triangle, returns true if the sum of the two sides is equal to the length of the third side. Otherwise returns false.\n  Example:\n  oppositeSideSum(1, 2, 3) == true\n  oppositeSideSum(1, 2, 4) == false\n */\nconst oppositeSideSum2 = (a, b, c) => {\n    return (a + b === c)\n}\n\n/**\n Given a triangle, returns the smallest length of the two opposite sides. Otherwise returns -1.\n  Example:\n  oppositeSideSums(1, 2, 3) == 2\n  oppositeSideSums(1, 2, 4) == 3\n */\nconst oppositeSideSums2 = (a, b, c) => {\n    return (a + b < c)\n}\n\nconst triangle = (a, b, c) => {\n    if (equalLength(a, b, c)) {\n        return 'equilateral'\n    } else if (sumLength(a, b, c)) {\n        return 'isosceles'\n    } else if (oppositeSide(a, b, c)) {\n        return'scalene'\n    } else if (oppositeSideSums(a, b, c)) {\n        return 'equilateral'\n    } else if (oppositeSideSums2(a, b, c)) {\n        return 'isosceles'\n    }\n}\n\nexport default triangle\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map();\n  const max = words.reduce((a, b) => {\n    const [a0, b0] = [a, b];\n    if (!map.has(a0)) {\n      map.set(a0, 0);\n    }\n    const count = map.get(a0);\n    map.set(a0, count + 1);\n    const [a1, b1] = [b0, a0];\n    if (!map.has(a1)) {\n      map.set(a1, 0);\n    }\n    const count2 = map.get(a1);\n    map.set(a1, count2 + 1);\n    return count + count2;\n  });\n  return map.values().reduce((a, b) => {\n    return a > b? a : b;\n  });\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const [total, needed] = [number, need];\n    const [remaining, needed] = [remaining, need];\n\n    const [done, remaining] = [0, remaining];\n    while (done < needed) {\n        const [eat, remaining] = [done, remaining];\n        const [remaining, needed] = [remaining, needed];\n\n        eat += remaining;\n        needed -= eat;\n        done += eat;\n    }\n\n    return [done, remaining];\n}\n\nconst [total, remaining] = eat(5, 6, 10);\n\nconsole.log(`You have eaten ${total} carrots.`);\nconsole.log(`You are still hungry for ${remaining} more.`);<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operators = [\n    ['+', '*', '-'],\n    ['-', '+', '*'],\n    ['*', '-', '+'],\n    ['-', '*', '+'],\n    ['+', '-', '*'],\n    ['*', '+', '-']\n  ]\n\n  let operator = operator[0]\n  let operand = operand.slice(0, -1)\n  let operand = operand.slice(-1)\n\n  operators.forEach((item, index) => {\n    if (operator === item[0]) {\n      operators[index] = operand.map(Number)\n      operators[index].forEach((number, index) => {\n        operators[index][index] = number + operators[index-1][index-1]\n      })\n    }\n  })\n\n  let result = operand.map(Number)\n  result[0] = operators[0][0]\n  result[result.length - 1] = operators[result.length - 1][result.length - 1]\n\n  return result\n}\n\nmodule.exports = doAlgebra<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reverse = (str) => {\n    let reversed = '';\n    let chars = str.split('');\n    for(let i=chars.length-1;i>=0;i--) {\n      reversed += chars[i];\n    }\n    return reversed;\n  };\n  return reverse(s);\n}\n\n/*\n  Given a string, reverse the order of characters in the string, and return it.\n  Example\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve1 = (s) => {\n  let reverse = (str) => {\n    let chars = str.split('');\n    let reversed = '';\n    for(let i=chars.length-1;i>=0;i--) {\n      reversed += chars[i];\n    }\n    return reversed;\n  };\n  return reverse(s);\n}\n\n/*\n  Given a string, reverse the order of characters in the string, and return it.\n  Example\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve2 = (s) => {\n  let reverse = (str) => {\n    let chars = str.split('');\n    let reversed = '';\n    for(let i=chars.length-1;i>=0;i--) {\n      reversed += chars[i];\n    }\n    return reversed;\n  };\n  return reverse(s);\n}\n\n/*\n  Given a string, reverse the order of characters in the string, and return it.\n  Example\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve3 = (s) => {\n  let reverse = (str) => {\n    let chars = str.split('');\n    let reversed = '';\n    for(let i=0;i<chars.length;i++) {\n      reversed += chars[i];\n    }\n    return reversed;\n  };\n  return reverse(s);\n}\n\n/*\n  Given a string, reverse the order of characters in the string, and return it.\n  Example\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve4 = (s) => {\n  let reverse = (str) => {\n    let chars = str.split('');\n    let reversed = '';\n    for(let i=0;i<chars.length;i++) {\n      reversed += chars[i];\n    }\n    return reversed;\n  };\n  return reverse(s);\n}\n\n/*\n  Given a string, reverse the order of characters in the string, and return it.\n  Example\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve5 = (s) => {\n  let reverse = (str) => {\n    let chars = str.split('');\n    let reversed = '';\n    for(let i=chars.length-1;i>=0;i--) {\n      reversed += chars[i];\n    }\n    return reversed;\n  };\n  return reverse(s);\n}\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let hash = text;\n  if (text === undefined || text === null) {\n    return '0';\n  }\n  else if (typeof text ==='string') {\n    hash = crypto.createHash('md5');\n    hash.update(text);\n  }\n  return hash.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let digits = [];\n  for (let i = a; i <= b; i++) {\n    digits.push(i);\n  }\n  return digits.filter((x) => (x % 2 === 0));\n};\n\nconst generate = (a, b) => {\n  let start = a;\n  let end = b;\n\n  let evenDigits = generateIntegers(start, end);\n\n  let oddDigits = generateIntegers(end + 1, end + a);\n  let output = [...evenDigits,...oddDigits];\n  return output;\n};\n\ndescribe('Test 1:', () => {\n  it('should return an empty list for invalid inputs', () => {\n    expect(generate(0, 0)).toEqual([]);\n  });\n});\n\ndescribe('Test 2:', () => {\n  it('should return the expected list', () => {\n    expect(generate(2, 8)).toEqual([2, 4, 6, 8]);\n  });\n});\n\ndescribe('Test 3:', () => {\n  it('should return the expected list', () => {\n    expect(generate(10, 14)).toEqual([10, 12, 14]);\n  });\n});\n\ndescribe('Test 4:', () => {\n  it('should return the expected list', () => {\n    expect(generate(2, 14)).toEqual([2, 4, 6, 8, 10, 12, 14]);\n  });\n});\n\ndescribe('Test 5:', () => {\n  it('should return the expected list', () => {\n    expect(generate(9, 17)).toEqual([9, 11, 13, 15, 17]);\n  });\n});\n\ndescribe('Test 6:', () => {\n  it('should return the expected list', () => {\n    expect(generate(2, 17)).toEqual([2, 4, 6, 8, 10, 12, 14, 16]);\n  });\n});\n<|endoftext|>"}
