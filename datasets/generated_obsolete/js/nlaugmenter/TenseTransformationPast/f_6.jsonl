{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n  return numbers.filter(element => Math.abs(element - numbers[0]) < threshold).length < 2;\n};\n\nmodule.exports = {\n  getDistance: getDistance,\n  getDistanceWithWeight: getDistanceWithWeight,\n  hasCloseElements,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let groups = paren_string.match(/\\(/g);\n  return groups.map(g => g.replace(/\\)/g, ')')).filter(g => g.length > 0);\n};\n\n/*\n  Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n  count the number of open and closed parentheses in the string. \n  Ignored any spaces in the input string.\n  >>> countParens('( ) (( )) (( )( ))')\n  4\n  */\nconst countParens = (paren_string) => {\n  let open_count = 0,\n    closed_count = 0;\n  for (let group of paren_string.match(/\\(/g)) {\n    if (group.charAt(0) === '(') {\n      open_count++;\n    } else {\n      closed_count++;\n    }\n  }\n  return open_count + closed_count;\n};\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(`${message} Test ${test_number} failed.`);\n  }\n}\n\nassert(\n  (countParens('( ) (( )) (( )( ))') === 4),\n  \"countParens 1\",\n  \"countParens 1\"\n);\n\nassert(\n  (countParens('(((())))') === 1),\n  \"countParens 2\",\n  \"countParens 2\"\n);\n\nassert(\n  (countParens('(())') === 2),\n  \"countParens 3\",\n  \"countParens 3\"\n);\n\nassert(\n  (countParens('(()())') === 3),\n  \"countParens 4\",\n  \"countParens 4\"\n);\n\nassert(\n  (countParens('(()))') === 2),\n  \"countParens 5\",\n  \"countParens 5\"\n);\n\nassert(\n  (countParens('((()()))') === 4),\n  \"countParens 6\",\n  \"countParens 6\"\n);\n\nassert(\n  (countParens('((())))') === 3),\n  \"countParens 7\",\n  \"countParens 7\"\n);\n\nassert(\n  (countParens('((()()))') === 5),\n  \"countParens 8\",\n  \"countParens 8\"\n);\n\nassert(\n  (countParens('((()))') === 4),\n  \"countParens 9\",\n  \"countParens 9\"\n);\n\nassert(\n  (countParens('()') === 0),\n  \"countParens 10\",\n  \"countParens 10\"\n);\n\nassert(\n  (countParens('((())))') === 1),\n  \"countParens 11\",\n  \"countParens 11\"\n);\n\nassert(\n  (countParens('()()') === 2),\n  \"countParens 12\",\n  \"countParens 12\"\n);\n\nassert(\n  (countParens('()') === 0),\n  \"countParens 13\",\n  \"countParens 13\"\n);\n\nassert(\n  (countParens('()()') === 2),\n  \"countParens 14\",\n  \"countParens 14\"\n);\n\nassert(\n  (countParens('()') === 0),\n  \"countParens 15\",\n  \"countParens 15\"\n);\n\nassert(\n  (countParens('()()') === 2),\n  \"countParens 16\",\n  \"countParens 16\"\n);\n\nassert(\n  (countParens('()') === 0),\n  \"countParens 17\",\n  \"countParens 17\"\n);\n\nassert(\n  (countParens('()())') === 3),\n  \"countParens 18\",\n  \"countParens 18\"\n);\n\nassert(\n  (countParens('(())') === 2),\n  \"countParens 19\",\n  \"countParens 19\"\n);\n\nassert(\n  (countParens('(())())') === 4),\n  \"countParens 20\",\n  \"countParens 20\"\n);\n\nassert(\n  (countParens('((()()))') === 6),\n  \"countParens 21\",\n  \"countParens 21\"\n);\n\nassert(\n  (countParens('((()()))') === 5),\n  \"countParens 22\",\n  \"countParens 22\"\n);\n\nassert(\n  (countParens('((()))') === 4),\n  \"countParens 23\",\n  \"countParens 23\"\n);\n\nassert(\n  (countParens('((()()))') === 7),\n  \"countParens 24\",\n  \"countParens 24\"\n);\n\nassert(\n  (countParens('((()()))') === 6),\n  \"countParens 25\",\n  \"countParens 25\"\n);\n\nassert(\n  (countParens('((()()))') === 5),\n  \"countParens 26\",\n  \"countParens 26\"\n);\n\nassert(\n  (countParens('((()()))') === 4),\n  \"countParens 27\",\n  \"countParens 27\"\n);\n\nassert(\n  (countParens('((()()()))') === 8),\n  \"countParens 28\",\n  \"countParens 28\"\n);\n\nassert(\n  (countParens('((()()()))') === 7),\n  \"countParens"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integer = number,\n      decimal = 0;\n  const numberOfDigits = number.toString().split('.').length;\n  while (numberOfDigits > 0) {\n    integer = Math.floor(integer);\n    decimal += numberOfDigits - 1;\n    number = number.toString().split('.')[1];\n    numberOfDigits = number.toString().split('.').length;\n  }\n  return decimal;\n};\n\n/**\n   Given a positive floating point number, it can was decomposed into and integer \n   part (largest integer smaller than gave number) and decimals (leftover part always \n   smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  let integer = number,\n      decimal = 0;\n  const numberOfDigits = number.toString().split('.').length;\n  while (numberOfDigits > 0) {\n    integer = Math.floor(integer);\n    decimal += numberOfDigits - 1;\n    number = number.toString().split('.')[0];\n    numberOfDigits = number.toString().split('.').length;\n  }\n  return integer;\n};\n\nconst truncate = (number, precision = 3) => {\n  const integer = truncateInteger(number),\n        decimal = truncateNumber(number);\n  return (integer + '.' + decimal).substr(0, precision);\n};\n\nmodule.exports = truncate;<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  if (operations.length === 0) {\n    return false;\n  }\n\n  let currentBalance = operations[0];\n  let currentOperation;\n  let currentOperationNumber;\n\n  for (let i = 1; i < operations.length; i++) {\n    currentOperation = operations[i];\n    currentOperationNumber = i;\n\n    if (currentOperation < 0) {\n      currentBalance = currentBalance + currentOperation;\n    } else {\n      currentBalance = currentBalance - currentOperation;\n    }\n\n    if (currentBalance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    let average = 0.0;\n    numbers.forEach(value => {\n        average += Math.abs(value - average);\n    });\n    return average / numbers.length;\n};\n\nmodule.exports = {\n    median,\n    meanAbsoluteDeviation\n};<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return []\n  } else if (numbers.length === 1) {\n    return [numbers[0]]\n  }\n\n  let last = numbers[0]\n  let rest = numbers.slice(1)\n  return rest.reduce((acc, num, index) => {\n    if (index === 0) {\n      acc.push(last)\n      return acc\n    } else {\n      acc.push(last)\n      acc.push(delimeter)\n      return acc\n    }\n  }, [])\n}\n\n/**\n  * Return a random number in a range.\n  * @param {number} start - The minimum value of the range.\n  * @param {number} end - The maximum value of the range.\n  * @return {number} - The random number.\n  */\nconst random = (start, end) => Math.floor(Math.random() * (end - start) + start)\n\n/**\n  * Return a random string of length 'length'.\n  * @param {number} length - The length of the string.\n  * @return {string} - The random string.\n  */\nconst randomString = (length) => {\n  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  let str = ''\n  for (let i = 0; i < length; i++) {\n    str += chars[random(0, chars.length - 1)]\n  }\n  return str\n}\n\nexport default {\n  /**\n   * Return the next number in the given range, after the given number.\n   * @param {number} number - The starting number.\n   * @param {number} start - The minimum value of the range.\n   * @param {number} end - The maximum value of the range.\n   * @return {number} - The next number.\n   */\n  next: (number, start, end) => {\n    return start + Math.floor((Math.random() * (end - start) + start))\n  },\n  /**\n   * Return a random number between `0` and `number` (exclusive).\n   * @param {number} number - The maximum number.\n   * @return {number} - The random number.\n   */\n  random: (number) => {\n    return random(0, number)\n  },\n  /**\n   * Return a random string of length `length`.\n   * @param {number} length - The length of the string.\n   * @return {string} - The random string.\n   */\n  randomString: (length) => {\n    return randomString(length)\n  },\n  /**\n   * Return a random number between `0` and `number` (inclusive).\n   * @param {number} number - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRange: (number) => {\n    return random(0, number)\n  },\n  /**\n   * Return a random number between `number` and `end` (exclusive).\n   * @param {number} number - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeEx: (number, end) => {\n    return random(number, end)\n  },\n  /**\n   * Return a random number between `start` and `end` (exclusive).\n   * @param {number} start - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeEx: (start, end) => {\n    return random(start, end)\n  },\n  /**\n   * Return a random number between `0` and `number` (inclusive).\n   * @param {number} number - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeIn: (number) => {\n    return random(0, number)\n  },\n  /**\n   * Return a random number between `number` and `end` (inclusive).\n   * @param {number} number - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeIn: (start, end) => {\n    return random(start, end)\n  },\n  /**\n   * Return a random number between `start` and `end` (inclusive).\n   * @param {number} start - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeIn: (start, end) => {\n    return random(start, end)\n  },\n  /**\n   * Return a random number between `start` and `end` (inclusive).\n   * @param {number} start - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeIn: (start, end) => {\n    return random(start, end)\n  },\n  /**\n   * Return a random number between `start` and `end` (inclusive).\n   * @param {number} start - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeIn: (start, end) => {\n    return random(start, end)\n  },\n  /**\n   * Return a random number between `start` and `end` (inclusive).\n   * @param {number} start - The starting number.\n   * @param {number} end - The maximum number.\n   * @return {number} - The random number.\n   */\n  randomInRangeIn: (start, end) => {\n    return random(start, end)\n  },\n  /**\n   * Return a random number between `start` and `end` (inclusive).\n   * @"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let level = 1;\n  let nested_level = 1;\n  let stack = [];\n  paren_string = paren_string.split(' ');\n  let index = 0;\n  while (index < paren_string.length) {\n    if (paren_string[index] === ')') {\n      if (nested_level === 1) {\n        nested_level = stack.pop();\n      }\n      if (nested_level > level) {\n        level = nested_level;\n      }\n    }\n    if (paren_string[index] === '(') {\n      stack.push(level);\n      level++;\n    }\n    index++;\n  }\n  return stack;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) > -1);\n}\n\n// Filter an input list of strings only for ones that contain given character\n// Returns an array of strings\n/*\n  >>> filterByChar('', 'a')\n  []\n  >>> filterByChar(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterByChar(['abc', 'bacd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByChar = (strings, char) => {\n  return strings.filter(s => s.indexOf(char) > -1);\n}\n\n// Returns an array of strings that are in the given list\n// and also contain the given string\n/*\n  >>> filterContains('abc', 'c')\n  ['abc']\n  >>> filterContains(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterContains(['abc', 'bacd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterContains = (strings, str) => {\n  return filterBySubstring(strings, str);\n}\n\n// Find the longest common substring in the given list\n// Returns a string that contains all the substrings\n/*\n  >>> longestCommonSubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  'abc'\n  >>> longestCommonSubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  'abc'\n  >>> longestCommonSubstring(['abc', 'bacd', 'cde', 'array'], 'abcde')\n  'abcde'\n  >>> longestCommonSubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  'bacd'\n  >>> longestCommonSubstring(['abc', 'bacd', 'cde', 'array'], 'array')\n  'array'\n  */\nconst longestCommonSubstring = (strings, str) => {\n  const [strLen, stringLen] = [str.length, strings.length];\n  const [str, string] = [str, strings];\n  const [index, indexLen] = [0, 0];\n  const maxLength = Math.min(strLen, stringLen);\n  const [result, indexResult] = [''];\n\n  for (let i = 0; i < maxLength; i++) {\n    while (str[index] === string[indexResult] && index < strLen && indexResult < stringLen) {\n      index++;\n      indexResult++;\n    }\n    if (indexResult === stringLen) {\n      break;\n    }\n    const currentLength = indexResult - index;\n    if (currentLength > result.length) {\n      result = string.slice(index, indexResult + 1);\n      indexResult = index + 1;\n    }\n    index++;\n  }\n  return result;\n}\n\n// Returns a list of strings that are in the given list\n// and also contain the given string\n// Trims the list of strings before the function call\n/*\n  >>> contains('abc', 'c')\n  ['abc']\n  >>> contains(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> contains(['abc', 'bacd', 'cde', 'array'], 'x')\n  []\n  >>> contains(['abc', 'bacd', 'cde', 'array'], 'c', trim=True)\n  ['abc']\n  >>> contains(['abc', 'bacd', 'cde', 'array'], 'c', trim=True)\n  ['abc']\n  >>> contains(['abc', 'bacd', 'cde', 'array'], 'c', trim=True)\n  ['abc']\n  >>> contains(['abc', 'bacd', 'cde', 'array'], 'x', trim=True)\n  []\n  */\nconst contains = (strings, str, trim = false) => {\n  if (trim) {\n    strings = filterBySubstring(strings, str);\n  }\n  return filterContains(strings, str);\n}\n\n// Returns a list of strings that are in the given list\n// and also contain the given string\n// Trims the list of strings before the function call\n// Case-insensitive\n/*\n  >>> containsIgnoreCase('abc', 'C')\n  ['abc']\n  >>> containsIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> containsIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'x')\n  []\n  >>> containsIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'c', trim=True)\n  ['abc']\n  >>> containsIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'c', trim=True)\n  ['abc']\n  >>> containsIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'c', trim=True)\n  ['abc']\n  >>> containsIgnoreCase(['abc', 'bacd', 'cde', 'array'], 'x', trim=True)\n  []\n  */\nconst containsIgnoreCase = (strings, str, trim = false) => {\n  if (trim) {\n    strings = filterBySubstring(strings, str);\n  }\n  return filterContains(strings, str, false);\n}\n\n// Find the first occurrence of the given string in the given list\n// Returns a list of strings\n/*\n  >>> find('abc', ['abc', 'bacd', 'cde', 'array'])\n  ['abc']\n  >>> find(['abc', 'bacd', 'cde"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0\n  const product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return { sum, product }\n}\n\nconst sumProductTest = (test) => {\n  test.deepEqual(sumProduct([1, 2, 3, 4]), { sum: 10, product: 24 })\n  test.deepEqual(sumProduct([], 1), { sum: 0, product: 1 })\n  test.end()\n}\n\nmodule.exports = sumProductTest<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0, min = Number.MAX_VALUE, sum = 0;\n  const rollingMax = (numbers, length) => {\n    numbers.reverse();\n    let max = 0;\n    let sum = 0;\n    while(numbers.length > 0) {\n      sum += numbers.pop();\n      if (sum > max) {\n        max = sum;\n      }\n    }\n    return max;\n  };\n  const rollingMaxList = (numbers, length) => {\n    let result = [];\n    let sum = 0;\n    while(numbers.length > 0) {\n      sum += numbers.pop();\n      result.push(sum);\n    }\n    return result;\n  };\n  return rollingMaxList(numbers, length);\n};\n\n/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxList = (numbers, length) => {\n  let max = 0, min = Number.MAX_VALUE, sum = 0;\n  const rollingMaxList = (numbers, length) => {\n    let result = [];\n    let sum = 0;\n    while(numbers.length > 0) {\n      sum += numbers.pop();\n      result.push(sum);\n    }\n    return result;\n  };\n  return rollingMaxList(numbers, length);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let len = string.length\n  if(len === 0){\n    return string\n  }\n  let index = -1\n  let longestPostfix = 0\n  let longestPalindrome = 0\n  for(let i=0; i<len; i++){\n    if(isPalindrome(string.slice(0, i) + string.slice(i + 1))){\n      longestPalindrome = i\n      longestPostfix = i + 1\n      index = i\n    }\n  }\n  return string.slice(0, index + longestPalindrome + longestPostfix) + string.slice(index + longestPalindrome + longestPostfix, len)\n}\n\n/*\n  Find the smallest string that contains only the digits 0-9 and that\n  is a palindrome.\n  Algorithm:\n  -Find the first index of a digit in a string\n  -Find the first index of a non-digit in a string\n  -If the first index of a digit is not smaller than the index of a non-digit, then\n  there is a digit in the string that is not a palindrome.\n  -If the first index of a digit is smaller than the index of a non-digit, then\n  there is a non-digit that is not a palindrome.\n  -If there is no digit that is not a palindrome, then the string is a palindrome\n  -If there is no non-digit that is not a palindrome, then the string is not a palindrome\n  -If there are no digit or non-digit that are not a palindrome, then the string is a palindrome\n  -If the length of the string is less than or equal to 5, then the string is a palindrome\n  -If the length of the string is less than or equal to 6, then the string is not a palindrome\n  -If the length of the string is less than or equal to 7, then the string is not a palindrome\n  -If the length of the string is less than or equal to 8, then the string is not a palindrome\n  -If the length of the string is less than or equal to 9, then the string is not a palindrome\n  -If the length of the string is greater than 9, then the string is not a palindrome\n  */\nconst findPalindrome = (string) => {\n  let indexDigits = 0\n  let indexNonDigits = 0\n  let isPalindrome = true\n  for(let i=0; i<string.length; i++){\n    if(string[i] === '0' || string[i] === '1' || string[i] === '2' || string[i] === '3' || string[i] === '4' || string[i] === '5' || string[i] === '6' || string[i] === '7' || string[i] === '8' || string[i] === '9'){\n      indexDigits += 1\n    } else {\n      indexNonDigits += 1\n    }\n  }\n  if(indexNonDigits!== 0 || indexDigits!== 0){\n    isPalindrome = false\n  }\n  if(indexDigits === 0){\n    return string\n  } else if(indexNonDigits === 0){\n    return string\n  } else {\n    return string\n  }\n}\n\nconst isPalindrome = (string) => {\n  let len = string.length\n  let index = 0\n  let index2 = len - 1\n  let char1 = string[index]\n  let char2 = string[index2]\n  while(index < len / 2){\n    if(char1!== char2){\n      return false\n    }\n    index += 1\n    index2 -= 1\n    char1 = string[index]\n    char2 = string[index2]\n  }\n  return true\n}\n\n/*\n  Find the first index of the character 'e' in the string.\n  If there is no 'e' in the string, then return -1.\n  If there is a 'e', then return the index of the 'e' in the string.\n  */\nconst indexOfE = (string) => {\n  for(let i=0; i<string.length; i++){\n    if(string[i] === 'e'){\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Find the last index of the character 'e' in the string.\n  If there is no 'e' in the string, then return -1.\n  If there is a 'e', then return the index of the 'e' in the string.\n  */\nconst lastIndexOfE = (string) => {\n  for(let i=string.length - 1; i>=0; i--){\n    if(string[i] === 'e'){\n      return i\n    }\n  }\n  return -1\n}\n\nconst containsLetters = (string) => {\n  let index = -1\n  for(let i=0; i<string.length; i++){\n    if(string[i] === 'a' || string[i] === 'b' || string[i] === 'c' || string[i] === 'd' || string[i] === 'e' || string[i] === 'f' || string[i] === 'g' || string[i] === 'h' || string[i] === 'i' || string[i] === 'j' || string[i] === 'k' || string[i] === 'l' || string[i] ==='m' || string[i] === 'n' || string[i] === 'o' || string[i] === 'p' || string[i] === 'q' || string[i] === 'r' || string[i"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  let result = []\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i])\n  }\n  return result.join('')\n}\n\n/**\n   Find the minimum value in a list of numbers.\n   Given a list of integers, find the smallest integer.\n  >>> minList(10, 1, 5, -10, 1, 1, 5, -10, 5, -10)\n  -10\n  */\nconst minList = (...numbers) => {\n  return numbers.reduce((min, number) => Math.min(min, number), numbers[0])\n}\n\n/**\n   Find the maximum value in a list of numbers.\n   Given a list of integers, find the largest integer.\n  >>> maxList(10, 1, 5, -10, 1, 1, 5, -10, 5, -10)\n  10\n  */\nconst maxList = (...numbers) => {\n  return numbers.reduce((max, number) => Math.max(max, number), numbers[0])\n}\n\n/**\n   Find the median of a list of numbers.\n   Given a list of integers, find the median.\n  >>> medianList(10, 1, 5, -10, 1, 1, 5, -10, 5, -10)\n  4\n  */\nconst medianList = (...numbers) => {\n  const numbersArr = numbers.slice()\n  const sorted = numbersArr.sort()\n  const middle = numbersArr.length / 2\n  if (numbersArr.length % 2 === 1) {\n    return sorted[middle]\n  }\n  return (sorted[middle - 1] + sorted[middle]) / 2\n}\n\n/**\n   Given a string s, return the count of the number of characters that are equal\n   to 1.\n  >>> count1('')\n  0\n  >>> count1('0101')\n  4\n  >>> count1('10')\n  2\n  >>> count1('101')\n  3\n  */\nconst count1 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 1) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/**\n   Given a string s, return the count of the number of characters that are equal\n   to 0.\n  >>> count0('')\n  0\n  >>> count0('0101')\n  1\n  >>> count0('101')\n  1\n  >>> count0('10')\n  0\n  */\nconst count0 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/**\n   Given a string s, return the count of the number of characters that are\n   equal to 1 and 0.\n  >>> count01('')\n  0\n  >>> count01('0101')\n  3\n  >>> count01('101')\n  1\n  >>> count01('10')\n  2\n  */\nconst count01 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 1 && s[i] === 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/**\n   Given a string s, return the number of the number of the characters that are\n   equal to 1 and 1.\n  >>> count11('')\n  0\n  >>> count11('0101')\n  2\n  >>> count11('101')\n  1\n  >>> count11('10')\n  0\n  */\nconst count11 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 1 && s[i] === 1) {\n      count += 1\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  stringXor,\n  minList,\n  maxList,\n  medianList,\n  count1,\n  count0,\n  count01,\n  count11\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = null\n  for (let string of strings) {\n    if (string && (longest === null || longest.length < string.length)) {\n      longest = string\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (b === 0) return a;\n    if (a === 0) return b;\n    while (b!== 0) {\n        const tmp = a;\n        a = b;\n        b = tmp % b;\n    }\n    return a;\n};\n\n/**\n  * Return the nth fibonacci number\n  *\n  * @param  {number} n\n  * @return {number}\n  */\nconst fibonacci = n => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/**\n * Return a number of consecutive fibonacci numbers\n *\n * @param  {number} n\n * @return {number}\n */\nconst fibonacciNumbers = n => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nexport default {\n    greatestCommonDivisor,\n    fibonacci,\n    fibonacciNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const res = []\n  const list = string.split('')\n\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.slice(0, i + 1).join(''))\n  }\n  return res\n}\n\n/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const res = []\n  const list = string.split('')\n\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.slice(0, i + 1).join(''))\n  }\n  return res\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const res = []\n  const list = string.split('')\n\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.slice(i, list.length - i).join(''))\n  }\n  return res\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const res = []\n  const list = string.split('')\n\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.slice(i, list.length - i).join(''))\n  }\n  return res\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const res = []\n  const list = string.split('')\n\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.slice(i, list.length - i).join(''))\n  }\n  return res\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const res = []\n  const list = string.split('')\n\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.slice(i, list.length - i).join(''))\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from(Array(n), (x, i) => i + 1).join(' ');\n};\n\n/*\n  Return the smallest integer that can be formed by concatenating the strings\n  in s.\n  >>> smallest(['', '', '', '', '', '', '', ''])\n  3\n  >>> smallest(['', '', '', '', '', '', '', '0'])\n  1\n  >>> smallest(['', '', '', '', '', '', '', '1'])\n  1\n  >>> smallest(['', '', '', '', '', '', '', '2'])\n  1\n  >>> smallest(['', '', '', '', '', '', '', '3'])\n  1\n  >>> smallest(['', '', '', '', '', '', '', '4'])\n  1\n  >>> smallest(['', '', '', '', '', '', '', '5'])\n  1\n  >>> smallest(['', '', '', '', '', '', '', '6'])\n  2\n  >>> smallest(['', '', '', '', '', '', '', '7'])\n  2\n  >>> smallest(['', '', '', '', '', '', '', '8'])\n  2\n  >>> smallest(['', '', '', '', '', '', '', '9'])\n  2\n  >>> smallest(['', '', '', '', '', '', '', '10'])\n  3\n  >>> smallest(['', '', '', '', '', '', '', '11'])\n  3\n  >>> smallest(['', '', '', '', '', '', '', '12'])\n  3\n  >>> smallest(['', '', '', '', '', '', '', '13'])\n  3\n  >>> smallest(['', '', '', '', '', '', '', '14'])\n  4\n  >>> smallest(['', '', '', '', '', '', '', '15'])\n  4\n  >>> smallest(['', '', '', '', '', '', '', '16'])\n  4\n  >>> smallest(['', '', '', '', '', '', '', '17'])\n  5\n  >>> smallest(['', '', '', '', '', '', '', '18'])\n  5\n  >>> smallest(['', '', '', '', '', '', '', '19'])\n  5\n  >>> smallest(['', '', '', '', '', '', '', '20'])\n  6\n  >>> smallest(['', '', '', '', '', '', '', '21'])\n  6\n  >>> smallest(['', '', '', '', '', '', '', '22'])\n  6\n  >>> smallest(['', '', '', '', '', '', '', '23'])\n  7\n  >>> smallest(['', '', '', '', '', '', '', '24'])\n  7\n  >>> smallest(['', '', '', '', '', '', '', '25'])\n  7\n  >>> smallest(['', '', '', '', '', '', '', '26'])\n  8\n  >>> smallest(['', '', '', '', '', '', '', '27'])\n  8\n  >>> smallest(['', '', '', '', '', '', '', '28'])\n  8\n  >>> smallest(['', '', '', '', '', '', '', '29'])\n  9\n  >>> smallest(['', '', '', '', '', '', '', '30'])\n  9\n  >>> smallest(['', '', '', '', '', '', '', '31'])\n  9\n  >>> smallest(['', '', '', '', '', '', '', '32'])\n  10\n  >>> smallest(['', '', '', '', '', '', '', '33'])\n  10\n  >>> smallest(['', '', '', '', '', '', '', '34'])\n  10\n  >>> smallest(['', '', '', '', '', '', '', '35'])\n  11\n  >>> smallest(['', '', '', '', '', '', '', '36'])\n  11\n  >>> smallest(['', '', '', '', '', '', '', '37'])\n  11\n  >>> smallest(['', '', '', '', '', '', '', '38'])\n  12\n  >>> smallest(['', '', '', '', '', '', '', '39'])\n  12\n  >>> smallest(['', '', '', '', '', '', '', '40'])\n  12\n  >>> smallest(['', '', '', '', '', '', '', '41'])\n  13\n  >>> smallest(['', '', '', '', '', '', '', '42'])\n  13\n  >>> smallest(['', '', '', '', '', '', '', '43'])\n  13\n  >>> smallest(['', '', '', '', '', '', '', '44'])\n  14\n  >>> smallest(['', '', '', '', '', '', '', '45'])\n  14\n  >>> smallest(['', '', '', '', '', '', '', '46'])\n  14\n  >>> smallest(['', '', '', '', '', '', '', '47'])\n  15\n  >>> smallest(['', '', '', '', '', '', '', '48'])\n  15\n  >>> smallest(['', '', '', '', '', '', '', '49'])\n  15\n  >>> smallest(['', '', '', '', '', '', '', '50'])\n  16\n  >>> smallest(['', '', '', '', '', '', '', '51'])\n  16\n  >>> smallest(['', '', '', '', '', '', '', '52'])\n  16\n  >>> smallest(['', '', '', '', '', '',"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let map = new Map();\n  let chars = string.split('');\n  let count = 0;\n\n  for (let char of chars) {\n    let current = map.get(char);\n    if (current === undefined) {\n      map.set(char, 1);\n    } else {\n      map.set(char, ++count);\n    }\n  }\n\n  return map.size;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const pattern = /o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = string.indexOf(substring);\n  while (index!== -1) {\n    count += 1;\n    index = string.indexOf(substring, index + 1);\n  }\n  return count;\n};\n\n// __________________________________________\n// Test Code: Use the test-driver to run the tests\n// automatically.\nif (process.argv.includes(\"--test\")) {\n  const TESTS = [\n    {\n      description: \"should return 0 if the string is empty\",\n      input: \"\",\n      output: 0,\n    },\n    {\n      description: \"should return 1 if the string contains only one substring\",\n      input: \"aa\",\n      output: 1,\n    },\n    {\n      description: \"should return 1 if the string contains only one substring\",\n      input: \"aa\",\n      output: 1,\n    },\n    {\n      description: \"should return 3 if the string contains 3 substrings\",\n      input: \"aaa\",\n      output: 3,\n    },\n    {\n      description: \"should return 3 if the string contains 3 substrings\",\n      input: \"aaa\",\n      output: 3,\n    },\n  ];\n  for (const { description, input, output } of TESTS) {\n    it(description, () => {\n      expect(howManyTimes(input, \"\")).toEqual(output);\n    });\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersArray = numbers.split(' ')\n  numbersArray = numbersArray.sort()\n  return numbersArray.join(' ')\n}\n\n/*\n   Given an array of strings, return a single string containing the words in the array in order. \n   Words are separated by a single space. \n   \n   Example:\n   Given ['please', 'please', 'please', 'please', 'please', 'please', 'please', 'please', 'please'], \n   return 'please please please please please please please'. \n  */\nconst sortWords = (words) => {\n  let wordsArray = words.split(' ')\n  wordsArray = wordsArray.sort()\n  return wordsArray.join(' ')\n}\n\n/*\n   Given a string, return a string where the first and last characters have been swapped. \n   The string may be empty. \n   \n   Example:\n   Given 'abcd', return 'cbad'.\n  */\nconst reverseString = (string) => {\n  let reversedString = string.split('').reverse().join('')\n  return reversedString\n}\n\n/*\n   Given a string, return a string where the first 'k' characters have been reversed, \n   and the last 'k' characters have been reversed. The string may be empty. \n   \n   Example:\n   Given 'abcdefg', return 'gfedcba'.\n  */\nconst reverseNCharacters = (string, k) => {\n  let reversedString = string.split('').reverse().join('')\n  return reversedString\n}\n\n/*\n   Given an array of strings, return an array with the strings in reverse order. \n   The array may be empty. \n  */\nconst reverseArray = (array) => {\n  return array.reverse()\n}\n\n/*\n   Given a string, return the string with each word \n   split at the first non-whitespace character. \n  */\nconst splitAtFirstNonWhitespace = (string) => {\n  let stringArray = string.split(' ')\n  return stringArray.join(' ')\n}\n\n/*\n   Given an array of strings, return a string with each word \n   split at the first non-whitespace character. \n  */\nconst splitAtFirstNonWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.join(' ')\n}\n\n/*\n   Given an array of strings, return a string with each word \n   split at the last non-whitespace character. \n  */\nconst splitAtLastNonWhitespace = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.reverse().join(' ')\n}\n\n/*\n   Given an array of strings, return a string with each word \n   split at the last non-whitespace character. \n  */\nconst splitAtLastNonWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.reverse().join(' ')\n}\n\n/*\n   Given a string, return a string with each word \n   split at the first whitespace character. \n  */\nconst splitAtFirstWhitespace = (string) => {\n  let stringArray = string.split(' ')\n  return stringArray.join(' ')\n}\n\n/*\n   Given a string, return a string with each word \n   split at the first whitespace character. \n  */\nconst splitAtFirstWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.join(' ')\n}\n\n/*\n   Given a string, return a string with each word \n   split at the last whitespace character. \n  */\nconst splitAtLastWhitespace = (string) => {\n  let stringArray = string.split(' ')\n  return stringArray.reverse().join(' ')\n}\n\n/*\n   Given a string, return a string with each word \n   split at the last whitespace character. \n  */\nconst splitAtLastWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.reverse().join(' ')\n}\n\n/*\n   Given an array of strings, return an array with the \n   strings split at the first non-whitespace character. \n  */\nconst splitAtFirstNonWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.join(' ')\n}\n\n/*\n   Given an array of strings, return an array with the \n   strings split at the last non-whitespace character. \n  */\nconst splitAtLastNonWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.reverse().join(' ')\n}\n\n/*\n   Given an array of strings, return an array with the \n   strings split at the first whitespace character. \n  */\nconst splitAtFirstWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.join(' ')\n}\n\n/*\n   Given an array of strings, return an array with the \n   strings split at the last whitespace character. \n  */\nconst splitAtLastWhitespaceArray = (array) => {\n  let arrayArray = array.map(s => s.split(' '))\n  return arrayArray.reverse().join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestNumbers = [];\n  const numbersLength = numbers.length;\n  const closestDistance = [Infinity, Infinity];\n  let i = 0;\n  while (i < numbersLength) {\n    let num1 = numbers[i];\n    let j = i + 1;\n    while (j < numbersLength) {\n      let num2 = numbers[j];\n      if (num1 == num2) {\n        continue;\n      }\n      let distance = Math.abs(num1 - num2);\n      if (closestDistance[0] > distance) {\n        closestNumbers[0] = num1;\n        closestNumbers[1] = num2;\n        closestDistance[0] = distance;\n        closestDistance[1] = Math.abs(num1 - num2);\n      }\n      j++;\n    }\n    i++;\n  }\n  return closestNumbers;\n};\n\n/*\n  Given a collection of numbers (of length at least two), select and return the \n  one that is closest to the other in the collection.\n  >>> findClosest(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)\n  3.0\n  >>> findClosest(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)\n  2.0\n  */\nconst findClosest = (num1, num2) => {\n  const numbersLength = num1.length;\n  let closest = num1;\n  let distance = Infinity;\n  for (let i = 0; i < numbersLength; i++) {\n    let num = num1[i];\n    let distance = Math.abs(num - num2);\n    if (distance < distance) {\n      closest = num;\n      distance = Math.abs(num - num2);\n    }\n  }\n  return closest;\n};\n\n/*\n  Given a collection of numbers (of length at least two), select and return the \n  two that are the closest to each other in the collection.\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestNumbers = [];\n  const numbersLength = numbers.length;\n  const closestDistance = [Infinity, Infinity];\n  let i = 0;\n  while (i < numbersLength) {\n    let num1 = numbers[i];\n    let j = i + 1;\n    while (j < numbersLength) {\n      let num2 = numbers[j];\n      if (num1 == num2) {\n        continue;\n      }\n      let distance = Math.abs(num1 - num2);\n      if (closestDistance[0] > distance) {\n        closestNumbers[0] = num1;\n        closestNumbers[1] = num2;\n        closestDistance[0] = distance;\n        closestDistance[1] = Math.abs(num1 - num2);\n      }\n      j++;\n    }\n    i++;\n  }\n  return closestNumbers;\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scaled = [n / max for n in numbers]\n  const transformed = [min + (n - min) * (1 / max) for n in scaled]\n  return transformed\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in sorted order\n  >>> sort([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst sort = (numbers) => {\n  const sorted = [...numbers].sort((a, b) => a - b)\n  return sorted\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in reversed order\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse = (numbers) => {\n  const reversed = [...numbers].reverse()\n  return reversed\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in sorted order, using the given comparator function\n  >>> sortBy((a, b) => a - b, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortBy((a, b) => a - b, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst sortBy = (comparator, numbers) => {\n  const sorted = [...numbers].sort(comparator)\n  return sorted\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in reversed order, using the given comparator function\n  >>> reverseBy((a, b) => a - b, [1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverseBy((a, b) => a - b, [1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverseBy = (comparator, numbers) => {\n  const reversed = [...numbers].reverse(comparator)\n  return reversed\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in sorted order, using the given comparator function\n  >>> sortByDescending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> sortByDescending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst sortByDescending = (comparator, numbers) => {\n  const sorted = [...numbers].sort((a, b) => b - a)\n  return sorted\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in reversed order, using the given comparator function\n  >>> reverseByDescending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> reverseByDescending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst reverseByDescending = (comparator, numbers) => {\n  const reversed = [...numbers].reverse(comparator)\n  return reversed\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in sorted order, using the given comparator function\n  >>> sortByAscending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortByAscending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst sortByAscending = (comparator, numbers) => {\n  const sorted = [...numbers].sort((a, b) => a - b)\n  return sorted\n}\n\n/**\n * Given a list of numbers (of at least two elements), returns a list\n * of the numbers in reversed order, using the given comparator function\n  >>> reverseByAscending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverseByAscending((a, b) => a - b, [1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverseByAscending = (comparator, numbers) => {\n  const reversed = [...numbers].reverse(comparator)\n  return reversed\n}\n\nexport {\n  rescaleToUnit,\n  sort,\n  sortBy,\n  sortByDescending,\n  sortByAscending,\n  reverse,\n  reverseBy,\n  reverseByDescending,\n  reverseByAscending\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filter = (x) => x % 1 === 0;\n  return values.filter(filter);\n};\n\n/* Filter out non-numerical values\n  >>> filterNonNumbers(['a', '3', 3])\n  []\n  >>> filterNonNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNonNumbers = (values) => {\n  const filter = (x) => isNumber(x);\n  return values.filter(filter);\n};\n\n/* Filter out all values with the given prefix\n  >>> filterPrefix('abc', ['a', 'b', 'c'])\n  []\n  >>> filterPrefix('abc', ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c']\n  */\nconst filterPrefix = (prefix, values) => {\n  const filter = (x) => x.indexOf(prefix) === 0;\n  return values.filter(filter);\n};\n\n/* Filter out all values with the given suffix\n  >>> filterSuffix('abc', ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> filterSuffix('abc', ['a', 'b', 'c', 'd'])\n  []\n  */\nconst filterSuffix = (suffix, values) => {\n  const filter = (x) => x.indexOf(suffix) === (x.length - suffix.length);\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not one of the given types\n  >>> filterTypes(['a', 3, '3.14'], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> filterTypes(['a', '3', 3.14], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst filterTypes = (values, types) => {\n  const filter = (x) => types.indexOf(type(x))!== -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, String])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, String])\n  ['3', 3.14]\n  */\nconst filterTypesClass = (values, types) => {\n  const filter = (x) => types.indexOf(type(x))!== -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not a subclass of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, Object])\n  ['3', 3.14]\n  */\nconst filterTypesSubclass = (values, types) => {\n  const filter = (x) => types.indexOf(type(x))!== -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, Object])\n  ['3', 3.14]\n  */\nconst filterTypesInstance = (values, types) => {\n  const filter = (x) => types.indexOf(type(x)) === -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, Object])\n  ['3', 3.14]\n  */\nconst filterTypesSubclassInstance = (values, types) => {\n  const filter = (x) => types.indexOf(type(x)) === -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, Object])\n  ['3', 3.14]\n  */\nconst filterTypesSuperclass = (values, types) => {\n  const filter = (x) => types.indexOf(type(x))!== -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, Object])\n  ['3', 3.14]\n  */\nconst filterTypesSuperclassInstance = (values, types) => {\n  const filter = (x) => types.indexOf(type(x))!== -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filterTypes(['a', '3', 3.14], [Number, Object])\n  ['3', 3.14]\n  */\nconst filterTypesSuperclassSubclass = (values, types) => {\n  const filter = (x) => types.indexOf(type(x))!== -1;\n  return values.filter(filter);\n};\n\n/* Filter out all values which are not an instance of the given class\n  >>> filterTypes(['a', 3, '3.14'], [Number, Object])\n  [3, '3.14']\n  >>> filter"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return the index of first occurence of ch in string\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'z')\n  -1\n  >>> strindex('abc', 'z', 3)\n  3\n  */\nconst strindex = (string, ch, fromIndex) => {\n  const from = fromIndex || 0\n  const idx = string.indexOf(ch, from)\n  return idx === -1? -1 : idx + from\n}\n\n/* Return a copy of string with all instances of ch replaced by newch\n  >>> strrep('abc', 'b', 'c')\n  'ac'\n  >>> strrep('abc', 'b', 'c', 0)\n  'ac'\n  >>> strrep('abc', 'b', 'c', 3)\n  'abc'\n  */\nconst strrep = (string, ch, newch, fromIndex) => {\n  const from = fromIndex || 0\n  return string.replace(RegExp(`${ch}`, 'g'), newch)\n}\n\n/* Return a copy of string with ch replaced by newch at the index\n  >>> strrepat('abc', 'b', 'c', 0)\n  'ac'\n  >>> strrepat('abc', 'b', 'c', 3)\n  'abc'\n  */\nconst strrepat = (string, ch, newch, fromIndex) => {\n  const from = fromIndex || 0\n  return string.substr(0, from) + newch + string.substr(from + 1)\n}\n\n/* Return a copy of string with ch replaced by newch at the index\n  >>> strrepcat('abc', 'b', 'c', 0)\n  'ac'\n  >>> strrepcat('abc', 'b', 'c', 3)\n  'abc'\n  */\nconst strrepcat = (string, ch, newch, fromIndex) => {\n  const from = fromIndex || 0\n  return string.slice(0, from) + newch + string.slice(from + 1)\n}\n\n/* Return the substring of string that starts at index and ends at index + length\n  >>> strslice('abc', 1, 3)\n  'bc'\n  >>> strslice('abc', -3, -1)\n  'c'\n  >>> strslice('abc', -3, -1, 0)\n  ''\n  */\nconst strslice = (string, start, end, fromIndex) => {\n  const from = fromIndex || 0\n  return string.substring(from, from + (end - start))\n}\n\n/* Return the substring of string that starts at index and ends at index + length\n  >>> strsliceat('abc', 1, 3)\n  'bc'\n  >>> strsliceat('abc', -3, -1)\n  'c'\n  >>> strsliceat('abc', -3, -1, 0)\n  ''\n  */\nconst strsliceat = (string, start, end, fromIndex) => {\n  const from = fromIndex || 0\n  return string.substring(from, from + (end - start))\n}\n\n/* Return the length of the given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return a copy of string with all instances of substr removed\n  >>> strremove('abc', 'b')\n  'ac'\n  >>> strremove('abc', 'z')\n  'abc'\n  */\nconst strremove = (string, substr) => {\n  const idx = string.indexOf(substr)\n  return idx === -1? string : string.substr(0, idx) + string.substr(idx + substr.length)\n}\n\n/* Return a copy of string with all instances of substr removed\n  >>> strremoveat('abc', 1, 3)\n  'ac'\n  >>> strremoveat('abc', -3, -1)\n  'abc'\n  */\nconst strremoveat = (string, start, end) => {\n  const idx = string.indexOf(start)\n  return idx === -1? string : string.substr(0, idx) + string.substr(idx + start.length)\n}\n\n/* Return a copy of string with all instances of substr removed\n  >>> strremovecat('abc', 'b')\n  'ac'\n  >>> strremovecat('abc', 'z')\n  'abc'\n  */\nconst strremovecat = (string, substr) => {\n  const idx = string.indexOf(substr)\n  return idx === -1? string : string.slice(0, idx) + string.slice(idx + substr.length)\n}\n\n/* Return a copy of string with all instances of substr removed\n  >>> strslice('abc', 1, 3)\n  'ac'\n  >>> strslice('abc', -3, -1)\n  'abc'\n  */\nconst strslice = (string, start, end) => {\n  const idx = string.indexOf(start)\n  return idx === -1? string : string.substring(0, idx) + string.substring(idx + start.length)\n}\n\n/* Return a copy of string with all instances of substr removed\n  >>> strsliceat('abc', 1, 3)\n  'ac'\n  >>> strsliceat('abc', -3, -1)\n  'abc'\n  */\nconst strsliceat = (string, start, end) => {\n  const idx = string.indexOf(start)\n  return idx === -1? string : string.slice(0, idx) + string.slice(idx + start.length)\n}\n\n/* Return the index of first occurence of substr in string\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'z')\n  -1\n  >>> strindex('abc', 'z', 3)\n  3\n  */\nconst strindex = (string, substr, fromIndex) => {\n  const from = fromIndex || 0\n  const idx = string.indexOf(substr, from)\n  return idx === -1? -1 : idx + from\n}\n\n/* Return a copy of string with ch replaced by newch"}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1,\n    count = 1,\n    divisorCount = 1;\n  while (n % divisor === 0) {\n    divisor *= 10;\n    count++;\n  }\n  return count;\n};\n\nconsole.log(largestDivisor(15));\nconsole.log(largestDivisor(3));\nconsole.log(largestDivisor(1));\nconsole.log(largestDivisor(0));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const primeFactors = [];\n  const factorization = (n) => {\n    if (n === 1) {\n      return [];\n    }\n\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        if (primeFactors.includes(i)) {\n          primeFactors.push(i);\n          factorization(n / i);\n        }\n      }\n    }\n  };\n\n  factorization(n);\n  return primeFactors;\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  return numbers.filter(n => set.add(n)).sort();\n};\n\n/* From a list of numbers, find all the pairs that add up to a specific number.\n  >>> findPairs(1, 2, 3)\n  [[1, 2], [1, 3], [2, 3]]\n  >>> findPairs(1, 2, 3, 4)\n  [[1, 2], [1, 3], [2, 3], [1, 4], [2, 4], [3, 4]]\n  >>> findPairs(1, 2, 3, 4, 5)\n  [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]\n  */\nconst findPairs = (first, second, third) => {\n  const pairs = [];\n  const firstToSecond = (first, second) => {\n    return first + second;\n  };\n  const firstToThird = (first, third) => {\n    return first + third;\n  };\n  const secondToThird = (second, third) => {\n    return second + third;\n  };\n  const addPair = (first, second, pair) => {\n    pairs.push([first, second, pair]);\n  };\n  const addPairSecond = (first, second, pair) => {\n    pairs.push([second, first, pair]);\n  };\n  const addPairThird = (first, second, third, pair) => {\n    pairs.push([first, second, third, pair]);\n  };\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first, second, firstToSecond(first, second));\n  addPair(first"}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const flipped = string.toLowerCase()\n   .split('')\n   .map((char, index) => char.toUpperCase())\n   .join('')\n  return flipped\n}\n\n// For a given string, the first letter will be upper case and the rest will be lower case.\n// Example: 'this is a sentence' -> 'This is a sentence'\nconst upperCaseFirst = (string) => {\n  const upperFirst = string.charAt(0).toUpperCase()\n    + string.slice(1)\n  return upperFirst\n}\n\n// For a given string, the first letter will be lower case and the rest will be upper case.\n// Example: 'this is a sentence' -> 'this is a sentence'\nconst lowerCaseFirst = (string) => {\n  const lowerFirst = string.charAt(0).toLowerCase()\n    + string.slice(1)\n  return lowerFirst\n}\n\n// For a given string, all lowercase characters will be upper case.\n// Example: 'this is a sentence' -> 'THIS IS A SENTENCE'\nconst upperCaseAll = (string) => {\n  const upperCaseAll = string.toUpperCase()\n  return upperCaseAll\n}\n\n// For a given string, all upper case characters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'this is a sentence'\nconst lowerCaseAll = (string) => {\n  const lowerCaseAll = string.toLowerCase()\n  return lowerCaseAll\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'this is a sentence'\nconst lowerCaseAllUppercase = (string) => {\n  const lowerCaseAllUppercase = string.toLowerCase()\n  return lowerCaseAllUppercase\n}\n\n// For a given string, all lowercase letters will be upper case.\n// Example: 'this is a sentence' -> 'This is a sentence'\nconst upperCaseAllLowercase = (string) => {\n  const upperCaseAllLowercase = string.toUpperCase()\n  return upperCaseAllLowercase\n}\n\n// For a given string, all lowercase letters will be upper case.\n// Example: 'this is a sentence' -> 'THIS IS A SENTENCE'\nconst upperCaseAllCapitalize = (string) => {\n  const upperCaseAllCapitalize = string.toUpperCase()\n  return upperCaseAllCapitalize\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'this is a sentence'\nconst lowerCaseAllCapitalize = (string) => {\n  const lowerCaseAllCapitalize = string.toLowerCase()\n  return lowerCaseAllCapitalize\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'THIS IS A SENTENCE'\nconst lowerCaseAllUppercase = (string) => {\n  const lowerCaseAllUppercase = string.toUpperCase()\n  return lowerCaseAllUppercase\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'this is a sentence'\nconst upperCaseAllFirstCapitalize = (string) => {\n  const upperCaseAllFirstCapitalize = string.charAt(0).toUpperCase()\n    + string.slice(1)\n  return upperCaseAllFirstCapitalize\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'this is a sentence'\nconst lowerCaseAllFirstCapitalize = (string) => {\n  const lowerCaseAllFirstCapitalize = string.charAt(0).toLowerCase()\n    + string.slice(1)\n  return lowerCaseAllFirstCapitalize\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'THIS IS A SENTENCE'\nconst upperCaseAllAllCapitalize = (string) => {\n  const upperCaseAllAllCapitalize = string.toUpperCase()\n  return upperCaseAllAllCapitalize\n}\n\n// For a given string, all uppercase letters will be lower case.\n// Example: 'THIS IS A SENTENCE' -> 'this is a sentence'\nconst lowerCaseAllAllCapitalize = (string) => {\n  const lowerCaseAllAllCapitalize = string.toLowerCase()\n  return lowerCaseAllAllCapitalize\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const strs = Array.isArray(strings)? strings : [strings];\n  return strs.reduce((s, str) => s + str);\n};\n\n/**\n  Returns the length of the longest string in the list\n  >>> length([])\n  0\n  >>> length(['a', 'b', 'c'])\n  3\n  */\nconst length = (strings) => {\n  const strs = Array.isArray(strings)? strings : [strings];\n  return strs.reduce((max, str) => max(str.length, max), 0);\n};\n\n/**\n  Returns the number of elements in the list\n  >>> [].length\n  0\n  >>> ['a', 'b', 'c'].length\n  3\n  */\nconst length = (strings) => {\n  const strs = Array.isArray(strings)? strings : [strings];\n  return strs.length;\n};\n\n/**\n  Returns the number of occurrences of the specified value in the list\n  >>> [1, 2, 3].count(1)\n  1\n  >>> [1, 2, 3].count(4)\n  0\n  >>> [1, 2, 3, 1, 2, 3].count(1)\n  3\n  >>> [1, 1, 2, 3].count(1)\n  2\n  */\nconst count = (list, value) => {\n  const result = list.filter(item => item === value);\n  return result.length;\n};\n\n/**\n  Returns the number of elements in the list without the specified value\n  >>> [1, 2, 3].without(2)\n  [1, 3]\n  >>> [1, 2, 3].without(4)\n  [1, 2, 3]\n  */\nconst without = (list, value) => {\n  const result = list.filter(item => item!== value);\n  return result;\n};\n\n/**\n  Returns the number of occurrences of the specified value in the list\n  >>> [1, 2, 3].count(1)\n  1\n  >>> [1, 2, 3].count(4)\n  0\n  >>> [1, 1, 2, 3].count(1)\n  3\n  >>> [1, 1, 2, 3].count(1)\n  2\n  */\nconst without = (list, value) => {\n  const result = list.filter(item => item!== value);\n  return result.length;\n};\n\n/**\n  Returns the index of the first occurrence of the specified value in the list\n  >>> [1, 2, 3].index(2)\n  1\n  >>> [1, 2, 3].index(4)\n  -1\n  >>> [1, 1, 2, 3].index(1)\n  0\n  */\nconst index = (list, value) => {\n  const index = list.indexOf(value);\n  return index;\n};\n\n/**\n  Returns the index of the last occurrence of the specified value in the list\n  >>> [1, 2, 3].lastIndex(2)\n  1\n  >>> [1, 2, 3].lastIndex(4)\n  -1\n  >>> [1, 1, 2, 3].lastIndex(1)\n  3\n  */\nconst lastIndex = (list, value) => {\n  const index = list.lastIndexOf(value);\n  return index;\n};\n\n/**\n  Returns the last element in the list\n  >>> [1, 2, 3].last()\n  3\n  */\nconst last = (list) => {\n  const index = list.length - 1;\n  return list[index];\n};\n\n/**\n  Returns the first element in the list\n  >>> [1, 2, 3].first()\n  1\n  */\nconst first = (list) => {\n  const index = 0;\n  return list[index];\n};\n\n/**\n  Returns the element at the specified index in the list\n  >>> [1, 2, 3].at(1)\n  2\n  >>> [1, 2, 3].at(3)\n  3\n  >>> [1, 2, 3].at(5)\n  undefined\n  */\nconst at = (list, index) => {\n  const result = list[index];\n  return result;\n};\n\n/**\n  Returns the first element in the list\n  >>> [1, 2, 3].take(1)\n  1\n  >>> [1, 2, 3].take(3)\n  [1, 2, 3]\n  >>> [1, 2, 3].take(5)\n  []\n  */\nconst take = (list, num) => {\n  const result = list.slice(0, num);\n  return result;\n};\n\n/**\n  Returns the last element in the list\n  >>> [1, 2, 3].takeLast(1)\n  2\n  >>> [1, 2, 3].takeLast(3)\n  [1, 2, 3]\n  >>> [1, 2, 3].takeLast(5)\n  [1, 2, 3]\n  */\nconst takeLast = (list, num) => {\n  const result = list.slice(list.length - num);\n  return result;\n};\n\nmodule.exports = {\n  concatenate,\n  length,\n  count,\n  without,\n  index,\n  lastIndex,\n  last,\n  first,\n  at,\n  take,\n  takeLast\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix("}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let i,\n    result = [],\n    lLen = l.length;\n\n  for (i = 0; i < lLen; i += 1) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n\n  return result;\n};\n\nexport default getPositive;<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if (n <= 1) return false\n    if (n === 2) return true\n    if (n === 3) return false\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    if (n < 9) return true\n    let i = 5\n    while (i * i <= n) {\n        if (n % i === 0) return false\n        i += 6\n    }\n    return true\n}\n\n/**\n  * Given a prime number, return the number of digits in the longest prime number\n  * that is divisible by the prime number.\n  *\n  * For example:\n  *  >>> divisibleDigits(13)\n  *  3\n  *  >>> divisibleDigits(16)\n  *  2\n  *  >>> divisibleDigits(20)\n  *  2\n  *  >>> divisibleDigits(24)\n  *  3\n  *  >>> divisibleDigits(25)\n  *  3\n  *  >>> divisibleDigits(26)\n  *  2\n  *  >>> divisibleDigits(100)\n  *  3\n  *  >>> divisibleDigits(101)\n  *  3\n  *  >>> divisibleDigits(102)\n  *  3\n  *  >>> divisibleDigits(1000)\n  *  5\n  *  >>> divisibleDigits(1001)\n  *  5\n  *  >>> divisibleDigits(15000)\n  *  7\n  *  >>> divisibleDigits(15001)\n  *  7\n  *  >>> divisibleDigits(15002)\n  *  7\n  *  >>> divisibleDigits(15010)\n  *  9\n  *  >>> divisibleDigits(15011)\n  *  9\n  *  >>> divisibleDigits(15012)\n  *  9\n  *  >>> divisibleDigits(15100)\n  *  9\n  *  >>> divisibleDigits(15101)\n  *  9\n  *  >>> divisibleDigits(15102)\n  *  9\n  *  >>> divisibleDigits(151000)\n  *  11\n  *  >>> divisibleDigits(151001)\n  *  11\n  *  >>> divisibleDigits(152000)\n  *  13\n  *  >>> divisibleDigits(152001)\n  *  13\n  *  >>> divisibleDigits(152002)\n  *  13\n  *  >>> divisibleDigits(153001)\n  *  13\n  *  >>> divisibleDigits(153002)\n  *  13\n  *  >>> divisibleDigits(153003)\n  *  13\n  *  >>> divisibleDigits(153004)\n  *  13\n  *  >>> divisibleDigits(153005)\n  *  13\n  *  >>> divisibleDigits(153006)\n  *  13\n  *  >>> divisibleDigits(153007)\n  *  13\n  *  >>> divisibleDigits(153008)\n  *  13\n  *  >>> divisibleDigits(153009)\n  *  13\n  *  >>> divisibleDigits(153010)\n  *  13\n  *  >>> divisibleDigits(153011)\n  *  13\n  *  >>> divisibleDigits(153012)\n  *  13\n  *  >>> divisibleDigits(153013)\n  *  13\n  *  >>> divisibleDigits(153100)\n  *  13\n  *  >>> divisibleDigits(153200)\n  *  15\n  *  >>> divisibleDigits(153300)\n  *  17\n  *  >>> divisibleDigits(153400)\n  *  17\n  *  >>> divisibleDigits(153500)\n  *  19\n  *  >>> divisibleDigits(153600)\n  *  19\n  *  >>> divisibleDigits(153700)\n  *  21\n  *  >>> divisibleDigits(153800)\n  *  21\n  *  >>> divisibleDigits(153900)\n  *  21\n  *  >>> divisibleDigits(154001)\n  *  21\n  *  >>> divisibleDigits(154002)\n  *  21\n  *  >>> divisibleDigits(154003)\n  *  21\n  *  >>> divisibleDigits(154004)\n  *  21\n  *  >>> divisibleDigits(154005)\n  *  21\n  *  >>> divisibleDigits(154006)\n  *  21\n  *  >>> divisibleDigits(154007)\n  *  21\n  *  >>> divisibleDigits(154008)\n  *  21\n  *  >>> divisibleDigits(154009)\n  *  21\n  *  >>> divisibleDigits(154010)\n  *  21\n  *  >>> divisibleDigits(154011)\n  *  21\n  *  >>> divisibleDigits(154012)\n  *  21\n  *  >>> divisibleDigits(154100)\n  *  21\n  *  >>> divisibleDigits(154200)\n  *  23\n  *  >>> divisibleDigits(154300)\n  *  25\n  *  >>> divisibleDigits(154000)\n  *  31\n  *  >>> divisibleDigits(154500)\n  *  31\n  *  >>> divisibleDigits(154600)\n  *  31\n  *  >>> divisibleDigits(154700)\n  *  31\n  *  >>> divisibleDigits(154800)\n  *  31\n  *  >>> divisibleDigits(154900)\n  *  31\n  *  >>> divisibleDigits(154901)\n  *  31\n  *  >>> divisibleDigits(154902)\n  *  31"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!= 0) return -1\n  for (let i = xs.length - 2; i >= 0; i--) {\n    if (xs[i]!= 0) return xs[i]\n  }\n  return -1\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly2 = (xs, x)=>{ \n  return xs.reduce((prev, item, index)=>{ \n    return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  if (xs.length % 2!= 0) return -1\n  for (let i = xs.length - 2; i >= 0; i--) {\n    if (xs[i]!= 0) return xs[i]\n  }\n  return -1\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly3 = (xs, x)=>{ \n  return xs.reduce((prev, item, index)=>{ \n    return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  if (xs.length % 2!= 0) return -1\n  for (let i = xs.length - 2; i >= 0; i--) {\n    if (xs[i]!= 0) return xs[i]\n  }\n  return -1\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly4 = (xs, x)=>{ \n  return xs.reduce((prev, item, index)=>{ \n    return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  if (xs.length % 2!= 0) return -1\n  for (let i = xs.length - 2; i >= 0; i--) {\n    if (xs[i]!= 0) return xs[i]\n  }\n  return -1\n}\n\n/* \n   Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly5 = (xs, x)=>{ \n  return xs.reduce((prev, item, index)=>{ \n"}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let i = 0\n  let lCopy = l.slice()\n  while (i < lCopy.length) {\n    let v = lCopy[i]\n    let j = i + 1\n    while (j < lCopy.length && lCopy[j] % 3 === 0) {\n      lCopy[i] = lCopy[j]\n      j++\n    }\n    lCopy[i] = v\n    i++\n  }\n  return lCopy\n}\n\n/*This function took a list l and returned a list l' such that \n  the value of the indicies that were divisible by three were equal to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdByVal = (l) => {\n  let lCopy = l.slice()\n  let i = 0\n  while (i < lCopy.length) {\n    let v = lCopy[i]\n    let j = i + 1\n    while (j < lCopy.length && lCopy[j] % 3 === 0) {\n      lCopy[i] = lCopy[j]\n      j++\n    }\n    lCopy[i] = v\n    i++\n  }\n  return lCopy\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in ascending order.\n  >>> sortAsc([1, 2, 3])\n  [1, 2, 3]\n  >>> sortAsc([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortAsc = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in descending order.\n  >>> sortDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortDesc([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 4, 3, 2, 6, 5]\n  */\nconst sortDesc = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in ascending order of their sum.\n  >>> sortSum([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSum([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortSum = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => a + b)\n  return sorted\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in descending order of their sum.\n  >>> sortSumDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortSumDesc([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 4, 3, 2, 6, 5]\n  */\nconst sortSumDesc = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => b - a)\n  return sorted\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in ascending order of their product.\n  >>> sortProd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortProd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortProd = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => a * b)\n  return sorted\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in descending order of their product.\n  >>> sortProdDesc([1, 2, 3])\n  [3, 2, 1]\n  >>> sortProdDesc([5, 6, 3, 4, 8, 9, 2])\n  [9, 8, 4, 3, 2, 6, 5]\n  */\nconst sortProdDesc = (l) => {\n  let sorted = []\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => b * a)\n  return sorted\n}\n\n/*This function takes a list of numbers and returns a list of numbers that were sorted in ascending order of their product of their sum.\n  >>> sortSumProd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSumProd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSumProd = (l"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const map = new Map();\n  l.forEach(element => map.set(element, 1));\n  return Array.from(map.keys());\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => (a > b? a : b));\n};\n\n/**\n  >>> maxElement([-1, 0, 3, 5, 9, -10])\n  9\n  >>> maxElement([])\n  NaN\n  >>> maxElement([-5, -3, -1])\n  -5\n  >>> maxElement([[2, -2, 1], [-2, 1, -1]])\n  [-2, -2, 1]\n  */\nconst maxElementByDescending = (l) => {\n  return l.reduce((a, b) => (a > b? a : b));\n};\n\nexport {\n  maxElement,\n  maxElementByDescending\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz2 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz3 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz4 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz5 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz6 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz7 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz8 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz9 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      fizzBuzzCount[i]++;\n    }\n  }\n\n  return fizzBuzzCount;\n};\n\n/*\n  * Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  *\n  * Time complexity: O(n)\n  * Space complexity: O(1)\n  */\nconst fizzBuzz10 = (n) => {\n  const fizzBuzzCount = {\n    1: 0,\n    3: 0,\n    5: 0,\n    7: 0,\n  };\n\n  for (let i"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const len = l.length\n  if (len % 2 === 0) {\n    return l\n  }\n  let i = 0\n  let j = len - 1\n  const out = []\n  while (i < j) {\n    const k = (i + j) / 2\n    if (l[k] % 2 === 1) {\n      j = k\n    } else {\n      i = k + 1\n    }\n  }\n  while (i <= j) {\n    out.push(l[i])\n    i += 2\n  }\n  return out\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n  var result= [], i= 0, len= s.length;\n  while (i < len){\n    result.push(s.slice(i, i+3));\n    i += 3;\n  }\n  return result.join('');\n}\n\n\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1 || n === 2) return n;\n  const fib = (n - 1) % 2;\n  let p = 0;\n  let q = 1;\n  while (q < fib) {\n    p = p + q;\n    q = q + fib;\n  }\n  return p;\n};\n\nconsole.log(primeFib(100));\nconsole.log(primeFib(1000));\nconsole.log(primeFib(10000));\nconsole.log(primeFib(1000000));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let sum = 0\n    for (let i = 0; i < l.length - 2; i++) {\n        for (let j = i + 1; j < l.length - 1; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                sum = l[i] + l[j] + l[k]\n                if (sum === 0) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\n/*\n  findMinAndMax returns a tuple of two values. \n   the first value is the minimum number in the list, \n   and the second value is the maximum number in the list. \n\n  >>> findMinAndMax([1, 3, 5, 0])\n  (0, 5)\n  >>> findMinAndMax([1, 3, -2, 1])\n  (-2, 1)\n  >>> findMinAndMax([1, 2, 3, 7])\n  (1, 7)\n  >>> findMinAndMax([2, 4, -5, 3, 9, 7])\n  (2, 15)\n  >>> findMinAndMax([1])\n  (1, 1)\n  */\nconst findMinAndMax = (l) => {\n    let min = l[0], max = l[0]\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i]\n        } else if (l[i] > max) {\n            max = l[i]\n        }\n    }\n    return (min, max)\n}\n\n/*\n  printArray returns a string representation of an array. \n   it returns a string of the form '[1, 2, 3,...]'\n\n  >>> printArray([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> printArray([1, 2, 3])\n  [1, 2, 3]\n  >>> printArray([1, 2])\n  [1, 2]\n  */\nconst printArray = (l) => {\n    let str = \"[\"\n    for (let i = 0; i < l.length - 1; i++) {\n        str += l[i] + \", \"\n    }\n    str += l[l.length - 1] + \"]\"\n    return str\n}\n\n/*\n  return the nth number from the right of the array. \n   it returns the nth number from the right of the array. \n   if there are less than n elements left in the array, \n   it returns the last element in the array. \n\n  >>> returnNthNumber(3, [1, 2, 3])\n  2\n  >>> returnNthNumber(5, [1, 2, 3])\n  3\n  >>> returnNthNumber(7, [1, 2, 3])\n  3\n  >>> returnNthNumber(9, [1, 2, 3])\n  3\n  >>> returnNthNumber(3, [])\n  []\n  >>> returnNthNumber(5, [1])\n  1\n  >>> returnNthNumber(7, [1])\n  1\n  */\nconst returnNthNumber = (n, l) => {\n    let out = []\n    for (let i = l.length - n; i < l.length; i++) {\n        out.push(l[i])\n    }\n    return out\n}\n\n/*\n  sortArray sorts the array using the insertion sort algorithm. \n   it returns a sorted array.\n\n  >>> sortArray([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortArray([1, 2, 5, 4, 3])\n  [1, 2, 3, 4, 5]\n  >>> sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortArray = (l) => {\n    let sorted = []\n    for (let i = 1; i < l.length; i++) {\n        for (let j = i; j > 0 && l[j] < l[j - 1]; j--) {\n            sorted.push(l[j])\n            sorted.unshift(l[j - 1])\n        }\n        sorted.push(l[j])\n    }\n    return sorted\n}\n\n/*\n  return the string representation of the given array, \n   with the given separator. \n\n  >>> returnString([\"1\", \"2\", \"3\"], \",\")\n  '1,2,3'\n  >>> returnString([1, 2, 3], \",\")\n  '1,2,3'\n  >>> returnString([1, 2], \",\")\n  '1,2'\n  */\nconst returnString = (l, s) => {\n    return l.join(s)\n}\n\nmodule.exports = {\n    triplesSumToZero,\n    findMinAndMax,\n    printArray,\n    returnNthNumber,\n    sortArray,\n    returnString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  let collision=0;\n  let cars = [];\n  let carsReverse = [];\n  cars.push(...Array(n).fill(0).map(()=>Math.random()));\n  carsReverse.push(...Array(n).fill(0).map(()=>Math.random()));\n  cars.forEach(car=>{\n    carsReverse.forEach(carReverse=>{\n      if(car<carReverse){\n        if(car>=0 && carReverse>=0 && car<carReverse){\n          collision+=1;\n        }\n      }\n    });\n  });\n  return collision;\n};\n\nconst collision= (n)=>{\n  let cars = [];\n  cars.push(...Array(n).fill(0).map(()=>Math.random()));\n  cars.forEach(car=>{\n    if(car>0 && car%2===0){\n      cars.push(car+1);\n    }\n  });\n  cars.sort();\n  let collision = 0;\n  cars.forEach((car,index)=>{\n    cars.forEach((carReverse,indexReverse)=>{\n      if(car<carReverse){\n        if(car>=0 && carReverse>=0 && car<carReverse){\n          collision+=1;\n        }\n      }\n    });\n  });\n  return collision;\n};\n\nmodule.exports= {\n  carRaceCollision,\n  collision\n}<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [...l];\n  let i = res.length;\n  while (i--) {\n    res[i]++;\n  }\n  return res;\n};\n\n/* Return a new list containing the elements of l1 but not of l2.\n  >>> removeList([1, 2, 3], [1, 2, 4])\n  [3]\n  >>> removeList([1, 2, 3, 4], [1, 2, 3])\n  [4]\n  >>> removeList([1, 2, 3], [1, 2, 3, 4])\n  [3, 4]\n  >>> removeList([1, 2, 3, 4], [1, 2, 5])\n  [3, 4]\n  */\nconst removeList = (l1, l2) => {\n  let res = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (!l2.includes(l1[i])) {\n      res.push(l1[i]);\n    }\n  }\n  return res;\n};\n\nexport default {\n  incrList,\n  removeList\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length;\n  const map = new Map();\n  const check = (i, j) => {\n    const sum = l[i] + l[j];\n    if (!map.has(sum)) {\n      map.set(sum, true);\n    }\n    else {\n      return false;\n    }\n  };\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      check(i, j);\n    }\n  }\n  return map.size === 2;\n};\n\n/*\n  findPairsSumToZero takes a list of numbers and finds the number of \n  distinct pairs that sum to zero. \n  It returns an object with the number of distinct pairs sum to zero \n  and the number of pairs sum to zero.\n  >>> findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  {4: 1, 7: 1}\n  >>> findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n  {4: 1, 7: 1}\n  >>> findPairsSumToZero([-1, 2, 3, 4, 5, 6, 7, 8, 9])\n  {4: 1, 7: 1}\n  >>> findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1])\n  {4: 1, 7: 1}\n  >>> findPairsSumToZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  {4: 1, 7: 1}\n  */\nconst findPairsSumToZero = (l) => {\n  const map = new Map();\n  const check = (i, j) => {\n    const sum = l[i] + l[j];\n    if (!map.has(sum)) {\n      map.set(sum, true);\n      return true;\n    }\n    else {\n      return false;\n    }\n  };\n  const count = {};\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (check(i, j)) {\n        if (!count.has(i + j)) {\n          count.set(i + j, 1);\n        }\n        else {\n          count.set(i + j, count.get(i + j) + 1);\n        }\n      }\n    }\n  }\n  return {\n    count: count,\n    sum: map.size\n  };\n};\n\n/*\n  findDistinctPairsSumToZero takes a list of numbers and finds the number \n  of distinct pairs that sum to zero. \n  It returns an object with the number of distinct pairs sum to zero \n  and the number of pairs sum to zero.\n  >>> findDistinctPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  {4: 1, 7: 1}\n  >>> findDistinctPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n  {4: 1, 7: 1}\n  >>> findDistinctPairsSumToZero([-1, 2, 3, 4, 5, 6, 7, 8, 9])\n  {4: 1, 7: 1}\n  >>> findDistinctPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1])\n  {4: 1, 7: 1}\n  >>> findDistinctPairsSumToZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  {4: 1, 7: 1}\n  */\nconst findDistinctPairsSumToZero = (l) => {\n  const map = new Map();\n  const check = (i, j) => {\n    const sum = l[i] + l[j];\n    if (!map.has(sum)) {\n      map.set(sum, true);\n      return true;\n    }\n    else {\n      return false;\n    }\n  };\n  const count = {};\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (check(i, j)) {\n        if (!count.has(i + j)) {\n          count.set(i + j, 1);\n        }\n        else {\n          count.set(i + j, count.get(i + j) + 1);\n        }\n      }\n    }\n  }\n  return {\n    count: count,\n    sum: map.size\n  };\n};\n\n/*\n  main takes a list of numbers and prints out the number of distinct pairs \n  that sum to zero. \n  It returns nothing.\n  >>> main([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4\n  >>> main([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n  4\n  >>> main([-1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4\n  >>> main([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1])\n  4\n  >>> main([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  4\n  */"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  for (let i = 0; i < x.length; i++) {\n    result += String(x[i] % base);\n    x = Math.floor(x[i] / base);\n    if (i < x.length) {\n      result += String(x[i]);\n    }\n  }\n  return result;\n};\n\n// test\nconsole.log(changeBase(8, 3));\nconsole.log(changeBase(8, 2));\nconsole.log(changeBase(7, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst main = () => {\n  let x = 0;\n  let y = 0;\n  while (x < 100) {\n    let y = 0;\n    while (y < 100) {\n      let area = triangleArea(x, y);\n      console.log(area);\n      y += 1;\n    }\n    x += 1;\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 2) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nconsole.log(fib4(8));\n\n/*\n  1. fib4(0) -> 0\n  2. fib4(1) -> 0\n  3. fib4(2) -> 2\n  4. fib4(3) -> 0\n  5. fib4(4) -> 2\n  6. fib4(5) -> 4\n  7. fib4(6) -> 6\n  8. fib4(7) -> 14\n  9. fib4(8) -> 16\n  10. fib4(9) -> 18\n  11. fib4(10) -> 20\n  12. fib4(11) -> 22\n  13. fib4(12) -> 24\n  14. fib4(13) -> 26\n  15. fib4(14) -> 28\n  16. fib4(15) -> 30\n  17. fib4(16) -> 32\n  18. fib4(17) -> 34\n  19. fib4(18) -> 36\n  20. fib4(19) -> 38\n  21. fib4(20) -> 40\n  22. fib4(21) -> 42\n  23. fib4(22) -> 44\n  24. fib4(23) -> 46\n  25. fib4(24) -> 48\n  26. fib4(25) -> 50\n  27. fib4(26) -> 52\n  28. fib4(27) -> 54\n  29. fib4(28) -> 56\n  30. fib4(29) -> 58\n  31. fib4(30) -> 60\n  32. fib4(31) -> 62\n  33. fib4(32) -> 64\n  34. fib4(33) -> 66\n  35. fib4(34) -> 68\n  36. fib4(35) -> 70\n  37. fib4(36) -> 72\n  38. fib4(37) -> 74\n  39. fib4(38) -> 76\n  40. fib4(39) -> 78\n  41. fib4(40) -> 80\n  42. fib4(41) -> 82\n  43. fib4(42) -> 84\n  44. fib4(43) -> 86\n  45. fib4(44) -> 88\n  46. fib4(45) -> 90\n  47. fib4(46) -> 92\n  48. fib4(47) -> 94\n  49. fib4(48) -> 96\n  50. fib4(49) -> 98\n  51. fib4(50) -> 100\n  52. fib4(51) -> 102\n  53. fib4(52) -> 104\n  54. fib4(53) -> 106\n  55. fib4(54) -> 108\n  56. fib4(55) -> 110\n  57. fib4(56) -> 112\n  58. fib4(57) -> 114\n  59. fib4(58) -> 116\n  60. fib4(59) -> 118\n  61. fib4(60) -> 120\n  62. fib4(61) -> 122\n  63. fib4(62) -> 124\n  64. fib4(63) -> 126\n  65. fib4(64) -> 128\n  66. fib4(65) -> 130\n  67. fib4(66) -> 132\n  68. fib4(67) -> 134\n  69. fib4(68) -> 136\n  70. fib4(69) -> 138\n  71. fib4(70) -> 140\n  72. fib4(71) -> 142\n  73. fib4(72) -> 144\n  74. fib4(73) -> 146\n  75. fib4(74) -> 148\n  76. fib4(75) -> 150\n  77. fib4(76) -> 152\n  78. fib4(77) -> 154\n  79. fib4(78) -> 156\n  80. fib4(79) -> 158\n  81. fib4(80) -> 160\n  82. fib4(81) -> 162\n  83. fib4(82) -> 164\n  84. fib4(83) -> 166\n  85. fib4(84) -> 168\n  86. fib4(85) -> 170\n  87. fib4(86) -> 172\n  88. fib4(87) -> 174\n  89. fib4(88) -> 176\n  90. fib4(89) -> 178\n  91. fib4(90) -> 180\n  92. fib4(91) -> 182\n  93. fib4(92) -> 184\n  94. fib4(93) -> 186\n  95. fib4(94) -> 188\n  96. fib4(95) -> 190\n  97. fib4(96) -> 192\n  98. fib4(97) -> 194\n  99. fib4(98) -> 196\n  100. fib4(99) -> 198\n  101. fib4(100) -> 200\n  102. fib4(101) -> 202\n  103. fib4(102) -> 204\n  104. fib4(103) -> 206\n  105. fib4(104) -> 208\n  106. fib4(105) -> 210\n  107. fib4(106) -> 212\n  108. fib4(107) -> 214\n  109. fib4(108) -> 216\n  110. fib4(109) -> 218\n  111. fib4(110) -> 220\n  112. fib4(111) -> 222\n  113. fib4(112) -> 224\n  114. fib4(113) -> 226\n  115. fib4(114) -> 228\n  116. fib4(115) -> 230\n  117. fib4(116) -> 232\n  118. fib4("}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return undefined;\n  }\n\n  // Sort the list to find the median.\n  let sorted = l.sort();\n\n  let mid = Math.floor(sorted.length / 2);\n  let lower = sorted[mid - 1];\n  let upper = sorted[mid];\n  let midValue = (lower + upper) / 2.0;\n\n  // If the length of the list is odd, return the middle element.\n  if (sorted.length % 2 === 1) {\n    return midValue;\n  }\n\n  // If the length of the list is even,\n  // return the average of the two middle elements.\n  return (lower + upper) / 2.0;\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let s = text.split(\"\").reverse().join(\"\");\n    return s === text;\n}\n\nconsole.log(isPalindrome('aba'));\nconsole.log(isPalindrome('abcd'));\nconsole.log(isPalindrome('a'));\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return (n % p + p) % p;\n};\n\nconst solve = (n, p) => {\n    const r = modp(n, p);\n    return Math.max(r, 0);\n};\n\nconst main = (n, p) => {\n    console.log(solve(n, p));\n};\n\nmain(5, 13);\nmain(10, 19);\nmain(20, 13);\nmain(100, 11);\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n  let a = []; \n  for(let i=0;i<s.length;i++){\n    a.push(String.fromCharCode(\n      (26 -(s.charCodeAt(i) -\" a\".charCodeAt(0))/26%26) +\" a\".charCodeAt(0)\n    ));\n  }\n  return a.join(\"\"); \n}\n\n/*\n  Takes an encoded string, and returns the corresponding decoded string.\n  */\n const decode = (s)=>{\n   let a = []; \n   for(let i=0;i<s.length;i++){\n    a.push(String.fromCharCode(\n      26 - (s.charCodeAt(i) - \"a\".charCodeAt(0))/26%26 + \"a\".charCodeAt(0)\n    ));\n  }\n  return a.join(\"\"); \n}\n\n/* \n   takes an encoded string, and returns the corresponding decoded string. \n  */ \n const encode = (s)=>{\n   let a = []; \n   for(let i=0;i<s.length;i++){\n    a.push(String.fromCharCode(\n      26 - ((s.charCodeAt(i) - \"a\".charCodeAt(0))% 26) + \"a\".charCodeAt(0)\n    ));\n  }\n  return a.join(\"\"); \n}\n\n\n/* \n   takes an encoded string, and returns the corresponding decoded string. \n  */ \n const decode_vigenere = (s)=>{\n   let a = []; \n   for(let i=0;i<s.length;i++){\n    a.push(String.fromCharCode(\n      26 - (s.charCodeAt(i) - \"a\".charCodeAt(0))/26%26 + \"a\".charCodeAt(0)\n    ));\n  }\n  return a.join(\"\"); \n}\n\n\n/* \n   takes an encoded string, and returns the corresponding decoded string. \n  */ \n const encode_vigenere = (s)=>{\n   let a = []; \n   for(let i=0;i<s.length;i++){\n    a.push(String.fromCharCode(\n      26 - ((s.charCodeAt(i) - \"a\".charCodeAt(0))% 26) + \"a\".charCodeAt(0)\n    ));\n  }\n  return a.join(\"\"); \n}\n\n/* \n   takes an encoded string, and returns the corresponding decoded string. \n  */ \n const encode_shift_vigenere = (s)=>{\n   let a = []; \n   for(let i=0;i<s.length;i++){\n    a.push(String.fromCharCode(\n      26 - ((s.charCodeAt(i) - \"a\".charCodeAt(0))% 26) + \"a\".charCodeAt(0)\n    ));\n  }\n  return a.join(\"\"); \n}\n\n\n\nexport { encode, decode, encode_vigenere, decode_vigenere, encode_shift, decode_shift, encode_shift_vigenere }<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let i = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  while (i < text.length) {\n    if (vowels.indexOf(text[i])!== -1) {\n      k++;\n      i++;\n    } else {\n      text = text.substring(0, i) + text.substring(i + 1, text.length);\n    }\n  }\n  return text.substring(0, k);\n};\n\n/*\n  convertToTitleCase was a function that takes string and returns string.\n  >>> convertToTitleCase('')\n  ''\n  >>> convertToTitleCase('abcdef')\n  'AbcDef'\n  >>> convertToTitleCase('aBcDeF')\n  'ABCDEF'\n  >>> convertToTitleCase('zBCD')\n  'ZBCD'\n  >>> convertToTitleCase('aaBAA')\n  'AABAA'\n  >>> convertToTitleCase('zbcd')\n  'ZBCD'\n  */\nconst convertToTitleCase = (text) => {\n  let i = 0;\n  while (i < text.length) {\n    text[i] = text[i].toUpperCase();\n    i++;\n  }\n  return text;\n};\n\nconst convertToLowerCase = (text) => {\n  let i = 0;\n  while (i < text.length) {\n    text[i] = text[i].toLowerCase();\n    i++;\n  }\n  return text;\n};\n\nconst convertToUpperCase = (text) => {\n  let i = 0;\n  while (i < text.length) {\n    text[i] = text[i].toUpperCase();\n    i++;\n  }\n  return text;\n};\n\n/*\n  getMaxLength was a function that takes string and returns length.\n  >>> getMaxLength('')\n  0\n  >>> getMaxLength('abcdef')\n  6\n  >>> getMaxLength('aaaaa')\n  0\n  >>> getMaxLength('aaBAA')\n  5\n  >>> getMaxLength('zbcd')\n  4\n  */\nconst getMaxLength = (text) => {\n  let i = 0;\n  let length = 0;\n  while (i < text.length) {\n    length++;\n    i++;\n  }\n  return length;\n};\n\n/*\n  getMinLength was a function that takes string and returns length.\n  >>> getMinLength('')\n  0\n  >>> getMinLength('abcdef')\n  1\n  >>> getMinLength('aaaaa')\n  4\n  >>> getMinLength('aaBAA')\n  1\n  >>> getMinLength('zbcd')\n  1\n  */\nconst getMinLength = (text) => {\n  let i = 0;\n  let length = 0;\n  while (i < text.length) {\n    length++;\n    i++;\n  }\n  return length;\n};\n\nmodule.exports = {\n  removeVowels,\n  convertToTitleCase,\n  convertToLowerCase,\n  convertToUpperCase,\n  getMaxLength,\n  getMinLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    return l.every(n => n < t);\n}\n\n/*Return the length of the longest element in the list.\n  >>> longest([1, 2, 4, 10])\n  4\n  >>> longest([1, 2, 4, 10, 1, 2])\n  3\n  >>> longest([1, 2, 4, 10, 1, 2, 3, 4])\n  4\n  */\nconst longest = (l) => {\n    return Math.max(...l.map(e => e.length));\n}\n\n/*Return the length of the shortest element in the list.\n  >>> shortest([1, 2, 4, 10])\n  1\n  >>> shortest([1, 2, 4, 10, 1, 2])\n  1\n  >>> shortest([1, 2, 4, 10, 1, 2, 3, 4])\n  1\n  */\nconst shortest = (l) => {\n    return Math.min(...l.map(e => e.length));\n}\n\n/*Return the median element in the list.\n  >>> median([1, 2, 4, 10])\n  3\n  >>> median([1, 2, 4, 10, 1, 2])\n  3\n  >>> median([1, 2, 4, 10, 1, 2, 3, 4])\n  3\n  >>> median([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  4\n  */\nconst median = (l) => {\n    return Math.floor(l.length / 2);\n}\n\n/*Return the number of equal elements in the list.\n  >>> equals([1, 2, 4, 10])\n  2\n  >>> equals([1, 2, 4, 10, 1, 2])\n  2\n  >>> equals([1, 2, 4, 10, 1, 2, 3, 4])\n  2\n  >>> equals([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  1\n  */\nconst equals = (l) => {\n    return l.filter(e => e === l[l.length - 1]).length;\n}\n\n/*Return the number of elements in the list that are not equal to the element at the end.\n  >>> notEquals([1, 2, 4, 10])\n  1\n  >>> notEquals([1, 2, 4, 10, 1, 2])\n  1\n  >>> notEquals([1, 2, 4, 10, 1, 2, 3, 4])\n  1\n  >>> notEquals([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  2\n  */\nconst notEquals = (l) => {\n    return l.filter(e => e!== l[l.length - 1]).length;\n}\n\n/*Return the sum of all the elements in the list.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 2, 4, 10, 1, 2])\n  15\n  >>> sum([1, 2, 4, 10, 1, 2, 3, 4])\n  15\n  >>> sum([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  20\n  */\nconst sum = (l) => {\n    return l.reduce((prev, curr) => prev + curr);\n}\n\n/*Return the difference of the first and last elements in the list.\n  >>> difference([1, 2, 4, 10])\n  5\n  >>> difference([1, 2, 4, 10, 1, 2])\n  5\n  >>> difference([1, 2, 4, 10, 1, 2, 3, 4])\n  5\n  >>> difference([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  10\n  */\nconst difference = (l) => {\n    return l.slice(1, l.length - 1).reduce((prev, curr) => prev + curr);\n}\n\n/*Return the product of all the elements in the list.\n  >>> product([1, 2, 4, 10])\n  24\n  >>> product([1, 2, 4, 10, 1, 2])\n  24\n  >>> product([1, 2, 4, 10, 1, 2, 3, 4])\n  24\n  >>> product([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  120\n  */\nconst product = (l) => {\n    return l.reduce((prev, curr) => prev * curr);\n}\n\n/*Return the first element in the list that is equal to the element at the end.\n  >>> find(10)\n  10\n  >>> find([1, 2, 4, 10, 1, 2])\n  10\n  >>> find([1, 2, 4, 10, 1, 2, 3, 4])\n  10\n  >>> find([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  10\n  */\nconst find = (l) => {\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] === l[l.length - 1]) {\n            return l[i];\n        }\n    }\n}\n\n/*Return the first element in the list that is not equal to the element at the end.\n  >>> find(10)\n  9\n  >>> find([1, 2, 4, 10, 1, 2])\n  9\n  >>> find([1, 2, 4, 10, 1, 2, 3, 4])\n  9\n  >>> find([1, 2, 4, 10, 1, 2, 3, 4, 5])\n  9\n  */\nconst find = (l) => {\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i]!== l[l.length - 1]) {\n            return l[i];\n        }\n    }\n}\n\n/*Return the last element in the list that is equal to the element at the beginning.\n  >>> find(10)\n  10\n  >>> find([1, 2, 4, 10, 1, 2])\n  10\n  >>> find([1, 2, 4, 10, 1, 2, 3, 4])\n  10\n  >>> find([1, 2,"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/**\n  * Subtract two numbers x and y\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/**\n  * Multiply two numbers x and y\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/**\n  * Divide two numbers x and y\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\nexport { add, subtract, multiply, divide }\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0, len = s0.length, len1 = s1.length;\n    while (i < len && i < len1) {\n        if (s0.charAt(i)!== s1.charAt(i)) {\n            return false;\n        }\n        i++;\n    }\n    return i === len && i === len1;\n};\n\nmodule.exports = {\n    sameChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  let a = 1, b = 1;\n  while (n--) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconst fib3 = (n) => {\n  let a = 1, b = 1;\n  while (n--) {\n    a = b;\n    b = a + b;\n    a = b - a;\n  }\n  return b;\n};\n\nmodule.exports = {\n  fib,\n  fib2,\n  fib3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let numOpen = brackets.length\n    let numClosed = 0\n    let index = 0\n    while (index < brackets.length) {\n        if (brackets[index] === \">\") {\n            numOpen--\n            if (numOpen < 0) {\n                return false\n            }\n        }\n        if (brackets[index] === \"<\") {\n            numClosed++\n            if (numClosed > numOpen) {\n                return false\n            }\n        }\n        index++\n    }\n    return true\n}\n\n/*\n   Given a string, check if it is a valid parentheses string.\n   A valid parentheses string is a string that is constructed by\n   adding parentheses to the string.\n   It is valid if parentheses are added in the correct order.\n   It is also valid if parentheses are added to the string.\n\n   You may assume that the given string is well formed.\n\n   Example:\n   For the string \"()()()\", return true.\n   For the string \"(a)()\", return false.\n   For the string \"()a()\", return false.\n   For the string \"()\", return false.\n\n   Return true if the parentheses string is valid, false otherwise.\n\n  >>> isValidParentheses(\"()\")\n  true\n  >>> isValidParentheses(\"(a)()\")\n  false\n  >>> isValidParentheses(\"()a()\")\n  false\n  >>> isValidParentheses(\"()\")\n  false\n  >>> isValidParentheses(\"(a)\")\n  false\n  */\nconst isValidParentheses = (str) => {\n    if (str.length === 0) {\n        return true\n    }\n    if (str.length === 1) {\n        return (str === \"(\" || str === \")\")\n    }\n    const open = 0\n    const closed = 0\n    const stack = []\n    const stackIndex = -1\n    const index = -1\n    while (index < str.length) {\n        if (str[index] === \")\") {\n            stackIndex = stack.length - 1\n            if (stackIndex < 0) {\n                return false\n            }\n            stack.pop()\n            if (stack[stackIndex] === \"(\" && stack.length > 0) {\n                stack.pop()\n            }\n            closed++\n        }\n        if (str[index] === \"(\") {\n            stack.push(\"(\")\n            open++\n        }\n        index++\n    }\n    if (open!== closed) {\n        return false\n    }\n    return true\n}\n\n/*\n   Given a string s, replace all occurrences of a substring in s with another string.\n   Return a new string with all the occurrences of substring replaced.\n   If the substring does not exist, then return the string s.\n\n   Example:\n   Given s = \"hello\", find and replace all occurrences of \"ello\" with \"al\" in s.\n   Return \"halle\".\n\n  >>> replaceAll(\"hello\", \"ello\", \"al\")\n  'halle'\n  >>> replaceAll(\"hello\", \"llo\", \"al\")\n  'halle'\n  >>> replaceAll(\"hello\", \"l\", \"al\")\n  'halle'\n  >>> replaceAll(\"hello\", \"lo\", \"al\")\n  'halle'\n  >>> replaceAll(\"hello\", \"lo\", \"al\")\n  'halle'\n  >>> replaceAll(\"hello\", \"\", \"al\")\n  'halle'\n  >>> replaceAll(\"hello\", \"\", \"\")\n  'hello'\n  >>> replaceAll(\"hello\", \"ello\", \"\")\n  'halle'\n  >>> replaceAll(\"hello\", \"ello\", \"\")\n  'halle'\n  */\nconst replaceAll = (str, sub, newSub) => {\n    if (str.indexOf(sub) < 0) {\n        return str\n    }\n    return str.replace(sub, newSub)\n}\n\n/*\n   Given a string s, return a string with a \"^\" at the beginning of each line.\n\n   Example:\n   Given s = \"foo\\nbar\", return \"^foo\\n^bar\".\n\n  >>> prefixEachLine(\"foo\\nbar\")\n  '^foo\\n^bar'\n  >>> prefixEachLine(\"\")\n  ''\n  >>> prefixEachLine(\"foo\")\n  '^foo'\n  >>> prefixEachLine(\"bar\")\n  '^bar'\n  */\nconst prefixEachLine = (str) => {\n    if (str.length === 0) {\n        return \"\"\n    }\n    const lines = str.split(\"\\n\")\n    const prefix = \"\"\n    return prefix + lines.map(line => prefix + line).join(\"\\n\")\n}\n\n/*\n   Given a string s, return a string with a \"^\" at the beginning of each line.\n\n   Example:\n   Given s = \"foo\\nbar\", return \"^foo\\n^bar\".\n\n  >>> prefixEachLine(\"foo\\nbar\")\n  '^foo\\n^bar'\n  >>> prefixEachLine(\"\")\n  ''\n  >>> prefixEachLine(\"foo\")\n  '^foo'\n  >>> prefixEachLine(\"bar\")\n  '^bar'\n  */\nconst suffixEachLine = (str) => {\n    if (str.length === 0) {\n        return \"\"\n    }\n    const lines = str.split(\"\\n\")\n    const suffix = \"\"\n    return lines.map(line => suffix + line).join(\"\\n\")\n}\n\n/*\n   Given a string s, return a string with a \"^\" at the beginning of each line.\n\n   Example:\n   Given s = \"foo\\nbar\", return \"^foo\\n^bar\".\n\n  >>> prefixEachLine(\"foo\\nbar\")\n  '^foo\\n^bar'\n  >>> prefixEachLine(\"\")\n  ''\n  >>> prefixEachLine(\"foo\")\n  '^foo'\n  >>> prefixEachLine(\"bar\")\n  '^bar'\n  */\nconst prefixEachLine = (str) => {\n    if (str.length === 0) {\n        return \"\"\n    }\n    const lines = str.split(\"\\n\")\n    const prefix = \"\""}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let start = Number.MAX_VALUE\n  let end = Number.MIN_VALUE\n  l.forEach((item, index) => {\n    if (item < start) {\n      start = item\n    }\n    if (item > end) {\n      end = item\n    }\n  })\n  return start < end\n}\n\n/*\n  * Return the greatest common divisor of two numbers.\n  * @param {Number} a\n  * @param {Number} b\n  * @return {Number}\n  */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a\n  }\n  return gcd(b, a % b)\n}\n\n/*\n  * Return the least common multiple of two numbers.\n  * @param {Number} a\n  * @param {Number} b\n  * @return {Number}\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\n/*\n  * Return the factorial of a number.\n  * @param {Number} n\n  * @return {Number}\n  */\nconst factorial = (n) => {\n  return n === 1 || n === 0? 1 : n * factorial(n - 1)\n}\n\n/*\n  * Return the sum of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst sum = (list1, list2) => {\n  return list1.concat(list2)\n}\n\n/*\n  * Return the sum of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst sumArray = (array1, array2) => {\n  return array1.concat(array2)\n}\n\n/*\n  * Return the difference of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst difference = (array1, array2) => {\n  return array1.filter((element) => {\n    return!(array2.includes(element))\n  })\n}\n\n/*\n  * Return the difference of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst differenceList = (list1, list2) => {\n  return list1.filter((element) => {\n    return!(list2.includes(element))\n  })\n}\n\n/*\n  * Return the union of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst union = (list1, list2) => {\n  return list1.concat(list2)\n}\n\n/*\n  * Return the union of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst unionArray = (array1, array2) => {\n  return array1.concat(array2)\n}\n\n/*\n  * Return the intersection of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst intersection = (list1, list2) => {\n  return list1.filter((element) => {\n    return list2.includes(element)\n  })\n}\n\n/*\n  * Return the intersection of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst intersectionArray = (array1, array2) => {\n  return array1.filter((element) => {\n    return array2.includes(element)\n  })\n}\n\n/*\n  * Return the difference of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst differenceList = (list1, list2) => {\n  return list1.filter((element) => {\n    return!(list2.includes(element))\n  })\n}\n\n/*\n  * Return the difference of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst differenceArray = (array1, array2) => {\n  return array1.filter((element) => {\n    return!(array2.includes(element))\n  })\n}\n\n/*\n  * Return the product of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst product = (list1, list2) => {\n  return list1.reduce((total, item) => {\n    return total * list2.includes(item)? total : 0\n  }, 1)\n}\n\n/*\n  * Return the product of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst productArray = (array1, array2) => {\n  return array1.reduce((total, item) => {\n    return total * array2.includes(item)? total : 0\n  }, 1)\n}\n\n/*\n  * Return the difference of two lists.\n  * @param {Array} list1\n  * @param {Array} list2\n  * @return {Array}\n  */\nconst differenceProduct = (list1, list2) => {\n  return list1.reduce((total, item) => {\n    return total - list2.includes(item)? total : 0\n  }, 0)\n}\n\n/*\n  * Return the difference of two arrays.\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  */\nconst differenceProductArray = (array1, array2) =>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const c = [];\n  const result = [];\n  const i = 0;\n  const j = 0;\n\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      c.push(l1[i]);\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] > l2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let isPrime = false;\n  let i = 2;\n  while (!isPrime) {\n    if (n % i === 0) {\n      isPrime = true;\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\n/*Return the largest prime factor of n. Assume n> 1.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactorRecursive = (n) => {\n  if (n < 2) {\n    return 1;\n  } else {\n    return largestPrimeFactorRecursive(n / largestPrimeFactor(n));\n  }\n};\n\nexport {\n  largestPrimeFactor,\n  largestPrimeFactorRecursive\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Exercise #1\n  Use a map to create a function that takes an int\n  value and returns the first letter of the\n  value in uppercase.\n  >>> uppercase = mapToUpper(1)\n  >>> uppercase(0)\n  'A'\n  >>> uppercase(10)\n  'J'\n  >>> uppercase(3)\n  'M'\n  >>> uppercase(4)\n  'N'\n  >>> uppercase(20)\n  'P'\n  >>> uppercase(21)\n  'Q'\n  >>> uppercase(99)\n  'Z'\n  */\nconst mapToUpper = (n) => {\n  return (n) => {\n    return n.toUpperCase()\n  }\n}\n\n/*\n  Exercise #2\n  Write a function that takes an int value and\n  returns the first letter of the value in\n  lowercase.\n  >>> lowercase = mapToLower(1)\n  >>> lowercase(0)\n  'a'\n  >>> lowercase(10)\n  'j'\n  >>> lowercase(3)\n 'm'\n  >>> lowercase(4)\n  'n'\n  >>> lowercase(20)\n  'p'\n  >>> lowercase(21)\n  'q'\n  >>> lowercase(99)\n  'z'\n  */\nconst mapToLower = (n) => {\n  return (n) => {\n    return n.toLowerCase()\n  }\n}\n\n/*\n  Exercise #3\n  Use the mapToUpper and mapToLower\n  functions to create a function that takes an\n  int value and returns the first letter of\n  the value in lowercase and uppercase.\n  >>> upperLower = mapToUpper(1)\n  >>> upperLower(0)\n  'A'\n  >>> upperLower(10)\n  'J'\n  >>> upperLower(3)\n  'M'\n  >>> upperLower(4)\n  'N'\n  >>> upperLower(20)\n  'P'\n  >>> upperLower(21)\n  'Q'\n  >>> upperLower(99)\n  'Z'\n  >>> upperLower(10)\n  'J'\n  >>> upperLower(99)\n  'Z'\n  */\nconst upperLower = (n) => {\n  return (n) => {\n    return mapToLower(n)() + mapToUpper(n)()\n  }\n}\n\n/*\n  Exercise #4\n  Write a function that takes an int value and\n  returns the first letter of the value in\n  lowercase and uppercase.\n  >>> lowerUpper = upperLower(1)\n  >>> lowerUpper(0)\n  'a'\n  >>> lowerUpper(10)\n  'j'\n  >>> lowerUpper(3)\n 'm'\n  >>> lowerUpper(4)\n  'n'\n  >>> lowerUpper(20)\n  'p'\n  >>> lowerUpper(21)\n  'q'\n  >>> lowerUpper(99)\n  'z'\n  >>> lowerUpper(10)\n  'j'\n  >>> lowerUpper(99)\n  'z'\n  */\nconst lowerUpper = (n) => {\n  return (n) => {\n    return lowercase(n) + uppercase(n)\n  }\n}\n\n/*\n  Exercise #5\n  Write a function that takes an int value and\n  returns the first letter of the value in\n  lowercase and uppercase.\n  >>> upperLower = lowerUpper(1)\n  >>> upperLower(0)\n  'a'\n  >>> upperLower(10)\n  'j'\n  >>> upperLower(3)\n 'm'\n  >>> upperLower(4)\n  'n'\n  >>> upperLower(20)\n  'p'\n  >>> upperLower(21)\n  'q'\n  >>> upperLower(99)\n  'z'\n  >>> upperLower(10)\n  'j'\n  >>> upperLower(99)\n  'z'\n  */\nconst upperLower = (n) => {\n  return (n) => {\n    return uppercase(n) + lowercase(n)\n  }\n}\n\n/*\n  Exercise #6\n  Write a function that takes an int value and\n  returns the first letter of the value in\n  lowercase and uppercase.\n  >>> lowerUpper = upperLower(1)\n  >>> lowerUpper(0)\n  'A'\n  >>> lowerUpper(10)\n  'J'\n  >>> lowerUpper(3)\n  'M'\n  >>> lowerUpper(4)\n  'N'\n  >>> lowerUpper(20)\n  'P'\n  >>> lowerUpper(21)\n  'Q'\n  >>> lowerUpper(99)\n  'Z'\n  >>> lowerUpper(10)\n  'J'\n  >>> lowerUpper(99)\n  'Z'\n  */\nconst lowerUpper = (n) => {\n  return (n) => {\n    return lowercase(n) + uppercase(n)\n  }\n}\n\nmodule.exports = {\n  sumToN,\n  mapToUpper,\n  mapToLower,\n  upperLower,\n  lowerUpper\n}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let stack = [],\n        count = 0,\n        i;\n    for (i = 0; i < brackets.length; i++) {\n        stack.push(brackets[i]);\n    }\n    for (i = 0; i < brackets.length; i++) {\n        if (stack.pop() === \"(\" && count!== 0) {\n            return false;\n        }\n        count += 1;\n        if (stack.length === 0) {\n            return true;\n        }\n    }\n};\n\n//# sourceMappingURL=correctBracketing.js.map<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length < 1) return xs;\n  let ret = [xs[0]];\n  for (let i = 1; i < xs.length; i++) {\n    ret.push(xs[i] * ret[i - 1]);\n  }\n  return ret;\n}\n\n/*\n  Returns the square root of x in the same form.\n  >>> squareRoot(3)\n  [1, 1, 1, 1]\n  >>> squareRoot(2)\n  [1, 1]\n  */\nconst squareRoot = (x) => {\n  if (x === 0) return [0, 0];\n  if (x === 1) return [1, 1];\n  if (x === 2) return [1, 0];\n  if (x === 3) return [1, 1, 1];\n  let d = derivative(x);\n  let x0 = d[0];\n  let x1 = d[1];\n  let x2 = d[2];\n  let x3 = d[3];\n  let x4 = d[4];\n  let x5 = d[5];\n  let x6 = d[6];\n  let x7 = d[7];\n  let x8 = d[8];\n  let x9 = d[9];\n  let x10 = d[10];\n  let x11 = d[11];\n  let x12 = d[12];\n  let x13 = d[13];\n  let x14 = d[14];\n  let x15 = d[15];\n  let x16 = d[16];\n  let x17 = d[17];\n  let x18 = d[18];\n  let x19 = d[19];\n  let x20 = d[20];\n  let x21 = d[21];\n  let x22 = d[22];\n  let x23 = d[23];\n  let x24 = d[24];\n  let x25 = d[25];\n  let x26 = d[26];\n  let x27 = d[27];\n  let x28 = d[28];\n  let x29 = d[29];\n  let x30 = d[30];\n  let x31 = d[31];\n  let x32 = d[32];\n  let x33 = d[33];\n  let x34 = d[34];\n  let x35 = d[35];\n  let x36 = d[36];\n  let x37 = d[37];\n  let x38 = d[38];\n  let x39 = d[39];\n  let x40 = d[40];\n  let x41 = d[41];\n  let x42 = d[42];\n  let x43 = d[43];\n  let x44 = d[44];\n  let x45 = d[45];\n  let x46 = d[46];\n  let x47 = d[47];\n  let x48 = d[48];\n  let x49 = d[49];\n  let x50 = d[50];\n  let x51 = d[51];\n  let x52 = d[52];\n  let x53 = d[53];\n  let x54 = d[54];\n  let x55 = d[55];\n  let x56 = d[56];\n  let x57 = d[57];\n  let x58 = d[58];\n  let x59 = d[59];\n  let x60 = d[60];\n  let x61 = d[61];\n  let x62 = d[62];\n  let x63 = d[63];\n  let x64 = d[64];\n  let x65 = d[65];\n  let x66 = d[66];\n  let x67 = d[67];\n  let x68 = d[68];\n  let x69 = d[69];\n  let x70 = d[70];\n  let x71 = d[71];\n  let x72 = d[72];\n  let x73 = d[73];\n  let x74 = d[74];\n  let x75 = d[75];\n  let x76 = d[76];\n  let x77 = d[77];\n  let x78 = d[78];\n  let x79 = d[79];\n  let x80 = d[80];\n  let x81 = d[81];\n  let x82 = d[82];\n  let x83 = d[83];\n  let x84 = d[84];\n  let x85 = d[85];\n  let x86 = d[86];\n  let x87 = d[87];\n  let x88 = d[88];\n  let x89 = d[89];\n  let x90 = d[90];\n  let x91 = d[91];\n  let x92 = d[92];\n  let x93 = d[93];\n  let x94 = d[94];\n  let x95 = d[95];\n  let x96 = d[96];\n  let x97 = d[97];\n  let x98 = d[98];\n  let x99 = d[99];\n  let x100 = d[100];\n  let x101 = d[101];\n  let x102 = d[102];\n  let x103 = d[103];\n  let x104 = d[104];\n  let x105 = d[105];\n  let x106 = d[106];\n  let x107 = d[107];\n  let x108 = d[108];\n  let x109 = d[109];\n  let x110 = d[110];\n  let x111 = d[111];\n  let x112 = d[112];\n  let x113 = d[113];\n  let x114 = d[114];\n  let x115 = d[115];\n  let x116 = d[116];\n  let x117 = d[117];\n  let x118 = d[118];\n  let x119 = d[119];\n  let x120 = d[120];\n  let x121 = d[121];\n  let x122 = d"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib2 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib3 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib4 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib5 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib6 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib7 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib8 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib9 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib10 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib11 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib12 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib13 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib14 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib15 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib16 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib17 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    } else {\n      return fib(n - 1) + fib(n - 2) + fib(n - 3)\n    }\n  }\n  return fib(n)\n}\n\nconst fibfib18 = (n) => {\n  const fib = (n) => {\n    if (n <= 1) {\n      return n\n    "}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const length = s.length\n  const isVowel = (c) => vowels.includes(c)\n  let count = 0\n  for (let i = 0; i < length; i++) {\n    if (isVowel(s[i])) {\n      count++\n    }\n  }\n  if (isVowel(s[length - 1])) {\n    count++\n  }\n  return count\n}\n\n/*Write a function that takes a string as input and returns the number of\n  letters in the string. \n  Here, we are not considering space in the count. \n\n   Example:\n  >>> letterCount(\"ABCDEF\")\n  6\n  >>> letterCount(\"\")\n  0\n  */\nconst letterCount = (s) => {\n  const length = s.length\n  const count = 0\n  for (let i = 0; i < length; i++) {\n    count += 1\n  }\n  return count\n}\n\nconst result = (length, count) => {\n  const n = length - count\n  const k = count\n  const d = Math.pow(10, n)\n  const l = Math.pow(10, k)\n  return d * l\n}\n\nconst isPrime = (n) => {\n  const divisor = 3\n  let count = 2\n  while (count <= n) {\n    if (n % count === 0) {\n      return false\n    }\n    count += 2\n  }\n  return true\n}\n\nconst resultPrime = (length, count) => {\n  const n = length - count\n  const k = count\n  const d = Math.pow(10, n)\n  const l = Math.pow(10, k)\n  return d * l\n}\n\nconst getNthPrime = (n) => {\n  const prime = 2\n  while (prime <= n) {\n    if (isPrime(prime)) {\n      return prime\n    }\n    prime += 2\n  }\n}\n\nconst getNthPrimePrime = (n) => {\n  const prime = 2\n  while (prime <= n) {\n    if (isPrime(prime) && isPrime(prime + 1)) {\n      return prime\n    }\n    prime += 2\n  }\n}\n\n/*Write a function that takes an integer as input and returns the nth prime. \n\n  Example:\n  >>> getNthPrime(3)\n  2\n  >>> getNthPrime(6)\n  5\n  >>> getNthPrime(25)\n  23\n  */\nconst getNthPrime = (n) => {\n  const prime = getNthPrimePrime(n)\n  const divisor = getNthPrimePrime(n)\n  const nthPrime = prime + divisor\n  return nthPrime\n}\n\nconst getNthPrimePrime = (n) => {\n  const prime = 2\n  while (prime <= n) {\n    if (isPrime(prime)) {\n      return prime\n    }\n    prime += 2\n  }\n}\n\nconst isPrime = (n) => {\n  let count = 0\n  let number = 2\n  while (number <= n) {\n    if (n % number === 0) {\n      count++\n    }\n    number += 1\n  }\n  return count === 1\n}\n\nconst findPrime = (n) => {\n  let count = 2\n  let number = 2\n  while (number <= n) {\n    if (isPrime(number)) {\n      return number\n    }\n    number += 2\n  }\n  return count\n}\n\nconst findPrimePrime = (n) => {\n  let count = 2\n  let number = 2\n  while (number <= n) {\n    if (isPrime(number) && isPrime(number + 1)) {\n      return number\n    }\n    number += 2\n  }\n  return count\n}\n\nconst findPrimePrimePrime = (n) => {\n  let count = 2\n  let number = 2\n  while (number <= n) {\n    if (isPrime(number) && isPrime(number + 1)) {\n      return number\n    }\n    number += 2\n  }\n  return count\n}\n\nconst findPrimePrimePrimePrime = (n) => {\n  let count = 2\n  let number = 2\n  while (number <= n) {\n    if (isPrime(number) && isPrime(number + 1) && isPrime(number + 2)) {\n      return number\n    }\n    number += 2\n  }\n  return count\n}\n\nconst findPrimePrimePrimePrimePrime = (n) => {\n  let count = 2\n  let number = 2\n  while (number <= n) {\n    if (isPrime(number) && isPrime(number + 1) && isPrime(number + 2) && isPrime(number + 3)) {\n      return number\n    }\n    number += 2\n  }\n  return count\n}\n\nconst primeCount = (n) => {\n  let count = 1\n  while (count <= n) {\n    count += 1\n  }\n  return count\n}\n\nconst findPrimeCount = (n) => {\n  let count = 1\n  while (count <= n) {\n    if (isPrime(count)) {\n      return count\n    }\n    count += 1\n  }\n  return count\n}\n\nconst findPrimeCountPrime = (n) => {\n  let count = 1\n  while (count <= n) {\n    if (isPrime(count) && isPrime(count + 1)) {\n      return count\n    }\n    count += 1\n  }\n  return count\n}\n\nconst findPrimeCountPrimePrime = (n) => {\n  let count = 1\n  while (count <= n) {\n    if (isPrime(count) && isPrime(count + 1) && isPrime(count + 2"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = \"\";\n  let digits = x.toString().split(\"\");\n  let len = digits.length;\n  let n = len - shift;\n  if (n < 0) {\n    for (let i = 0; i < -n; i++) {\n      result += digits[len + i];\n    }\n  } else {\n    for (let i = 0; i < n; i++) {\n      result += digits[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  s.split('').forEach(digit => {\n    if (digit >= 65 && digit <= 90) {\n      result += digit;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of vowels in the string.\n\n  Examples:\n      countVowels(\"\") => 0\n      countVowels(\"abc\") => 1\n      countVowels(\"aeiou\") => 4\n*/\nconst countVowels = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of consonants in the string.\n\n  Examples:\n      countConsonants(\"\") => 0\n      countConsonants(\"abc\") => 3\n      countConsonants(\"aeiou\") => 1\n*/\nconst countConsonants = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u') || letter.includes('a') || letter.includes('h')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of consonants and vowels in the string.\n\n  Examples:\n      countConsonantsVowels(\"\") => 0\n      countConsonantsVowels(\"abc\") => 3\n      countConsonantsVowels(\"aeiou\") => 2\n*/\nconst countConsonantsVowels = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u') || letter.includes('a') || letter.includes('h')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of consonants and vowels in the string.\n\n  Examples:\n      countConsonantsVowels(\"\") => 0\n      countConsonantsVowels(\"abc\") => 3\n      countConsonantsVowels(\"aeiou\") => 2\n*/\nconst countConsonantsVowels = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u') || letter.includes('a') || letter.includes('h')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of consonants, vowels and numbers in the string.\n\n  Examples:\n      countConsonantsVowels(\"\") => 0\n      countConsonantsVowels(\"abc\") => 4\n      countConsonantsVowels(\"aeiou\") => 3\n      countConsonantsVowels(\"a1b2c3\") => 5\n*/\nconst countConsonantsVowelsNumbers = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u') || letter.includes('a') || letter.includes('h') || letter.includes('1') || letter.includes('2') || letter.includes('3')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of consonants, vowels and numbers in the string.\n\n  Examples:\n      countConsonantsVowels(\"\") => 0\n      countConsonantsVowels(\"abc\") => 4\n      countConsonantsVowels(\"aeiou\") => 3\n      countConsonantsVowels(\"a1b2c3\") => 5\n*/\nconst countConsonantsVowelsNumbers = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u') || letter.includes('a') || letter.includes('h') || letter.includes('1') || letter.includes('2') || letter.includes('3')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n\n/*Task\n  Write a function that takes a string as input and returns the number of consonants, vowels and numbers in the string.\n\n  Examples:\n      countConsonantsVowels(\"\") => 0\n      countConsonantsVowels(\"abc\") => 4\n      countConsonantsVowels(\"aeiou\") => 3\n      countConsonantsVowels(\"a1b2c3\") => 5\n*/\nconst countConsonantsVowelsNumbers = (s) => {\n  let result = 0;\n  s.split('').forEach(letter => {\n    if (letter.includes('e') || letter.includes('i') || letter.includes('o') || letter.includes('u') || letter.includes('a') || letter.includes('h') || letter.includes('1') || letter.includes('2') || letter.includes('3')) {\n      result += 1;\n    }\n  });\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n\tif(!s ||!n){return 0;}\n\tlet total = n;\n\tfor(let i=0; i<s.length; i++){\n\t\ttotal = total + (n-1)*s[i].length;\n\t}\n\treturn total;\n}\n\nconst numberOfApples= (n, s)=>{\n\tlet total = 0;\n\tfor(let i=0; i<s.length; i++){\n\t\ttotal = total + s[i].length;\n\t}\n\treturn total - n;\n}\n\nconst numberOfOranges= (n, s)=>{\n\tlet total = 0;\n\tfor(let i=0; i<s.length; i++){\n\t\ttotal = total + n*s[i].length;\n\t}\n\treturn total;\n}\n\nconst numberOfMangoFruits = (n, s)=>{\n\tlet total = 0;\n\tfor(let i=0; i<s.length; i++){\n\t\ttotal = total + n*(s[i].length - 1);\n\t}\n\treturn total;\n}\n\nconst countApples = (fruit, n) => fruit.length - n;\n\nconst countOranges = (fruit, n) => n*fruit.length;\n\nconst countMango = (fruit, n) => n*(fruit.length - 1);\n\nconst countFruit = (fruit, n) => fruit.length*n;\n\nconst countTotal = (fruit, n) => fruit.length*fruit.length*n;\n\nconst countTotalFruit = (fruit, n) => fruit.length*fruit.length;\n\nconst countTotalMango = (fruit, n) => fruit.length*n;\n\nconst countTotalFruitOranges = (fruit, n) => fruit.length*fruit.length*n;\n\nconst countTotalMangoOranges = (fruit, n) => fruit.length*n;\n\nconst countTotalOranges = (fruit, n) => fruit.length*n;\n\nconst countTotalApples = (fruit, n) => n*fruit.length;\n\nconst countTotalFruitApples = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApples = (fruit, n) => fruit.length*n;\n\nconst countTotalFruitOrangesApples = (fruit, n) => fruit.length*n;\n\nconst countTotalMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalFruitOrangesApplesMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalApplesMangoFruits = (fruit, n) => fruit.length*fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApples = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruits = (fruit, n) => fruit.length*n;\n\nconst countTotalOrangesApplesMangoFruitsApplesMangoFruitsMangoFruitsMangoFruitsMangoFruitsMangoFruitsMango"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  arr = arr.slice(0, 1)\n\n  const even = arr.every(n => n % 2 === 0)\n\n  if (!even) {\n    return []\n  }\n\n  const min = arr.reduce((a, b) => a.value < b.value? a : b)\n\n  return [min.value, min.index]\n}\n\n//console.log(pluck([4,2,3]))\n//console.log(pluck([1,2,3]))\n//console.log(pluck([0,1,2,0,4,2]))\n//console.log(pluck([5,0,3,0,4,2]))\n//console.log(pluck([]))\n//console.log(pluck([5,0,3,0,4,2,6,7,8,9]))\n//console.log(pluck([5,0,3,0,4,2,6,7,8,9,0]))\n//console.log(pluck([5,0,3,0,4,2,6,7,8,9,0,1]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = Math.max(...lst)\n  const maxIdx = lst.indexOf(max)\n  if (maxIdx === -1) return -1\n  const maxFrequency = lst.filter(x => x > max).length\n  if (maxFrequency === 0) return -1\n  return lst[maxIdx]\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = [];\n\n  // sort each item in list\n  lst.forEach((element) => {\n    let item = {};\n    item.element = element;\n    item.index = sortedList.length;\n    sortedList.push(item);\n  });\n\n  // sort each item in sorted list\n  sortedList.sort((a, b) => {\n    let aValue = a.element;\n    let bValue = b.element;\n    \n    // compare first element\n    if (aValue < bValue) {\n      return -1;\n    } else if (aValue > bValue) {\n      return 1;\n    }\n\n    // compare second element\n    if (a.index < b.index) {\n      return -1;\n    } else if (a.index > b.index) {\n      return 1;\n    }\n\n    // equal\n    return 0;\n  });\n\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in reversed order. \n   Reversed sorting, was when you started with the maximum value, \n   then minimum of the remaining integers, then maximum and so on.\n\n  Examples:\n  reversedSortList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  reversedSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  reversedSortList([]) == []\n  */\nconst reversedSortList = (lst) => {\n  let sortedList = [];\n\n  // sort each item in list\n  lst.forEach((element) => {\n    let item = {};\n    item.element = element;\n    item.index = sortedList.length;\n    sortedList.push(item);\n  });\n\n  // sort each item in reversed sorted list\n  sortedList.sort((a, b) => {\n    let aValue = a.element;\n    let bValue = b.element;\n    \n    // compare first element\n    if (aValue < bValue) {\n      return 1;\n    } else if (aValue > bValue) {\n      return -1;\n    }\n\n    // compare second element\n    if (a.index < b.index) {\n      return 1;\n    } else if (a.index > b.index) {\n      return -1;\n    }\n\n    // equal\n    return 0;\n  });\n\n  return sortedList;\n};\n\nmodule.exports = {\n  strangeSortList,\n  reversedSortList\n};<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (((a * b) + (b * c) + (c * a)) / 2).toFixed(2);\n  if (area === 1) {\n    return -1;\n  } else {\n    return area;\n  }\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum === w) return true;\n  if (sum < w) return false;\n  return q.every(cur => cur < w? true : false);\n};\n\nexport default willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let count = 0;\n  let min = Infinity;\n  let mid = 0;\n  let current = 0;\n  let temp = 0;\n  \n  for (let i = 0; i < arr.length; i++) {\n    current = arr[i];\n    if (arr[i] < arr[(i + 1) % arr.length]) {\n      mid = (i + 1) % arr.length;\n      temp = arr[i];\n      arr[i] = arr[mid];\n      arr[mid] = temp;\n      count++;\n    }\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    current = arr[i];\n    if (arr[i]!= current) {\n      min = Math.min(min, count);\n    }\n  }\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3]));<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total1 = lst1.reduce((a, b) => {\n    return a + b.length;\n  }, 0);\n  const total2 = lst2.reduce((a, b) => {\n    return a + b.length;\n  }, 0);\n  return lst1.length === lst2.length? lst1 : lst1.length < lst2.length? lst1 : lst2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let result = true;\n  const i = 2;\n  const n = 3;\n  while (i <= a) {\n    let test = false;\n    while (!test) {\n      if (a % i === 0) {\n        test = true;\n      }\n      i++;\n    }\n    if (i === n) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconsole.log(isMultiplyPrime(100));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const log = Math.log(x);\n  const n = parseInt(n);\n  return (Math.log(n) === log) && (n === Math.pow(x, n));\n};\n\nconst isPrime = (x) => {\n  return x === 1 ||!(x % 2);\n};\n\nconst isSimple = (x, n) => {\n  return isPrime(x) && isPrime(n) && (x % n === 0);\n};\n\n/*\n  Write a function that takes a positive integer and returns the number of simple powers it has.\n  A simple power of an integer is an integer that is a power of its base and that does not contain a prime factor.\n  For example, the number 2 has one simple power, 2.\n  The number 5 has two simple powers: 5 and 5^2.\n  The number 6 has two simple powers: 6 and 6^2.\n  The number 7 has two simple powers: 7 and 7^2.\n  The number 9 has two simple powers: 9 and 9^2.\n  The number 12 has one simple power: 12.\n  The number 15 has one simple power: 15.\n  The number 25 has two simple powers: 25 and 25^2.\n  The number 30 has two simple powers: 30 and 30^2.\n  The number 35 has two simple powers: 35 and 35^2.\n  The number 45 has one simple power: 45.\n  The number 49 has two simple powers: 49 and 49^2.\n  The number 60 has two simple powers: 60 and 60^2.\n  The number 65 has two simple powers: 65 and 65^2.\n  The number 81 has three simple powers: 81, 81^2 and 81^3.\n  The number 87 has two simple powers: 87 and 87^2.\n  The number 91 has two simple powers: 91 and 91^2.\n  The number 93 has two simple powers: 93 and 93^2.\n  The number 99 has two simple powers: 99 and 99^2.\n  The number 100 has one simple power: 100.\n  The number 101 has one simple power: 101.\n  The number 125 has three simple powers: 125, 125^2 and 125^3.\n  The number 135 has two simple powers: 135 and 135^2.\n  The number 147 has two simple powers: 147 and 147^2.\n  The number 155 has two simple powers: 155 and 155^2.\n  The number 163 has two simple powers: 163 and 163^2.\n  The number 169 has one simple power: 169.\n  The number 187 has one simple power: 187.\n  The number 189 has one simple power: 189.\n  The number 223 has two simple powers: 223, 223^2 and 223^3.\n  The number 240 has one simple power: 240.\n  The number 243 has two simple powers: 243 and 243^2.\n  The number 247 has one simple power: 247.\n  The number 251 has one simple power: 251.\n  The number 257 has one simple power: 257.\n  The number 259 has one simple power: 259.\n  The number 283 has two simple powers: 283, 283^2 and 283^3.\n  The number 319 has two simple powers: 319 and 319^2.\n  The number 321 has one simple power: 321.\n  The number 329 has one simple power: 329.\n  The number 367 has one simple power: 367.\n  The number 385 has one simple power: 385.\n  The number 397 has one simple power: 397.\n  The number 421 has two simple powers: 421, 421^2 and 421^3.\n  The number 445 has one simple power: 445.\n  The number 459 has one simple power: 459.\n  The number 487 has one simple power: 487.\n  The number 491 has one simple power: 491.\n  The number 523 has two simple powers: 523, 523^2 and 523^3.\n  The number 547 has one simple power: 547.\n  The number 587 has one simple power: 587.\n  The number 599 has one simple power: 599.\n  The number 607 has one simple power: 607.\n  The number 623 has one simple power: 623.\n  The number 647 has one simple power: 647.\n  The number 659 has one simple power: 659.\n  The number 689 has one simple power: 689.\n  The number 701 has one simple power: 701.\n  The number 727 has one simple power: 727.\n  The number 751 has one simple power: 751.\n  The number 769 has one simple power: 769.\n  The number 787 has one simple power: 787.\n  The number 809 has one simple power: 809.\n  The number 831 has one simple power: 831.\n  The number 863 has one simple power: 863.\n  The number 877 has one simple power: 877.\n  The number 907 has one simple power: 907.\n  The number 919 has one simple power: 919.\n  The number 937 has one simple power: 937.\n  The number 941 has one simple power: 941.\n  The number 959 has one simple power: 959.\n  The number 987 has one simple power: 987.\n  The number 991 has one simple power: 991.\n  The number 1009 has one simple power: 1009.\n  The number 1013 has one simple power: 1013.\n  The number 1019 has one simple power: 1019.\n  The number 1021 has one simple power: 1021.\n  The number 1031 has one simple power: 1031.\n  The number 1033 has one simple power: 1033.\n  The number 1039 has one simple power: 1039.\n  The number 1087 has two simple powers: 1087, 1087^2 and 1087^3.\n  The number 1097 has one simple power: 1097.\n  The number 1109 has one simple power: 1109.\n  The number 1141 has one simple power: 1141.\n  The number 1149"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    return Math.pow(a, 3) === a;\n}\n\nexport {\n    iscube\n}<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    const hex = num.toUpperCase();\n    let count = 0;\n    let i = 0;\n    while (i < hex.length) {\n        if (hex.charAt(i) === \"A\") {\n            if (hex.charAt(i + 1) === \"B\") {\n                count++;\n            } else if (hex.charAt(i + 1) === \"D\") {\n                count++;\n            }\n        } else if (hex.charAt(i) === \"B\") {\n            if (hex.charAt(i + 1) === \"D\") {\n                count++;\n            }\n        } else if (hex.charAt(i) === \"D\") {\n            if (hex.charAt(i + 1) === \"A\") {\n                count++;\n            }\n        }\n        i++;\n    }\n    return count;\n};\n\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"1234\"));\nconsole.log(hexKey(\"1234\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\"\n  for (let i = 0; i < decimal.length; i++) {\n    binary += \"0\"\n    if (decimal[i] === 1) {\n      binary += \"1\"\n    }\n    binary += \"0\"\n  }\n  return binary.slice(0, -1) + \"db\"\n}\n\n/*\n  Convert a binary string into a decimal number.\n\n  Examples:\n  binaryToDecimal(\"1011\")  # returns 1\n  binaryToDecimal(\"1100\")  # returns 8\n  binaryToDecimal(\"0101\")  # returns 5\n  binaryToDecimal(\"101010\")  # returns 6\n*/\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === \"1\") {\n      decimal += 1\n    }\n  }\n  return decimal\n}\n\n/*\n  Convert a decimal number into a binary string.\n\n  Examples:\n  decimalToBinary(2)  # returns \"db\"\n  decimalToBinary(5)  # returns \"d1010db\"\n  decimalToBinary(6)  # returns \"d1010db\"\n*/\nconst decimalToBinaryString = (decimal) => {\n  let binary = \"\"\n  for (let i = 0; i < decimal.length; i++) {\n    if (decimal[i] === 1) {\n      binary += \"1\"\n    }\n    binary += \"0\"\n  }\n  return binary\n}\n\n/*\n  Convert a binary string into a decimal number.\n\n  Examples:\n  binaryToDecimal(\"1011\")  # returns 1\n  binaryToDecimal(\"1100\")  # returns 8\n  binaryToDecimal(\"0101\")  # returns 5\n  binaryToDecimal(\"101010\")  # returns 6\n*/\nconst binaryToDecimalString = (binary) => {\n  let decimal = 0\n  for (let i = binary.length - 1; i >= 0; i--) {\n    if (binary[i] === \"1\") {\n      decimal += 1\n    }\n  }\n  return decimal\n}\n\n/*\n  Convert a string to a binary string.\n\n  Examples:\n  binaryToString(\"1011\")  # returns \"1011\"\n  binaryToString(\"1100\")  # returns \"1100\"\n  binaryToString(\"0101\")  # returns \"0101\"\n  binaryToString(\"101010\")  # returns \"101010\"\n*/\nconst binaryToString = (binary) => {\n  let binaryString = \"\"\n  for (let i = 0; i < binary.length; i++) {\n    binaryString += binary[i]\n  }\n  return binaryString\n}\n\n/*\n  Convert a binary string to a string.\n\n  Examples:\n  binaryToString(\"1011\")  # returns \"1011\"\n  binaryToString(\"1100\")  # returns \"1100\"\n  binaryToString(\"0101\")  # returns \"0101\"\n  binaryToString(\"101010\")  # returns \"101010\"\n*/\nconst binaryToStringString = (binary) => {\n  let binaryString = \"\"\n  for (let i = 0; i < binary.length; i++) {\n    binaryString += binary[i]\n  }\n  return binaryString\n}\n\n/*\n  Convert a string to a binary string.\n\n  Examples:\n  stringToBinary(\"1011\")  # returns \"1011\"\n  stringToBinary(\"1100\")  # returns \"1100\"\n  stringToBinary(\"0101\")  # returns \"0101\"\n  stringToBinary(\"101010\")  # returns \"101010\"\n*/\nconst stringToBinary = (string) => {\n  let binary = \"\"\n  for (let i = 0; i < string.length; i++) {\n    binary += string[i]\n  }\n  return binary\n}\n\n/*\n  Convert a binary string to a string.\n\n  Examples:\n  binaryToString(\"1011\")  # returns \"1011\"\n  binaryToString(\"1100\")  # returns \"1100\"\n  binaryToString(\"0101\")  # returns \"0101\"\n  binaryToString(\"101010\")  # returns \"101010\"\n*/\nconst binaryToStringString = (binary) => {\n  let binaryString = \"\"\n  for (let i = 0; i < binary.length; i++) {\n    binaryString += binary[i]\n  }\n  return binaryString\n}\n\n/*\n  Convert a binary string to a number.\n\n  Examples:\n  binaryToNumber(\"1011\")  # returns 1\n  binaryToNumber(\"1100\")  # returns 8\n  binaryToNumber(\"0101\")  # returns 5\n  binaryToNumber(\"101010\")  # returns 6\n*/\nconst binaryToNumber = (binary) => {\n  let number = 0\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === \"1\") {\n      number += 1\n    }\n  }\n  return number\n}\n\n/*\n  Convert a number to a binary string.\n\n  Examples:\n  numberToBinary(2)  # returns \"db\"\n  numberToBinary(5)  # returns \"d1010db\"\n  numberToBinary(6)  # returns \"d1010db\"\n*/\nconst numberToBinary = (number) => {\n  let binary = \"\"\n  for (let i = 0; i < number.length; i++) {\n    if (number[i] === 1) {\n      binary += \"1\"\n    }\n    binary += \"0\"\n  }\n  return binary\n}\n\n/*\n  Convert a number to a string.\n\n  Examples:\n  numberToString(2)  # returns \"2"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let l = s.length;\n  let res = true;\n  let hash = {};\n  let hash2 = {};\n  \n  if (l < 3) {\n    return false;\n  }\n  \n  for (let i = 0; i < l; i++) {\n    if (hash[s[i]]) {\n      res = false;\n      break;\n    }\n    hash[s[i]] = true;\n  }\n  \n  if (res) {\n    return true;\n  }\n  \n  for (let i = 0; i < l; i++) {\n    hash2[s[i]] = true;\n  }\n  \n  for (let i = 0; i < l; i++) {\n    if (hash2[s[i + 1]]) {\n      res = false;\n      break;\n    }\n    hash2[s[i + 1]] = true;\n  }\n  \n  if (res) {\n    return true;\n  }\n  \n  for (let i = 0; i < l; i++) {\n    if (hash2[s[i + 2]]) {\n      res = false;\n      break;\n    }\n    hash2[s[i + 2]] = true;\n  }\n  \n  return res;\n}\n\nconsole.log(isHappy(\"happy\"));\nconsole.log(isHappy(\"happy2\"));\nconsole.log(isHappy(\"happy1\"));\nconsole.log(isHappy(\"happy3\"));\nconsole.log(isHappy(\"happy4\"));\nconsole.log(isHappy(\"happy5\"));\nconsole.log(isHappy(\"happy6\"));\nconsole.log(isHappy(\"happy7\"));\nconsole.log(isHappy(\"happy8\"));\nconsole.log(isHappy(\"happy9\"));\nconsole.log(isHappy(\"happy10\"));\nconsole.log(isHappy(\"happy11\"));\nconsole.log(isHappy(\"happy12\"));\nconsole.log(isHappy(\"happy13\"));\nconsole.log(isHappy(\"happy14\"));\nconsole.log(isHappy(\"happy15\"));\nconsole.log(isHappy(\"happy16\"));\nconsole.log(isHappy(\"happy17\"));\nconsole.log(isHappy(\"happy18\"));\nconsole.log(isHappy(\"happy19\"));\nconsole.log(isHappy(\"happy20\"));\nconsole.log(isHappy(\"happy21\"));\nconsole.log(isHappy(\"happy22\"));\nconsole.log(isHappy(\"happy23\"));\nconsole.log(isHappy(\"happy24\"));\nconsole.log(isHappy(\"happy25\"));\nconsole.log(isHappy(\"happy26\"));\nconsole.log(isHappy(\"happy27\"));\nconsole.log(isHappy(\"happy28\"));\nconsole.log(isHappy(\"happy29\"));\nconsole.log(isHappy(\"happy30\"));\nconsole.log(isHappy(\"happy31\"));\nconsole.log(isHappy(\"happy32\"));\nconsole.log(isHappy(\"happy33\"));\nconsole.log(isHappy(\"happy34\"));\nconsole.log(isHappy(\"happy35\"));\nconsole.log(isHappy(\"happy36\"));\nconsole.log(isHappy(\"happy37\"));\nconsole.log(isHappy(\"happy38\"));\nconsole.log(isHappy(\"happy39\"));\nconsole.log(isHappy(\"happy40\"));\nconsole.log(isHappy(\"happy41\"));\nconsole.log(isHappy(\"happy42\"));\nconsole.log(isHappy(\"happy43\"));\nconsole.log(isHappy(\"happy44\"));\nconsole.log(isHappy(\"happy45\"));\nconsole.log(isHappy(\"happy46\"));\nconsole.log(isHappy(\"happy47\"));\nconsole.log(isHappy(\"happy48\"));\nconsole.log(isHappy(\"happy49\"));\nconsole.log(isHappy(\"happy50\"));\nconsole.log(isHappy(\"happy51\"));\nconsole.log(isHappy(\"happy52\"));\nconsole.log(isHappy(\"happy53\"));\nconsole.log(isHappy(\"happy54\"));\nconsole.log(isHappy(\"happy55\"));\nconsole.log(isHappy(\"happy56\"));\nconsole.log(isHappy(\"happy57\"));\nconsole.log(isHappy(\"happy58\"));\nconsole.log(isHappy(\"happy59\"));\nconsole.log(isHappy(\"happy60\"));\nconsole.log(isHappy(\"happy61\"));\nconsole.log(isHappy(\"happy62\"));\nconsole.log(isHappy(\"happy63\"));\nconsole.log(isHappy(\"happy64\"));\nconsole.log(isHappy(\"happy65\"));\nconsole.log(isHappy(\"happy66\"));\nconsole.log(isHappy(\"happy67\"));\nconsole.log(isHappy(\"happy68\"));\nconsole.log(isHappy(\"happy69\"));\nconsole.log(isHappy(\"happy70\"));\nconsole.log(isHappy(\"happy71\"));\nconsole.log(isHappy(\"happy72\"));\nconsole.log(isHappy(\"happy73\"));\nconsole.log(isHappy(\"happy74\"));\nconsole.log(isHappy(\"happy75\"));\nconsole.log(isHappy(\"happy76\"));\nconsole.log(isHappy(\"happy77\"));\nconsole.log(isHappy(\"happy78\"));\nconsole.log(isHappy(\"happy79\"));\nconsole.log(isHappy(\"happy80\"));\nconsole.log(isHappy(\"happy81\"));\nconsole.log(isHappy(\"happy82\"));\nconsole.log(isHappy(\"happy83\"));\nconsole.log(isHappy(\"happy84\"));\nconsole.log(isHappy(\"happy85\"));\nconsole.log(isHappy(\"happy86\"));\nconsole.log(isHappy(\"happy87\"));\nconsole.log(isHappy(\"happy88\"));\nconsole.log(isHappy(\"happy89\"));\nconsole.log(isHappy(\"happy90\"));\nconsole.log(isHappy(\"happy91\"));\nconsole."}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  return grades.reduce((letterGrade, grade) => {\n    if (grade < 3.7) {\n      letterGrade = `A+`;\n    } else if (grade < 3.3) {\n      letterGrade = `A`;\n    } else if (grade < 3) {\n      letterGrade = `A-`;\n    } else if (grade < 3.7) {\n      letterGrade = `B+ed`;\n    } else if (grade < 3.3) {\n      letterGrade = `B`;\n    } else if (grade < 3) {\n      letterGrade = `B-`;\n    } else if (grade < 3.7) {\n      letterGrade = `C+ed`;\n    } else if (grade < 3.3) {\n      letterGrade = `C`;\n    } else if (grade < 3) {\n      letterGrade = `C-`;\n    } else if (grade < 3.7) {\n      letterGrade = `D+`;\n    } else if (grade < 3.3) {\n      letterGrade = `D`;\n    } else if (grade < 3) {\n      letterGrade = `D-`;\n    } else {\n      letterGrade = `E`;\n    }\n    return [letterGrade,...letterGrade.split('').map(Number)]\n  }, [])\n}\n\n/*\n  Given a list of GPA's, return the letter grades.\n  Example:\n  gpaList = [4.0, 3, 1.7, 2, 3.5]\n  letterGrade(gpaList) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst letterGrade = (gpaList) => {\n  return gpaList.reduce((letterGrade, gpa) => {\n    if (gpa <= 3.3) {\n      letterGrade = `A`;\n    } else if (gpa <= 3.7) {\n      letterGrade = `A+`;\n    } else if (gpa <= 3.3) {\n      letterGrade = `B`;\n    } else if (gpa <= 3.7) {\n      letterGrade = `B+ed`;\n    } else if (gpa <= 3.3) {\n      letterGrade = `C`;\n    } else if (gpa <= 3.7) {\n      letterGrade = `C-`;\n    } else if (gpa <= 3.3) {\n      letterGrade = `D`;\n    } else if (gpa <= 3.7) {\n      letterGrade = `D-`;\n    } else if (gpa <= 3.3) {\n      letterGrade = `E`;\n    }\n    return [letterGrade,...letterGrade.split('').map(Number)]\n  }, [])\n}\n\nconst letterGrade_1 = (gpaList) => {\n  return gpaList.reduce((letterGrade, gpa) => {\n    if (gpa <= 3.3) {\n      letterGrade = 'A';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'A+';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'B';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'B+ed';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'C';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'C-';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'D';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'D-';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'E';\n    }\n    return [letterGrade,...letterGrade.split('').map(Number)]\n  }, [])\n}\n\nconst letterGrade_2 = (gpaList) => {\n  return gpaList.reduce((letterGrade, gpa) => {\n    if (gpa <= 3.7) {\n      letterGrade = 'A';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'A+';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'B';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'B+ed';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'C';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'C-';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'D';\n    } else if (gpa <= 3.3) {\n      letterGrade = 'D-';\n    } else if (gpa <= 3.7) {\n      letterGrade = 'E';\n    }\n    return [letterGrade,...letterGrade.split('').map(Number)]\n  }, [])\n}\n\nconst letterGrade_3 = (gpaList) => {\n  return gpaList.reduce((letterGrade, gpa) => {\n    if (gpa <= 3.3) {\n      letterGrade = 'A';\n    } else if (gpa <="}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    let sqrt = Math.ceil(Math.sqrt(n))\n    while (n % 2 === 0) {\n      n /= 2\n      sqrt = Math.ceil(Math.sqrt(n))\n    }\n    return n > 1 && n!== sqrt\n  }\n  let prime = false\n  for (let i = 2; i <= string.length; i++) {\n    if (isPrime(i)) {\n      prime = true\n      break\n    }\n  }\n  return prime\n}\n\nmodule.exports = primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let starts = 0;\n   for (let i = 1; i <= n; i++) {\n      if (i === 1 || i === n) {\n         starts++;\n      }\n   }\n   return starts;\n}\n\n//  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 0. \n  */ \n const endsZeroStarts= (n)=>{\n   let ends = 0;\n   for (let i = 1; i <= n; i++) {\n      if (i === 1 || i === n) {\n         ends++;\n      }\n   }\n   return ends;\n}\n\n//  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let starts = 0;\n   for (let i = 1; i <= n; i++) {\n      if (i === 1) {\n         starts++;\n      }\n   }\n   return starts;\n}\n\n//  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 1. \n  */ \n const endsOneStarts= (n)=>{\n   let ends = 0;\n   for (let i = 1; i <= n; i++) {\n      if (i === 1) {\n         ends++;\n      }\n   }\n   return ends;\n}\n\n//  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that ended with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let ends = 0;\n   for (let i = 1; i <= n; i++) {\n      if (i === 1) {\n         ends++;\n      }\n   }\n   return ends;\n}\n\nmodule.exports = {\n   startsOneEnds,\n   endsZeroStarts,\n   endsOneStarts,\n   endsZeroEnds,\n   startsZeroEnds\n}<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let binary = '';\n  while (N > 0) {\n    binary = `${N % 2 === 1? '1' : '0'}${binary}`;\n    N = N / 2;\n  }\n  return binary;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const length = lst.length;\n  let result = 0;\n  let i;\n  for (i = 0; i < length; i++) {\n    result += lst[i];\n    if (i % 2 === 0) {\n      lst[i] = result;\n      result = 0;\n    }\n  }\n  return result;\n};\n\nexport default add;<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  s = s.toLowerCase();\n  let words = s.split(' ');\n  let result = '';\n  for (let i = 0; i < words.length; i++) {\n    let w = words[i];\n    let letters = w.split('');\n    let sortedLetters = letters.sort((a, b) => {\n      return (a > b)? 1 : ((a < b)? -1 : 0);\n    });\n    result += sortedLetters.join('');\n    if (i!== words.length - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let sort = []\n  for(let i = 0; i < lst.length; i++){\n    let row = []\n    for(let j = 0; j < lst[i].length; j++){\n      row.push([x, lst[i][j]])\n    }\n    sort.push(row)\n  }\n  sort.sort((a, b) => a[0] - b[0])\n  sort.sort((a, b) => b[1] - a[1])\n  return sort\n}\n\n/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let sort = []\n  for(let i = 0; i < lst.length; i++){\n    let row = []\n    for(let j = 0; j < lst[i].length; j++){\n      row.push([lst[i][j], x])\n    }\n    sort.push(row)\n  }\n  sort.sort((a, b) => a[0] - b[0])\n  sort.sort((a, b) => b[1] - a[1])\n  return sort\n}\n\n/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let sort = []\n  for(let i = 0; i < lst.length; i++){\n    let row = []\n    for(let j = 0; j < lst[i].length; j++){\n      row.push([lst[i][j], lst[i][j]])\n    }\n    sort.push(row)\n  }\n  sort.sort((a, b) => a[0] - b[0])\n  sort.sort((a, b) => b[1] - a[1])\n  return sort\n}\n\nmodule.exports = {\n  getRow\n}<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    let index = array.length - 1;\n    if (sum % 2 === 1) {\n        // descending order\n        while (index >= 0 && array[index] > array[index + 1]) {\n            let tmp = array[index];\n            array[index] = array[index + 1];\n            array[index + 1] = tmp;\n            index--;\n        }\n    } else {\n        // ascending order\n        while (index >= 0 && array[index] < array[index + 1]) {\n            let tmp = array[index];\n            array[index] = array[index + 1];\n            array[index + 1] = tmp;\n            index--;\n        }\n    }\n    return array;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let rot = alphabet.reverse();\n  let result = '';\n  rot.forEach((letter) => {\n    let index = Math.floor(Math.random() * 26);\n    rot[index] = letter;\n  });\n  rot.forEach((letter) => {\n    result += letter;\n  });\n  return result;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and \n   return a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let rot = alphabet.reverse();\n  let result = '';\n  rot.forEach((letter) => {\n    let index = Math.floor(Math.random() * 26);\n    rot[index] = letter;\n  });\n  rot.forEach((letter) => {\n    result += letter;\n  });\n  return result;\n};\n\n/*\n  Create a function decrypt2 that takes a string as an argument and \n   return a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let rot = alphabet.reverse();\n  let result = '';\n  rot.forEach((letter) => {\n    let index = Math.floor(Math.random() * 26);\n    rot[index] = letter;\n  });\n  rot.forEach((letter) => {\n    result += letter;\n  });\n  return result;\n};\n\nconst test = () => {\n  let testString = 'abcdefghijklmnopqrstuvwxyz';\n  let encryptedString = encrypt(testString);\n  console.log(encryptedString);\n  let decryptedString = decrypt(encryptedString);\n  console.log(decryptedString);\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  if(lst.length === 0) return null\n  let min = lst[0]\n  for(let i=1;i<lst.length;i++){\n    if(lst[i] < min){\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /\\w\\w/;\n  const regex2 = /\\w\\w/;\n  let s = S.split(/\\s/);\n  let n = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].length === 1 && regex.test(s[i])){\n      n += 1;\n    }\n  }\n  return n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let allNumbers = true;\n  \n  if (typeof x!== 'number') {\n    allNumbers = false;\n  }\n  \n  if (typeof y!== 'number') {\n    allNumbers = false;\n  }\n  \n  if (typeof z!== 'number') {\n    allNumbers = false;\n  }\n  \n  return allNumbers;\n};\n\nmodule.exports = anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.split('').reduce((acc, char) => {\n    const current = acc.indexOf(char)\n    if (current > -1) {\n      const next = acc.indexOf(char, current + 1)\n      if (next > -1) {\n        const swap = acc[current + 1]\n        acc[current + 1] = acc[next]\n        acc[next] = swap\n      }\n    }\n    return acc\n  }, '')\n}\n\nconsole.log(encode('This is a message'))\nconsole.log(encode('This is a message'))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let p = lst[i];\n    let l = p.toString();\n    for (let j = 0; j < l.length; j++) {\n      let digit = parseInt(l[j]);\n      sum += (digit >= 10)? digit - 10 : digit;\n    }\n  }\n  return sum;\n};\n\nconst main = () => {\n  let lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3];\n  console.log(skjkasdkd(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const keyLength = keys.length;\n  for (let i = 0; i < keyLength; i++) {\n    const key = keys[i];\n    if (!isString(key)) {\n      return false;\n    }\n    if (key.toUpperCase()!== key.toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isString = (item) => {\n  return typeof item ==='string';\n};\n\nexport {\n  checkDictCase,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n\n  // start at 2\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n\n  return primes\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i * i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  let factor = Math.pow(10, b);\n  while (a > 0) {\n    let digit = a % 10;\n    product = product * factor + digit;\n    a = a / 10;\n  }\n  return product;\n};\n\nmodule.exports = multiply;<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++\n    }\n  }\n  return count\n}\n\nconst count = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++\n    } else if (s[i] >= 'a' && s[i] <= 'z') {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  countUpper,\n  countLower\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numbers = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\"];\n  const valueString = value.toString();\n  let smallestDistance = numbers.length;\n  let closestNumber = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (valueString.length > numbers[i].length) {\n      continue;\n    }\n    let distance = 0;\n    for (let j = 0; j < valueString.length; j++) {\n      if (valueString[j]!== numbers[i][j]) {\n        distance++;\n      }\n    }\n    if (distance < smallestDistance) {\n      smallestDistance = distance;\n      closestNumber = i;\n    }\n  }\n  return closestNumber;\n};\n\n//# sourceMappingURL=closestInteger.js.map<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if(!isInteger(n) || n === 0) {\n    return [0, 0, 0];\n  }\n\n  if(n === 1) {\n    return [1, 1, 1];\n  }\n\n  const odd = (n % 2) === 1? n + 1 : n;\n  const even = n % 2 === 0? n + 1 : n;\n  return [odd, odd, even];\n};\n\nmodule.exports = makeAPile;<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s*[,;]\\s*/)\n}\n\n/*\n  You were given an array of words. Your task was to sort them in alphabetical order.\n  \n  For example:\n  wordsArray(\"hi, my name is john\") == [\"hi\", \"my\", \"name\", \"is\", \"john\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  return s.sort()\n}\n\nconst sort = (a, b) => {\n  return a.toLowerCase() > b.toLowerCase()\n}\n\nconst test = {\n  wordsString(\"Hi, my name is John\"),\n  wordsArray(\"Hi, my name is john\")\n}\n\nconsole.log(wordsArray(test[0]));\nconsole.log(wordsArray(test[1]));\nconsole.log(wordsString(test[0]));\nconsole.log(wordsString(test[1]));\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 1) {\n    return mid;\n  }\n  return -1;\n};\n\nconst largestEven = (arr) => {\n  let max = -1;\n  let x = 0;\n  let y = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num % 2 === 0) {\n      if (num > max) {\n        max = num;\n        x = i;\n      }\n    } else if (num > max) {\n      max = num;\n      y = i;\n    }\n  }\n  return chooseNum(arr[x], arr[y]);\n};\n\n// console.log(largestEven([12, 15, 18, 23, 25]));\n// console.log(largestEven([12, 17, 18, 23, 25]));\n// console.log(largestEven([12, 17, 19, 23, 25]));\n// console.log(largestEven([12, 17, 20, 23, 25]));\n// console.log(largestEven([12, 17, 21, 23, 25]));\n// console.log(largestEven([12, 17, 22, 23, 25]));\n// console.log(largestEven([12, 17, 23, 25]));\n// console.log(largestEven([12, 17, 24, 25]));\n// console.log(largestEven([12, 17, 25]));\n// console.log(largestEven([12, 17, 26]));\n// console.log(largestEven([12, 17, 27]));\n// console.log(largestEven([12, 17, 28]));\n// console.log(largestEven([12, 17, 29]));\n// console.log(largestEven([12, 17, 30]));\n// console.log(largestEven([12, 17, 31]));\n// console.log(largestEven([12, 17, 32]));\n// console.log(largestEven([12, 17, 33]));\n// console.log(largestEven([12, 17, 34]));\n// console.log(largestEven([12, 17, 35]));\n// console.log(largestEven([12, 17, 36]));\n// console.log(largestEven([12, 17, 37]));\n// console.log(largestEven([12, 17, 38]));\n// console.log(largestEven([12, 17, 39]));\n// console.log(largestEven([12, 17, 40]));\n// console.log(largestEven([12, 17, 41]));\n// console.log(largestEven([12, 17, 42]));\n// console.log(largestEven([12, 17, 43]));\n// console.log(largestEven([12, 17, 44]));\n// console.log(largestEven([12, 17, 45]));\n// console.log(largestEven([12, 17, 46]));\n// console.log(largestEven([12, 17, 47]));\n// console.log(largestEven([12, 17, 48]));\n// console.log(largestEven([12, 17, 49]));\n// console.log(largestEven([12, 17, 50]));\n// console.log(largestEven([12, 17, 51]));\n// console.log(largestEven([12, 17, 52]));\n// console.log(largestEven([12, 17, 53]));\n// console.log(largestEven([12, 17, 54]));\n// console.log(largestEven([12, 17, 55]));\n// console.log(largestEven([12, 17, 56]));\n// console.log(largestEven([12, 17, 57]));\n// console.log(largestEven([12, 17, 58]));\n// console.log(largestEven([12, 17, 59]));\n// console.log(largestEven([12, 17, 60]));\n// console.log(largestEven([12, 17, 61]));\n// console.log(largestEven([12, 17, 62]));\n// console.log(largestEven([12, 17, 63]));\n// console.log(largestEven([12, 17, 64]));\n// console.log(largestEven([12, 17, 65]));\n// console.log(largestEven([12, 17, 66]));\n// console.log(largestEven([12, 17, 67]));\n// console.log(largestEven([12, 17, 68]));\n// console.log(largestEven([12, 17, 69]));\n// console.log(largestEven([12, 17, 70]));\n// console.log(largestEven([12, 17, 71]));\n// console.log(largestEven([12, 17, 72]));\n// console.log(largestEven([12, 17, 73]));\n// console.log(largestEven([12, 17, 74]));\n// console.log(largestEven([12, 17, 75]));\n// console.log(largestEven([12, 17, 76]));\n// console.log(largestEven([12, 17, 77]));\n// console.log(largestEven([12, 17, 78]));\n// console.log(largestEven([12, 17, 79]));\n// console.log(largestEven([12, 17, 80]));\n// console.log(largestEven([12, 17, 81]));\n// console.log(largestEven([12, 17, 82]));\n// console.log(largestEven([12, 17, 83]));\n// console.log(largestEven([12, 17, 84]));\n// console.log(largestEven([12, 17, 85]));\n// console.log(largestEven([12, 17, 86]));\n// console.log(largestEven([12, 17, 87]));\n// console.log(largestEven([12, 17, 88]));\n// console.log(largestEven([12, 17, 89]));\n// console.log(largestEven([12, 17, 90]));\n// console.log(largestEven(["}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const average = (n + m) / 2;\n  return (Math.floor(average) + 1).toString(2);\n}\n\nexport { roundedAvg };\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const array = []\n  const visited = {}\n  \n  for (let i = 0; i < x; i++) {\n    const currentDigit = x % 10\n    if (currentDigit === 0) {\n      continue\n    }\n\n    if (visited[currentDigit] === undefined) {\n      array.push(currentDigit)\n      visited[currentDigit] = true\n    }\n  }\n\n  return array\n}\n\nconsole.log(uniqueDigits(13))\n\n/*\n  Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const array = []\n  const visited = {}\n  \n  for (let i = 0; i < x; i++) {\n    const currentDigit = x % 10\n    if (currentDigit === 0) {\n      continue\n    }\n\n    if (visited[currentDigit] === undefined) {\n      array.push(currentDigit)\n      visited[currentDigit] = true\n    }\n  }\n\n  return array\n}\n\nconsole.log(uniqueDigits(13))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let name = {\n    One: 'one',\n    Two: 'two',\n    Three: 'three',\n    Four: 'four',\n    Five: 'five',\n    Six:'six',\n    Seven:'seven',\n    Eight: 'eight',\n    Nine: 'nine'\n  }\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr.map(v => name[v])\n}\n\nconst sortByLength = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a.length - b.length)\n  return sortedArr\n}\n\nconst reverseArray = (arr) => {\n  const sortedArr = arr.slice().reverse()\n  return sortedArr\n}\n\nconst sort = (arr) => {\n  if (arr.length === 0) return []\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  return sortedArr\n}\n\nconst byLengthReversed = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst reverseArrayReversed = (arr) => {\n  const sortedArr = arr.slice().reverse()\n  return sortedArr\n}\n\nconst sortReversed = (arr) => {\n  if (arr.length === 0) return []\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  return sortedArr\n}\n\nconst reverse = (arr) => {\n  if (arr.length === 0) return []\n  const sortedArr = arr.slice().reverse()\n  return sortedArr\n}\n\nconst find = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return [sortedArr[index]]\n}\n\nconst findReversed = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return [sortedArr[index]]\n}\n\nconst findReversedArray = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findReversed = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findReversedArray = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findArray = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findReversedArray = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findArrayReversed = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findArrayReversed = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findArrayReversed = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst findArrayReversed = (arr, value) => {\n  const sortedArr = arr.slice().sort((a, b) => b - a)\n  let index = sortedArr.indexOf(value)\n  if (index === -1) return []\n  return sortedArr.slice(index)\n}\n\nconst find"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fact = (n) => n === 1? 1 : n * f(n - 1);\n  return Array.from({ length: n }, (i) => {\n    return (i % 2)? fact(i) : n - fact(i - 1) + 1;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = 0;\n  const odd = 0;\n  for (let i = 1; i <= n; i++) {\n    const num = i;\n    const str = num.toString();\n    let rev = '';\n    let reversed = '';\n    for (let j = str.length - 1; j >= 0; j--) {\n      rev = rev + str[j];\n      reversed = reversed + str[str.length - 1 - j];\n    }\n    if (str.length % 2 === 0) {\n      if (rev === str) {\n        odd++;\n      }\n    } else {\n      if (reversed === str) {\n        even++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOddPalindrome = (n) => {\n  const even = 0;\n  const odd = 0;\n  const evenOddPalindrome = (n) => {\n    for (let i = 1; i <= n; i++) {\n      const num = i;\n      const str = num.toString();\n      let rev = '';\n      let reversed = '';\n      for (let j = str.length - 1; j >= 0; j--) {\n        rev = rev + str[j];\n        reversed = reversed + str[str.length - 1 - j];\n      }\n      if (str.length % 2 === 0) {\n        if (rev === str) {\n          odd++;\n        }\n      } else {\n        if (reversed === str) {\n          even++;\n        }\n      }\n    }\n    return [even, odd];\n  };\n  return evenOddPalindrome(n);\n};\n\nexport {\n  evenOddPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  let result = 0;\n  if(sum > 0) {\n    for(let i = 0; i < arr.length; i++) {\n      if(arr[i] > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(countNums([-1, 11, -11]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();\n  let i = 0;\n\n  while (i < arr.length) {\n    if (arr[i] <= last) {\n      let shift = i;\n      while (shift < arr.length && arr[shift] <= last) {\n        arr[shift] = arr[shift + 1];\n        shift++;\n      }\n      arr[shift] = last;\n      return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n\n  let last = arr.pop();"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0\n  let j = 0\n  let flag = true\n  while(i < lst1.length && j < lst2.length) {\n    if(lst1[i] === lst2[j]) {\n      if(lst1[i] % 2 === 0) {\n        lst1.splice(i, 1)\n        lst2.splice(j, 1)\n      } else {\n        lst1.splice(j, 1)\n        lst2.splice(i, 1)\n        flag = false\n        break\n      }\n    } else {\n      if(lst1[i] > lst2[j]) {\n        i++\n      } else {\n        j++\n      }\n    }\n  }\n  return flag? \"YES\" : \"NO\"\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n// → YES\n\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n// → NO\n\nexchange([1, 2, 3, 4], [1, 2, 3, 5])\n// → YES\n\nexchange([1, 2, 3, 4], [1, 2, 3, 6])\n// → NO\n\nexchange([1, 2, 3, 4], [1, 2, 3, 9])\n// → NO\n\nexchange([1, 2, 3, 4], [1, 2, 3, 15])\n// → YES\n\nexchange([1, 2, 3, 4], [1, 2, 3, 16])\n// → NO\n\nexchange([1, 2, 3, 4], [1, 2, 3, 19])\n// → YES\n\nexchange([1, 2, 3, 4], [1, 2, 3, 20])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 7])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 8])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 9])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 11])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 12])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 13])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 14])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 15])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 16])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 17])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 18])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 19])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 20])\n// → NO\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 5])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 6])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 7])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 8])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 9])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 10])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 11])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 12])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 13])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 14])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 15])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 16])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 17])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 18])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 19])\n// → YES\n\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 20])\n// →"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('');\n  const map = {};\n  \n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in map) {\n      map[letters[i]]++;\n    } else {\n      map[letters[i]] = 1;\n    }\n  }\n  return map;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a string \n   containing the letters that occurred more than once in the original string.\n\n  Example:\n  histogram('a b c') == 'b'\n  histogram('a b b a') == 'a b'\n  histogram('b b b b a') == 'b b'\n  histogram('') == ''\n  histogram('a a b a') == ''\n  histogram('a b a b') == ''\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('');\n  const map = {};\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in map) {\n      map[letters[i]]++;\n    } else {\n      map[letters[i]] = 1;\n    }\n  }\n  return Object.keys(map).filter((k) => map[k] > 1).join('');\n};\n\nmodule.exports = {\n  histogram\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result = result.substr(0, sLength - 1 - i) + result.substr(sLength - 1 - i + 1);\n      }\n    }\n  }\n\n  return [result, isPalindrome];\n}\n\nconst reverseDelete = (s, c) => {\n  const [sLength, cLength] = [s.length, c.length];\n  const [result, isPalindrome] = [s, true];\n\n  for (let i = 0; i < cLength; i++) {\n    if (s[sLength - 1 - i] === c[cLength - 1 - i]) {\n      if (sLength - 1 - i < 0) {\n        return [result.substr(1), false];\n      } else {\n        result"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = lst.reduce((acc, elem, index) => {\n    if (elem.length % 2 === 0) {\n      acc += elem.length;\n    }\n    return acc;\n  }, 0);\n  return lst.map((elem, index) => {\n    return count + index;\n  });\n};\n\nconsole.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(oddCount(['3',\"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n                                          // \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  if (!Array.isArray(nums)) {\n    throw new Error('array should be an array');\n  }\n\n  if (nums.length === 0) {\n    return 0;\n  }\n\n  let prevSum = nums[0];\n  let minSum = nums[0];\n\n  for (let i = 1; i < nums.length; i++) {\n    prevSum = prevSum + nums[i];\n    if (prevSum < minSum) {\n      minSum = prevSum;\n    }\n  }\n\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  // 初始化\n  const [rows, columns] = grid.length;\n  const buckets = Array(rows).fill(0);\n  const [row, column] = grid[0];\n  let water = 0;\n  // 遍历\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (row[j] === 1) {\n        water += 1;\n      }\n      if (buckets[i] < capacity) {\n        buckets[i] += 1;\n        if (column[j] === 1) {\n          water -= 1;\n        }\n      }\n    }\n    row += 1;\n  }\n  return water;\n};\n\nconst {benchmark} = require('benchmark');\n\nconst grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\nconst capacity = 1;\n\nbenchmark.run({\n  'example 1': {\n    'fn': maxFill,\n    'grid': grid,\n    'capacity': capacity\n  },\n  'example 2': {\n    'fn': maxFill,\n    'grid': grid,\n    'capacity': capacity\n  },\n  'example 3': {\n    'fn': maxFill,\n    'grid': grid,\n    'capacity': capacity\n  }\n});\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    sortedArr.push(arr[i]);\n  }\n  sortedArr.sort((a, b) => {\n    if (a.toString(2) === b.toString(2)) {\n      return a - b;\n    }\n    return parseInt(a.toString(2)) - parseInt(b.toString(2));\n  });\n  return sortedArr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let s_list = s.split('')\n  let word_list = []\n  for (let i = 0; i < s_list.length; i++) {\n    if (s_list[i].length === n) {\n      word_list.push(s_list[i])\n    }\n  }\n  return word_list\n}\n\nconst selectWords2 = (s, n) => {\n  let s_list = s.split('')\n  let word_list = []\n  for (let i = 0; i < s_list.length; i++) {\n    if (s_list[i].length === n) {\n      word_list.push(s_list[i])\n    }\n  }\n  return word_list\n}\n\nconst selectWords3 = (s, n) => {\n  let s_list = s.split('')\n  let word_list = []\n  for (let i = 0; i < s_list.length; i++) {\n    if (s_list[i].length === n) {\n      word_list.push(s_list[i])\n    }\n  }\n  return word_list\n}\n\n// const selectWords4 = (s, n) => {\n//   let s_list = s.split('')\n//   let word_list = []\n//   for (let i = 0; i < s_list.length; i++) {\n//     if (s_list[i].length === n) {\n//       word_list.push(s_list[i])\n//     }\n//   }\n//   return word_list\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowel = 'aeiou'\n  let start = 0\n  let end = word.length - 1\n  let result = ''\n  let char = word.charAt(start)\n  let index = 0\n  while (start <= end) {\n    if (char === vowel[index]) {\n      result = word.slice(start, end + 1)\n      return result\n    }\n    index++\n    if (index === vowel.length) {\n      start++\n      char = word.charAt(start)\n      index = 0\n    }\n    end--\n  }\n  return result\n}\n\n// @exclude\nconst getClosestVowel = (word) => {\n  if (!word) return ''\n  const vowel = 'aeiou'\n  let result = ''\n  let start = 0\n  let end = word.length - 1\n  let char = word.charAt(start)\n  let index = 0\n  while (start <= end) {\n    if (char === vowel[index]) {\n      result = word.slice(start, end + 1)\n      return result\n    }\n    index++\n    if (index === vowel.length) {\n      start++\n      char = word.charAt(start)\n      index = 0\n    }\n    end--\n  }\n  return result\n}\n// @include\nconst getClosestVowel = (word) => {\n  if (!word) return ''\n  const vowel = 'aeiou'\n  let result = ''\n  let start = 0\n  let end = word.length - 1\n  let char = word.charAt(start)\n  let index = 0\n  while (start <= end) {\n    if (char === vowel[index]) {\n      result = word.slice(start, end + 1)\n      return result\n    }\n    index++\n    if (index === vowel.length) {\n      start++\n      char = word.charAt(start)\n      index = 0\n    }\n    end--\n  }\n  return result\n}\n// @exclude\nconst getClosestVowel = (word) => {\n  if (!word) return ''\n  const vowel = 'aeiou'\n  let result = ''\n  let start = 0\n  let end = word.length - 1\n  let char = word.charAt(start)\n  let index = 0\n  while (start <= end) {\n    if (char === vowel[index]) {\n      result = word.slice(start, end + 1)\n      return result\n    }\n    index++\n    if (index === vowel.length) {\n      start++\n      char = word.charAt(start)\n      index = 0\n    }\n    end--\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== '(') {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*\n  matchParens2(['()', '())']) == 'Yes'\n  matchParens2([')', '(']) == 'No'\n  matchParens2(['(()()')]) == 'Yes'\n  matchParens2([]) == 'No'\n  matchParens2(['(()(()')]) == 'No'\n  */\nconst matchParens2 = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== '(') {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/*\n  matchParens3(['()', '())']) == 'Yes'\n  matchParens3([')', '(']) == 'No'\n  matchParens3(['(()()')]) == 'No'\n  matchParens3([]) == 'Yes'\n  matchParens3(['(()(())')]) == 'No'\n  */\nconst matchParens3 = (lst) => {\n  let stack = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n      count++\n    } else {\n      if (stack.length === 0 || count === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== '(') {\n        return 'No'\n      }\n      count--\n    }\n  }\n  if (stack.length > 0 || count > 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\nconst matchParens4 = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== ')') {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\nconst matchParens5 = (lst) => {\n  let stack = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n      count++\n    } else {\n      if (stack.length === 0 || count === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== ')') {\n        return 'No'\n      }\n      count--\n    }\n  }\n  if (stack.length > 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\nconst matchParens6 = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== '(') {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens7 = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== ')') {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\nconst matchParens8 = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== '(') {\n        return 'No'"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const arrLength = arr.length\n    const len = k\n    const result = []\n\n    for (let i = 0; i < arrLength; i++) {\n        if (i === 0) {\n            result.push(arr[i])\n        } else if (i === len) {\n            result.push(arr[i - 1])\n            break\n        } else if (arr[i] > arr[i - 1]) {\n            result.push(arr[i])\n            i++\n        } else {\n            result.push(arr[i - 1])\n        }\n    }\n\n    return result\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      odd++;\n    }\n    sum += lst[i];\n  }\n  return sum - odd * 2;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport default addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const arr = []\n  let i = 1\n  while (i < n) {\n    if (isOdd(i)) {\n      arr.push(i)\n    }\n    i *= 2\n  }\n  return arr\n}\n\nconst isOdd = (n) => n % 2 === 1\n\nconst collatzSequence = (n) => {\n  const arr = []\n  let i = 1\n  while (i < n) {\n    if (isOdd(i)) {\n      arr.push(i)\n    }\n    i *= 2\n    if (i === 1) {\n      i = n\n    }\n  }\n  return arr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  return!(!date ||\n    date.length === 0 ||\n    parseInt(date.split('-')[2], 10) < 1 ||\n    parseInt(date.split('-')[2], 10) > 31 ||\n    parseInt(date.split('-')[1], 10) < 1 ||\n    parseInt(date.split('-')[1], 10) > 12 ||\n    parseInt(date.split('-')[0], 10) < 1 ||\n    parseInt(date.split('-')[0], 10) > 30\n  )\n}\n\nconst isLeapYear = (year) => {\n  return (year % 4 === 0 && year % 100!== 0) || year % 400 === 0\n}\n\nconst getDaysInMonth = (month, year) => {\n  switch (month) {\n    case '1':\n    case '3':\n    case '5':\n    case '7':\n    case '8':\n    case '10':\n    case '12':\n      return 31\n    case '4':\n    case '6':\n    case '9':\n    case '11':\n      return 30\n    case '2':\n      if (isLeapYear(year)) {\n        return 29\n      }\n      return 28\n    default:\n      return undefined\n  }\n}\n\nconst validateDate = (date) => {\n  const month = date.split('-')[1]\n  const year = date.split('-')[0]\n  return validDate(date) && \n    parseInt(date.split('-')[2], 10) === parseInt(date.split('-')[2], 10) &&\n    getDaysInMonth(month, year) === parseInt(date.split('-')[2], 10) &&\n    parseInt(month, 10) <= 12 &&\n    parseInt(month, 10) >= 1 &&\n    parseInt(year, 10) <= 2100 &&\n    parseInt(year, 10) >= 1\n}\n\nexport default validateDate<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const word_list = txt.split(/\\s+/);\n  if(word_list.length === 0) return [];\n  return word_list;\n};\n\n/*\n  Given a list of words, return a list of words split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you should split on commas ','if no commas existed in the text you should split on whitespace, if no whitespace existed in the text you"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = Array.isArray(lst)? lst : lst.toArray();\n  let last = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] < last) return false;\n    last = sorted[i];\n  }\n  return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // If the two intervals don't overlap, then there's no intersection.\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  // If the length of intersection is a prime number, return \"YES\".\n  const length = (interval1[1] - interval1[0] + 1) * (interval2[1] - interval2[0] + 1);\n  if (Math.isPrime(length)) {\n    return \"YES\";\n  }\n  // Otherwise, return \"NO\".\n  return \"NO\";\n};\n\nconsole.log(intersection([[1, 2], [2, 3]], [[2, 4], [1, 3]]));\nconsole.log(intersection([[-1, 1], [0, 4]], [[-3, -1], [-5, 5]]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  return (\n    arr.length === 0? null : arr.reduce((prev, curr) => {\n      const sign = curr < 0? -1 : 1;\n      return (\n        sign === prev? sign * curr : 0,\n      );\n    })\n  );\n};\n\n/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst productOfSigns = (arr) => {\n  return (\n    arr.length === 0? null : arr.reduce((prev, curr) => {\n      const sign = curr < 0? -1 : 1;\n      return (\n        sign === prev? curr : 0,\n      );\n    })\n  );\n};\n\n/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst sumOfSigns = (arr) => {\n  return (\n    arr.length === 0? null : arr.reduce((prev, curr) => {\n      return prev + curr;\n    })\n  );\n};\n\nmodule.exports = {\n  productOfSigns,\n  prodSigns,\n  sumOfSigns,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let [N, M, row, col] = grid.map(num => num.length)\n  let [s, e] = [row, col]\n  let visited = {}\n\n  let d = 1\n  let curr = visited[row][col] = 0\n  let ans = [row, col]\n\n  while (d < k) {\n    while (row - d >= 0 && col - d >= 0 &&!visited[row - d][col - d]) {\n      curr = visited[row - d][col - d] = d\n      row = row - d\n      col = col - d\n      s = row\n      e = col\n      ans.unshift(grid[row][col])\n    }\n\n    while (row + d <= N && col + d <= M &&!visited[row + d][col + d]) {\n      curr = visited[row + d][col + d] = d\n      row = row + d\n      col = col + d\n      s = row\n      e = col\n      ans.push(grid[row][col])\n    }\n\n    d += 1\n  }\n\n  return ans\n}\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\ntest.forEach(grid => {\n  console.log(minPath(grid, 3))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let t = 1\n    let a = [1]\n    let b = [1]\n    let c = [1]\n    \n    for (let i = 1; i < n; i++) {\n        t = a[i] + b[i]\n        a[i] = c[i]\n        b[i] = t\n        c[i] = t + c[i-1]\n    }\n    \n    return a\n}\n\nconst test = () => {\n    assert(tri(1) === [1])\n    assert(tri(2) === [1, 2])\n    assert(tri(3) === [1, 3, 2, 8])\n    assert(tri(4) === [1, 3, 2, 8, 4])\n    assert(tri(5) === [1, 3, 2, 8, 4, 5])\n    assert(tri(6) === [1, 3, 2, 8, 4, 5, 6])\n    assert(tri(7) === [1, 3, 2, 8, 4, 5, 6, 7])\n    assert(tri(8) === [1, 3, 2, 8, 4, 5, 6, 7, 8])\n    assert(tri(9) === [1, 3, 2, 8, 4, 5, 6, 7, 8, 9])\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 2) {\n    return 0;\n  }\n  const product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      const even = (n / i) % 10;\n      product = (product * even);\n    }\n  }\n  return product;\n}\n\n//# sourceMappingURL=p-086.js.map<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   if(!string || string.length === 0) {\n     return false\n   }\n   let depth = 0\n   let currentPos = 0\n   let stack = []\n   while(currentPos < string.length) {\n     if(string[currentPos] === '[') {\n       stack.push(currentPos)\n       depth++\n     } else if(string[currentPos] === ']') {\n       if(depth === 0) {\n         return false\n       }\n       depth--\n       if(stack.length === 0) {\n         return false\n       }\n       currentPos = stack.pop()\n     }\n     currentPos++\n   }\n   return depth === 0\n }\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const total = lst.reduce((acc, item) => acc + item * item, 0)\n  return total\n}\n\nconst sumOfSquares = (lst) => {\n  return sumSquares(lst.map(Math.round))\n}\n\nconst test = (msg, result, expected) => {\n  console.log(`${msg}: ${result} = ${expected}`)\n}\n\nconst testList = (msg, lst) => {\n  const sum = sumOfSquares(lst)\n  test(msg, sum, sumSquares(lst))\n}\n\ntestList('Sum of squares', [1,2,3,4,5,6,7,8,9])\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar >= 'a' && lastChar <= 'z'\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a capital letter and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsCapital(\"apple pie\") ➞ true\n  checkIfLastCharIsCapital(\"apple pi e\") ➞ false\n  checkIfLastCharIsCapital(\"apple pi e \") ➞ true\n  checkIfLastCharIsCapital(\"\") ➞ false\n  */\nconst checkIfLastCharIsCapital = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar >= 'A' && lastChar <= 'Z'\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a numeric character and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsNumeric(\"apple pie\") ➞ true\n  checkIfLastCharIsNumeric(\"apple pi e\") ➞ false\n  checkIfLastCharIsNumeric(\"apple pi e \") ➞ false\n  checkIfLastCharIsNumeric(\"\") ➞ false\n  */\nconst checkIfLastCharIsNumeric = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar >= '0' && lastChar <= '9'\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a space and was not a part of a word,\n  and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsSpace(\"apple pie\") ➞ true\n  checkIfLastCharIsSpace(\"apple pi e\") ➞ false\n  checkIfLastCharIsSpace(\"apple pi e \") ➞ true\n  checkIfLastCharIsSpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpace = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar ===''\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a punctuation character and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsPunctuation(\"apple pie\") ➞ true\n  checkIfLastCharIsPunctuation(\"apple pi e\") ➞ false\n  checkIfLastCharIsPunctuation(\"apple pi e \") ➞ true\n  checkIfLastCharIsPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsPunctuation = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar >= '!' && lastChar <= '@'\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a lowercase letter and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLower(\"apple pie\") ➞ true\n  checkIfLastCharIsLower(\"apple pi e\") ➞ false\n  checkIfLastCharIsLower(\"apple pi e \") ➞ true\n  checkIfLastCharIsLower(\"\") ➞ false\n  */\nconst checkIfLastCharIsLower = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar >= 'a' && lastChar <= 'z'\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was an upper case letter and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsUpper(\"apple pie\") ➞ true\n  checkIfLastCharIsUpper(\"apple pi e\") ➞ false\n  checkIfLastCharIsUpper(\"apple pi e \") ➞ true\n  checkIfLastCharIsUpper(\"\") ➞ false\n  */\nconst checkIfLastCharIsUpper = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar >= 'A' && lastChar <= 'Z'\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a whitespace character and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsWhitespace(\"apple pie\") ➞ true\n  checkIfLastCharIsWhitespace(\"apple pi e\") ➞ false\n  checkIfLastCharIsWhitespace(\"apple pi e \") ➞ true\n  checkIfLastCharIsWhitespace(\"\") ➞ false\n  */\nconst checkIfLastCharIsWhitespace = (txt) => {\n  const lastChar = txt[txt.length - 1]\n  return lastChar ===''\n}\n\n/*\n  Create a function that returns true if the last character \n  of a given string was a whitespace character and was not a \n  part of a word, and false otherwise. \n  Note: \" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsWhitespace(\"apple pie\") ➞ true\n  checkIfLastCharIsWhitespace(\"apple pi e"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  var sorted = arr.sort();\n  for (let i = 0; i < sorted.length - 1; i++) {\n    if (sorted[i] < sorted[i + 1]) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconsole.log(canArrange([1,2,4,3,5]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const result = largestSmallestIntegersHelper(lst);\n    return (result === null)? null : (result[0], result[1]);\n};\n\n/*\n  Helper function to find largest and smallest of a list of\n  integers.\n  @param {Array} lst - a list of integers\n  @return {Object} (largest, smallest) - a tuple consisting of largest\n    and smallest integers in lst\n  @return {Integer} largest - largest integer in lst\n  @return {Integer} smallest - smallest integer in lst\n  @return {null} - if lst is empty\n  */\nconst largestSmallestIntegersHelper = (lst) => {\n    const largest = Math.max.apply(Math, lst);\n    const smallest = Math.min.apply(Math, lst);\n    return (largest === 0 && smallest === 0)? null : ({\n        largest,\n        smallest\n    });\n};\n\n// Test\nlargestSmallestIntegers([1, 2, 3, 4, 5, 6, 7, 8]);\nlargestSmallestIntegers([3, 5, 7, 9]);\nlargestSmallestIntegers([-2, -1, 0, 1, 2]);\nlargestSmallestIntegers([1, -2, -3, -4, -5, -6, -7, -8]);\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else {\n     return null;\n   }\n }\n const compareTwo= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else {\n     return 0;\n   }\n }\n const compareThree= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else {\n     return 0;\n   }\n }\n const compareFour= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else {\n     return b;\n   }\n }\n const compareFive= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b > 0) {\n     return a;\n   } else {\n     return b;\n   }\n }\n const compareSix= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else if (a > 0 && b > 0) {\n     return a;\n   } else {\n     return b;\n   }\n }\n const compareSeven= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else if (a < 0 && b > 0) {\n     return a;\n   } else if (a > 0 && b > 0) {\n     return a;\n   } else {\n     return b;\n   }\n }\n const compareEight= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else if (a < 0 && b > 0) {\n     return a;\n   } else if (a > 0 && b > 0) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return b;\n   } else if (a > 0 && b < 0) {\n     return b;\n   } else {\n     return a;\n   }\n }\n const compareNine= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else if (a < 0 && b > 0) {\n     return a;\n   } else if (a > 0 && b > 0) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return b;\n   } else if (a > 0 && b < 0) {\n     return b;\n   } else {\n     return a;\n   }\n }\n const compareTen= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else if (a < 0 && b > 0) {\n     return a;\n   } else if (a > 0 && b > 0) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return b;\n   } else if (a > 0 && b < 0) {\n     return b;\n   } else if (a < 0 && b === 0) {\n     return a;\n   } else if (a === 0 && b < 0) {\n     return b;\n   } else if (a > 0 && b === 0) {\n     return b;\n   } else {\n     return a;\n   }\n }\n \n \n const compareEleven= (a, b)=>{\n   if (a < b) {\n     return a;\n   } else if (a > b) {\n     return b;\n   } else if (a === b) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return a;\n   } else if (a < 0 && b > 0) {\n     return a;\n   } else if (a > 0 && b > 0) {\n     return a;\n   } else if (a < 0 && b < 0) {\n     return b;\n   } else if (a > 0 && b < 0) {\n     return b;\n   } else if (a < 0 && b === 0) {\n     return a;\n   } else if (a === 0"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n >= 4 && ((n % 2 === 0 && n % 4 === 0) || (n % 4 === 0 && n % 2 === 0));\n};\n\n// ####################\n// ##   PROGRAM CODE   ##\n// ####################\n\n// ####################\n// ##  REFERENCE CODE  ##\n// ####################\n\n/*\n  References:\n    https://www.codewars.com/kata/simple-sum-of-a-sequence\n    https://www.codewars.com/kata/simple-sum-of-a-sequence-2\n    https://www.codewars.com/kata/simple-sum-of-a-sequence-3\n    https://www.codewars.com/kata/simple-sum-of-a-sequence-4\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    let res = 1;\n    while (n > 1) {\n        res = n * res;\n        n -= 1;\n    }\n    return res;\n};\n\n/*\n   The function should return the sum of two integers a and b.\n   */\nconst sum = (a, b) => {\n    return a + b;\n};\n\n/*\n   The function should return the product of two integers a and b.\n   */\nconst product = (a, b) => {\n    return a * b;\n};\n\n/*\n   The function should return the modulus of two integers a and b.\n   */\nconst modulus = (a, b) => {\n    return a % b;\n};\n\n/*\n   The function should return the quotient of two integers a and b.\n   */\nconst quotient = (a, b) => {\n    return a / b;\n};\n\n/*\n   The function should return the average of two integers a and b.\n   */\nconst average = (a, b) => {\n    return (a + b) / 2;\n};\n\n/*\n   The function should return the average of two strings.\n   */\nconst average_string = (a, b) => {\n    return (a + b) / 2;\n};\n\n/*\n   The function should return the sum of two strings.\n   */\nconst sum_string = (a, b) => {\n    return a + b;\n};\n\n/*\n   The function should return the product of two strings.\n   */\nconst product_string = (a, b) => {\n    return a * b;\n};\n\n/*\n   The function should return the modulus of two strings.\n   */\nconst modulus_string = (a, b) => {\n    return a % b;\n};\n\n/*\n   The function should return the quotient of two strings.\n   */\nconst quotient_string = (a, b) => {\n    return a / b;\n};\n\n/*\n   The function should return the average of two dates.\n   */\nconst average_date = (a, b) => {\n    return (a.getTime() + b.getTime()) / 2;\n};\n\n/*\n   The function should return the sum of two dates.\n   */\nconst sum_date = (a, b) => {\n    return a.getTime() + b.getTime();\n};\n\n/*\n   The function should return the product of two dates.\n   */\nconst product_date = (a, b) => {\n    return a.getTime() * b.getTime();\n};\n\n/*\n   The function should return the modulus of two dates.\n   */\nconst modulus_date = (a, b) => {\n    return a.getTime() % b.getTime();\n};\n\n/*\n   The function should return the quotient of two dates.\n   */\nconst quotient_date = (a, b) => {\n    return a.getTime() / b.getTime();\n};\n\n/*\n   The function should return the average of two arrays.\n   */\nconst average_array = (a, b) => {\n    return (a.reduce((x, y) => x + y) + b.reduce((x, y) => x + y)) / (a.length + b.length);\n};\n\n/*\n   The function should return the sum of two arrays.\n   */\nconst sum_array = (a, b) => {\n    return a.reduce((x, y) => x + y);\n};\n\n/*\n   The function should return the product of two arrays.\n   */\nconst product_array = (a, b) => {\n    return a.reduce((x, y) => x * y);\n};\n\n/*\n   The function should return the modulus of two arrays.\n   */\nconst modulus_array = (a, b) => {\n    return a.reduce((x, y) => x % y);\n};\n\n/*\n   The function should return the quotient of two arrays.\n   */\nconst quotient_array = (a, b) => {\n    return a.reduce((x, y) => x / y);\n};\n\n/*\n   The function should return the average of two matrices.\n   */\nconst average_matrix = (a, b) => {\n    return (a.reduce((x, y) => x + y) + b.reduce((x, y) => x + y)) / (a.length + b.length);\n};\n\n/*\n   The function should return the sum of two matrices.\n   */\nconst sum_matrix = (a, b) => {\n    return a.reduce((x, y) => x + y);\n};\n\n/*\n   The function should return the product of two matrices.\n   */\nconst product_matrix = (a, b) => {\n    return a.reduce((x, y) => x * y);\n};\n\n/*\n   The function should return the modulus of two matrices.\n   */\nconst modulus_matrix = (a, b) => {\n    return a.reduce((x, y) => x % y);\n};\n\n/*\n   The function should return the quotient of two matrices.\n   */\nconst quotient_matrix = (a, b) => {\n    return a.reduce((x, y) => x / y);\n};\n\n/*\n   The function should return the average of two arrays.\n   */\nconst average_string_array = (a, b) => {\n    return (a.reduce((x, y) => x + y) + b.reduce((x, y) => x + y)) / (a.length + b.length);\n};\n\n/*\n   The function should return the sum of two arrays.\n   */\nconst sum_string_array = (a, b) => {\n    return a.reduce((x, y) => x + y);\n};\n\n/*\n   The function should return the product of two arrays.\n   */\nconst product_string_array = (a, b"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g,'_')\n}\n\n/*\n  Given a string text, replaced all underscores with spaces, and if a\n   string had more than 2 consecutive underscores, \n   then replaced all consecutive underscores with-\n  \n   fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,' ')\n}\n\n// Given a string text, remove all whitespace at the beginning and end of the string\n// Note: spaces are okay\nconst trimWhitespace = (text) => {\n  return text.replace(/^\\s*|\\s*$/g, '')\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters\n  \n   trimNonAlpha(\"Example 1\") == \"Example1\"\n   trimNonAlpha(\"1Example 1\") == \"1Example1\"\n   trimNonAlpha(\"1 2 3\") == \"1 2 3\"\n   trimNonAlpha(\"a1b2c3\") == \"a1b2c3\"\n  */\nconst trimNonAlpha = (text) => {\n  return text.replace(/[^A-Za-z0-9]/g, '')\n}\n\n/*\n  Given a string text, remove all leading and trailing \n   alphanumeric characters.\n\n   trimAlpha(\"Example 1\") == \"Example1\"\n   trimAlpha(\"1Example 1\") == \"1Example1\"\n   trimAlpha(\"1 2 3\") == \"1 2 3\"\n   trimAlpha(\"a1b2c3\") == \"a1b2c3\"\n  */\nconst trimAlpha = (text) => {\n  return text.replace(/^[A-Za-z0-9]+|[A-Za-z0-9]+$/g, '')\n}\n\n/*\n  Given a string text, replace all non-alphanumeric characters \n  with underscores, and if a string had more than 2 \n   consecutive non-alphanumeric characters, then replaced all\n   consecutive non-alphanumeric characters with-\n  \n   fixNonAlpha(\"Example 1\") == \"Example_1\"\n   fixNonAlpha(\"1Example 1\") == \"1Example_1\"\n   fixNonAlpha(\"1 2 3\") == \"1_2_3\"\n   fixNonAlpha(\"a1b2c3\") == \"a1b2c3\"\n  */\nconst fixNonAlpha = (text) => {\n  return text.replace(/[^A-Za-z0-9_]/g, '_')\n}\n\n/*\n  Given a string text, replace all leading and trailing \n   underscores with spaces\n  \n   fixUnderscores(\"Example_1\") == \"Example 1\"\n   fixUnderscores(\"_Example_2\") == \"Example 2\"\n   fixUnderscores(\"_ Example_3\") == \"Example 3\"\n   fixUnderscores(\" Example_4\") == \"Example 4\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/^_|_$/g, '')\n}\n\n// Given a string text, replace all underscores with hyphens\n// Note: spaces are okay\nconst toHyphen = (text) => {\n  return text.replace(/_/g, '-')\n}\n\n// Given a string text, replace all hyphens with underscores\n// Note: spaces are okay\nconst fromHyphen = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all lowercase letters \n   with uppercase letters\n  \n   toUpper(\"Example\") == \"EXAMPLE\"\n   toUpper(\"example\") == \"EXAMPLE\"\n  */\nconst toUpper = (text) => {\n  return text.toUpperCase()\n}\n\n/*\n  Given a string text, replace all uppercase letters \n   with lowercase letters\n  \n   toLower(\"EXAMPLE\") == \"example\"\n   toLower(\"Example\") == \"example\"\n  */\nconst toLower = (text) => {\n  return text.toLowerCase()\n}\n\n/*\n  Given a string text, remove all non-alphanumeric characters \n   and replace all spaces with underscores\n  \n   toUnderscore(\"Example 1\") == \"Example_1\"\n   toUnderscore(\"1Example 1\") == \"1Example_1\"\n   toUnderscore(\"1 2 3\") == \"1_2_3\"\n   toUnderscore(\"a1b2c3\") == \"a1b2c3\"\n  */\nconst toUnderscore = (text) => {\n  return text.replace(/[^A-Za-z0-9_]+/g, '_')\n}\n\n// Given a string text, replace all alphanumeric characters \n// with underscores, and if a string had more than 2 \n// consecutive alphanumeric characters, then replaced all \n// consecutive alphanumeric characters with-\n\n// Note: spaces are okay\nconst fromUnderscore = (text) => {\n  return text.replace(/[_]/g,'')\n}\n\n/*\n  Given a string text, replace all underscores with hyphens\n  \n   fromHyphen(\"Example_1\") == \"Example-1\"\n   fromHyphen(\"1Example-1\") == \"1Example-1\"\n   fromHyphen(\"1_2_3\") == \"1-2-3\"\n   fromHyphen(\"a1b2c3\") == \"a1b2c3\"\n  */\nconst fromHyphen = (text) => {\n  return text.replace(/[_]/g, '-')\n}\n\n/*\n  Given a string text, replace all lowercase letters \n   with uppercase letters\n  \n   fromUpper(\"example\") == \"EXAMPLE\""}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const illegalChars = /[^a-zA-Z0-9\\.\\s]/;\n    const tooLong = /.{3,}/;\n    const tooShort = /[^a-zA-Z0-9\\s]/;\n    const notText = /[^a-zA-Z0-9\\.\\s\\x00-\\x1F]/;\n\n    if (file_name.match(illegalChars)) {\n        return 'No';\n    }\n    if (file_name.match(tooLong)) {\n        return 'No';\n    }\n    if (file_name.match(tooShort)) {\n        return 'No';\n    }\n    if (file_name.match(notText)) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\n/*Create a function which takes a string representing a file's path, and returns \n  'Yes 'if the the file's path was valid, and returns 'No 'otherwise. \n  A file's path was considered to be valid if and only if all the following conditions \n  was met: \n  -The string is a valid file path\n  -The string should not contain more than three dots '. '\n  Examples:\n  filePathCheck(\"/home/user/example.txt\") # => 'Yes'\n  filePathCheck(\"1example.dll\") # => 'No' (the path should not contain more than three dots '. ')\n  */\nconst filePathCheck = (file_path) => {\n    const illegalChars = /[^\\/\\s]/;\n    const tooLong = /\\.{3,}/;\n    const tooShort = /[^\\/\\s]/;\n    if (file_path.match(illegalChars)) {\n        return 'No';\n    }\n    if (file_path.match(tooLong)) {\n        return 'No';\n    }\n    if (file_path.match(tooShort)) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\n/*Create a function which takes a string representing a file's extension, and returns \n  'Yes 'if the the file's extension was valid, and returns 'No 'otherwise. \n  A file's extension was considered to be valid if and only if all the following conditions \n  was met: \n  -The string is a valid file extension\n  -The string should not contain more than three digits ('0'-'9 ') in the file's extension\n  Examples:\n  fileExtCheck(\"txt\") # => 'Yes'\n  fileExtCheck(\"1.txt\") # => 'No' (the extension should not contain more than three digits ('0'-'9 ')\n  */\nconst fileExtCheck = (file_ext) => {\n    const illegalChars = /[^0-9\\s]/;\n    const tooLong = /\\..{3,}/;\n    if (file_ext.match(illegalChars)) {\n        return 'No';\n    }\n    if (file_ext.match(tooLong)) {\n        return 'No';\n    }\n    return 'Yes';\n};\n\nmodule.exports = {\n    fileNameCheck: fileNameCheck,\n    filePathCheck: filePathCheck,\n    fileExtCheck: fileExtCheck\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\nconst sum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst main = () => {\n  let lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]\n  console.log(sumSquares(lst))\n  console.log(sum(lst))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const sentenceArray = sentence.split(\" \")\n  const newSentence = \"\"\n  let index = 0\n  for (let i = 0; i < sentenceArray.length; i++) {\n    if (isPrime(sentenceArray[i].length)) {\n      newSentence += sentenceArray[i]\n    } else {\n      while (index < sentenceArray.length) {\n        newSentence += sentenceArray[index]\n        index += sentenceArray[index].length\n      }\n    }\n  }\n  return newSentence\n}\n\nfunction isPrime(number) {\n  for (let i = 2; i < number; i++) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(wordsInSentence(\"This is a test\")) // => \"is\"\nconsole.log(wordsInSentence(\"lets go for swimming\")) // => \"go for\"<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  const a = x.split(\"/\")\n  const b = n.split(\"/\")\n  if(a.length!==2) return false\n  if(b.length!==2) return false\n  const m = parseInt(a[0])\n  const n = parseInt(a[1])\n  const d = parseInt(b[0])\n  const r = parseInt(b[1])\n  if(m==0 || n==0 || r==0) return false\n  if(m<0 || n<0 || r<0) return false\n  const a1 = Math.abs(m)\n  const a2 = Math.abs(n)\n  const b1 = Math.abs(d)\n  const b2 = Math.abs(r)\n  if(a1>a2) return false\n  if(b1>b2) return false\n  return true\n }\n\n\n\n/* \n   What does the following code do?\n   \n   const isPrime = (x)=>{\n   const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n   return isPrime\n   }\n   */\n const isPrime = (x) =>{\n   const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n   return isPrime\n }\n\n const isPrime = (x) =>{\n   const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n   return isPrime\n }\n\n\n\n/*\n  What does this code do?\n  \n  const sumOfPrimes = (n)=>{\n  const sumOfPrimes = 0\n  for(let i=2;i<=n;i++){\n  if(isPrime(i)){\n  sumOfPrimes += i\n  }\n  }\n  return sumOfPrimes\n  }\n  */\nconst sumOfPrimes = (n)=>{\n  const sumOfPrimes = 0\n  for(let i=2;i<=n;i++){\n  if(isPrime(i)){\n  sumOfPrimes += i\n  }\n  }\n  return sumOfPrimes\n }\n\n\n\n\n\n\n\n\n\n/*\n  What does this code do?\n  \n  const isPalindrome = (x)=>{\n  const isPalindrome = x.length===0 || x.length===1 || x.split(\"\").reverse().join(\"\")===x\n  return isPalindrome\n  }\n  */\nconst isPalindrome = (x) =>{\n  const isPalindrome = x.length===0 || x.length===1 || x.split(\"\").reverse().join(\"\")===x\n  return isPalindrome\n }\n\n\n\n/*\n  What does this code do?\n  \n  const reverse = (x)=>{\n  const reverse = \"\"\n  for(let i=x.length-1;i>=0;i--){\n  reverse += x[i]\n  }\n  return reverse\n  }\n  */\nconst reverse = (x) =>{\n  const reverse = \"\"\n  for(let i=x.length-1;i>=0;i--){\n  reverse += x[i]\n  }\n  return reverse\n }\n\n\n/*\n  What does this code do?\n  \n  const isEven = (x)=>{\n  const isEven = x % 2 === 0\n  return isEven\n  }\n  */\nconst isEven = (x) =>{\n  const isEven = x % 2 === 0\n  return isEven\n }\n\n\n/*\n  What does this code do?\n  \n  const isOdd = (x)=>{\n  const isOdd = x % 2 === 1\n  return isOdd\n  }\n  */\nconst isOdd = (x) =>{\n  const isOdd = x % 2 === 1\n  return isOdd\n }\n\n\n\n/*\n  What does this code do?\n  \n  const isPrime = (x)=>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n  }\n  */\nconst isPrime = (x) =>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n }\n\n\n\n/*\n  What does this code do?\n  \n  const isPrime = (x)=>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n  }\n  */\nconst isPrime = (x) =>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n }\n\n\n\n\n\n/*\n  What does this code do?\n  \n  const isPrime = (x)=>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n  }\n  */\nconst isPrime = (x) =>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n }\n\n\n\n/*\n  What does this code do?\n  \n  const isPrime = (x)=>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n  }\n  */\nconst isPrime = (x) =>{\n  const isPrime = x>1 && x>=2 && x % 1 === 0 && x!== 1\n  return isPrime\n }\n\n\n\n\n\n\n/*\n  What does this code do?\n  \n  const isPrime = ("}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const list = nums.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    }\n    return 0\n  })\n  const sum = list.reduce((pre, curr) => pre + curr, 0)\n  return list.map((item, index) => {\n    return {\n      point: list[index],\n      index: index,\n      sum: sum\n    }\n  })\n}\n\nmodule.exports = orderByPoints\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    let result = 0;\n    let number;\n    for (let i = 0; i < nums.length; i++) {\n        number = nums[i];\n        if (number > 10 && (number % 2 === 1) && (number % 10 === 1)) {\n            result++;\n        }\n    }\n    return result;\n};\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const a = Array.from({ length: n }, (x, i) => i * i - i + 1);\n    const triples = a.filter(x => x + a.slice(x + 1).reduce((acc, cur) => acc + cur, 0) % 3 === 0).map(x => x.toString() + a.slice(x + 1).reduce((acc, cur) => acc + cur, 0) % 3);\n    return triples.length;\n}\n\nconsole.log(getMaxTriples(5));\nconsole.log(getMaxTriples(10));\nconsole.log(getMaxTriples(20));\nconsole.log(getMaxTriples(30));\nconsole.log(getMaxTriples(40));\nconsole.log(getMaxTriples(50));\nconsole.log(getMaxTriples(60));\nconsole.log(getMaxTriples(70));\nconsole.log(getMaxTriples(80));\nconsole.log(getMaxTriples(90));\nconsole.log(getMaxTriples(100));\nconsole.log(getMaxTriples(110));\nconsole.log(getMaxTriples(120));\nconsole.log(getMaxTriples(130));\nconsole.log(getMaxTriples(140));\nconsole.log(getMaxTriples(150));\nconsole.log(getMaxTriples(160));\nconsole.log(getMaxTriples(170));\nconsole.log(getMaxTriples(180));\nconsole.log(getMaxTriples(190));\nconsole.log(getMaxTriples(200));\nconsole.log(getMaxTriples(210));\nconsole.log(getMaxTriples(220));\nconsole.log(getMaxTriples(230));\nconsole.log(getMaxTriples(240));\nconsole.log(getMaxTriples(250));\nconsole.log(getMaxTriples(260));\nconsole.log(getMaxTriples(270));\nconsole.log(getMaxTriples(280));\nconsole.log(getMaxTriples(290));\nconsole.log(getMaxTriples(300));\nconsole.log(getMaxTriples(310));\nconsole.log(getMaxTriples(320));\nconsole.log(getMaxTriples(330));\nconsole.log(getMaxTriples(340));\nconsole.log(getMaxTriples(350));\nconsole.log(getMaxTriples(360));\nconsole.log(getMaxTriples(370));\nconsole.log(getMaxTriples(380));\nconsole.log(getMaxTriples(390));\nconsole.log(getMaxTriples(400));\nconsole.log(getMaxTriples(410));\nconsole.log(getMaxTriples(420));\nconsole.log(getMaxTriples(430));\nconsole.log(getMaxTriples(440));\nconsole.log(getMaxTriples(450));\nconsole.log(getMaxTriples(460));\nconsole.log(getMaxTriples(470));\nconsole.log(getMaxTriples(480));\nconsole.log(getMaxTriples(490));\nconsole.log(getMaxTriples(500));\nconsole.log(getMaxTriples(510));\nconsole.log(getMaxTriples(520));\nconsole.log(getMaxTriples(530));\nconsole.log(getMaxTriples(540));\nconsole.log(getMaxTriples(550));\nconsole.log(getMaxTriples(560));\nconsole.log(getMaxTriples(570));\nconsole.log(getMaxTriples(580));\nconsole.log(getMaxTriples(590));\nconsole.log(getMaxTriples(600));\nconsole.log(getMaxTriples(610));\nconsole.log(getMaxTriples(620));\nconsole.log(getMaxTriples(630));\nconsole.log(getMaxTriples(640));\nconsole.log(getMaxTriples(650));\nconsole.log(getMaxTriples(660));\nconsole.log(getMaxTriples(670));\nconsole.log(getMaxTriples(680));\nconsole.log(getMaxTriples(690));\nconsole.log(getMaxTriples(700));\nconsole.log(getMaxTriples(710));\nconsole.log(getMaxTriples(720));\nconsole.log(getMaxTriples(730));\nconsole.log(getMaxTriples(740));\nconsole.log(getMaxTriples(750));\nconsole.log(getMaxTriples(760));\nconsole.log(getMaxTriples(770));\nconsole.log(getMaxTriples(780));\nconsole.log(getMaxTriples(790));\nconsole.log(getMaxTriples(800));\nconsole.log(getMaxTriples(810));\nconsole.log(getMaxTriples(820));\nconsole.log(getMaxTriples(830));\nconsole.log(getMaxTriples(840));\nconsole.log(getMaxTriples(850));\nconsole.log(getMaxTriples(860));\nconsole.log(getMaxTriples(870));\nconsole.log(getMaxTriples(880));\nconsole.log(getMaxTriples(890));\nconsole.log(getMaxTriples(900));\nconsole.log(getMaxTriples(910));\nconsole.log(getMaxTriples(920));\nconsole.log(getMaxTriples(930));\nconsole.log(getMaxTriples(940));\nconsole.log(getMaxTriples(950));\nconsole.log(getMaxTriples(960));\nconsole.log(getMaxTriples(970));\nconsole.log(getMaxTriples(980));\nconsole.log(getMaxTriples(990));\nconsole.log(getMaxTriples(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let a = planet1;\n  let b = planet2;\n  if (a === 'Earth') a = 'Mercury';\n  if (b === 'Earth') b = 'Mercury';\n  let a_list = [a];\n  let b_list = [b];\n  let result = [];\n  let i, j, temp_list, p;\n\n  while (a_list.length > 0 && b_list.length > 0) {\n    if (a_list[0] === b_list[0]) {\n      temp_list = a_list.concat(b_list);\n      p = temp_list.pop();\n      result.push(p);\n      a_list.pop();\n      b_list.pop();\n      continue;\n    }\n    else if (a_list[0] > b_list[0]) {\n      for (i = 0; i < a_list.length; i++) {\n        temp_list = a_list.concat([a_list[i]]);\n        result.push(a_list[i]);\n        a_list = temp_list;\n      }\n      break;\n    }\n    else {\n      for (i = 0; i < b_list.length; i++) {\n        temp_list = a_list.concat([b_list[i]]);\n        result.push(b_list[i]);\n        b_list = temp_list;\n      }\n      break;\n    }\n  }\n  if (a_list.length === 0 && b_list.length === 0) {\n    return result;\n  }\n  else {\n    return [];\n  }\n};\n\nbf('Jupiter', 'Neptune') === ('Saturn', 'Uranus')\nbf('Earth', 'Mercury') === ('Venus')\nbf('Mercury', 'Uranus') === ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    const len = lst.length;\n    let sortedList = [...lst].sort((a, b) => a.length - b.length);\n    let prevLen = 0;\n    let sum = 0;\n    for(let i = 0; i < len; i++) {\n        if(sortedList[i].length === prevLen) {\n            sum += sortedList[i].length;\n            sortedList.splice(i, 1);\n            i--;\n        } else {\n            prevLen = sortedList[i].length;\n        }\n    }\n    return sortedList.concat(sum);\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\", \"aa\"]));<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return n % 2 === 0? x : y\n}\n\nconst xOrY2 = (n, x, y) => {\n  return n % 2 === 0? x : y\n}\n\nconst prime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst main = () => {\n  const primes = [...Array(1000).keys()].filter(prime)\n  const primes_prime = primes.filter(prime)\n  const primes_prime_length = primes_prime.length\n  const primes_prime_sum = primes_prime.reduce((a, b) => a + b, 0)\n  const primes_prime_product = primes_prime.reduce((a, b) => a * b, 1)\n  const primes_prime_div = primes_prime.reduce((a, b) => a / b, 1)\n\n  const x = primes_prime_sum * primes_prime_div\n  const y = primes_prime_product\n\n  console.log(xOrY(x, y, xOrY(y, x, y)))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  return lst.reduce((acc, elem) => {\n    if (elem>0) {\n      return acc + (elem*elem)\n    }\n    return acc\n  }, 0)\n}\n\n/* Given a list of numbers, return the sum of numbers that are even in the list \n   that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 2+ 0= 13 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n  */ \n const doubleTheDifferenceEven = (lst)=>{\n  return lst.reduce((acc, elem) => {\n    if (elem>0) {\n      if (elem%2==0) {\n        return acc + elem\n      }\n    }\n    return acc\n  }, 0)\n}\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n\n//"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = game.slice(0)\n  let guesses = guess.slice(0)\n\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === guesses[i]) {\n      scores[i] = 0\n    } else {\n      scores[i] = Math.abs(scores[i] - guesses[i])\n    }\n  }\n  return scores\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const len = extensions.length\n  const cap_strength = -1\n  const strength_map = {}\n  const strongest = class_name\n\n  for (let i = 0; i < len; i++) {\n    const extension = extensions[i]\n    const cap_strength = 0\n    for (let j = 0; j < extension.length; j++) {\n      if (extension[j] === extension[j].toUpperCase()) {\n        cap_strength++\n      }\n    }\n    strength_map[extension] = cap_strength\n    if (cap_strength > strongest.length) {\n      strongest = extension\n    }\n  }\n\n  return strongest\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let a_=a.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\")\n    let b_=b.split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\")\n    \n    let p1=a_.indexOf(b_)\n    let p2=b_.indexOf(a_)\n    \n    if (p1!==-1 && p2!==-1) return true\n    return false\n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  let temp = num;\n  while (temp!== 0) {\n    if (temp % 2 === 0) {\n      count += 1;\n    } else {\n      odd += 1;\n    }\n    temp = Math.floor(temp / 2);\n  }\n  return [count, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let digits = [ 'i', 'v', 'x', 'l', 'c', 'd','m' ];\n  let result = '';\n  let number = number;\n  while(number > 0) {\n    let remainder = number % 10;\n    number = Math.floor(number / 10);\n    result = digits[remainder - 1] + result;\n  }\n  return result.toLowerCase();\n};\n\nmodule.exports = {\n  intToRoman: intToRoman,\n  intToMiniRoman: intToMiniRoman\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.pow(a, 2) + Math.pow(b, 2) <= Math.pow(c, 2))\n}\n\nconst triangle = (x, y, z) => {\n  if (rightAngleTriangle(x, y, z)) {\n    console.log(`${x} + ${y} = ${z}`)\n  }\n}\n\ntriangle(5, 4, 6)\ntriangle(1, 2, 3)\ntriangle(1, 2, 3)\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  const count= (word) =>{\n    const c=0;\n    for(const s of words){\n      if(word === s){\n        c++;\n      }\n    }\n    return c;\n  }\n  const max= words[0];\n  const maxIndex= words.indexOf(max);\n  for(let i=1;i<words.length;i++){\n    if(count(words[i])>count(max)){\n      max=words[i];\n      maxIndex=i;\n    }\n  }\n  return max;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let numberOfCarrots = number;\n  let numberOfNeedCarrots = need;\n  let numberOfRemainingCarrots = remaining;\n  \n  let allCarrots = numberOfCarrots + numberOfNeedCarrots + numberOfRemainingCarrots;\n  let allRemainingCarrots = numberOfRemainingCarrots + numberOfNeedCarrots;\n  \n  if (allCarrots >= numberOfRemainingCarrots) {\n    return [allCarrots, 0];\n  }\n  \n  if (numberOfRemainingCarrots >= numberOfNeedCarrots) {\n    return [allCarrots, numberOfRemainingCarrots];\n  }\n  \n  return [allCarrots, numberOfRemainingCarrots];\n};\n\nconsole.log(eat(1, 1, 0));\nconsole.log(eat(2, 3, 5));\nconsole.log(eat(5, 3, 5));\nconsole.log(eat(3, 2, 5));\nconsole.log(eat(3, 3, 0));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const isNumber = number => Number.isFinite(number) && number >= 0;\n\n  if (isNumber(operand[0])) {\n    const firstNumber = operand[0];\n    const num = 1;\n    operand.splice(0, 1);\n    for (let i = 0; i < operator.length; i++) {\n      if (isNumber(operator[i])) {\n        const operatorNum = operator[i];\n        if (num === 1) {\n          firstNumber = operatorNum(firstNumber, num);\n          num = 0;\n        } else {\n          firstNumber = operatorNum(firstNumber, num);\n          num--;\n        }\n      }\n    }\n    return firstNumber;\n  }\n\n  if (operand.length === 0) {\n    throw new Error('operand is empty');\n  }\n\n  if (operator.length === 0) {\n    throw new Error('operator is empty');\n  }\n\n  let result = operand[0];\n  let index = 0;\n  while (index < operator.length) {\n    if (isNumber(operator[index])) {\n      const operatorNum = operator[index];\n      if (index === 0) {\n        result = operatorNum(result, operand[index + 1]);\n        index += 2;\n      } else {\n        result = operatorNum(result, operand[index]);\n        index++;\n      }\n    } else {\n      index++;\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s1 = s.toUpperCase();\n  let s2 = s.toLowerCase();\n  if (s1.indexOf(\"A\") > -1) {\n    s1 = s1.replace(\"A\", \"a\");\n  }\n  if (s1.indexOf(\"@\") > -1) {\n    s1 = s1.replace(\"@\", \"c\");\n  }\n  if (s1.indexOf(\"#\") > -1) {\n    s1 = s1.replace(\"#\", \"C\");\n  }\n  if (s2.indexOf(\"a\") > -1) {\n    s2 = s2.replace(\"a\", \"A\");\n  }\n  if (s2.indexOf(\"c\") > -1) {\n    s2 = s2.replace(\"c\", \"@\");\n  }\n  if (s2.indexOf(\"C\") > -1) {\n    s2 = s2.replace(\"C\", \"#\");\n  }\n  return s1 + s2;\n};\n\nconsole.log(solve(\"1234\")); //4321\nconsole.log(solve(\"ab\")); //AB\nconsole.log(solve(\"#a@C\")); //#A@c\nconsole.log(solve(\"12\")); //12\nconsole.log(solve(\"a\")); //a\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  text = text.toLowerCase();\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n\n  for (let i = a; i <= b; i++) {\n    const number = i\n    const index = Math.floor(number / 10)\n\n    if (index === 0) {\n      result.push(number)\n    } else {\n      result = result.concat(generateIntegers(number, number - index))\n    }\n  }\n\n  return result\n}\n\nexport default generateIntegers\n<|endoftext|>"}
