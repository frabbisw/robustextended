{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length === 1) {\n    return false;\n  }\n  const first = numbers[0];\n  const last = numbers[numbers.length - 1];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const current = numbers[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements3 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements6 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements7 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements8 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements9 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements10 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements11 = (numbers, threshold) => {\n  const arr = [...new Set(numbers)];\n  const first = arr[0];\n  const last = arr[arr.length - 1];\n  for (let i = 0; i < arr.length - 1; i++) {\n    const current = arr[i];\n    if (Math.abs(last - current) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst hasCloseElements12 = (numbers, threshold) => {\n  const arr = [...new Set(numbers"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const stack = ['']\n  const output = []\n  const stack_index = 0\n  \n  for (let i = 0; i < paren_string.length; i++) {\n    let c = paren_string.charAt(i)\n    \n    if (c === ')') {\n      if (stack_index === 0) {\n        output.push(stack.pop())\n      } else {\n        stack[stack_index] = stack[stack_index].replace(/\\(/g, '')\n        stack[stack_index] = stack[stack_index].replace(/\\)/g, '')\n        stack[stack_index] = stack[stack_index].replace(/\\(/g, '')\n      }\n    } else if (c === '(') {\n      stack[stack_index] += c\n    } else if (c ==='') {\n      continue\n    } else {\n      stack[stack_index] += c\n    }\n    \n    stack_index += 1\n  }\n  \n  return output\n}\n\n/*\n  Given a string, check if it's a palindrome.\n  The definition of a palindrome comes from the Wikipedia article on the topic \"Palindrome\".\n  You are given a string, s, and your function should return true if s is a palindrome, false otherwise.\n  Ignored any spaces in the input string.\n  >>> isPalindrome('abc abc abcd')\n  True\n  >>> isPalindrome('a b c d')\n  False\n  >>> isPalindrome('  a b c d')\n  False\n  >>> isPalindrome(' abc abcd')\n  False\n  >>> isPalindrome('a b c d')\n  True\n  >>> isPalindrome('  a b c d')\n  True\n  */\nconst isPalindrome = (string) => {\n  let i = 0\n  let j = string.length - 1\n  \n  while (i < j) {\n    if (string.charAt(i)!== string.charAt(j)) {\n      return false\n    }\n    \n    i += 1\n    j -= 1\n  }\n  \n  return true\n}\n\n/*\n  Given two strings, s1 and s2, return the longest string that is a concatenation of both strings.\n  If no such string exists, return null.\n  Ignored any spaces in the input strings.\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('', '')\n  ''\n  >>> concatenate('a', 'b')\n  'ab'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  >>> concatenate('abc', 'abc')\n  'abcabc'\n  "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let intPart = number.toFixed(0);\n  let decPart = number - parseInt(number);\n\n  if (decPart === 0) {\n    return intPart;\n  } else {\n    return intPart + '.' + decPart;\n  }\n};\n\nconst validateUserInput = (userInput) => {\n  let userInputLength = userInput.length;\n  let userInputLower = userInput.toLowerCase();\n\n  if (userInputLength > 0) {\n    if (userInputLower.indexOf('.') === -1 && userInputLower.indexOf('.') === -1) {\n      userInput += '.00';\n    }\n\n    if (userInputLength > 1) {\n      if (userInputLower.indexOf('.') === -1) {\n        userInput += '.00';\n      }\n\n      if (userInputLower.indexOf('.')!== -1 && userInputLower.indexOf('.')!== -1) {\n        userInput = userInput.substr(0, userInput.indexOf('.'));\n      }\n\n      if (userInputLower.indexOf('.')!== -1 && userInputLower.indexOf('.')!== -1) {\n        userInput += '.00';\n      }\n\n      if (userInputLower.indexOf('.')!== -1) {\n        userInput = userInput.substr(0, userInput.indexOf('.'));\n      }\n    }\n\n    if (userInputLength > 2) {\n      if (userInputLower.indexOf('.')!== -1) {\n        userInput += '.00';\n      }\n    }\n\n    if (userInputLength > 3) {\n      if (userInputLower.indexOf('.')!== -1) {\n        userInput += '.00';\n      }\n    }\n  }\n\n  return userInput;\n};\n\nexport {\n  validateUserInput,\n  truncateNumber,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const i = operations.length - 1\n  const prev = operations[i]\n  let sum = 0\n  let prevVal = prev\n  while (i >= 0) {\n    const current = operations[i]\n    sum += current\n    if (sum < 0) {\n      return true\n    }\n    prevVal = prev\n    prev = current\n    i -= 1\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return (numbers.length > 0)\n   ? (Math.abs(numbers[0] - Math.mean(numbers)) / Math.mean(numbers))\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst standardDeviation = (numbers) => {\n  return (numbers.length > 0)\n   ? Math.sqrt(\n        (\n          (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n          (numbers.length - 1)\n        )\n      )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   variance of this dataset. \n   Variance is the average of the squares of the differences between each element \n   and the mean. \n   >>> variance([1.0, 2.0, 3.0, 4.0])\n   3.1622776601683795\n  */\nconst variance = (numbers) => {\n  return (numbers.length > 0)\n   ? (\n      (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n      (numbers.length)\n    )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst sampleStandardDeviation = (numbers) => {\n  return (numbers.length > 1)\n   ? (\n      Math.sqrt(\n        (\n          (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n          (numbers.length - 1)\n        )\n      )\n    )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst sampleStandardDeviation = (numbers) => {\n  return (numbers.length > 1)\n   ? (\n      Math.sqrt(\n        (\n          (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n          (numbers.length - 1)\n        )\n      )\n    )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst sampleVariance = (numbers) => {\n  return (numbers.length > 1)\n   ? (\n      (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n      (numbers.length - 1)\n    )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst sampleVariance = (numbers) => {\n  return (numbers.length > 1)\n   ? (\n      (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n      (numbers.length - 1)\n    )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst sampleVariance = (numbers) => {\n  return (numbers.length > 1)\n   ? (\n      (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n      (numbers.length - 1)\n    )\n    : 0.0;\n};\n\n/* For a given list of numbers, calculate the \n   standard deviation of this dataset. \n   Standard deviation is the average of the absolute differences between each \n   element and the mean. \n   >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n   1.5811388300841898\n  */\nconst sampleVariance = (numbers) => {\n  return (numbers.length > 1)\n   ? (\n      (Math.pow(Math.mean(numbers), 2) - (Math.pow(numbers[0], 2))) /\n      (numbers.length - 1)\n    )\n    : 0.0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let intersperseNums = [];\n  const n = numbers.length;\n  if(n === 0) {\n    return [];\n  }\n  const m = n - 1;\n  for(let i = 0; i < m; i += 1) {\n    intersperseNums.push(numbers[i]);\n    intersperseNums.push(delimeter);\n  }\n  intersperseNums.push(numbers[m]);\n  return intersperseNums;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const paren_stack = [paren_list.pop()];\n\n  while (paren_list.length > 0) {\n    const new_paren = paren_list.shift();\n    if (new_paren === ')') {\n      paren_stack.pop();\n      if (paren_stack.length === 0) {\n        return paren_stack.length;\n      }\n    } else if (new_paren === '(') {\n      paren_stack.push(paren_list.shift());\n    }\n  }\n};\n\n// Test code\nconst parseNestedParensTest = () => {\n  assert.equal(parseNestedParens('(()()) ((())) () ((())()())'), 2);\n  assert.equal(parseNestedParens('(()()) () ((())()())'), 2);\n  assert.equal(parseNestedParens('(()()) () ()'), 1);\n  assert.equal(parseNestedParens('() ()'), 0);\n};\n\nparseNestedParensTest();\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  let filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySubstringArray = (strings, substring) => {\n  return filterBySubstring(strings.map(s => s.toLowerCase()), substring.toLowerCase());\n};\n\n// filter an array of strings that contains the given substring\nconst filterBySub"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = sum(numbers)\n  const product = product(numbers)\n\n  return [sum, product]\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let i = 0\n  let max = numbers[0]\n  while (i < numbers.length - 1) {\n    if (numbers[i + 1] > max) {\n      max = numbers[i + 1]\n    }\n    i += 1\n  }\n  return max\n}\n\n/* From a given list of integers, generate a list of rolling maximum element found until give moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  let max = 0\n  let i = 0\n  while (i < numbers.length - 1) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n    i += 1\n  }\n  return max\n}\n\nconst rollingMax3 = (numbers) => {\n  let max = 0\n  let i = 0\n  while (i < numbers.length - 1) {\n    if (numbers[i + 1] > max) {\n      max = numbers[i + 1]\n    }\n    i += 1\n  }\n  return max\n}\n\n/*\n  Given a list of integers, generate a list of the rolling maximum element found until give moment \n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n   var prefix = longestPalindromePrefix(string);\n   return prefix.concat(reverse(string.slice(0, string.length - prefix.length)));\n}\n\n/* Return the longest postfix that was a palindrome.\n   Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePrefix = (string) => {\n   var postfix = longestPalindromePostfix(string);\n   return reverse(string.slice(0, string.length - postfix.length));\n}\n\n/* Return the longest postfix that was a palindrome.\n   Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var prefix = longestPalindromePrefix(string);\n   return string.slice(string.length - prefix.length);\n}\n\n/*\n  Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var postfix = longestPalindromePostfix(string);\n   return reverse(string.slice(0, string.length - postfix.length));\n}\n\n/* \n  Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var prefix = longestPalindromePrefix(string);\n   return string.slice(string.length - prefix.length);\n}\n\n/* \n  Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var prefix = longestPalindromePrefix(string);\n   return reverse(string.slice(0, string.length - prefix.length));\n}\n\n/* Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var postfix = longestPalindromePostfix(string);\n   return reverse(string.slice(0, string.length - postfix.length));\n}\n\n/* Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var prefix = longestPalindromePrefix(string);\n   return reverse(string.slice(0, string.length - prefix.length));\n}\n\n/* Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst longestPalindromePostfix = (string) => {\n   var prefix = longestPalindromePrefix(string);\n   return reverse(string.slice(0, string.length - prefix.length));\n}\n\n/* Find the longest postfix that was a palindrome.\n  Algorithm idea was simple:\n  -Find the longest postfix of supplied string that was a palindrome.\n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('cata')\n  'cata'\n  >>> make"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const strA = a.split('').map((char) => char === '1'? '1' : '0');\n  const strB = b.split('').map((char) => char === '1'? '1' : '0');\n\n  const len = Math.min(strA.length, strB.length);\n  const res = strA.slice(0, len);\n\n  for (let i = 0; i < len; i += 1) {\n    if (strA[i]!== strB[i]) {\n      res[i] = '1';\n    }\n  }\n  return res.join('');\n};\n\nconsole.log(stringXor('010', '110'));<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  return strings.reduce((max, current) => {\n    if (current.length > max.length) {\n      return current\n    }\n    return max\n  }, strings[0])\n}\n\n/**\n  * Return the shortest string from the list of strings. Returned the first one in case of multiple \n  * strings of the same length. Return null in case the input list was empty.\n  >>> shortest([])\n\n  >>> shortest(['a', 'b', 'c'])\n  'a'\n  >>> shortest(['a', 'bb', 'ccc'])\n  'a'\n  */\nconst shortest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  return strings.reduce((min, current) => {\n    if (current.length < min.length) {\n      return current\n    }\n    return min\n  }, strings[0])\n}\n\n/**\n  * Return the first string in the list that contains the given character. Return null if the list\n  * is empty or the given character is not in the list.\n  >>> contains('abc', 'a')\n\n  >>> contains('abc', 'z')\n  null\n  >>> contains('abc', 'b')\n  'b'\n  */\nconst contains = (str, char) => {\n  if (char === '') {\n    return null\n  }\n  return str.split('').findIndex((c) => char === c)\n}\n\n/**\n  * Return the first string in the list that does not contain the given character. Return null if\n  * the list is empty or the given character is in the list.\n  >>> containsNot('abc', 'a')\n\n  >>> containsNot('abc', 'a')\n  null\n  >>> containsNot('abc', 'b')\n  null\n  */\nconst containsNot = (str, char) => {\n  if (char === '') {\n    return null\n  }\n  return str.split('').filter((c) => char!== c).join('')\n}\n\nmodule.exports = {\n  longest,\n  shortest,\n  contains,\n  containsNot\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let a_x, b_x, t;\n\n  while (b) {\n    t = a;\n    a = b;\n    b = t % b;\n  }\n\n  return a;\n};\n\nconst largestPowerOfTwo = (n) => {\n  let p = 2;\n  while (p <= n) p <<= 1;\n  return p;\n};\n\nconst max = (a, b) => a > b? a : b;\n\nconst pow = (x, n) => x ** n;\n\nconst sum = (a, b) => a + b;\n\nconst mod = (a, m) => a % m;\n\nconst gcd = (a, b) => greatestCommonDivisor(a, b);\n\nconst lcm = (a, b) => largestCommonMultiple(a, b);\n\nconst lcm2 = (a, b) => largestCommonMultiple(a, b);\n\nconst min = (a, b) => a < b? a : b;\n\nconst modpow = (a, b, m) => mod(a, m) ** b;\n\nconst modpow2 = (a, b, m) => mod(a, m) ** b;\n\nconst gcdpow = (a, b, m) => gcd(a, b) ** m;\n\nconst gcdpow2 = (a, b, m) => gcd(a, b) ** m;\n\nconst sumpow = (a, b, m) => sum(a, b) ** m;\n\nconst sumpow2 = (a, b, m) => sum(a, b) ** m;\n\nconst mulpow = (a, b, m) => a * b ** m;\n\nconst mulpow2 = (a, b, m) => a * b ** m;\n\nconst pow2 = (n) => n ** 2;\n\nconst gcdpow2 = (a, b, m) => gcd(a, b) ** 2;\n\nconst modpow2 = (a, b, m) => mod(a, m) ** 2;\n\nconst modpow4 = (a, b, m) => mod(a, m) ** 4;\n\nconst modpow8 = (a, b, m) => mod(a, m) ** 8;\n\nconst gcdpow4 = (a, b, m) => gcd(a, b) ** 4;\n\nconst gcdpow8 = (a, b, m) => gcd(a, b) ** 8;\n\nconst gcdpow16 = (a, b, m) => gcd(a, b) ** 16;\n\nconst modpow16 = (a, b, m) => mod(a, m) ** 16;\n\nconst modpow32 = (a, b, m) => mod(a, m) ** 32;\n\nconst modpow64 = (a, b, m) => mod(a, m) ** 64;\n\nconst modpow128 = (a, b, m) => mod(a, m) ** 128;\n\nconst pow16 = (n) => n ** 16;\n\nconst modpow16 = (a, b, m) => mod(a, m) ** 16;\n\nconst modpow32 = (a, b, m) => mod(a, m) ** 32;\n\nconst modpow64 = (a, b, m) => mod(a, m) ** 64;\n\nconst modpow128 = (a, b, m) => mod(a, m) ** 128;\n\nconst modpow256 = (a, b, m) => mod(a, m) ** 256;\n\nconst modpow512 = (a, b, m) => mod(a, m) ** 512;\n\nconst modpow1024 = (a, b, m) => mod(a, m) ** 1024;\n\nconst modpow2048 = (a, b, m) => mod(a, m) ** 2048;\n\nconst modpow4096 = (a, b, m) => mod(a, m) ** 4096;\n\nconst modpow8192 = (a, b, m) => mod(a, m) ** 8192;\n\nconst modpow16384 = (a, b, m) => mod(a, m) ** 16384;\n\nconst modpow32768 = (a, b, m) => mod(a, m) ** 32768;\n\nconst modpow65536 = (a, b, m) => mod(a, m) ** 65536;\n\nconst modpow131072 = (a, b, m) => mod(a, m) ** 131072;\n\nconst modpow262144 = (a, b, m) => mod(a, m) ** 262144;\n\nconst modpow524288 = (a, b, m) => mod(a, m) ** 524288;\n\nconst modpow1048576 = (a, b, m) => mod(a, m) ** 1048576;\n\nconst modpow2097152 = (a, b, m) => mod(a, m) ** 2097152;\n\nconst modpow4194304 = (a, b, m) => mod(a, m) ** 4194304;\n\nconst modpow8388608 = (a, b, m) => mod(a, m) ** 8388608;\n\nconst modpow16777216 = (a, b, m) => mod(a, m) ** 16777216;\n\nconst modpow33554432 = (a, b, m) => mod(a, m) ** 33554432;\n\nconst modpow67108864 = (a, b, m) => mod(a, m) ** 67108864;\n\nconst modpow134217728 = (a, b, m) => mod(a, m) ** 134217728;\n\nconst modpow268435456 = (a, b, m) => mod(a, m) ** 268435456;\n\nconst modpow536870912 = (a, b, m) => mod(a, m) ** 536870912;\n\nconst modpow1073741824"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    result.push(prefix);\n  }\n  return result.concat(allPrefixes(string.slice(1)));\n}\n\n// Return list of all prefixes of the input string with one extra character\nconst allPrefixesWithExtraChar = (string) => {\n  if (string.length <= 2) {\n    return [string];\n  }\n  const result = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    result.push(prefix);\n  }\n  return result.concat(allPrefixesWithExtraChar(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string with one extra character\nconst allSuffixesWithExtraChar = (string) => {\n  if (string.length <= 2) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixesWithExtraChar(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string with one extra character\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all strings with one extra character\nconst allStrings = (string) => {\n  if (string.length <= 2) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allStrings(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allSuffixes(string.slice(1)));\n}\n\n// Return list of all suffixes of the input string\nconst allSuffixes = (string) => {\n  if (string.length <= 1) {\n    return [string];\n  }\n  const result = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix = string[i] + suffix;\n    result.push(suffix);\n  }\n  return result.concat(allS"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += ` ${i} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(3, 3)\n  '0 1 2'\n  >>> stringSequence(0, 0)\n  '0'\n  */\nconst stringSequenceWithLimit = (n, limit) => {\n  let result = '';\n  for (let i = 0; i < limit; i++) {\n    result += ` ${i} `;\n  }\n  if (n > limit) {\n    result += ` ${n - limit} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '*')\n  '0 1 2'\n  >>> stringSequence(3, 3, '*')\n  '0 1 2'\n  >>> stringSequence(0, 0, '*')\n  '0'\n  >>> stringSequence(0, 0, '*', 3)\n  '0 0 0'\n  */\nconst stringSequenceWithLimitAndReplacement = (n, limit, replacement) => {\n  let result = '';\n  for (let i = 0; i < limit; i++) {\n    result += ` ${i} `;\n  }\n  if (n > limit) {\n    result += ` ${n - limit} ${replacement} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '*', '!')\n  '0 1 2'\n  >>> stringSequence(3, 3, '*', '!')\n  '0 1 2'\n  >>> stringSequence(0, 0, '*', '!')\n  '0'\n  >>> stringSequence(0, 0, '*', '!', 3)\n  '0 0 0'\n  */\nconst stringSequenceWithLimitAndReplacementAndLimit = (n, limit, replacement) => {\n  let result = '';\n  for (let i = 0; i < limit; i++) {\n    result += ` ${i} `;\n  }\n  if (n > limit) {\n    result += ` ${n - limit} ${replacement} `;\n  }\n  return result;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '*', '!', '*')\n  '0 1 2'\n  >>> stringSequence(3, 3, '*', '!', '*')\n  '0 1 2'\n  >>> stringSequence(0, 0, '*', '!', '*')\n  '0'\n  >>> stringSequence(0, 0, '*', '!', '*', 3)\n  '0 0 0'\n  */\nconst stringSequenceWithLimitAndReplacementAndLimitAndReplacement = (n, limit, replacement) => {\n  let result = '';\n  for (let i = 0; i < limit; i++) {\n    result += ` ${i} `;\n  }\n  if (n > limit) {\n    result += ` ${n - limit} ${replacement} `;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const counts = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (!counts.has(char)) {\n      counts.set(char, 0);\n    }\n    counts.set(char, counts.get(char) + 1);\n  }\n  return counts.size;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const arr = [];\n  const curr = '';\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      if (curr === 'o') {\n        arr.push(4);\n        curr = '';\n      } else if (curr === '|') {\n        arr.push(2);\n        curr = '';\n      } else {\n        curr += music_string[i];\n      }\n    } else if (music_string[i] === 'o|') {\n      if (curr === 'o') {\n        arr.push(4);\n        curr = '';\n      } else if (curr === '|') {\n        arr.push(2);\n        curr = '';\n      } else {\n        curr += music_string[i];\n      }\n    } else if (music_string[i] === '.') {\n      if (curr === 'o') {\n        arr.push(4);\n        curr = '';\n      } else if (curr === '|') {\n        arr.push(2);\n        curr = '';\n      } else {\n        curr += music_string[i];\n      }\n    } else {\n      curr += music_string[i];\n    }\n  }\n  if (curr!== '') {\n    arr.push(curr.length);\n  }\n  return arr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const i = string.indexOf(substring);\n  if (i === -1) {\n    return 0;\n  }\n  const last = i + substring.length;\n  const count = 0;\n  while (i!== last) {\n    i += 1;\n    count += 1;\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const num = numbers.split(\" \").map(Number);\n  num.sort((a, b) => a - b);\n  return num.join(\" \");\n};\n\n/*\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n\nconst sortLetters = (letters) => {\n  const sortedLetters = letters.split(\" \").sort();\n  return sortedLetters.join(\" \");\n};\n\n/*\n  >>> sortLetters('one three five')\n  'one three five'\n  */\n\nconst sortWords = (words) => {\n  const sortedWords = words.split(\" \").sort();\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWords('one three five')\n  'one three five'\n  */\n\nconst sortSentence = (sentence) => {\n  const sortedSentence = sentence.split(\" \").sort();\n  return sortedSentence.join(\" \");\n};\n\n/*\n  >>> sortSentence('one three five')\n  'one three five'\n  */\n\nconst sortAlphabet = (alphabet) => {\n  const sortedLetters = alphabet.split(\" \").sort();\n  return sortedLetters.join(\" \");\n};\n\n/*\n  >>> sortAlphabet('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLength = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => b.length - a.length);\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWordsByLength('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLengthReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => a.length - b.length);\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWordsByLengthReverse('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLengthAndLetter = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => b.length - a.length);\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWordsByLengthAndLetter('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLengthAndLetterReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => a.length - b.length);\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWordsByLengthAndLetterReverse('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLengthAndLetterAndLetter = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => b.length - a.length);\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWordsByLengthAndLetterAndLetterReverse('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLengthAndLetterAndLetterReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => a.length - b.length);\n  return sortedWords.join(\" \");\n};\n\nconst sortWordsByLengthAndLetterAndLetterReverseReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => b.length - a.length);\n  return sortedWords.join(\" \");\n};\n\n/*\n  >>> sortWordsByLengthAndLetterAndLetterReverseReverse('one three five')\n  'one three five'\n  */\n\nconst sortWordsByLengthAndLetterAndLetterReverseReverseReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => a.length - b.length);\n  return sortedWords.join(\" \");\n};\n\nconst sortWordsByLengthAndLetterAndLetterReverseReverseReverseReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => a.length - b.length);\n  return sortedWords.join(\" \");\n};\n\nconst sortWordsByLengthAndLetterAndLetterReverseReverseReverseReverse = (words) => {\n  const sortedWords = words.split(\" \").sort((a, b) => a.length - b.length);\n  return sortedWords.join(\" \");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  // Get the two closest numbers in our list\n  const closest1 = getClosestNumber(numbers[0], numbers);\n  const closest2 = getClosestNumber(numbers[1], numbers);\n  return [closest1[0], closest2[1]];\n};\n\n/**\n * From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> getClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> getClosestNumber([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst getClosestNumber = (num, numbers) => {\n  // Return an array with the two closest numbers\n  const closestNumbers = [];\n  // If we're looking at an empty list, return an empty array\n  if (numbers.length === 0) {\n    return closestNumbers;\n  }\n\n  // If we're looking at a single number, return an array with that number\n  if (numbers.length === 1) {\n    closestNumbers.push(numbers[0]);\n  }\n\n  // If we're looking at more than one number, sort the list and get the two closest numbers\n  else {\n    // Sort the list\n    numbers.sort((num1, num2) => {\n      return num1 - num2;\n    });\n    // Get the first two numbers\n    closestNumbers.push(numbers[0]);\n    closestNumbers.push(numbers[1]);\n  }\n\n  // Return the two closest numbers\n  return closestNumbers;\n};\n\n/**\n * Given a list of numbers, return the sum of all the numbers.\n  >>> sumNumbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  15.0\n  >>> sumNumbers([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  15.0\n  */\nconst sumNumbers = (numbers) => {\n  // Return the sum of all the numbers\n  return numbers.reduce((sum, number) => {\n    return sum + number;\n  }, 0);\n};\n\nmodule.exports = {\n  findClosestElements,\n  getClosestNumber,\n  sumNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const unit = Math.max(Math.abs(numbers[0]), Math.abs(numbers[numbers.length - 1]))\n  return numbers.map((x) => x / unit)\n}\n\nconst isOdd = (x) => x % 2 === 1\n\nconst isEven = (x) => x % 2 === 0\n\nconst toRad = (x) => x * Math.PI / 180\n\nconst toDeg = (x) => x * 180 / Math.PI\n\nconst degToRad = (x) => x * Math.PI / 180\n\nconst radToDeg = (x) => x * 180 / Math.PI\n\nconst add = (x, y) => x + y\n\nconst subtract = (x, y) => x - y\n\nconst multiply = (x, y) => x * y\n\nconst divide = (x, y) => x / y\n\nconst isInteger = (x) => x % 1 === 0\n\nconst isZero = (x) => x === 0\n\nconst isPositive = (x) => x > 0\n\nconst isNegative = (x) => x < 0\n\nconst isNonNegative = (x) => x >= 0\n\nconst isNonPositive = (x) => x <= 0\n\nconst isBetween = (x, min, max) => x >= min && x <= max\n\nconst isGreaterThan = (x, y) => x > y\n\nconst isGreaterThanOrEqual = (x, y) => x >= y\n\nconst isLessThan = (x, y) => x < y\n\nconst isLessThanOrEqual = (x, y) => x <= y\n\nconst isEqual = (x, y) => x === y\n\nconst mod = (x, y) => x % y\n\nconst round = (x, y) => Math.round(x / y) * y\n\nconst floor = (x) => Math.floor(x)\n\nconst ceil = (x) => Math.ceil(x)\n\nconst trunc = (x) => Math.trunc(x)\n\nconst truncate = (x, y) => trunc(x) <= trunc(y)? x : y\n\nconst abs = (x) => Math.abs(x)\n\nconst min = (x, y) => Math.min(x, y)\n\nconst max = (x, y) => Math.max(x, y)\n\nconst roundUp = (x, y) => Math.ceil(x / y) * y\n\nconst roundDown = (x, y) => Math.floor(x / y) * y\n\nconst random = (x) => Math.random() * x\n\nconst pow = (x, y) => Math.pow(x, y)\n\nconst sqrt = (x) => Math.sqrt(x)\n\nconst exp = (x) => Math.exp(x)\n\nconst log = (x) => Math.log(x)\n\nconst ln = (x) => Math.log(x)\n\nconst sin = (x) => Math.sin(x)\n\nconst cos = (x) => Math.cos(x)\n\nconst tan = (x) => Math.tan(x)\n\nconst asin = (x) => Math.asin(x)\n\nconst acos = (x) => Math.acos(x)\n\nconst atan = (x) => Math.atan(x)\n\nconst atan2 = (x, y) => Math.atan2(x, y)\n\nconst degrees = (x) => toDeg(x)\n\nconst radians = (x) => toRad(x)\n\nconst radiansToDegrees = (x) => toDeg(radians(x))\n\nconst radiansToGrad = (x) => toRad(x) / (Math.PI / 180)\n\nconst radiansToGrad2 = (x) => toRad(x) / (2 * Math.PI / 180)\n\nconst radiansToGrad3 = (x) => toRad(x) / (3 * Math.PI / 180)\n\nconst radiansToGrad4 = (x) => toRad(x) / (4 * Math.PI / 180)\n\nconst radiansToGrad5 = (x) => toRad(x) / (5 * Math.PI / 180)\n\nconst radiansToGrad6 = (x) => toRad(x) / (6 * Math.PI / 180)\n\nconst radiansToGrad7 = (x) => toRad(x) / (7 * Math.PI / 180)\n\nconst radiansToGrad8 = (x) => toRad(x) / (8 * Math.PI / 180)\n\nconst radiansToGrad9 = (x) => toRad(x) / (9 * Math.PI / 180)\n\nconst radiansToGrad10 = (x) => toRad(x) / (10 * Math.PI / 180)\n\nconst radiansToGrad11 = (x) => toRad(x) / (11 * Math.PI / 180)\n\nconst radiansToGrad12 = (x) => toRad(x) / (12 * Math.PI / 180)\n\nconst radiansToGrad13 = (x) => toRad(x) / (13 * Math.PI / 180)\n\nconst radiansToGrad14 = (x) => toRad(x) / (14 * Math.PI / 180)\n\nconst radiansToGrad15 = (x) => toRad(x) / (15 * Math.PI / 180)\n\nconst radiansToGrad16 = (x) => toRad(x) / (16 * Math.PI / 180)\n\nconst radiansToGrad17 = (x) => toRad(x) / (17 * Math.PI / 180)\n\nconst radiansToGrad18 = (x) => toRad(x) / (18 * Math.PI / 180)\n\nconst radiansToGrad19 = (x) => toRad(x) / (19 * Math.PI / 180)\n\nconst radiansToGrad20 = (x) => toRad(x) / (20 * Math.PI /"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjects = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object') {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with string keys\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithStringKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with number keys\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithNumberKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with boolean keys\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithBooleanKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with object keys\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithObjectKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with array keys\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithArrayKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      results.push(value);\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with string keys and integer values\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithStringAndIntegerKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      if (typeof value === 'number') {\n        results.push(value);\n      }\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with string keys and float values\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithStringAndFloatKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      if (typeof value === 'number') {\n        results.push(value);\n      }\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with string keys and boolean values\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithStringAndBooleanKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      if (typeof value === 'boolean') {\n        results.push(value);\n      }\n    }\n  });\n  return results;\n};\n\n/**\n * Filter out all objects with string keys and object values\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithStringAndObjectKeys = (values) => {\n  const results = [];\n  values.forEach((value) => {\n    if (typeof value!== 'object' || Object.keys(value).length === 0) {\n      if (typeof value === 'object') {\n        results.push(value);\n      "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = 0\n  for (let i = 0, n = string.length; i < n; i++) {\n    len++\n  }\n  return len\n}\n\n/**\n  * Return number of times given char appears in given string\n  *\n  * @param {string} string\n  * @param {string} char\n  * @return {number}\n  *\n  * @example\n  * const str = 'abcdefghijklmn'\n  * const char = 'c'\n  *\n  * const result = countChars(str, char)\n  * // result = 2\n  *\n  * @see\n  * [How many times a character appears in a string?](http://stackoverflow.com/questions/19496915/how-many-times-a-character-appears-in-a-string)\n  */\nconst countChars = (string, char) => {\n  let count = 0\n  for (let i = 0, n = string.length; i < n; i++) {\n    if (string[i] === char) {\n      count++\n    }\n  }\n  return count\n}\n\n/**\n  * Return boolean value whether given string contains given char\n  *\n  * @param {string} string\n  * @param {string} char\n  * @return {boolean}\n  *\n  * @example\n  * const str = 'abcdefghijklmn'\n  * const char = 'c'\n  *\n  * const result = containsChar(str, char)\n  * // result = true\n  *\n  * @see\n  * [Does string contain given char?](http://stackoverflow.com/questions/23306715/does-string-contain-given-char)\n  */\nconst containsChar = (string, char) => {\n  for (let i = 0, n = string.length; i < n; i++) {\n    if (string[i] === char) {\n      return true\n    }\n  }\n  return false\n}\n\n/**\n  * Return boolean value whether given string is a palindrome\n  *\n  * @param {string} string\n  * @return {boolean}\n  *\n  * @example\n  * const str = 'abcdefghijklmn'\n  * const result = isPalindrome(str)\n  * // result = true\n  *\n  * @see\n  * [Is string a palindrome?](https://en.wikipedia.org/wiki/Palindrome)\n  */\nconst isPalindrome = (string) => {\n  if (strlen(string)!== string.length) {\n    return false\n  }\n\n  let i = 0, n = string.length\n  while (i < n) {\n    if (string[i]!== string[n - i - 1]) {\n      return false\n    }\n    i++\n  }\n\n  return true\n}\n\n/**\n  * Return boolean value whether given string is a palindrome\n  *\n  * @param {string} string\n  * @return {boolean}\n  *\n  * @example\n  * const str = 'abcd'\n  * const result = isPalindrome(str)\n  * // result = true\n  *\n  * @see\n  * [Is string a palindrome?](https://en.wikipedia.org/wiki/Palindrome)\n  */\nconst isPalindrome2 = (string) => {\n  const n = strlen(string)\n  for (let i = 0, j = n - 1; i < j; i++, j--) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n  * Return boolean value whether given string is a palindrome\n  *\n  * @param {string} string\n  * @return {boolean}\n  *\n  * @example\n  * const str = 'abc'\n  * const result = isPalindrome(str)\n  * // result = false\n  *\n  * @see\n  * [Is string a palindrome?](https://en.wikipedia.org/wiki/Palindrome)\n  */\nconst isPalindrome3 = (string) => {\n  const n = strlen(string)\n  let i = 0, j = n - 1\n\n  while (i < j) {\n    if (string[i]!== string[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n\n  return true\n}\n\nexport default {\n  countChars,\n  containsChar,\n  isPalindrome,\n  isPalindrome2,\n  isPalindrome3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const d = {};\n  for (let i = 1; i < n; i++) {\n    const div = n / i;\n    if (!d[div]) d[div] = i;\n    else {\n      if (d[div] > i) d[div] = i;\n    }\n  }\n  return largest(Object.keys(d));\n}\n\nconsole.log(largestDivisor(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let primes = []\n  let factors = []\n\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      primes.push(i)\n      factors.push(n / i)\n    }\n  }\n  return [...primes,...factors]\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var list = []\n  for (var i = 0; i < numbers.length; i++) {\n    if (list.indexOf(numbers[i]) === -1) {\n      list.push(numbers[i])\n    }\n  }\n  return list\n}\n\n/**\n  * Convert a list of strings to an array of strings.\n  * @param {Array} list\n  * @return {Array}\n  * @example\n  *  >>> convertToArray(['1', '2', '3'])\n  *  ['1', '2', '3']\n  */\nconst convertToArray = (list) => {\n  var array = []\n  for (var i = 0; i < list.length; i++) {\n    array.push(list[i])\n  }\n  return array\n}\n\n/**\n  * From a list of strings, removed all elements that occurred more than once. \n  * @param {Array} list\n  * @return {Array}\n  * @example\n  *  >>> convertToArray(['1', '2', '3', '3', '4'])\n  *  ['1', '2', '4']\n  */\nconst convertToArrayUnique = (list) => {\n  var array = []\n  for (var i = 0; i < list.length; i++) {\n    if (array.indexOf(list[i]) === -1) {\n      array.push(list[i])\n    }\n  }\n  return array\n}\n\n/**\n  * From a list of strings, remove all strings that were not a number. \n  * @param {Array} list\n  * @return {Array}\n  * @example\n  *  >>> convertToArray(['1', '2', '3'])\n  *  ['1', '2', '3']\n  */\nconst convertToArrayNoNumbers = (list) => {\n  var array = []\n  for (var i = 0; i < list.length; i++) {\n    if (isInteger(list[i])) {\n      array.push(list[i])\n    }\n  }\n  return array\n}\n\n/**\n  * Return a string containing the first ten elements of the given list. \n  * @param {Array} list\n  * @return {String}\n  * @example\n  *  >>> convertToArray(['1', '2', '3'])\n  *  ['1', '2', '3']\n  */\nconst convertToString = (list) => {\n  var string = \"\"\n  for (var i = 0; i < 10; i++) {\n    string += list[i]\n  }\n  return string\n}\n\nmodule.exports = {\n  removeDuplicates,\n  convertToArray,\n  convertToArrayUnique,\n  convertToArrayNoNumbers,\n  convertToString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase()\n  })\n}\n\n/* For a given string, check if it contains a number */\nconst containsNumber = (string) => {\n  return /\\d+/.test(string)\n}\n\n/* For a given string, check if it contains a letter */\nconst containsLetter = (string) => {\n  return /[a-zA-Z]+/.test(string)\n}\n\n/* For a given string, check if it contains a uppercase letter */\nconst containsUppercaseLetter = (string) => {\n  return /[A-Z]+/.test(string)\n}\n\n/* For a given string, check if it contains a lowercase letter */\nconst containsLowercaseLetter = (string) => {\n  return /[a-z]+/.test(string)\n}\n\n/* For a given string, check if it contains a letter and a number */\nconst containsLetterAndNumber = (string) => {\n  return containsLetter(string) && containsNumber(string)\n}\n\n/* For a given string, check if it contains a uppercase letter and a number */\nconst containsUppercaseLetterAndNumber = (string) => {\n  return containsUppercaseLetter(string) && containsNumber(string)\n}\n\n/* For a given string, check if it contains a lowercase letter and a number */\nconst containsLowercaseLetterAndNumber = (string) => {\n  return containsLowercaseLetter(string) && containsNumber(string)\n}\n\n/* For a given string, check if it contains a letter, a number and a space */\nconst containsLetterAndNumberAndSpace = (string) => {\n  return containsLetterAndNumber(string) && containsSpace(string)\n}\n\n/* For a given string, check if it contains a uppercase letter, a number and a space */\nconst containsUppercaseLetterAndNumberAndSpace = (string) => {\n  return containsUppercaseLetterAndNumber(string) && containsSpace(string)\n}\n\n/* For a given string, check if it contains a lowercase letter, a number and a space */\nconst containsLowercaseLetterAndNumberAndSpace = (string) => {\n  return containsLowercaseLetterAndNumber(string) && containsSpace(string)\n}\n\n/* For a given string, check if it contains a letter, a number, a space and an underscore */\nconst containsLetterAndNumberAndSpaceAndUnderscore = (string) => {\n  return containsLetterAndNumberAndSpace(string) && containsUnderscore(string)\n}\n\n/* For a given string, check if it contains a uppercase letter, a number, a space and an underscore */\nconst containsUppercaseLetterAndNumberAndSpaceAndUnderscore = (string) => {\n  return containsUppercaseLetterAndNumberAndSpace(string) && containsUnderscore(string)\n}\n\n/* For a given string, check if it contains a lowercase letter, a number, a space and an underscore */\nconst containsLowercaseLetterAndNumberAndSpaceAndUnderscore = (string) => {\n  return containsLowercaseLetterAndNumberAndSpace(string) && containsUnderscore(string)\n}\n\n/* For a given string, check if it contains a letter, a number, a space, an underscore and a dash */\nconst containsLetterAndNumberAndSpaceAndUnderscoreAndDash = (string) => {\n  return containsLetterAndNumberAndSpaceAndUnderscore(string) && containsDash(string)\n}\n\n/* For a given string, check if it contains a uppercase letter, a number, a space, an underscore and a dash */\nconst containsUppercaseLetterAndNumberAndSpaceAndUnderscoreAndDash = (string) => {\n  return containsUppercaseLetterAndNumberAndSpaceAndUnderscore(string) && containsDash(string)\n}\n\n/* For a given string, check if it contains a lowercase letter, a number, a space, an underscore and a dash */\nconst containsLowercaseLetterAndNumberAndSpaceAndUnderscoreAndDash = (string) => {\n  return containsLowercaseLetterAndNumberAndSpaceAndUnderscore(string) && containsDash(string)\n}\n\n/* For a given string, check if it contains a letter, a number, a space, an underscore, a dash and a period */\nconst containsLetterAndNumberAndSpaceAndUnderscoreAndDashAndPeriod = (string) => {\n  return containsLetterAndNumberAndSpaceAndUnderscoreAndDash(string) && containsPeriod(string)\n}\n\n/* For a given string, check if it contains a uppercase letter, a number, a space, an underscore, a dash and a period */\nconst containsUppercaseLetterAndNumberAndSpaceAndUnderscoreAndDashAndPeriod = (string) => {\n  return containsUppercaseLetterAndNumberAndSpaceAndUnderscoreAndDash(string) && containsPeriod(string)\n}\n\n/* For a given string, check if it contains a lowercase letter, a number, a space, an underscore, a dash and a period */\nconst containsLowercaseLetterAndNumberAndSpaceAndUnderscoreAndDashAndPeriod = (string) => {\n  return containsLowercaseLetterAndNumberAndSpaceAndUnderscoreAndDash(string) && containsPeriod(string)\n}\n\n/* For a given string, check if it contains a letter, a number, a space, an underscore, a dash, a period and a space */\nconst containsLetterAndNumberAndSpaceAndUnderscoreAndDashAndPeriodAndSpace = (string) => {\n  return containsLetterAndNumberAndSpaceAndUnderscoreAndDash(string) && containsSpace(string)\n}\n\n/* For a given string, check if it contains a uppercase letter, a number, a space, an underscore, a dash, a period and a space */\nconst containsUppercaseLetterAndNumberAndSpaceAndUnderscoreAndDashAndPeriodAndSpace = (string) => {\n  return containsUppercaseLetterAndNumberAndSpaceAndUnderscoreAndDash(string) && containsSpace(string)\n}\n\n/* For a given string, check if it contains a lowercase letter, a number, a space, an underscore, a dash, a period and a space */\nconst containsLowercaseLetterAndNumberAndSpaceAndUnderscoreAndDashAndPeriodAndSpace = (string) => {\n  return containsLowercaseLetterAndNumberAndSpaceAndUnderscoreAndDash(string)"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/*\n  Concatenate list of arrays into a single array\n  >>> concatenate([[], [], []])\n  []\n  >>> concatenate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst concatenateArrays = (arrays) => {\n  let result = []\n  for (let i = 0; i < arrays.length; i++) {\n    result = result.concat(arrays[i])\n  }\n  return result\n}\n\n/*\n  Get the sum of the elements in the list\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (list) => {\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i]\n  }\n  return sum\n}\n\n/*\n  Get the average of the elements in the list\n  >>> average([1, 2, 3])\n  2\n  >>> average([4, 5, 6])\n  5\n  */\nconst average = (list) => {\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i]\n  }\n  return sum / list.length\n}\n\n/*\n  Get the mean of the elements in the list\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([4, 5, 6])\n  5\n  */\nconst mean = (list) => {\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i]\n  }\n  return sum / list.length\n}\n\n/*\n  Get the median of the elements in the list\n  >>> median([1, 2, 3])\n  2\n  >>> median([4, 5, 6])\n  5\n  */\nconst median = (list) => {\n  if (list.length % 2 === 1) {\n    return list[(list.length - 1) / 2]\n  } else {\n    return (list[(list.length - 1) / 2] + list[(list.length - 1) / 2 + 1]) / 2\n  }\n}\n\n/*\n  Find the mode of the elements in the list\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([4, 5, 6])\n  6\n  */\nconst mode = (list) => {\n  let result = null\n  let count = 0\n  for (let i = 0; i < list.length; i++) {\n    if (count === 0) {\n      result = list[i]\n    } else {\n      if (list[i] === result) {\n        count++\n      } else {\n        count--\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Get the mode of the elements in the list\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([4, 5, 6])\n  6\n  */\nconst modeWithCount = (list) => {\n  let result = null\n  let count = 0\n  for (let i = 0; i < list.length; i++) {\n    if (count === 0) {\n      result = list[i]\n    } else {\n      if (list[i] === result) {\n        count++\n      } else {\n        count--\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Get the mode of the elements in the list\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([4, 5, 6])\n  6\n  */\nconst modeWithCounts = (list) => {\n  let result = null\n  let count = 0\n  for (let i = 0; i < list.length; i++) {\n    if (count === 0) {\n      result = list[i]\n    } else {\n      if (list[i] === result) {\n        count++\n      } else {\n        count--\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return the first element of the list\n  >>> first([1, 2, 3])\n  1\n  >>> first([4, 5, 6])\n  4\n  */\nconst first = (list) => {\n  return list[0]\n}\n\n/*\n  Return the last element of the list\n  >>> last([1, 2, 3])\n  3\n  >>> last([4, 5, 6])\n  6\n  */\nconst last = (list) => {\n  return list[list.length - 1]\n}\n\n/*\n  Get the first element of the list\n  >>> first([1, 2, 3])\n  1\n  >>> first([4, 5, 6])\n  4\n  */\nconst firstWithIndex = (list) => {\n  return list[0]\n}\n\n/*\n  Get the last element of the list\n  >>> last([1, 2, 3])\n  3\n  >>> last([4, 5, 6])\n  6\n  */\nconst lastWithIndex = (list) => {\n  return list[list.length - 1]\n}\n\n/*\n  Get the first index of the list\n  >>> firstIndex([1, 2, 3])\n  0\n  >>> firstIndex([4, 5, 6])\n  1\n  */\nconst firstIndex = (list) => {\n  return 0\n}\n\n/*\n  Get the last index of the list\n  >>> lastIndex([1, 2, 3])\n  2\n  >>> lastIndex([4, 5, 6])\n  3\n  */\nconst lastIndex = (list) => {\n  return list.length - 1\n}\n\n/*\n  Get the first element of the list\n  >>> firstWithIndex([1, 2, 3])\n  1\n  >>> firstWithIndex([4, 5, 6])\n  4\n  */\nconst firstWith"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.startsWith(prefix));\n};\n\n/**\n  * Return a list of strings that are in a given input list but are not in a\n  * given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterExcluded = (strings, exclusion) => {\n  return strings.filter((s) =>!exclusion.includes(s));\n};\n\n/**\n  * Create a new array that has a copy of every element in the input array\n  * except for the ones that are in the exclusion list.\n  *\n  * @param {Array} strings The list of strings to be excluded\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterExcludedArray = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncluded = (strings, exclusion) => {\n  return strings.filter((s) =>!exclusion.includes(s));\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArray = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (!strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArrayIncluded = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArrayExcluded = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (!strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArrayIncludedExcluded = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (!strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArrayIncludedInExcluded = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (!strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArrayExcludedInExcluded = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\n/**\n  * Return a list of strings that are in a given input list and that are not in\n  * a given exclusion list.\n  *\n  * @param {Array} strings The list of strings to be searched\n  * @param {Array} exclusion The list of strings to be excluded\n  * @returns {Array}\n  */\nconst filterIncludedArrayIncludedExcludedInExcluded = (strings, exclusion) => {\n  return exclusion.map((s) => {\n    if (!strings.includes(s)) {\n      return s;\n    }\n    return undefined;\n  });\n};\n\nexport {\n  filterByPrefix,\n  filterExcluded,\n  filterExcludedArray,\n  filterIncluded,\n  filterIncludedArray,\n  filterIncludedArrayIncluded,\n  filterIncludedArrayExcluded,\n  filterIncludedArrayIncludedExcluded,\n  filterIncludedArrayExcludedInExcluded,\n  filterIncludedArrayIncludedInExcluded,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  The function removes all the elements that are less than\n  or equal to 'x' from the list.\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8])\n  [4, 5, 6, 7, 8]\n  >>> getPositiveLessThan(2, [1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\n  >>> getPositiveLessThan(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the nth prime number, nth prime numbers are defined as those\n  that are not divisible by any prime less than or equal to nth prime.\n  >>> prime(1)\n  2\n  >>> prime(2)\n  3\n  >>> prime(3)\n  5\n  >>> prime(4)\n  7\n  >>> prime(5)\n  11\n  >>> prime(6)\n  13\n  >>> prime(7)\n  17\n  >>> prime(8)\n  19\n  >>> prime(9)\n  23\n  >>> prime(10)\n  29\n  >>> prime(11)\n  31\n  >>> prime(12)\n  37\n  >>> prime(13)\n  41\n  >>> prime(14)\n  43\n  >>> prime(15)\n  47\n  >>> prime(16)\n  53\n  >>> prime(17)\n  59\n  >>> prime(18)\n  67\n  >>> prime(19)\n  71\n  >>> prime(20)\n  73\n  >>> prime(21)\n  79\n  >>> prime(22)\n  83\n  >>> prime(23)\n  89\n  >>> prime(24)\n  97\n  >>> prime(25)\n  101\n  >>> prime(26)\n  103\n  >>> prime(27)\n  107\n  >>> prime(28)\n  109\n  >>> prime(29)\n  113\n  >>> prime(30)\n  127\n  >>> prime(31)\n  131\n  >>> prime(32)\n  137\n  >>> prime(33)\n  139\n  >>> prime(34)\n  149\n  >>> prime(35)\n  151\n  >>> prime(36)\n  157\n  >>> prime(37)\n  163\n  >>> prime(38)\n  167\n  >>> prime(39)\n  173\n  >>> prime(40)\n  179\n  >>> prime(41)\n  181\n  >>> prime(42)\n  191\n  >>> prime(43)\n  193\n  >>> prime(44)\n  197\n  >>> prime(45)\n  199\n  >>> prime(46)\n  211\n  >>> prime(47)\n  223\n  >>> prime(48)\n  227\n  >>> prime(49)\n  229\n  >>> prime(50)\n  233\n  >>> prime(51)\n  239\n  >>> prime(52)\n  241\n  >>> prime(53)\n  251\n  >>> prime(54)\n  257\n  >>> prime(55)\n  263\n  >>> prime(56)\n  269\n  >>> prime(57)\n  271\n  >>> prime(58)\n  277\n  >>> prime(59)\n  281\n  >>> prime(60)\n  283\n  >>> prime(61)\n  293\n  >>> prime(62)\n  307\n  >>> prime(63)\n  311\n  >>> prime(64)\n  313\n  >>> prime(65)\n  317\n  >>> prime(66)\n  331\n  >>> prime(67)\n  337\n  >>> prime(68)\n  347\n  >>> prime(69)\n  349\n  >>> prime(70)\n  353\n  >>> prime(71)\n  359\n  >>> prime(72)\n  367\n  >>> prime(73)\n  373\n  >>> prime(74)\n  379\n  >>> prime(75)\n  383\n  >>> prime(76)\n  389\n  >>> prime(77)\n  397\n  >>> prime(78)\n  401\n  >>> prime(79)\n  409\n  >>> prime(80)\n  419\n  >>> prime(81)\n  421\n  >>> prime(82)\n  431\n  >>> prime(83)\n  433\n  >>> prime(84)\n  439\n  >>> prime(85)\n  443\n  >>> prime(86)\n  449\n  >>> prime(87)\n  457\n  >>> prime(88)\n  461\n  >>> prime(89)\n  463\n  >>> prime(90)\n  467\n  >>> prime(91)\n  479\n  >>> prime(92)\n  487\n  >>> prime(93)\n  491\n  >>> prime(94)\n  499\n  >>> prime(95)\n  503\n  >>> prime(96)\n  509\n  >>> prime(97)\n  521\n  >>> prime(98)\n  523\n  >>> prime(99)\n  541\n  >>> prime(100)\n  547\n  >>> prime(101)\n  557\n  >>> prime(102)\n  563\n  >>> prime(103)\n  569\n  >>> prime(104)\n  571\n  >>> prime(105)\n  577\n  >>> prime(106)\n  587\n  >>> prime(107)\n  597\n  >>> prime(108)\n  601\n  >>> prime(109)\n  607\n  >>> prime(110)\n  613\n  >>> prime(111)\n  617\n  >>> prime(112)\n  619\n  >>> prime(113)\n  631\n  >>> prime(114)\n  637\n  >>> prime(115)\n  643\n  >>> prime(116)\n  647\n  >>> prime(117)\n  653\n  >>> prime(118)\n  659\n  >>> prime(119)\n  661\n  >>> prime(120)\n  673\n  >>> prime(121)\n  679\n  >>> prime(122)\n  691\n  >>> prime(123)\n  701\n  >>> prime(124)\n  709\n  >>> prime(125)\n  719\n  >>> prime(126)\n  727\n  >>> prime(127)\n  733\n  >>> prime(128)\n  739\n  >>> prime(129)\n  743\n  >>> prime(130)\n  751\n  >>> prime(131)\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if(xs.length%2 === 0) { \n    let middle= Math.floor(xs.length/2);\n    let middleX= xs[middle];\n    let halfOfX= xs.slice(0, middle);\n    let halfOfXMinusX= halfOfX.concat(xs.slice(middle+1));\n    let halfOfXMinusXMinusX= halfOfXMinusX.concat(halfOfX.slice(0, middle));\n    let halfOfXMinusXMinusXPlusX= halfOfXMinusXMinusX.concat([xs[0]]);\n    let halfOfXMinusXMinusXPlusXPlusX= halfOfXMinusXMinusXPlusX.concat([xs[middle]]);\n    if(poly(halfOfXMinusXMinusXPlusX)===0) { \n      return halfOfXMinusXMinusXPlusX; \n    } else if(poly(halfOfXMinusXMinusXPlusXPlusX)===0) { \n      return halfOfXMinusXMinusXPlusXPlusX; \n    }\n  }\n  return [0];\n}\n\n/*\n  Given list of coefficients, it will return the polynomial\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluate = (xs, x)=>{ \n  let fx= poly(xs);\n  if(fx===0) { \n    return null; \n  }\n  return x*fx;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluateAll = (xs, x)=>{ \n  let fxs= poly(xs);\n  let results= [];\n  for(let i=0; i< xs.length; i++) { \n    results.push(x*fxs); \n  }\n  if(results.length===0) { \n    return null; \n  }\n  return results;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluateAllAt = (xs, x)=>{ \n  let fxs= poly(xs);\n  let results= [];\n  for(let i=0; i< xs.length; i++) { \n    results.push(x*fxs); \n  }\n  if(results.length===0) { \n    return null; \n  }\n  return results;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluateAllAtX = (xs, x)=>{ \n  let fxs= poly(xs);\n  let results= [];\n  for(let i=0; i< xs.length; i++) { \n    results.push(fxs); \n  }\n  if(results.length===0) { \n    return null; \n  }\n  return results;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluateAllX = (xs)=>{ \n  let fxs= poly(xs);\n  let results= [];\n  for(let i=0; i< xs.length; i++) { \n    results.push(xs[i]); \n  }\n  if(results.length===0) { \n    return null; \n  }\n  return results;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluateAllXAt = (xs, x)=>{ \n  let fxs= poly(xs);\n  let results= [];\n  for(let i=0; i< xs.length; i++) { \n    results.push(xs[i]); \n  }\n  if(results.length===0) { \n    return null; \n  }\n  return results;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  that evaluates the list at given x.\n  If there is no such polynomial, it will return null.\n  */\nconst evaluateX = (xs)=>{ \n  let fxs= poly(xs);\n  let results= [];\n  for(let i=0; i< xs.length; i++) { \n    results.push(fxs); \n  }\n  if(results.length===0) { \n    return null; \n  }\n  return results;\n}\n\n/*\n  Given list of coefficients, it will return the list of polynomials\n  "}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const divisors = [3, 5, 7, 9];\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < divisors.length; j++) {\n        if (divisors[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\n/*\n  >>> sortThird([1, 2, 3, 3, 5, 6, 8, 9])\n  [1, 2, 3, 5, 6, 8, 9]\n  >>> sortThird([1, 3, 6, 9, 3, 5, 7, 8, 9])\n  [1, 3, 6, 9, 5, 7, 8]\n  >>> sortThird([1, 5, 6, 7, 9, 3, 3, 8, 9])\n  [1, 3, 5, 6, 7, 8, 9]\n  >>> sortThird([1, 2, 3, 5, 7, 9, 3, 5, 8, 9])\n  [1, 2, 3, 5, 7, 8, 9]\n  */\nconst sortThird2 = (l) => {\n  const divisors = [3, 5, 7, 9];\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < divisors.length; j++) {\n        if (divisors[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\nconst sorted = (l) => {\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\n/*\n  >>> sorted([1, 2, 3, 3, 5, 6, 8, 9])\n  [1, 2, 3, 5, 6, 8, 9]\n  >>> sorted([1, 3, 6, 9, 3, 5, 7, 8, 9])\n  [1, 3, 6, 9, 5, 7, 8]\n  >>> sorted([1, 5, 6, 7, 9, 3, 3, 8, 9])\n  [1, 3, 5, 6, 7, 8, 9]\n  >>> sorted([1, 2, 3, 5, 7, 9, 3, 5, 8, 9])\n  [1, 2, 3, 5, 7, 8, 9]\n  */\nconst sorted2 = (l) => {\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\nconst sorted3 = (l) => {\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\nconst sorted4 = (l) => {\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\nconst sorted5 = (l) => {\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      newList[i] = l[i];\n    } else {\n      temp = l[i];\n      for (let j = 0; j < l.length; j++) {\n        if (l[j] === temp) {\n          newList[i] = l[i];\n        }\n      }\n    }\n  }\n  return newList;\n};\n\nconst sorted6 = (l) => {\n  let newList = [], temp = 0;\n  for (let i = 0; i < l.length; i++)"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const sorted = l.slice().sort()\n  let i = 1\n  for (let el of sorted) {\n    if (l.indexOf(el, i)!== i) {\n      l.splice(l.indexOf(el, i), 1)\n      l.splice(i, 0, el)\n    } else {\n      i++\n    }\n  }\n  return l\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity\n  let maxElem = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > maxElem) {\n      maxElem = l[i]\n    }\n  }\n  return maxElem\n}\n\n/* Return the number of elements in the list.\n  >>> length([1, 2, 3])\n  3\n  >>> length([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  10\n  */\nconst length = (l) => l.length\n\n/* Return the first element in the list.\n  >>> first([1, 2, 3])\n  1\n  >>> first([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst first = (l) => l[0]\n\n/* Return the last element in the list.\n  >>> last([1, 2, 3])\n  3\n  >>> last([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst last = (l) => l[l.length - 1]\n\n/* Returns the list without the first element.\n  >>> tail([1, 2, 3])\n  [2, 3]\n  >>> tail([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 2, -3, 3, 9, 0, 123, 1, -10]\n  */\nconst tail = (l) => l.slice(1)\n\n/* Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -40\n  */\nconst sum = (l) => l.reduce((a, b) => a + b, 0)\n\n/* Return the list with the last element removed.\n  >>> delete(tail([1, 2, 3]))\n  [1, 2]\n  >>> delete(tail([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst delete = (l) => {\n  const l2 = tail(l)\n  if (l2.length === 0) {\n    return l\n  }\n  return l.slice(0, l.length - 1)\n}\n\nmodule.exports = {\n  max,\n  length,\n  first,\n  last,\n  delete,\n  sum,\n  tail,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  return (n === 11)? 'Fizz'\n    : (n === 13)? 'Buzz'\n    : (n % 3 === 0)? 'Fizz'\n    : (n % 5 === 0)? 'Buzz'\n    : n;\n}\n\n// console.log(fizzBuzz(15));\n// console.log(fizzBuzz(78));\n// console.log(fizzBuzz(79));\n// console.log(fizzBuzz(1000));\n\n// TEST CODE:\n/*\n  >>> fizzBuzz(15)\n  Fizz\n  >>> fizzBuzz(78)\n  Fizz\n  >>> fizzBuzz(79)\n  Fizz\n  >>> fizzBuzz(1000)\n  FizzBuzz\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = []\n  const odd = []\n  const n = l.length\n  const half = n / 2\n\n  for (let i = 0; i < half; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n\n  if (half === 0) {\n    return even\n  }\n\n  let i = 0\n  while (i < n) {\n    if (i % 2 === 1) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n    i++\n  }\n\n  return [even, odd]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length- 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   encodes string using a cyclic shift encoding.\n  */ \n const encodeCyclicShift= (s)=>{\n   let groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   decodes string by taking input string and replacing the first group of characters by the second group. \n  */ \n const decodeCyclicShift= (s)=>{\n   let groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length- 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   takes as input string and returns the decoded string.\n  */ \n const decode = (s)=>{\n   return s.split('').map((char)=>{\n     switch(char){\n       case 'A': return 'a';\n       case 'B': return 'b';\n       case 'C': return 'c';\n       case 'D': return 'd';\n       case 'E': return 'e';\n       case 'F': return 'f';\n       case 'G': return 'g';\n       case 'H': return 'h';\n       case 'I': return 'i';\n       case 'J': return 'j';\n       case 'K': return 'k';\n       case 'L': return 'l';\n       case 'M': return'm';\n       case 'N': return 'n';\n       case 'O': return 'o';\n       case 'P': return 'p';\n       case 'Q': return 'q';\n       case 'R': return 'r';\n       case 'S': return's';\n       case 'T': return 't';\n       case 'U': return 'u';\n       case 'V': return 'v';\n       case 'W': return 'w';\n       case 'X': return 'x';\n       case 'Y': return 'y';\n       case 'Z': return 'z';\n       case '0': return '0';\n       case '1': return '1';\n       case '2': return '2';\n       case '3': return '3';\n       case '4': return '4';\n       case '5': return '5';\n       case '6': return '6';\n       case '7': return '7';\n       case '8': return '8';\n       case '9': return '9';\n       case 'a': return 'A';\n       case 'b': return 'B';\n       case 'c': return 'C';\n       case 'd': return 'D';\n       case 'e': return 'E';\n       case 'f': return 'F';\n       case 'g': return 'G';\n       case 'h': return 'H';\n       case 'i': return 'I';\n       case 'j': return 'J';\n       case 'k': return 'K';\n       case 'l': return 'L';\n       case'm': return 'M';\n       case 'n': return 'N';\n       case 'o': return 'O';\n       case 'p': return 'P';\n       case 'q': return 'Q';\n       case 'r': return 'R';\n       case's': return 'S';\n       case 't': return 'T';\n       case 'u': return 'U';\n       case 'v': return 'V';\n       case 'w': return 'W';\n       case 'x': return 'X';\n       case 'y': return 'Y';\n       case 'z': return 'Z';\n       default: return char;\n     }\n   });\n }\n\n/*\n   takes as input string and returns the encoded string.\n  */ \n const encode = (s)=>{\n   return encodeCyclic(s);\n }\n\n/*\n   takes as input string and returns the decoded string.\n  */ \n const decode = (s)=>{\n   return decodeCyclic(s);\n }\n\n/*\n   takes as input string and returns the encoded string.\n  */ \n const encodeShift = (s)=>{\n   return encodeCyclicShift(s);\n }\n\n/*\n   takes as input string and returns the decoded string.\n  */ \n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = fibonacci(n);\n  let prime = true;\n\n  if (fib % 2 === 0) {\n    prime = false;\n  }\n\n  for (let i = 3; i <= fib; i += 2) {\n    if (fib % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n\n  return prime;\n};\n\nconst fibonacci = (n) => {\n  let a = 1;\n  let b = 1;\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n  }\n\n  return a;\n};\n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const isZero = l.every(i => i === 0)\n  if(isZero) return false\n  const {length} = l\n  const map = l.reduce((a, b) => {\n    const sum = a + b\n    return [sum, sum - b, sum - a]\n  }, [0, 0, 0])\n  return map.every(i => i === 0)\n}\n\n/**\n  * Given a list of integers, return true if there is at least one element\n  * in the list that is a palindrome. For example,\n  * [1, 2, 3, 2, 1] is a palindrome, but [1, 2, 3, 4] is not.\n  *\n  * @param {number[]} list A list of numbers\n  * @returns {boolean} True if there is at least one element in the list\n  * that is a palindrome.\n  * @example\n  *   palindrome([1, 2, 3, 2, 1])\n  *   // returns true\n  *   palindrome([1, 2, 3, 4])\n  *   // returns false\n  */\nconst isPalindrome = (list) => {\n  const {length} = list\n  let start = 0\n  let end = length - 1\n  while (start < end) {\n    if (list[start]!== list[end]) {\n      return false\n    }\n    start++\n    end--\n  }\n  return true\n}\n\n/**\n  * Given a list of strings, return true if each string in the list is a\n  * palindrome. For example,\n  * [\"A man, a plan, a canal, Panama\", \"Panama, Panama, a canal, A man\"]\n  * is a palindrome, but [\"A man, a plan, a canal, Panama\", \"Panama, Panama,\n  * a canal, A man\"] is not.\n  *\n  * @param {string[]} list A list of strings\n  * @returns {boolean} True if each string in the list is a palindrome.\n  * @example\n  *   palindrome([\"A man, a plan, a canal, Panama\", \"Panama, Panama, a canal, A man\"])\n  *   // returns true\n  *   palindrome([\"A man, a plan, a canal, Panama\", \"Panama, Panama, a canal, A\"])\n  *   // returns false\n  */\nconst isPalindrome = (list) => {\n  const {length} = list\n  for (let i = 0; i < length / 2; i++) {\n    if (list[i]!== list[length - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Given an array of numbers, return true if the array contains all the\n * unique elements in the array. For example,\n * [1, 2, 3, 4, 5] contains all the unique elements [1, 2, 3, 4, 5].\n *\n * @param {number[]} list A list of numbers\n * @returns {boolean} True if the array contains all the unique elements.\n * @example\n *   containsUnique([1, 2, 3, 4, 5])\n *   // returns true\n *   containsUnique([1, 2, 3, 4, 5, 6])\n *   // returns false\n */\nconst containsUnique = (list) => {\n  const {length} = list\n  const map = list.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b)\n    }\n    return a\n  }, [])\n  return map.length === length\n}\n\n/**\n * Given a string, return true if the string contains at least one\n * vowel. For example, \"abcd\" contains a vowel, but \"abcd1\" and \"abcd!\"\n * do not.\n *\n * @param {string} str A string\n * @returns {boolean} True if the string contains a vowel.\n * @example\n *   containsVowel(\"abcd\")\n *   // returns true\n *   containsVowel(\"abcd1\")\n *   // returns false\n */\nconst containsVowel = (str) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  return vowels.some(v => str.indexOf(v)!== -1)\n}\n\nmodule.exports = {\n  triplesSumToZero,\n  isPalindrome,\n  isUnique,\n  containsUnique,\n  containsVowel\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n    let left = 0;\n    let right = 0;\n    let cars = [];\n    let carsLeft = 0;\n    let carsRight = 0;\n    let collisions = 0;\n\n    cars.forEach( (car)=>{\n        carsLeft++;\n        carsRight++;\n    });\n    carsLeft.forEach( (car)=>{\n        if(car.direction == 'left'){\n            left++;\n        }else{\n            right++;\n        }\n    });\n    while(carsLeft.length > 0 && carsRight.length > 0){\n        cars.push({\n            left: carsLeft.pop(),\n            right: carsRight.pop()\n        });\n    }\n    cars.forEach( (car)=>{\n        if(car.left.direction == 'left'){\n            collisions += car.right.position - car.left.position;\n        }else{\n            collisions += car.right.position - car.left.position + 1;\n        }\n    });\n    return collisions;\n}\n\n/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision2= (n)=>{\n    let left = 0;\n    let right = 0;\n    let cars = [];\n    let carsLeft = 0;\n    let carsRight = 0;\n    let collisions = 0;\n    cars.forEach( (car)=>{\n        carsLeft++;\n        carsRight++;\n    });\n    carsLeft.forEach( (car)=>{\n        if(car.direction == 'left'){\n            left++;\n        }else{\n            right++;\n        }\n    });\n    while(carsLeft.length > 0 && carsRight.length > 0){\n        cars.push({\n            left: carsLeft.pop(),\n            right: carsRight.pop()\n        });\n    }\n    cars.forEach( (car)=>{\n        if(car.left.direction == 'left'){\n            collisions += car.right.position - car.left.position;\n        }else{\n            collisions += car.right.position - car.left.position + 1;\n        }\n    });\n    return collisions;\n}\n\n/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision3= (n)=>{\n    let left = 0;\n    let right = 0;\n    let cars = [];\n    let carsLeft = 0;\n    let carsRight = 0;\n    let collisions = 0;\n    cars.forEach( (car)=>{\n        carsLeft++;\n        carsRight++;\n    });\n    carsLeft.forEach( (car)=>{\n        if(car.direction == 'left'){\n            left++;\n        }else{\n            right++;\n        }\n    });\n    while(carsLeft.length > 0 && carsRight.length > 0){\n        cars.push({\n            left: carsLeft.pop(),\n            right: carsRight.pop()\n        });\n    }\n    cars.forEach( (car)=>{\n        if(car.left.direction == 'left'){\n            collisions += car.right.position - car.left.position;\n        }else{\n            collisions += car.right.position - car.left.position + 1;\n        }\n    });\n    return collisions;\n}\n\nmodule.exports = carRaceCollision3;<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return [...l].map(v => v + 1);\n};\n\n/* Return the list of numbers which are greater than 1.\n  >>> isOdd([1, 2, 3])\n  [2, 3]\n  >>> isOdd([2, 3, 1])\n  [2, 3]\n  >>> isOdd([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst isOdd = (l) => {\n  return [...l].filter(v => v % 2 === 1).sort();\n};\n\n/* Return a list of numbers which are divisible by 5.\n  >>> isEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [5, 10]\n  >>> isEven([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5])\n  [2, 4]\n  >>> isEven([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8]\n  */\nconst isEven = (l) => {\n  return [...l].filter(v => v % 2 === 0).sort();\n};\n\n/* Return a list of numbers which are divisible by 3.\n  >>> isDivisibleByThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [3, 6, 9]\n  >>> isDivisibleByThree([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5])\n  [3, 6]\n  >>> isDivisibleByThree([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [3, 6, 9]\n  */\nconst isDivisibleByThree = (l) => {\n  return [...l].filter(v => v % 3 === 0).sort();\n};\n\n/* Return a list of numbers which are divisible by 2.\n  >>> isDivisibleByTwo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 5, 8, 11]\n  >>> isDivisibleByTwo([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5])\n  [2, 5]\n  >>> isDivisibleByTwo([2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 5, 8]\n  */\nconst isDivisibleByTwo = (l) => {\n  return [...l].filter(v => v % 2 === 0).sort();\n};\n\n/* Return a list of numbers which are divisible by 5 or 3.\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  >>> isDivisibleBy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [3, 6, 9, 12, 15, 18, 21, 24]\n  */\nconst isDivisibleBy = (l) => {\n  const numbers = isOdd"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 0) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 1) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 2) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\n/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 3) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\nconst pairsSumToFive = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 5) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\nconst pairsSumToZero = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 0) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\nconst pairsSumToOne = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 1) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\nconst pairsSumToTwo = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 2) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\nconst pairsSumToThree = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 3) {\n            pair.push([l[i], l[i + 1]]);\n        }\n    }\n    return pair.length!== 0;\n}\n\nconst pairsSumToFive = (l) => {\n    let pair = [];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 5) {\n            pair.push([l[i], l"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const isNegative = x < 0\n  const absoluteValue = Math.abs(x)\n\n  if (base === 2) {\n    if (isNegative) {\n      return x.toString(2) + '1'\n    } else {\n      return x.toString(2)\n    }\n  }\n\n  if (isNegative) {\n    return (x / base).toString(base) + changeBase(x % base, base)\n  } else {\n    return (x / base).toString(base)\n  }\n}\n\n// print out a factorial table\nconst factorialTable = (x) => {\n  const table = []\n  const i = 0\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable2 = (x) => {\n  const table = []\n  const i = 0\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable3 = (x) => {\n  const table = []\n  const i = 1\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable4 = (x) => {\n  const table = []\n  const i = 2\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable5 = (x) => {\n  const table = []\n  const i = 3\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable6 = (x) => {\n  const table = []\n  const i = 4\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable7 = (x) => {\n  const table = []\n  const i = 5\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable8 = (x) => {\n  const table = []\n  const i = 6\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable9 = (x) => {\n  const table = []\n  const i = 7\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable10 = (x) => {\n  const table = []\n  const i = 8\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable11 = (x) => {\n  const table = []\n  const i = 9\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable12 = (x) => {\n  const table = []\n  const i = 10\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable13 = (x) => {\n  const table = []\n  const i = 11\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable14 = (x) => {\n  const table = []\n  const i = 12\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable15 = (x) => {\n  const table = []\n  const i = 13\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable16 = (x) => {\n  const table = []\n  const i = 14\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable17 = (x) => {\n  const table = []\n  const i = 15\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable18 = (x) => {\n  const table = []\n  const i = 16\n  while (i <= x) {\n    table.push(changeBase(i, x))\n    i++\n  }\n  console.log(table)\n}\n\n// print out a factorial table\nconst factorialTable19 = (x) => {"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2);\n}\n\n/**\n * Given a triangle and the area of a side, return the length of a\n * hypotenuse.\n  >>> hypotenuse(3, 4)\n  4.0\n  */\nconst hypotenuse = (a, b) => {\n  return Math.sqrt(a * a + b * b);\n}\n\n/**\n * Given a triangle, the perimeter of one side, and the perimeter of the\n * other side, return the length of the third side.\n  >>> thirdSide(3, 4, 12)\n  5.0\n  */\nconst thirdSide = (a, b, c) => {\n  return a + b + c;\n}\n\n/**\n * Given the lengths of two sides of a triangle, return the length of the\n * third side.\n  >>> thirdSide(4, 6, 8)\n  12.0\n  */\nconst thirdSide = (a, b, c) => {\n  return a + b + c;\n}\n\nmodule.exports = {\n  triangleArea,\n  hypotenuse,\n  thirdSide\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else if (n === 3) {\n    return 1\n  } else if (n === 4) {\n    return 2\n  } else if (n === 5) {\n    return 3\n  } else if (n === 6) {\n    return 5\n  } else if (n === 7) {\n    return 8\n  } else if (n === 8) {\n    return 13\n  } else if (n === 9) {\n    return 21\n  } else if (n === 10) {\n    return 34\n  } else if (n === 11) {\n    return 55\n  } else if (n === 12) {\n    return 89\n  } else if (n === 13) {\n    return 144\n  } else if (n === 14) {\n    return 233\n  } else if (n === 15) {\n    return 377\n  } else if (n === 16) {\n    return 668\n  } else if (n === 17) {\n    return 1031\n  } else if (n === 18) {\n    return 1595\n  } else if (n === 19) {\n    return 2584\n  } else if (n === 20) {\n    return 4359\n  } else if (n === 21) {\n    return 6721\n  } else if (n === 22) {\n    return 10946\n  } else if (n === 23) {\n    return 15783\n  } else if (n === 24) {\n    return 25070\n  } else if (n === 25) {\n    return 41752\n  } else if (n === 26) {\n    return 63424\n  } else if (n === 27) {\n    return 92729\n  } else if (n === 28) {\n    return 133864\n  } else if (n === 29) {\n    return 183631\n  } else if (n === 30) {\n    return 244585\n  } else if (n === 31) {\n    return 329641\n  } else if (n === 32) {\n    return 466304\n  } else if (n === 33) {\n    return 584129\n  } else if (n === 34) {\n    return 715264\n  } else if (n === 35) {\n    return 887143\n  } else if (n === 36) {\n    return 1014128\n  } else if (n === 37) {\n    return 1183664\n  } else if (n === 38) {\n    return 1358464\n  } else if (n === 39) {\n    return 1611585\n  } else if (n === 40) {\n    return 1836384\n  } else if (n === 41) {\n    return 2096135\n  } else if (n === 42) {\n    return 2326304\n  } else if (n === 43) {\n    return 2664128\n  } else if (n === 44) {\n    return 2944128\n  } else if (n === 45) {\n    return 3280256\n  } else if (n === 46) {\n    return 3570304\n  } else if (n === 47) {\n    return 3868128\n  } else if (n === 48) {\n    return 4220256\n  } else if (n === 49) {\n    return 4551044\n  } else if (n === 50) {\n    return 4880768\n  } else if (n === 51) {\n    return 5208256\n  } else if (n === 52) {\n    return 5590944\n  } else if (n === 53) {\n    return 5901056\n  } else if (n === 54) {\n    return 6200256\n  } else if (n === 55) {\n    return 6600128\n  } else if (n === 56) {\n    return 6908304\n  } else if (n === 57) {\n    return 7200128\n  } else if (n === 58) {\n    return 7651044\n  } else if (n === 59) {\n    return 8042064\n  } else if (n === 60) {\n    return 8601056\n  } else if (n === 61) {\n    return 8901504\n  } else if (n === 62) {\n    return 9232064\n  } else if (n === 63) {\n    return 9726144\n  } else if (n === 64) {\n    return 10132128\n  } else if (n === 65) {\n    return 10626304\n  } else if (n === 66) {\n    return 11016416\n  } else if (n === 67) {\n    return 11401504\n  } else if (n === 68) {\n    return 11801504\n  } else if (n === 69) {\n    return 12262048\n  } else if (n === 70) {\n    return 12702656\n  } else if (n === 71) {\n    return 13240528\n  } else if (n === 72) {\n    return 13722688\n  } else if (n === 73) {\n    return 14061744\n  } else if (n === 74) {\n    return 14503552\n  } else if (n === 75) {\n    return 14902944\n  } else if (n === 76) {\n    return 15284864\n  } else if (n === 77) {\n    return 15760096\n  } else if (n === 78) {\n    return 16251904\n  } else if (n === 79) {\n    return 16740704\n  } else if (n === 80) {\n    return 17157728\n  } else if (n"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  let middle = sorted.length / 2;\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2;\n  } else {\n    return sorted[middle];\n  }\n};\n\n/*\n  Returns the kth smallest element in the list l.\n  >>> kthSmallest([3, 1, 2, 4, 5], 1)\n  1\n  >>> kthSmallest([3, 1, 2, 4, 5], 4)\n  2\n  >>> kthSmallest([3, 1, 2, 4, 5], 5)\n  5\n  >>> kthSmallest([3, 1, 2, 4, 5], 6)\n  3\n  >>> kthSmallest([3, 1, 2, 4, 5], 7)\n  4\n  >>> kthSmallest([3, 1, 2, 4, 5], 8)\n  3\n  >>> kthSmallest([3, 1, 2, 4, 5], 9)\n  4\n  >>> kthSmallest([3, 1, 2, 4, 5], 10)\n  5\n  */\nconst kthSmallest = (l, k) => l.sort((a, b) => a - b)[k];\n\n/*\n  Returns the kth largest element in the list l.\n  >>> kthLargest([3, 1, 2, 4, 5], 1)\n  4\n  >>> kthLargest([3, 1, 2, 4, 5], 4)\n  5\n  >>> kthLargest([3, 1, 2, 4, 5], 5)\n  3\n  >>> kthLargest([3, 1, 2, 4, 5], 6)\n  2\n  >>> kthLargest([3, 1, 2, 4, 5], 7)\n  2\n  >>> kthLargest([3, 1, 2, 4, 5], 8)\n  2\n  >>> kthLargest([3, 1, 2, 4, 5], 9)\n  3\n  >>> kthLargest([3, 1, 2, 4, 5], 10)\n  5\n  */\nconst kthLargest = (l, k) => l.sort((a, b) => b - a)[k - 1];\n\nmodule.exports = {\n  median,\n  kthLargest,\n  kthSmallest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text;\n    let left = 0;\n    let right = reversed.length - 1;\n    while (left < right) {\n        if (reversed[left]!== reversed[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}\n\n/*\n  Find the longest substring of given text which is a palindrome.\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abc')\n  'abc'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('aabbcc')\n  'aabbcc'\n  >>> longestPalindrome('abcdc')\n  'abcdc'\n  >>> longestPalindrome('abcc')\n  'abcc'\n  >>> longestPalindrome('abccc')\n  'abccc'\n  >>> longestPalindrome('abcdab')\n  'abcdab'\n  >>> longestPalindrome('abcabc')\n  'abcabc'\n  >>> longestPalindrome('abcdabcd')\n  'abcdabcd'\n  >>> longestPalindrome('abcdabcdabcd')\n  'abcdabcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('abcd')\n  'abcd"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 1) {\n    return n % p\n  }\n  const a = p - 1\n  return ((n % p) + a) % p\n}\n\n// TODO: test for divide by zero\n\nexport default modp\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)- 5- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet. \n  */ \n const encode_one = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 1- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_one function. Returns decoded string. \n  */ \n const decode_one = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)- 1- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -1 in the alphabet. \n  */ \n const encode_minus_one = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 1- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_minus_one function. Returns decoded string. \n  */ \n const decode_minus_one = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)- 1- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet. \n  */ \n const encode_two = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 2- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_two function. Returns decoded string. \n  */ \n const decode_two = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)+ 2- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -2 in the alphabet. \n  */ \n const encode_minus_two = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 2- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_minus_two function. Returns decoded string. \n  */ \n const decode_minus_two = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)- 2- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -3 in the alphabet. \n  */ \n const encode_minus_three = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 3- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_minus_three function. Returns decoded string. \n  */ \n const decode_minus_three = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)- 3- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by -4 in the alphabet. \n  */ \n const encode_minus_four = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 4- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_minus_four function. Returns decoded string. \n  */ \n const decode_minus_four = (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     (((ch.charCodeAt(0)- 4- \" a\".charCodeAt(0))%26)+ \" a\".charCodeAt(0))\n   )).join(\"\");\n}\n\n\nconst encode = (s)=> {\n  return encode_one(encode_two(encode_three(encode_four(encode_five(s))));\n}\n\nconst decode = (s)=> {\n  return decode_one(decode_two(decode_three(decode_four(decode_five(s))));\n}\n\n\nconst encode_test = ()=> {\n  let encoded = encode(\"Hello World\");\n  console.log(encoded);\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOUaeiou]/g, '');\n}\n\n/*\n  removePunctuation was a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('z')\n  'z'\n  >>> removePunctuation('a,b')\n  'ab'\n  >>> removePunctuation('a.b.c')\n  'abc'\n  >>> removePunctuation('a\\n')\n  'a'\n  >>> removePunctuation('a.b.c.d.e')\n  'abcde'\n  >>> removePunctuation('a.b.c.d.e.f')\n  'abcdef'\n  >>> removePunctuation('aa\\nbb\\ncc\\n')\n  'aa\\nbb\\ncc\\n'\n  >>> removePunctuation('aa\\nbb\\ncc\\n')\n  'aa\\nbb\\ncc\\n'\n  >>> removePunctuation('aa\\nbb\\ncc\\n')\n  'aa\\nbb\\ncc\\n'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[\\.,\\?\\-!\\_'\\(\\)\\n]/g, '');\n}\n\nconst getLineLength = (string) => {\n  return string.length;\n}\n\n/*\n  getWordCount was a function that counts number of words in string.\n  >>> getWordCount('abc')\n  1\n  >>> getWordCount('abc\\n')\n  1\n  >>> getWordCount('a.b.c.d')\n  4\n  >>> getWordCount('a b c')\n  3\n  >>> getWordCount('a b c')\n  3\n  >>> getWordCount('a b c')\n  3\n  */\nconst getWordCount = (text) => {\n  return text.replace(/\\s+/g,'').split(' ').length;\n}\n\n/*\n  getLineLength was a function that counts number of words in string.\n  >>> getLineLength('abc')\n  1\n  >>> getLineLength('abc\\n')\n  1\n  >>> getLineLength('a.b.c.d')\n  1\n  >>> getLineLength('a b c')\n  3\n  >>> getLineLength('a b c')\n  3\n  >>> getLineLength('a b c')\n  3\n  */\nconst getLineLength = (text) => {\n  return text.split('\\n').length;\n}\n\n/*\n  getWordCount was a function that counts number of words in string.\n  >>> getWordCount('abc')\n  1\n  >>> getWordCount('abc\\n')\n  1\n  >>> getWordCount('a.b.c.d')\n  1\n  >>> getWordCount('a b c')\n  3\n  >>> getWordCount('a b c')\n  3\n  >>> getWordCount('a b c')\n  3\n  */\nconst getWordCount = (text) => {\n  return text.split(' ').length;\n}\n\n/*\n  getLineLength was a function that counts number of words in string.\n  >>> getLineLength('abc')\n  1\n  >>> getLineLength('abc\\n')\n  1\n  >>> getLineLength('a.b.c.d')\n  1\n  >>> getLineLength('a b c')\n  3\n  >>> getLineLength('a b c')\n  3\n  >>> getLineLength('a b c')\n  3\n  */\nconst getLineLength = (text) => {\n  return text.split('\\n').length;\n}\n\n/*\n  removePunctuation was a function that removes punctuation from string.\n  >>> removePunctuation('abc')\n  'abc'\n  >>> removePunctuation('a b c')\n  'abc'\n  >>> removePunctuation('a.b.c')\n  'abc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('a b c')\n  'abc'\n  >>> removePunctuation('a.b.c')\n  'abc'\n  >>> removePunctuation('a.b.c.')\n  'abc.'\n  >>> removePunctuation('a.b.c.d.e')\n  'abcde'\n  >>> removePunctuation('a.b.c.d.e.f')\n  'abcdef'\n  >>> removePunctuation('a.b.c.d.e.f')\n  'abcdef'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n  'abcc'\n  >>> removePunctuation('aa bb cc')\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length <= sorted.indexOf(t);\n};\n\n// ------------------------------------------------------------------------\n// ------------------------------------------------------------------------\n// ------------------------------------------------------------------------\n\n// The function below is a proof of concept, but will not produce a perfect\n// solution. It is used for educational purposes.\n/*\n  >>> belowThreshold([1, 2, 3, 4, 5], 3)\n  true\n  >>> belowThreshold([1, 2, 3, 4, 5], 4)\n  true\n  >>> belowThreshold([1, 2, 3, 4, 5], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.slice().reduce((acc, num) => acc || (num <= t), false);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*Calculate the product of a list of numbers\n  >>> multiply([2, 3, 4])\n  12\n  >>> multiply([2, 3, 4, 5])\n  120\n  >>> multiply([2, 3, 4, 5, 6])\n  12000\n  */\nconst multiply = (nums) => {\n  const total = 1;\n  for (let i = 0; i < nums.length; i++) {\n    total *= nums[i];\n  }\n  return total;\n}\n\n/*Calculate the sum of a list of numbers\n  >>> sum([2, 3, 4, 5])\n  9\n  >>> sum([2, 3, 4, 5, 6])\n  18\n  */\nconst sum = (nums) => {\n  let total = 0;\n  for (let i = 0; i < nums.length; i++) {\n    total += nums[i];\n  }\n  return total;\n}\n\n/*Calculate the average of a list of numbers\n  >>> average([2, 3, 4, 5])\n  3.25\n  >>> average([2, 3, 4, 5, 6])\n  4\n  */\nconst average = (nums) => {\n  return sum(nums) / nums.length;\n}\n\n/*Calculate the difference between two lists of numbers\n  >>> difference([2, 3, 4, 5, 6], [1, 7, 8, 9, 10])\n  [3, 4, 5, 6]\n  */\nconst difference = (a, b) => {\n  let i;\n  let result = [];\n  for (i = 0; i < a.length; i++) {\n    result.push(a[i] - b[i]);\n  }\n  return result;\n}\n\n/*Calculate the sum of the squares of a list of numbers\n  >>> squares([2, 3, 4, 5, 6])\n  30\n  >>> squares([2, 3, 4, 5, 6, 7])\n  30\n  */\nconst squares = (nums) => {\n  let total = 0;\n  for (let i = 0; i < nums.length; i++) {\n    total += nums[i] * nums[i];\n  }\n  return total;\n}\n\n/*Calculate the sum of the squares of the first half of a list of numbers\n  >>> squaresHalf([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  25\n  >>> squaresHalf([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  25\n  >>> squaresHalf([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  25\n  */\nconst squaresHalf = (nums) => {\n  let total = 0;\n  for (let i = 0; i < nums.length / 2; i++) {\n    total += nums[i] * nums[i];\n  }\n  return total;\n}\n\n/*Calculate the average of the squares of the first half of a list of numbers\n  >>> squaresHalfAverage([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  7.25\n  >>> squaresHalfAverage([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  7.5\n  >>> squaresHalfAverage([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  8\n  */\nconst squaresHalfAverage = (nums) => {\n  return squaresHalf(nums) / (nums.length / 2);\n}\n\n/*Calculate the difference of the squares of the first half of a list of numbers\n  >>> squaresHalfDifference([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [4, 5, 6]\n  >>> squaresHalfDifference([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [4, 5, 6]\n  >>> squaresHalfDifference([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [4, 5, 6]\n  */\nconst squaresHalfDifference = (nums) => {\n  return difference(squaresHalf(nums), nums);\n}\n\n/*Calculate the sum of the squares of the first half of a list of numbers\n  >>> squaresHalfSum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  25\n  >>> squaresHalfSum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  25\n  >>> squaresHalfSum([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  25\n  */\nconst squaresHalfSum = (nums) => {\n  let total = 0;\n  for (let i = 0; i < nums.length / 2; i++) {\n    total += nums[i] * nums[i];\n  }\n  return total;\n}\n\n/*Calculate the difference of the squares of the first half of a list of numbers\n  >>> squaresHalfSumDifference([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [5, 6, 7]\n  >>> squaresHalfSumDifference([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [5, 6, 7]\n  >>> squaresHalfSumDifference([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [5, 6, 7]\n  */\nconst squaresHalfSumDifference = (nums) => {\n  return difference(squaresHalfSum(nums), nums);\n}\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let c0 = s0.toLowerCase().split('');\n    let c1 = s1.toLowerCase().split('');\n    let same = true;\n    for (let i = 0; i < c0.length; i++) {\n        if (c0[i]!== c1[i]) {\n            same = false;\n            break;\n        }\n    }\n    return same;\n};\n\n/*\n  Given two strings, return the index of the first different character in\n  the strings, or -1 if the strings are equal.\n  >>> diffChar('abcd', 'abcd')\n  -1\n  >>> diffChar('abcd', 'acde')\n  2\n  >>> diffChar('abcd', 'abcdzz')\n  -1\n  >>> diffChar('abcd', 'abcdz')\n  4\n  >>> diffChar('abcd', 'abce')\n  -1\n  >>> diffChar('abcd', 'abcezz')\n  -1\n  >>> diffChar('abcd', 'abcea')\n  -1\n  >>> diffChar('abcd', 'abceaa')\n  -1\n  >>> diffChar('abcd', 'abcez')\n  -1\n  >>> diffChar('abcd', 'abceaab')\n  -1\n  >>> diffChar('abcd', 'abceaaab')\n  -1\n  >>> diffChar('abcd', 'abceaaabcc')\n  6\n  >>> diffChar('abcd', 'abceaaabccdd')\n  6\n  >>> diffChar('abcd', 'abceaaabccde')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdezz')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdea')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaa')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabb')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbcc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccdd')\n  7\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccdde')\n  7\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddee')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeezz')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeea')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaa')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaa')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaa')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaa')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaab')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabccc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdd')\n  8\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccddd')\n  8\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccddde')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddea')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaa')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaab')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabb')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbb')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbb')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbbb')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbbbcc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbbbccc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbbbcccc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbbbccccc')\n  -1\n  >>> diffChar('abcd', 'abceaaabccdeaaabbccddeeaaaaaaabcccdddeaaabbbbbcccccc')\n  -1\n  >>>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 0\n  const b = 1\n  let f = a\n  let i = 0\n  while (i < n) {\n    f = a + b\n    a = b\n    b = f\n    i++\n  }\n  return f\n}\n\nmodule.exports = fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let open = 1;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"<\") {\n            open++;\n        } else if (brackets[i] == \">\") {\n            if (--open == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nconsole.log(correctBracketing(\"<>\"));\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  return Array.isArray(l)\n   ? l.every((el) => {\n        return el > 0? el < l[l.length - 1] : el > l[0];\n      })\n    : false;\n};\n\n/*Return true were list elements are increasing or decreasing.\n  >>> increasing([1, 2, 4, 20])\n  true\n  >>> increasing([1, 20, 4, 10])\n  false\n  >>> increasing([4, 1, 0, -10])\n  false\n  */\nconst increasing = (l) => {\n  return Array.isArray(l)\n   ? l.every((el) => {\n        return el > l[l.length - 1]? el < l[0] : el < 0;\n      })\n    : false;\n};\n\n/*Return true were list elements are increasing or decreasing.\n  >>> decreasing([1, 2, 4, 20])\n  true\n  >>> decreasing([1, 20, 4, 10])\n  false\n  >>> decreasing([4, 1, 0, -10])\n  false\n  */\nconst decreasing = (l) => {\n  return Array.isArray(l)\n   ? l.every((el) => {\n        return el < l[l.length - 1]? el > l[0] : el > -1;\n      })\n    : false;\n};\n\n/*Return true were list elements are monotonic increasing or decreasing.\n  >>> monotonicincreasing([1, 2, 4, 20])\n  true\n  >>> monotonicincreasing([1, 20, 4, 10])\n  false\n  >>> monotonicincreasing([4, 1, 0, -10])\n  true\n  */\nconst monotonicincreasing = (l) => {\n  return Array.isArray(l)\n   ? l.every((el) => {\n        return el < l[l.length - 1]? el > l[0] : el > -1;\n      })\n    : false;\n};\n\n/*Return true were list elements are monotonic decreasing or increasing.\n  >>> monotonicdecreasing([1, 2, 4, 20])\n  true\n  >>> monotonicdecreasing([1, 20, 4, 10])\n  false\n  >>> monotonicdecreasing([4, 1, 0, -10])\n  false\n  */\nconst monotonicdecreasing = (l) => {\n  return Array.isArray(l)\n   ? l.every((el) => {\n        return el > l[l.length - 1]? el < l[0] : el < -1;\n      })\n    : false;\n};\n\n/*Return true were list elements are increasing or decreasing.\n  >>> increasing([1, 2, 4, 20])\n  true\n  >>> increasing([1, 20, 4, 10])\n  false\n  >>> increasing([4, 1, 0, -10])\n  false\n  */\nconst increasingdecreasing = (l) => {\n  return Array.isArray(l)\n   ? l.every((el) => {\n        return el > l[l.length - 1]? el < l[0] : el < -1;\n      })\n    : false;\n};\n\nmodule.exports = {\n  monotonic,\n  increasing,\n  decreasing,\n  increasingdecreasing,\n  monotonicincreasing,\n  monotonicdecreasing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const arr = []\n    for (let i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i])!== -1) {\n            arr.push(l1[i])\n        }\n    }\n    return arr\n}\n\n/**\n  * Return the intersection of two lists.\n  *\n  * @param {Array} l1\n  * @param {Array} l2\n  * @returns {Array}\n  */\nconst intersection = (l1, l2) => {\n    const arr = []\n    for (let i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i])!== -1) {\n            arr.push(l1[i])\n        }\n    }\n    return arr\n}\n\n/**\n * Return the intersection of two lists, and sort them.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst intersectionSorted = (l1, l2) => {\n    const arr = intersection(l1, l2)\n    arr.sort()\n    return arr\n}\n\n/**\n * Return the union of two lists.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst union = (l1, l2) => {\n    const arr = []\n    for (let i = 0; i < l1.length; i++) {\n        arr.push(l1[i])\n    }\n    for (let i = 0; i < l2.length; i++) {\n        arr.push(l2[i])\n    }\n    return arr\n}\n\n/**\n * Return the union of two lists, and sort them.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst unionSorted = (l1, l2) => {\n    const arr = union(l1, l2)\n    arr.sort()\n    return arr\n}\n\n/**\n * Return the difference of two lists.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst difference = (l1, l2) => {\n    const arr = []\n    for (let i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i]) === -1) {\n            arr.push(l1[i])\n        }\n    }\n    return arr\n}\n\n/**\n * Return the difference of two lists, and sort them.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst differenceSorted = (l1, l2) => {\n    const arr = difference(l1, l2)\n    arr.sort()\n    return arr\n}\n\n/**\n * Return the symmetric difference of two lists.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst symmetricDifference = (l1, l2) => {\n    const arr = []\n    for (let i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i]) === -1) {\n            arr.push(l1[i])\n        }\n    }\n    for (let i = 0; i < l2.length; i++) {\n        if (l1.indexOf(l2[i]) === -1) {\n            arr.push(l2[i])\n        }\n    }\n    return arr\n}\n\n/**\n * Return the symmetric difference of two lists, and sort them.\n *\n * @param {Array} l1\n * @param {Array} l2\n * @returns {Array}\n */\nconst symmetricDifferenceSorted = (l1, l2) => {\n    const arr = symmetricDifference(l1, l2)\n    arr.sort()\n    return arr\n}\n\nmodule.exports = {\n    common,\n    intersection,\n    intersectionSorted,\n    union,\n    unionSorted,\n    difference,\n    differenceSorted,\n    symmetricDifference,\n    symmetricDifferenceSorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i,\n    j,\n    k,\n    factor,\n    numerator,\n    denominator,\n    remainder,\n    largestPrimeFactor;\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2) {\n    return 2;\n  }\n\n  if (n === 3) {\n    return 3;\n  }\n\n  if (n === 4) {\n    return 4;\n  }\n\n  if (n % 2 === 0) {\n    largestPrimeFactor = 2;\n  }\n\n  for (i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n\n  for (i = 5; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n\n  for (i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n\n  for (i = 7; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      largestPrimeFactor = i;\n      break;\n    }\n  }\n\n  if (n % 7 === 0) {\n    largestPrimeFactor = 7;\n  }\n\n  if (n % 11 === 0) {\n    largestPrimeFactor = 11;\n  }\n\n  if (n % 13 === 0) {\n    largestPrimeFactor = 13;\n  }\n\n  if (n % 17 === 0) {\n    largestPrimeFactor = 17;\n  }\n\n  if (n % 19 === 0) {\n    largestPrimeFactor = 19;\n  }\n\n  if (n % 23 === 0) {\n    largestPrimeFactor = 23;\n  }\n\n  if (n % 29 === 0) {\n    largestPrimeFactor = 29;\n  }\n\n  if (n % 31 === 0) {\n    largestPrimeFactor = 31;\n  }\n\n  if (n % 37 === 0) {\n    largestPrimeFactor = 37;\n  }\n\n  if (n % 41 === 0) {\n    largestPrimeFactor = 41;\n  }\n\n  if (n % 43 === 0) {\n    largestPrimeFactor = 43;\n  }\n\n  if (n % 47 === 0) {\n    largestPrimeFactor = 47;\n  }\n\n  if (n % 53 === 0) {\n    largestPrimeFactor = 53;\n  }\n\n  if (n % 59 === 0) {\n    largestPrimeFactor = 59;\n  }\n\n  if (n % 61 === 0) {\n    largestPrimeFactor = 61;\n  }\n\n  if (n % 67 === 0) {\n    largestPrimeFactor = 67;\n  }\n\n  if (n % 71 === 0) {\n    largestPrimeFactor = 71;\n  }\n\n  if (n % 73 === 0) {\n    largestPrimeFactor = 73;\n  }\n\n  if (n % 79 === 0) {\n    largestPrimeFactor = 79;\n  }\n\n  if (n % 83 === 0) {\n    largestPrimeFactor = 83;\n  }\n\n  if (n % 89 === 0) {\n    largestPrimeFactor = 89;\n  }\n\n  if (n % 97 === 0) {\n    largestPrimeFactor = 97;\n  }\n\n  if (n % 101 === 0) {\n    largestPrimeFactor = 101;\n  }\n\n  if (n % 103 === 0) {\n    largestPrimeFactor = 103;\n  }\n\n  if (n % 107 === 0) {\n    largestPrimeFactor = 107;\n  }\n\n  if (n % 109 === 0) {\n    largestPrimeFactor = 109;\n  }\n\n  if (n % 113 === 0) {\n    largestPrimeFactor = 113;\n  }\n\n  if (n % 127 === 0) {\n    largestPrimeFactor = 127;\n  }\n\n  if (n % 131 === 0) {\n    largestPrimeFactor = 131;\n  }\n\n  if (n % 137 === 0) {\n    largestPrimeFactor = 137;\n  }\n\n  if (n % 139 === 0) {\n    largestPrimeFactor = 139;\n  }\n\n  if (n % 149 === 0) {\n    largestPrimeFactor = 149;\n  }\n\n  if (n % 151 === 0) {\n    largestPrimeFactor = 151;\n  }\n\n  if (n % 157 === 0) {\n    largestPrimeFactor = 157;\n  }\n\n  if (n % 163 === 0) {\n    largestPrimeFactor = 163;\n  }\n\n  if (n % 167 === 0) {\n    largestPrimeFactor = 167;\n  }\n\n  if (n % 179 === 0) {\n    largestPrimeFactor = 179;\n  }\n\n  if (n % 181 === 0) {\n    largestPrimeFactor = 181;\n  }\n\n  if (n % 187 === 0) {\n    largestPrimeFactor = 187;\n  }\n\n  if (n % 191 === 0) {\n    largestPrimeFactor = 191;\n  }\n\n  if (n % 193 === 0) {\n    largestPrimeFactor = 193;\n  }\n\n  if (n % 197 === 0) {\n    largestPrimeFactor = 197;\n  }\n\n  if (n % 199 === 0) {\n    largestPrimeFactor = 199;\n  }\n\n  if (n % 211 === 0) {\n    largestPrimeFactor = 211;\n  }\n\n  if (n % 223 === 0) {\n    largestPrimeFactor = 223;\n  }\n\n  if (n % 227 === 0) {\n    largestPrimeFactor = 227;\n  }\n\n  if (n % 229 === 0) {\n    largestPrimeFactor = 229;\n  }\n\n  if (n % 233 === 0) {\n    largestPrimeFactor = 233;\n  }\n\n  if (n % 239 === 0) {\n    largestPrimeFactor = 239;\n  }\n\n  if (n % 241 === 0) {\n    largestPrimeFactor = 241;\n  }\n\n  if (n % 251 === 0) {\n    largestPrimeFactor = 251;\n  }\n\n  if (n % 257 === 0) {\n    largestPrimeFactor = 257;"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n <= 1) return 1\n  return n * sumToN(n - 1)\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let bracketIndex = 0;\n    while (bracketIndex < brackets.length) {\n        if (brackets[bracketIndex] === '(') {\n            let next = brackets[bracketIndex + 1];\n            if (next === ')') {\n                bracketIndex++;\n            } else if (next === '(') {\n                bracketIndex++;\n                if (brackets[bracketIndex + 1] === ')') {\n                    bracketIndex++;\n                }\n            }\n        }\n        bracketIndex++;\n    }\n    return brackets.length === bracketIndex;\n};\n\nconst findLargest = (arr) => {\n    let largest = 0;\n    let largestIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n};\n\nconst findSmallest = (arr) => {\n    let smallest = Infinity;\n    let smallestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return smallestIndex;\n};\n\nconst findMaximal = (arr) => {\n    let largest = 0;\n    let largestIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n};\n\nconst findMinimal = (arr) => {\n    let smallest = Infinity;\n    let smallestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < smallest) {\n            smallest = arr[i];\n            smallestIndex = i;\n        }\n    }\n    return smallestIndex;\n};\n\nconst findFirst = (arr) => {\n    let first = Infinity;\n    let firstIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < first) {\n            first = arr[i];\n            firstIndex = i;\n        }\n    }\n    return firstIndex;\n};\n\nconst findLast = (arr) => {\n    let last = 0;\n    let lastIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > last) {\n            last = arr[i];\n            lastIndex = i;\n        }\n    }\n    return lastIndex;\n};\n\nconst findSum = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n};\n\nconst findMedian = (arr) => {\n    let median = findSum(arr) / 2;\n    if (arr.length % 2 === 0) {\n        median = Math.floor(median);\n    } else {\n        median = Math.floor(median) + 1;\n    }\n    return median;\n};\n\nconst findMode = (arr) => {\n    let maxCount = 0;\n    let maxCountIndex = -1;\n    let mode = 0;\n    let modeCount = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > mode) {\n            mode = arr[i];\n            modeCount = 1;\n            maxCount = 1;\n            maxCountIndex = i;\n        } else if (arr[i] === mode) {\n            modeCount++;\n            if (modeCount > maxCount) {\n                maxCount = modeCount;\n                maxCountIndex = i;\n            }\n        }\n    }\n    return maxCountIndex;\n};\n\nconst findRange = (arr) => {\n    let range = [Infinity, -Infinity];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < range[0]) {\n            range[0] = arr[i];\n        }\n        if (arr[i] > range[1]) {\n            range[1] = arr[i];\n        }\n    }\n    return range;\n};\n\nconst findKth = (arr, k) => {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === k) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst findMinOfKth = (arr, k) => {\n    let min = Infinity;\n    let minIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return minIndex;\n};\n\nconst findMaxOfKth = (arr, k) => {\n    let max = -Infinity;\n    let maxIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n};\n\nconst findLargestOfKth = (arr, k) => {\n    let largest = 0;\n    let largestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n};\n\nconst findSmallestOfKth = (arr, k) => {\n    let smallest ="}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = [1];\n  let i = 0;\n  for(; i < xs.length - 1; i++) {\n    d[i] = xs[i] + d[i - 1] * xs[i + 1];\n  }\n  d[i] = xs[i];\n  return d;\n};\n\n/**\n  * @method is_zero\n  * Return true if this polynomial is zero.\n  * Return false if this polynomial is not zero.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is zero.\n  * @return {Boolean} - false if this polynomial is not zero.\n  * @example\n  * is_zero([0, 0, 0, 0, 0])\n  * is_zero([0, 0, 0])\n  * is_zero([0, 0])\n  * is_zero([0])\n  */\nconst is_zero = (xs) => {\n  return xs.length === 0;\n};\n\n/**\n  * @method is_not_zero\n  * Return true if this polynomial is not zero.\n  * Return false if this polynomial is zero.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is not zero.\n  * @return {Boolean} - false if this polynomial is zero.\n  * @example\n  * is_not_zero([0, 0, 0, 0, 0])\n  * is_not_zero([0, 0, 0])\n  * is_not_zero([0, 0])\n  * is_not_zero([0])\n  */\nconst is_not_zero = (xs) => {\n  return xs.length > 0;\n};\n\n/**\n  * @method is_even\n  * Return true if this polynomial is even.\n  * Return false if this polynomial is odd.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is even.\n  * @return {Boolean} - false if this polynomial is odd.\n  * @example\n  * is_even([0, 1, 2])\n  * is_even([2, 4])\n  * is_even([0, 2, 4])\n  * is_even([0])\n  * is_even([2])\n  */\nconst is_even = (xs) => {\n  return xs.length % 2 === 0;\n};\n\n/**\n  * @method is_odd\n  * Return true if this polynomial is odd.\n  * Return false if this polynomial is even.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is odd.\n  * @return {Boolean} - false if this polynomial is even.\n  * @example\n  * is_odd([0, 1, 2])\n  * is_odd([2, 4])\n  * is_odd([0, 2, 4])\n  * is_odd([0])\n  * is_odd([2])\n  */\nconst is_odd = (xs) => {\n  return xs.length % 2 === 1;\n};\n\n/**\n  * @method is_positive\n  * Return true if this polynomial is positive.\n  * Return false if this polynomial is negative.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is positive.\n  * @return {Boolean} - false if this polynomial is negative.\n  * @example\n  * is_positive([0, 1, 2])\n  * is_positive([2, 4])\n  * is_positive([0, 2, 4])\n  * is_positive([0])\n  * is_positive([2])\n  */\nconst is_positive = (xs) => {\n  return xs.reduce((acc, x) => acc + x > 0, 0) > 0;\n};\n\n/**\n  * @method is_negative\n  * Return true if this polynomial is negative.\n  * Return false if this polynomial is positive.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is negative.\n  * @return {Boolean} - false if this polynomial is positive.\n  * @example\n  * is_negative([0, 1, 2])\n  * is_negative([2, 4])\n  * is_negative([0, 2, 4])\n  * is_negative([0])\n  * is_negative([2])\n  */\nconst is_negative = (xs) => {\n  return xs.reduce((acc, x) => acc + x < 0, 0) < 0;\n};\n\n/**\n  * @method is_positive_or_zero\n  * Return true if this polynomial is positive or zero.\n  * Return false if this polynomial is negative or zero.\n  * @param {Array} xs - polynomial coefficients.\n  * @return {Boolean} - true if this polynomial is positive or zero.\n  * @return {Boolean} - false if this polynomial is negative or zero.\n  * @example\n  * is_positive_or_zero([0, 1, 2])\n  * is_positive_or_zero([2, 4])\n  * is_positive_or_zero([0, 2, 4])\n  * is_positive_or_zero([0])\n  * is_positive_or_zero([2])\n  */\nconst is_positive_or_zero = (xs) => {\n  return xs.reduce((acc, x) => acc + x > 0, 0) > 0 || xs.length === 0;\n};\n\n/**\n  * @method is_"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0 || n === 1) return n;\n    if (n === 2) return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count += 1;\n  }\n  return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const len = x.length;\n  let result = x;\n  let start = len - shift;\n  while (start <= len) {\n    result = result.slice(0, start) + result.slice(start + 1, start + shift + 1) + result.slice(start, start + 1);\n    start += shift;\n  }\n  return result;\n};\n\n// console.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\n\n// console.log(circularShift(12, 13));\nconsole.log(circularShift(12, 14));\nconsole.log(circularShift(12, 15));\nconsole.log(circularShift(12, 16));\nconsole.log(circularShift(12, 17));\nconsole.log(circularShift(12, 18));\nconsole.log(circularShift(12, 19));\nconsole.log(circularShift(12, 20));\nconsole.log(circularShift(12, 21));\nconsole.log(circularShift(12, 22));\nconsole.log(circularShift(12, 23));\nconsole.log(circularShift(12, 24));\nconsole.log(circularShift(12, 25));\nconsole.log(circularShift(12, 26));\nconsole.log(circularShift(12, 27));\nconsole.log(circularShift(12, 28));\nconsole.log(circularShift(12, 29));\nconsole.log(circularShift(12, 30));\nconsole.log(circularShift(12, 31));\nconsole.log(circularShift(12, 32));\nconsole.log(circularShift(12, 33));\nconsole.log(circularShift(12, 34));\nconsole.log(circularShift(12, 35));\nconsole.log(circularShift(12, 36));\nconsole.log(circularShift(12, 37));\nconsole.log(circularShift(12, 38));\nconsole.log(circularShift(12, 39));\nconsole.log(circularShift(12, 40));\nconsole.log(circularShift(12, 41));\nconsole.log(circularShift(12, 42));\nconsole.log(circularShift(12, 43));\nconsole.log(circularShift(12, 44));\nconsole.log(circularShift(12, 45));\nconsole.log(circularShift(12, 46));\nconsole.log(circularShift(12, 47));\nconsole.log(circularShift(12, 48));\nconsole.log(circularShift(12, 49));\nconsole.log(circularShift(12, 50));\nconsole.log(circularShift(12, 51));\nconsole.log(circularShift(12, 52));\nconsole.log(circularShift(12, 53));\nconsole.log(circularShift(12, 54));\nconsole.log(circularShift(12, 55));\nconsole.log(circularShift(12, 56));\nconsole.log(circularShift(12, 57));\nconsole.log(circularShift(12, 58));\nconsole.log(circularShift(12, 59));\nconsole.log(circularShift(12, 60));\nconsole.log(circularShift(12, 61));\nconsole.log(circularShift(12, 62));\nconsole.log(circularShift(12, 63));\nconsole.log(circularShift(12, 64));\nconsole.log(circularShift(12, 65));\nconsole.log(circularShift(12, 66));\nconsole.log(circularShift(12, 67));\nconsole.log(circularShift(12, 68));\nconsole.log(circularShift(12, 69));\nconsole.log(circularShift(12, 70));\nconsole.log(circularShift(12, 71));\nconsole.log(circularShift(12, 72));\nconsole.log(circularShift(12, 73));\nconsole.log(circularShift(12, 74));\nconsole.log(circularShift(12, 75));\nconsole.log(circularShift(12, 76));\nconsole.log(circularShift(12, 77));\nconsole.log(circularShift(12, 78));\nconsole.log(circularShift(12, 79));\nconsole.log(circularShift(12, 80));\nconsole.log(circularShift(12, 81));\nconsole.log(circularShift(12, 82));\nconsole.log(circularShift(12, 83));\nconsole.log(circularShift(12, 84));\nconsole.log(circularShift(12, 85));\nconsole.log(circularShift(12, 86));\nconsole.log(circularShift(12, 87));\nconsole.log(circularShift(12, 88));\nconsole.log(circularShift(12, 89));\nconsole.log(circularShift(12, 90));\nconsole.log(circularShift(12, 91));\nconsole.log(circularShift(12, 92));\nconsole.log(circularShift(12, 93));\nconsole.log(circularShift(12, 94));\nconsole.log(circularShift(12, 95));\nconsole.log(circularShift(12, 96));\nconsole.log(circularShift(12, 97));\nconsole.log(circularShift(12, 98));\nconsole.log(circularShift(12, 99));\nconsole.log(circularShift(12, 100));\nconsole.log(circularShift(12, 101));\nconsole.log(circularShift(12, 102));\nconsole.log(circularShift(12, 103));\nconsole.log(circularShift(12, 104));\nconsole.log(circ"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += (s[i].charCodeAt(0) - '0'.charCodeAt(0))\n  }\n  return sum\n}\n\nconsole.log(digitSum(\"\"))\nconsole.log(digitSum(\"abAB\"))\nconsole.log(digitSum(\"abcCd\"))\nconsole.log(digitSum(\"helloE\"))\nconsole.log(digitSum(\"woArBld\"))\nconsole.log(digitSum(\"aAaaaXa\"))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   const strLen= s.length;\n   const arr= [];\n   let i= 0;\n   while(i<= strLen-1){\n     const num= Number(s.slice(i, i+1));\n     if(num>0 && num<=n){\n       arr.push(num);\n     }\n     i++;\n   }\n   return arr;\n }\n  fruitDistribution(\"3 apples and 1 oranges\",3)-> 3-0-1= 2 \n  fruitDistribution(\"2 apples and 3 oranges\",100)-> 100-2-3= 95 \n  fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  fruitDistribution(\"2 apples and 3 oranges\",0)-> \nfruitDistribution(\"2 apples and 3 oranges\",-1)-> \nfruitDistribution(\"2 apples and 3 oranges\",NaN)-> \nfruitDistribution(\"2 apples and 3 oranges\",-100)-> \nfruitDistribution(\"2 apples and 3 oranges\",-3)-> \nfruitDistribution(\"2 apples and 3 oranges\",-2)-> \nfruitDistribution(\"2 apples and 3 oranges\",-1)-> \nfruitDistribution(\"2 apples and 3 oranges\",-100)-> \nfruitDistribution(\"2 apples and 3 oranges\",-0)-> \nfruitDistribution(\"2 apples and 3 oranges\",-Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",NaN)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> \nfruitDistribution(\"2 apples and 3 oranges\",Infinity)-> "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let result = [];\n  arr.forEach(node => {\n    if (node === 0) {\n      result.push(0);\n      return;\n    }\n    let index = 1;\n    while (index < arr.length && arr[index] === node) {\n      index++;\n    }\n    result.push([node, index]);\n  });\n  return result;\n};\n\nconst pluckTest = () => {\n  let arr = [4, 2, 3];\n  let result = pluck(arr);\n  console.log(`Expected: [2, 1]`);\n  console.log(`Actual:   ${result}`);\n  assert.deepEqual(result, [2, 1]);\n  arr = [];\n  result = pluck(arr);\n  console.log(`Expected: []`);\n  console.log(`Actual:   ${result}`);\n  assert.deepEqual(result, []);\n  arr = [1, 2, 3];\n  result = pluck(arr);\n  console.log(`Expected: [2, 1]`);\n  console.log(`Actual:   ${result}`);\n  assert.deepEqual(result, [2, 1]);\n  arr = [];\n  result = pluck(arr);\n  console.log(`Expected: []`);\n  console.log(`Actual:   ${result}`);\n  assert.deepEqual(result, []);\n};\n\npluckTest();\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    let curr = lst[i]\n    if (curr >= 0 && curr > max) {\n      max = curr\n    }\n  }\n  return max\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst) {\n    return []\n  }\n  if (lst.length === 1) {\n    return lst\n  }\n  return [...lst].sort((a, b) => a - b)\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1\n  }\n  return (Math.abs(Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2)\n}\n\nexport default triangleArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += q[i];\n  }\n  if (sum >= w) return false;\n  if (isPalindrome(q)) {\n    return sum <= w;\n  }\n  return true;\n};\n\n// console.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  if (len % 2 === 0) {\n    return 0;\n  }\n\n  let left = 0;\n  let right = len - 1;\n  let mid = (left + right) / 2;\n  while (left <= right) {\n    if (arr[left] === arr[right]) {\n      mid = left;\n      break;\n    } else if (arr[left] < arr[right]) {\n      mid = left;\n      left++;\n    } else {\n      mid = right;\n      right--;\n    }\n  }\n\n  let diff = 0;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] === arr[mid]) {\n      diff++;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return diff;\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // 1\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // 0\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1])); // 1\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  return lst1.reduce((arr, str, i) => {\n    const j = lst2.indexOf(str, i);\n    if (j > -1) {\n      const len = arr.length;\n      arr[j] = str;\n      return arr;\n    }\n    return arr;\n  }, lst1)\n}\n\n/*\n  Write a function that finds the longest common prefix of two lists.\n\n  Examples\n  longestCommonPrefix([1, 2, 3], [2, 3, 4]) ➞ [2, 3]\n  longestCommonPrefix([1, 2, 3], [2, 3, 4, 5]) ➞ [2, 3, 4]\n  longestCommonPrefix([1, 2, 3], [1, 2]) ➞ [1, 2]\n  longestCommonPrefix([1, 2, 3], [2, 3]) ➞ [2, 3]\n*/\nconst longestCommonPrefix = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length);\n  return lst1.slice(0, len).join('');\n}\n\n/*\n  Write a function that finds the longest common suffix of two lists.\n\n  Examples\n  longestCommonSuffix([1, 2, 3], [2, 3, 4, 5]) ➞ [3]\n  longestCommonSuffix([1, 2, 3, 4, 5], [2, 3, 4]) ➞ [3, 4]\n  longestCommonSuffix([1, 2, 3], [1, 2]) ➞ []\n  longestCommonSuffix([1, 2, 3, 4, 5], [2, 3, 4]) ➞ [4]\n*/\nconst longestCommonSuffix = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length);\n  const suffix = lst1.slice(len - 1).join('');\n  return suffix === lst2.slice(len - 1).join('')? suffix : '';\n}\n\n/*\n  Write a function that finds the longest common substring of two lists.\n\n  Examples\n  longestCommonSubstring([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [2, 3, 4]\n  longestCommonSubstring([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4]\n  longestCommonSubstring([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) ➞ [1, 2, 3, 4]\n  longestCommonSubstring([1, 2, 3, 4, 5], [1, 2, 3, 6]) ➞ [1, 2, 3]\n*/\nconst longestCommonSubstring = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n\n  if (lst1Length === 0 || lst2Length === 0) {\n    return '';\n  }\n\n  let i = 0;\n  let j = 0;\n  let result = '';\n\n  while (i < lst1Length && j < lst2Length) {\n    if (lst1[i] === lst2[j]) {\n      result += lst1[i];\n      ++i;\n      ++j;\n    } else {\n      break;\n    }\n  }\n\n  return result;\n}\n\n/*\n  Write a function that takes a string and returns the number of characters that are \n   contained in the string.\n\n  Examples\n  countChars('hello') ➞ 5\n  countChars('hell') ➞ 5\n  countChars('hello') ➞ 6\n  countChars('hello world') ➞ 14\n*/\nconst countChars = str => {\n  return str.length;\n}\n\n/*\n  Write a function that takes two lists and returns a list containing the elements of \n   the first list that are not in the second list.\n\n  Examples\n  listDiff([1, 2, 3], [2, 3, 4]) ➞ [1]\n  listDiff([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) ➞ [1]\n  listDiff([1, 2, 3, 4, 5, 6], [2, 3, 4]) ➞ [1, 5, 6]\n*/\nconst listDiff = (lst1, lst2) => {\n  const result = [];\n\n  for (const element of lst1) {\n    if (lst2.indexOf(element) < 0) {\n      result.push(element);\n    }\n  }\n\n  return result;\n}\n\n/*\n  Write a function that takes a list and returns the list in sorted order.\n\n  Examples\n  sortList([3, 5, 2, 7, 1]) ➞ [1, 2, 3, 5, 7]\n  sortList([3, 5, 2, 7, 1]) ➞ [1, 2, 3, 5, 7]\n*/\nconst sortList = lst => {\n  return lst.sort((a, b) => {\n    return a - b;\n  });\n}\n\nmodule.exports = {\n  findCommonSubstrings,\n  findLongestCommonSubstring,\n  findLongestCommon"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  // use the prime number list to make sure\n  // the number is a prime number\n  if(primeList.indexOf(a) == -1) return false;\n\n  // now we can check to see if the number\n  // is a multiple of the given numbers\n  // we can use a while loop to do this\n  // we can use mod to get the remainder of the division\n  // of a number by a number\n  let counter = 0;\n  while(a % primeList[counter]!== 0) counter++;\n  return counter > 0;\n}\n\nexport {isMultiplyPrime}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if(x % n === 0)\n    return true;\n  else\n    return false;\n};\n\nconst isSimplePower2 = (x, n) => {\n  let m = Math.pow(n, Math.floor(Math.log10(x)));\n  return (x === m)? true : false;\n};\n\nconst isSimplePower3 = (x, n) => {\n  let s = x;\n  while(s % n === 0)\n    s = s / n;\n  return (s === 1)? true : false;\n};\n\nconst isSimplePower4 = (x, n) => {\n  let s = x;\n  while(s % n === 0)\n    s = s / n;\n  if(s === 1)\n    return true;\n  else\n    return false;\n};\n\nconst isSimplePower5 = (x, n) => {\n  let m = Math.pow(n, Math.floor(Math.log10(x)));\n  let i = x;\n  while(i % m === 0)\n    i = i / m;\n  if(i === 1)\n    return true;\n  else\n    return false;\n};\n\nconst isSimplePower6 = (x, n) => {\n  let m = Math.pow(n, Math.floor(Math.log10(x)));\n  let i = x;\n  while(i % m === 0)\n    i = i / m;\n  if(i === 1)\n    return true;\n  else\n    return false;\n};\n\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a === 1) {\n    return true;\n  }\n  let p = Math.pow(a, 1 / 3);\n  return a === Math.pow(p, 3);\n};\n\n// console.log(iscube(1));\n// console.log(iscube(2));\n// console.log(iscube(-1));\n// console.log(iscube(64));\n// console.log(iscube(0));\n// console.log(iscube(180));\n\n/*\n  Write a function that takes a number n and returns\n   the number of numbers between 1 and n which are cubes.\n  Examples:\n  numcube(1) ==> 0\n  numcube(2) ==> 1\n  numcube(3) ==> 2\n  numcube(4) ==> 3\n  numcube(5) ==> 4\n  numcube(6) ==> 5\n  numcube(7) ==> 6\n  */\nconst numcube = (n) => {\n  const cubes = [];\n  for (let i = 1; i <= n; i++) {\n    cubes.push(iscube(i));\n  }\n  return cubes.reduce((a, b) => a + b, 0);\n};\n\n// console.log(numcube(1));\n// console.log(numcube(2));\n// console.log(numcube(3));\n// console.log(numcube(4));\n// console.log(numcube(5));\n// console.log(numcube(6));\n// console.log(numcube(7));\n\n/*\n  Write a function that takes a number n and returns\n   the largest number that is not a cube of n.\n  Examples:\n  largest(1) ==> 0\n  largest(2) ==> 1\n  largest(3) ==> 4\n  largest(4) ==> 5\n  largest(5) ==> 6\n  largest(6) ==> 7\n  largest(7) ==> 8\n  largest(8) ==> 9\n  */\nconst largest = (n) => {\n  const numbers = [];\n  for (let i = 1; i <= n; i++) {\n    numbers.push(iscube(i));\n  }\n  return numbers.reduce((a, b) => a + b, 0);\n};\n\n// console.log(largest(1));\n// console.log(largest(2));\n// console.log(largest(3));\n// console.log(largest(4));\n// console.log(largest(5));\n// console.log(largest(6));\n// console.log(largest(7));\n// console.log(largest(8));\n// console.log(largest(9));\n\n/*\n  Write a function that takes a number n and returns\n   the smallest number that is a cube of n.\n  Examples:\n  smallest(1) ==> 3\n  smallest(2) ==> 9\n  smallest(3) ==> 27\n  smallest(4) ==> 81\n  smallest(5) ==> 125\n  smallest(6) ==> 216\n  smallest(7) ==> 343\n  smallest(8) ==> 627\n  smallest(9) ==> 945\n  */\nconst smallest = (n) => {\n  const numbers = [];\n  for (let i = 1; i <= n; i++) {\n    numbers.push(iscube(i));\n  }\n  return numbers.reduce((a, b) => a + b, 0);\n};\n\n// console.log(smallest(1));\n// console.log(smallest(2));\n// console.log(smallest(3));\n// console.log(smallest(4));\n// console.log(smallest(5));\n// console.log(smallest(6));\n// console.log(smallest(7));\n// console.log(smallest(8));\n// console.log(smallest(9));\n\n/*\n  Write a function that takes two numbers and returns\n   the largest of the two numbers.\n  Examples:\n  max(1, 2) ==> 2\n  max(3, 4) ==> 4\n  max(5, 6) ==> 6\n  max(7, 8) ==> 8\n  */\nconst max = (a, b) => {\n  if (a > b) {\n    return a;\n  }\n  return b;\n};\n\n// console.log(max(1, 2));\n// console.log(max(3, 4));\n// console.log(max(5, 6));\n// console.log(max(7, 8));\n\n/*\n  Write a function that takes two numbers and returns\n   the smallest of the two numbers.\n  Examples:\n  min(1, 2) ==> 1\n  min(3, 4) ==> 3\n  min(5, 6) ==> 5\n  min(7, 8) ==> 7\n  */\nconst min = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  return b;\n};\n\n// console.log(min(1, 2));\n// console.log(min(3, 4));\n// console.log(min(5, 6));\n// console.log(min(7, 8));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let arr = num.split(\"\");\n  let key = 0;\n  for (key = 0; key < arr.length; key++) {\n    let c = arr[key].charCodeAt(0);\n    if (c >= 48 && c <= 57) {\n      result += 1;\n    } else if (c >= 97 && c <= 102) {\n      result += 1;\n    }\n  }\n  return result;\n}\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n\n/*\n  Problem:\n  You are given a string, s, and two integers, p and q.\n  Your task is to determine whether the string is a palindrome\n  and if it is, to determine if the number of digits of that\n  string is p.\n  The number of digits of a palindrome is the number of digits\n  that are also a palindrome.\n  Note: you may assumed the input is always correct or empty string===\n  and digits are always uppercase.\n  Examples:\n  For s = \"AB\", the output should be true,\n  because there are only 2 digits \"AB\" and\n  it is also a palindrome,\n  the number of digits \"AB\" is 2.\n  For s = \"ABCD\", the output should be true,\n  because there are only 2 digits \"ABCD\" and\n  it is also a palindrome,\n  the number of digits \"ABCD\" is 2.\n  For s = \"ABAB\", the output should be false,\n  because there are only 3 digits \"ABAB\" and\n  it is not a palindrome.\n  For s = \"ABAB\", the output should be true,\n  because there are only 3 digits \"ABAB\" and\n  it is also a palindrome,\n  the number of digits \"ABAB\" is 3.\n  For s = \"ABCD\", the output should be false,\n  because there are only 3 digits \"ABCD\" and\n  it is not a palindrome.\n  */\nconst isPalindrome = (s) => {\n  let key = 0;\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (key = 0; key < s.length; key++) {\n    let c = s[key].charCodeAt(0);\n    if (c >= 97 && c <= 102) {\n      start += 1;\n    } else if (c >= 48 && c <= 57) {\n      end += 1;\n    }\n  }\n  if (start === end) {\n    return true;\n  }\n  return false;\n}\nconsole.log(isPalindrome(\"AB\"));\nconsole.log(isPalindrome(\"ABCD\"));\nconsole.log(isPalindrome(\"ABAB\"));\nconsole.log(isPalindrome(\"ABCDE\"));\n\n/*\n  Problem:\n  You are given a string, s, and two integers, p and q.\n  Your task is to determine whether the number of\n  digits of the string is q.\n  The number of digits of a number is the number of digits\n  that are also a number.\n  Note: you may assumed the input is always correct or empty string===\n  and digits are always uppercase.\n  Examples:\n  For s = \"ABC\", the output should be true,\n  because the number of digits of the string is 3,\n  because there are only 3 digits \"ABC\" and\n  it is also a number.\n  For s = \"ABCD\", the output should be true,\n  because the number of digits of the string is 3,\n  because there are only 3 digits \"ABCD\" and\n  it is also a number.\n  For s = \"ABAB\", the output should be false,\n  because the number of digits of the string is 2,\n  because there are only 2 digits \"ABAB\" and\n  it is not a number.\n  For s = \"ABCD\", the output should be false,\n  because the number of digits of the string is 3,\n  because there are only 3 digits \"ABCD\" and\n  it is not a number.\n  */\nconst isNumber = (s) => {\n  let key = 0;\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  for (key = 0; key < s.length; key++) {\n    let c = s[key].charCodeAt(0);\n    if (c >= 48 && c <= 57) {\n      start += 1;\n    } else if (c >= 97 && c <= 102) {\n      end += 1;\n    }\n  }\n  if (start === end) {\n    return true;\n  }\n  return false;\n}\nconsole.log(isNumber(\"ABC\"));\nconsole.log(isNumber(\"ABCD\"));\nconsole.log(isNumber(\"ABAB\"));\nconsole.log(isNumber(\"ABCDE\"));\n\n/*\n  Problem:\n  You are given a string,"}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.toString(2).length; i++) {\n    binary += (decimal.toString(2).charAt(i) === '1')? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\n// TESTING\n\nconsole.log(decimalToBinary(15));\nconsole.log(decimalToBinary(32));\nconsole.log(decimalToBinary(99));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const sLength = s.length;\n  const map = new Map();\n  const isHappy = (s, k) => {\n    if (k > sLength) return true;\n    const letter = s[k];\n    const isMap = map.has(letter);\n    if (!isMap) map.set(letter, 1);\n    else map.set(letter, map.get(letter) + 1);\n    const isHappy = (s, k) => {\n      if (k > sLength) return true;\n      const letter = s[k];\n      const isMap = map.has(letter);\n      if (!isMap) map.set(letter, 1);\n      else map.set(letter, map.get(letter) + 1);\n      return isMap;\n    };\n    return isHappy(s, k + 1);\n  };\n  return isHappy(s, 0);\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const map = {\n    '4.0': 'A+',\n    '> 3.7': 'A',\n    '> 3.3': 'A-',\n    '> 3.0': 'B+ed',\n    '> 2.7': 'B',\n    '> 2.3': 'B-',\n    '> 2.0': 'C+ed',\n    '> 1.7': 'C',\n    '> 1.3': 'C-',\n    '> 1.0': 'D+',\n    '> 0.7': 'D',\n    '> 0.0': 'D-'\n  }\n  return Object.keys(map)\n   .map((k) => {\n      const grade = map[k]\n      const percentage = Number(k) / 5\n      const points = Number(grade) * percentage\n      return `${points} (${grade})`\n    })\n   .join(', ')\n}\n\n/*\nGiven a list of scores, return a list of grades.\n  Example:\n  numericalGrade([3, 4, 5, 7, 8]) ==> ['A', 'A', 'A', 'A', 'A']\n  numericalGrade([3, 4, 5, 7, 8, 9]) ==> ['A', 'A', 'A', 'A', 'B', 'B']\n*/\nconst numericalGrade = (scores) => {\n  const map = {\n    3: 'A',\n    4: 'A',\n    5: 'A',\n    7: 'A',\n    8: 'A',\n    9: 'B'\n  }\n  return Object.keys(map)\n   .map((k) => {\n      const score = map[k]\n      return `${score}`\n    })\n   .join(', ')\n}\n\n/*\nGiven a list of scores, return a list of grades.\n  Example:\n  numericalGrade([3, 4, 5, 7, 8]) ==> ['A', 'A', 'A', 'A', 'A']\n  numericalGrade([3, 4, 5, 7, 8, 9]) ==> ['A', 'A', 'A', 'A', 'B', 'B']\n*/\nconst numericalGrade = (scores) => {\n  const map = {\n    3: 'A',\n    4: 'A',\n    5: 'A',\n    7: 'A',\n    8: 'A',\n    9: 'B'\n  }\n  return Object.keys(map)\n   .map((k) => {\n      const score = map[k]\n      return `${score}`\n    })\n   .join(', ')\n}\n\n/*\nGiven a list of grades, return a list of letter grades.\n  Example:\n  letterGrade([A, B, C, D, E]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  letterGrade([A, B, C, D, E, F]) ==> ['A+', 'B', 'C-', 'C', 'A-', 'B-']\n  letterGrade([A, B, C, D, E, F, G]) ==> ['A+', 'B', 'C-', 'C', 'A-', 'B-', 'C+']\n*/\nconst letterGrade = (grades) => {\n  const map = {\n    'A+': 'A+',\n    'A': 'A',\n    'A-': 'A-',\n    'B+': 'B+',\n    'B': 'B',\n    'B-': 'B-',\n    'C+': 'C+',\n    'C': 'C',\n    'C-': 'C-',\n    'D+': 'D+',\n    'D': 'D',\n    'D-': 'D-',\n    'E': 'E',\n    'F': 'F'\n  }\n  return Object.keys(map)\n   .map((k) => {\n      const grade = map[k]\n      return `${grade}`\n    })\n   .join(', ')\n}\n\n/*\nGiven a list of grades, return a list of letter grades.\n  Example:\n  letterGrade([A, B, C, D, E]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  letterGrade([A, B, C, D, E, F]) ==> ['A+', 'B', 'C-', 'C', 'A-', 'B-']\n  letterGrade([A, B, C, D, E, F, G]) ==> ['A+', 'B', 'C-', 'C', 'A-', 'B-', 'C+']\n*/\nconst letterGrade = (grades) => {\n  const map = {\n    'A+': 'A+',\n    'A': 'A',\n    'A-': 'A-',\n    'B+': 'B+',\n    'B': 'B',\n    'B-': 'B-',\n    'C+': 'C+',\n    'C': 'C',\n    'C-': 'C-',\n    'D+': 'D+',\n    'D': 'D',\n    'D-': 'D-',\n    'E': 'E',\n    'F': 'F'\n  "}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 1) return false\n  if (string.length === 2) return true\n  if (string.length % 2 === 0) return false\n  const prime = 2\n  let i = 0\n  while (i < string.length) {\n    const c = string[i]\n    if (c < 'A' || c > 'Z') {\n      if (c < '0' || c > '9') {\n        const next = prime * (string[i + 1] - '0')\n        if (next + prime < string.length) {\n          return false\n        }\n      }\n    }\n    prime *= string[i + 1] - '0'\n    i += 2\n  }\n  return true\n}\n\n/*Write a function that takes two numbers n1 and n2 and returns true if n1 and n2 are\n  anagrams or false otherwise. You may use any type of characters in your anagrams*/\nconst anagram = (n1, n2) => {\n  if (n1.length!== n2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < n1.length; i++) {\n    c1 = n1[i]\n    c2 = n2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes a string and returns true if the string contains any\n   duplicate characters or false otherwise. You may use any type of characters in\n   your string*/\nconst containsDuplicate = (string) => {\n  let c = ''\n  for (let i = 0; i < string.length; i++) {\n    c += string[i]\n    if (c.indexOf(c[i])!== -1) return true\n    c = string[i]\n  }\n  return false\n}\n\n/*Write a function that takes two strings and returns true if they are an anagrams or\n  false otherwise. You may use any type of characters in your strings*/\nconst isAnagram = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are permutations\n  or false otherwise. You may use any type of characters in your strings*/\nconst arePermutations = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are permutations\n  or false otherwise. You may use any type of characters in your strings*/\nconst areAnagrams = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are the same\n  or false otherwise. You may use any type of characters in your strings*/\nconst areEqual = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are the same\n  or false otherwise. You may use any type of characters in your strings*/\nconst areAnagrams = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are the same\n  or false otherwise. You may use any type of characters in your strings*/\nconst arePermutations = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are the same\n  or false otherwise. You may use any type of characters in your strings*/\nconst areAnagrams = (s1, s2) => {\n  if (s1.length!== s2.length) return false\n  let c1 = '', c2 = ''\n  for (let i = 0; i < s1.length; i++) {\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1!== c2) return false\n  }\n  return true\n}\n\n/*Write a function that takes two strings and returns true if they are the same\n  or"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n  let a = []\n  for (let i = 2; i <= n; i++) {\n    if (i % 10 === 1) {\n      a.push(i)\n    }\n  }\n  let count = 0\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 10 === 1) {\n      count += 1\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let str = \"\";\n  while (N > 0) {\n    str = N % 2? str + '1' : str + '0';\n    N = N / 2;\n  }\n  return str;\n};\n\n//export default solve;\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst sum = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sum2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nmodule.exports = {\n  add,\n  sum,\n  sum2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const str = s.toLowerCase();\n  const len = str.length;\n  let result = [];\n  let arr = [];\n\n  for (let i = 0; i < len; i++) {\n    arr = str.slice(i).split(' ');\n    arr.forEach(a => {\n      a = a.replace(/\\W+/g, '');\n      result.push(a);\n    });\n  }\n  return result.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const map = mapRows(lst, x)\n  const sorted = sortByRows(map)\n  return sorted.map(row => ({x: row[0], y: row[1]}))\n}\n\n/*\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst sortByRows = (map) => map.sort((row1, row2) => row2[0] - row1[0])\n\n/*\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst mapRows = (lst, x) => lst.map(row => row.map(v => v[x]))\n\n/*\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const map = mapRows(lst, x)\n  const sorted = sortByRows(map)\n  return sorted.map(row => ({x: row[0], y: row[1]}))\n}\n\nexport default {getRow}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    let targetSum = 0;\n    let result = array.slice(0);\n    array.forEach((element, index) => {\n        targetSum += element;\n        if(targetSum % 2 === 1) {\n            result.splice(index, 0, array[index]);\n        } else {\n            result.splice(index, 0, array[index]);\n        }\n    });\n    return result;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    const chars = s.split('');\n    let result = '';\n    for (let i = 0; i < chars.length; i++) {\n        result += rotate(chars[i]);\n    }\n    return result;\n}\n\nconst rotate = (letter) => {\n    let rotation = letter;\n    if (rotation === 'g') {\n        rotation = 'j';\n    } else if (rotation === 'x') {\n        rotation = 'k';\n    }\n    return rotation;\n}\n\n// console.log(encrypt('hi'));\n// console.log(encrypt('asdfghjkl'));\n// console.log(encrypt('gf'));\n// console.log(encrypt('et'));\n\n// function encrypt(s) {\n//     let chars = s.split('');\n//     let result = '';\n//     for (let i = 0; i < chars.length; i++) {\n//         let letter = chars[i];\n//         let rotated = rotate(letter);\n//         let final = letter + rotated;\n//         result += final;\n//     }\n//     return result;\n// }\n\n// console.log(encrypt('hi'));\n// console.log(encrypt('asdfghjkl'));\n// console.log(encrypt('gf'));\n// console.log(encrypt('et'));\n\n// const rotate = (letter) => {\n//     let rotation = letter;\n//     if (rotation === 'g') {\n//         rotation = 'j';\n//     } else if (rotation === 'x') {\n//         rotation = 'k';\n//     }\n//     return rotation;\n// }\n\n// const rotate = (letter) => {\n//     if (letter === 'g') {\n//         return 'j';\n//     } else if (letter === 'x') {\n//         return 'k';\n//     }\n//     return letter;\n// }\n\n// const rotate = (letter) => {\n//     if (letter === 'g') {\n//         return 'j';\n//     } else if (letter === 'x') {\n//         return 'k';\n//     }\n//     return letter;\n// }\n\n// console.log(rotate('g'));\n// console.log(rotate('x'));\n// console.log(rotate('j'));\n// console.log(rotate('k'));\n\n// const rotate = (letter) => {\n//     if (letter === 'g') {\n//         return 'j';\n//     } else if (letter === 'x') {\n//         return 'k';\n//     }\n//     return letter;\n// }\n\n// const rotate = (letter) => {\n//     if (letter === 'g') {\n//         return 'j';\n//     } else if (letter === 'x') {\n//         return 'k';\n//     }\n//     return letter;\n// }\n\n// const rotate = (letter) => {\n//     if (letter === 'g') {\n//         return 'j';\n//     } else if (letter === 'x') {\n//         return 'k';\n//     }\n//     return letter;\n// }\n\n// console.log(rotate('g'));\n// console.log(rotate('x'));\n// console.log(rotate('j'));\n// console.log(rotate('k'));\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n\nconst rotate = (letter) => {\n    if (letter === 'g') {\n        return 'j';\n    } else if (letter === 'x') {\n        return 'k';\n    }\n    return letter;\n}\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n    let first= lst[0]\n    let i= 0\n    let len= lst.length\n    let j= len-1\n    let n= first\n    let m= first\n    while (i < j) {\n        if (lst[i] <= lst[j]) {\n            n= lst[i]\n            m= lst[j]\n            i++\n        } else {\n            j--\n        }\n    }\n    if (lst[i] < first) {\n        return n\n    }\n    return null\n}\n\nconst nextSmallestTest = nextSmallest([1, 2, 3, 4, 5])\n\nconsole.log(nextSmallestTest)\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  return words.filter(word => word[0] === 'I').length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords = (S) => {\n  const words = S.split(' ')\n  return words.filter(word => word[0] === 'I').length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords2 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords3 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords4 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords5 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords6 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords7 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords8 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"I am a programmer. I am very smart.\")\n  2\n  */\nconst numberOfBoredomWords9 = (S) => {\n  const words = S.split(' ')\n  const b = words.filter(word => word[0] === 'I')\n  return b.length\n}\n\n/*\n  Given a string of words, return the number of all words that are part of a \n   boredom. \n  \n  For"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    return x === y + z? x === z || Math.floor(x) === Math.floor(y) && Math.floor(x) === Math.floor(z) : false;\n};\n\nmodule.exports = anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.replace(/[aeiouAEIOU]/g, (match) => {\n    return `${match.toUpperCase()}S`\n  })\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places behind that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('This is a message')\n  'TICSS SSCGMS'\n  >>> encode('This is a message')\n  'TICSS SSCGMS'\n  */\nconst encode_1 = (message) => {\n  return message.replace(/[aeiouAEIOU]/g, (match) => {\n    return `${match.toLowerCase()}S`\n  })\n}\n\n// Test\nconsole.log(encode('This is a message'))\nconsole.log(encode_1('This is a message'))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = []\n  for (let i = 2; i < 10; i++) {\n    primes.push(i)\n  }\n  const max = Math.max\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (lst[i] % primes[j] === 0) {\n        primes.splice(j, 1)\n      }\n    }\n  }\n  const max_value = max(primes)\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < max_value.toString().length; j++) {\n      sum += lst[i] % max_value.toString().charAt(j)\n    }\n  }\n  return sum\n}\n\nconst test = (lst) => {\n  console.log(`The largest prime sum is ${skjkasdkd(lst)}`)\n}\n\ntest([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  return Object.keys(dict).every(k => {\n    return k.toLowerCase() === k.toUpperCase();\n  });\n};\n\nconst checkDict = (dict) => {\n  return Object.keys(dict).every(k => {\n    return dict[k] === k.toUpperCase();\n  });\n};\n\nconst isEmpty = (obj) => {\n  return!obj;\n};\n\nexport {\n  checkDictCase,\n  checkDict,\n  isEmpty\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let s = 0;\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\ncountUpTo(20);\n// => [2,3,5,7,11,13,17,19]\n\n/*\n  Implement a function that returns the sum of the even numbers less than a given number n.\n  for example:\n  sumUpTo(3) => 3\n  sumUpTo(5) => 8\n  sumUpTo(10) => 23\n  */\nconst sumUpTo = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isEven(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nsumUpTo(3);\n// => 3\n\nsumUpTo(10);\n// => 23\n\n/*\n  Implement a function that takes an array of numbers and returns the sum of all the numbers.\n  for example:\n  sumArr([1, 2, 3]) => 6\n  sumArr([1, 2, 3, 4]) => 10\n  sumArr([1, 2, 3, 4, 5, 6]) => 17\n  sumArr([1, 2, 3, 4, 5, 6, 7]) => 22\n  */\nconst sumArr = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nsumArr([1, 2, 3]);\n// => 6\n\nsumArr([1, 2, 3, 4]);\n// => 10\n\nsumArr([1, 2, 3, 4, 5, 6]);\n// => 17\n\nsumArr([1, 2, 3, 4, 5, 6, 7]);\n// => 22\n\n/*\n  Implement a function that takes an array of numbers and returns the max number from the array.\n  for example:\n  maxArr([1, 2, 3]) => 3\n  maxArr([1, 2, 3, 4]) => 4\n  maxArr([1, 2, 3, 4, 5, 6]) => 6\n  maxArr([1, 2, 3, 4, 5, 6, 7]) => 7\n  */\nconst maxArr = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\nmaxArr([1, 2, 3]);\n// => 3\n\nmaxArr([1, 2, 3, 4]);\n// => 4\n\nmaxArr([1, 2, 3, 4, 5, 6]);\n// => 6\n\nmaxArr([1, 2, 3, 4, 5, 6, 7]);\n// => 7\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < 9; i++) {\n    product += Math.pow(a, i) * Math.pow(b, 9 - i);\n  }\n  return product;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst wordCount = (s) => {\n  let result = 0;\n  const words = s.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i]!== '') {\n      result += countUpper(words[i]);\n      result += countLower(words[i]);\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  console.log(wordCount('aBcDe'));\n  console.log(wordCount('abcdefg'));\n  console.log(wordCount('dBBE'));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const int = parseInt(value);\n  let result = int;\n\n  const closest = Math.abs(int - Math.round(int));\n  const greater = Math.abs(int - Math.round(int + 1));\n  if (closest < greater) {\n    result = int;\n  } else {\n    result = int + 1;\n  }\n  return result;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let list = []\n  let curLevel = 1\n  while (curLevel <= n) {\n    list.push(n)\n    n = Math.floor(n / 2)\n    curLevel += 1\n  }\n  return list\n}\n\n/*\n  Given a positive integer n, \n   make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let list = []\n  let curLevel = 1\n  while (curLevel <= n) {\n    let stones = n\n    while (stones > 0) {\n      if (stones % 2 === 1) {\n        stones = stones - 1\n      } else {\n        stones = stones / 2\n      }\n    }\n    list.push(stones)\n    n = Math.floor(n / 2)\n    curLevel += 1\n  }\n  return list\n}\n\nmodule.exports = makeAPile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/[\\s,]+/g).filter(word => word.length > 0);\n};\n\n/*\n  You were given a string of numbers separated by commas or spaces. Your task was \n   to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  numbersString(\"1,2,3,4,5,6,7\") == [1,2,3,4,5,6,7]\n  */\nconst numbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(n => parseInt(n) > 0);\n};\n\n/*\n  You were given a string of positive numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array of the \n   numbers.\n  \n  For example:\n  positiveNumbersString(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  positiveNumbersString(\"1,2,3,4,5,6,7\") == [1,2,3,4,5,6,7]\n  */\nconst positiveNumbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(n => parseInt(n) > 0);\n};\n\n/*\n  You were given a string of positive integers separated by commas or spaces. \n   Your task was to split the string into integers and return an array of the \n   integers.\n  \n  For example:\n  positiveIntegersString(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  positiveIntegersString(\"1,2,3,4,5,6,7\") == [1,2,3,4,5,6,7]\n  */\nconst positiveIntegersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(i => parseInt(i) > 0);\n};\n\n/*\n  You were given a string of positive decimal numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array of the \n   numbers.\n  \n  For example:\n  positiveDecimalNumbersString(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  positiveDecimalNumbersString(\"1,2,3,4,5,6,7\") == [1,2,3,4,5,6,7]\n  */\nconst positiveDecimalNumbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(i => parseInt(i) > 0);\n};\n\n/*\n  You were given a string of positive decimal numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array of the \n   numbers.\n  \n  For example:\n  positiveDecimalNumbersString(\"1,2,3,4,5,6.7\") == [1,2,3,4,5,6.7]\n  positiveDecimalNumbersString(\"1,2,3,4,5,6.7,7\") == [1,2,3,4,5,6.7,7]\n  */\nconst positiveDecimalNumbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(i => parseInt(i) > 0);\n};\n\n/*\n  You were given a string of negative decimal numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array of the \n   numbers.\n  \n  For example:\n  negativeDecimalNumbersString(\"1,2,3,4,5,6.7\") == [1,2,3,4,5,6.7]\n  negativeDecimalNumbersString(\"1,2,3,4,5,6.7,7\") == [1,2,3,4,5,6.7,7]\n  */\nconst negativeDecimalNumbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(i => parseInt(i) < 0);\n};\n\n/*\n  You were given a string of negative numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array of the \n   numbers.\n  \n  For example:\n  negativeNumbersString(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  negativeNumbersString(\"1,2,3,4,5,6,7\") == [1,2,3,4,5,6,7]\n  */\nconst negativeNumbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(i => parseInt(i) < 0);\n};\n\n/*\n  You were given a string of positive and negative numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array of the \n   numbers.\n  \n  For example:\n  negativeNumbersString(\"1,2,3,4,5,6,7\") == [1,2,3,4,5,6,7]\n  negativeNumbersString(\"1,2,3,4,5,6,7,8\") == [1,2,3,4,5,6,7,8]\n  */\nconst negativeNumbersString = (s) => {\n  return s.split(/[\\s,]+/g).filter(i => parseInt(i) < 0);\n};\n\n/*\n  You were given a string of positive and negative decimal numbers separated by commas or spaces. \n   Your task was to split the string into numbers and return an array"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    return Math.floor((x + y) / 2)\n}\n\nconst findHighestProduct = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let prod = 0\n\n    while (index < products.length) {\n        prod = products[index]\n        if (prod > maxProd) {\n            maxProd = prod\n            maxProdIndex = index\n        }\n        index++\n    }\n    return maxProdIndex\n}\n\nconst findLowest = (numbers) => {\n    let min = numbers[0]\n    let index = 0\n    let minIndex = 0\n\n    while (index < numbers.length) {\n        if (numbers[index] < min) {\n            min = numbers[index]\n            minIndex = index\n        }\n        index++\n    }\n    return minIndex\n}\n\nconst findLargestProduct = (products) => {\n    let maxProd = 0\n    let index = 0\n    let maxProdIndex = 0\n\n    while (index < products.length) {\n        if (products[index] > maxProd) {\n            maxProd = products[index]\n            maxProdIndex = index\n        }\n        index++\n    }\n    return maxProdIndex\n}\n\nconst findLargestProduct2 = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let min = 0\n    let minIndex = 0\n\n    while (index < products.length) {\n        if (products[index] > maxProd) {\n            maxProd = products[index]\n            maxProdIndex = index\n        }\n        if (products[index] < min) {\n            min = products[index]\n            minIndex = index\n        }\n        index++\n    }\n    return { maxProd, minIndex }\n}\n\nconst findLargestProduct3 = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let min = 0\n    let minIndex = 0\n\n    while (index < products.length) {\n        if (products[index] > maxProd) {\n            maxProd = products[index]\n            maxProdIndex = index\n        }\n        if (products[index] < min) {\n            min = products[index]\n            minIndex = index\n        }\n        index++\n    }\n    return { maxProd, minIndex }\n}\n\nconst findProductInRange = (products) => {\n    let min = products[0]\n    let max = products[0]\n    let index = 0\n    let minIndex = 0\n\n    while (index < products.length) {\n        if (products[index] < min) {\n            min = products[index]\n            minIndex = index\n        }\n        if (products[index] > max) {\n            max = products[index]\n        }\n        index++\n    }\n    return { min, max }\n}\n\nconst findProduct = (products) => {\n    let min = products[0]\n    let max = products[0]\n    let index = 0\n    let minIndex = 0\n\n    while (index < products.length) {\n        if (products[index] < min) {\n            min = products[index]\n            minIndex = index\n        }\n        if (products[index] > max) {\n            max = products[index]\n        }\n        index++\n    }\n    return { min, max }\n}\n\nconst findLargestProduct4 = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let min = 0\n    let minIndex = 0\n    let prod = 0\n\n    while (index < products.length) {\n        prod = products[index]\n        if (prod > maxProd) {\n            maxProd = prod\n            maxProdIndex = index\n        }\n        if (prod < min) {\n            min = products[index]\n            minIndex = index\n        }\n        index++\n    }\n    return { maxProd, minIndex }\n}\n\nconst findLargestProduct5 = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let min = 0\n    let minIndex = 0\n    let prod = 0\n\n    while (index < products.length) {\n        prod = products[index]\n        if (prod > maxProd) {\n            maxProd = prod\n            maxProdIndex = index\n        }\n        if (prod < min) {\n            min = products[index]\n            minIndex = index\n        }\n        index++\n    }\n    return { maxProd, minIndex }\n}\n\nconst findLargestProduct6 = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let min = 0\n    let minIndex = 0\n    let prod = 0\n\n    while (index < products.length) {\n        prod = products[index]\n        if (prod > maxProd) {\n            maxProd = prod\n            maxProdIndex = index\n        }\n        if (prod < min) {\n            min = products[index]\n            minIndex = index\n        }\n        index++\n    }\n    return { maxProd, minIndex }\n}\n\nconst findLargestProduct7 = (products) => {\n    let maxProd = 0\n    let maxProdIndex = 0\n    let index = 0\n    let min = 0\n    let minIndex = 0\n    let prod = 0\n\n    while (index < products.length) {\n        prod = products[index]\n        if (prod > maxProd) {\n            maxProd = prod\n            maxProdIndex = index\n        }\n        if (prod < min) {\n            min = products[index]\n            "}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = Math.round(((n + m) / 2));\n  const roundedAvg = Number.parseInt(avg.toString(2));\n  if (roundedAvg < n || roundedAvg > m) return -1;\n  return roundedAvg;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = x.toString().split('').map(digit => parseInt(digit))\n  const uniqueDigits = []\n  const i = 0\n  while (i < digits.length) {\n    const j = i\n    while (j < digits.length && digits[j] % 2 === 0) {\n      j++\n    }\n    if (j > i) {\n      uniqueDigits.push(digits[i])\n    }\n    i = j\n  }\n  return uniqueDigits\n}\n\n//console.log(uniqueDigits(15))\nconsole.log(uniqueDigits(152))\nconsole.log(uniqueDigits(323))\nconsole.log(uniqueDigits(1422))\nconsole.log(uniqueDigits(10))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  let count = 0;\n  let result = [];\n  while (count < len) {\n    result.push(arr[count]);\n    count++;\n  }\n  result = result.reverse();\n  result.forEach((element, index) => {\n    const temp = element.toString();\n    result[index] = {\n      name: temp.substring(0, 1),\n      digit: temp.substring(1, temp.length)\n    }\n  });\n  return result;\n}\n\nconsole.log(byLength([1, 9, 3, 2, 4, 5, 8, 7, 2, 6, 1, 8]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let res = [1];\n  let i = 1;\n  while(i <= n) {\n    if(i % 2 === 0) {\n      res.push(res[res.length-1]*i);\n    } else {\n      res.push(res[res.length-1]+i);\n    }\n    i++;\n  }\n  return res;\n};\n\nlet res = f(5);\nconsole.log(res);\n/* Output:\n[1, 2, 6, 24, 15]\n*/<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const odd = [], even = [];\n    for (let i = 1; i <= n; i++) {\n        const pal = i.toString();\n        if (pal.length === 1) {\n            if (pal.charAt(0) % 2 === 0) {\n                even.push(i);\n            } else {\n                odd.push(i);\n            }\n        } else {\n            let evenSum = 0, oddSum = 0;\n            for (let j = 0; j < pal.length; j += 2) {\n                const pal = pal.substring(j, j + 2);\n                if (pal.charAt(0) % 2 === 0) {\n                    evenSum += parseInt(pal, 10);\n                } else {\n                    oddSum += parseInt(pal, 10);\n                }\n            }\n            if (evenSum % 2 === 0) {\n                even.push(i);\n            } else {\n                odd.push(i);\n            }\n            if (oddSum % 2 === 0) {\n                even.push(i);\n            } else {\n                odd.push(i);\n            }\n        }\n    }\n    return {\n        odd,\n        even\n    }\n};\n\nconst test = (n) => {\n    const evenOdd = evenOddPalindrome(n);\n    console.log(`${n} has ${evenOdd.even.length} even and ${evenOdd.odd.length} odd integer palindromes.`);\n};\n\ntest(3);\ntest(12);\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  return arr.reduce((acc, item, i) => {\n    const sum = item + acc;\n    return sum > 0? acc + 1 : sum;\n  }, 0);\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) return true;\n  if (arrLength === 1) return true;\n  let temp = arr[0];\n  let i = 1;\n  while (i < arrLength) {\n    if (arr[i] < temp) {\n      temp = arr[i];\n      i++;\n    } else {\n      arr[i - 1] = arr[i];\n      i++;\n      arr[i - 1] = temp;\n      temp = arr[0];\n      i = 1;\n    }\n  }\n  return (arr[i - 1] > temp)? false : true;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4]));\nconsole.log(moveOneBall([1, 2, 3, 4, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let c = 0\n  while (lst1.length > 0 && lst2.length > 0) {\n    if (lst1[0] < lst2[0]) {\n      lst1.shift()\n    } else if (lst1[0] > lst2[0]) {\n      lst2.shift()\n    } else {\n      c++\n      lst1.shift()\n      lst2.shift()\n    }\n  }\n  if (c === 0) {\n    return 'NO'\n  }\n  return 'YES'\n}\n\n//test\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if(!test) return {};\n  const dict = {};\n  const words = test.split(' ');\n  words.forEach(word => {\n    if(word.length === 1) return;\n    const char = word.charAt(0);\n    let charCount = dict[char] || 0;\n    dict[char] = charCount + 1;\n  });\n  return dict;\n};\n\n/* Given a string representing a space separated lowercase letters, return a string \n  representing a space separated string containing the letters that have the largest \n  occurrence in the original string.\n\n  Example:\n  histogram('a b c') == 'b c'\n  histogram('a b c a b') == 'a b c'\n  histogram('b b b b a') == 'b b b b'\n  histogram('') == ''\n\n  */\nconst histogram2 = (test) => {\n  if(!test) return '';\n  const dict = histogram(test);\n  const max = Object.keys(dict).sort((a, b) => {\n    return dict[a] - dict[b];\n  })[0];\n  return max;\n};\n\n/* Given a string representing a space separated lowercase letters, return a string \n  representing a space separated string containing the letters that have the largest \n  occurrence in the original string.\n  \n  Example:\n  histogram('a b c') == 'b c'\n  histogram('a b c a b') == 'a b c'\n  histogram('b b b b a') == 'b b b b'\n  histogram('') == ''\n\n  */\nconst histogram3 = (test) => {\n  if(!test) return '';\n  const dict = histogram(test);\n  const max = Object.keys(dict).sort((a, b) => {\n    return dict[a] - dict[b];\n  }).slice(0, -1);\n  return max.join(' ');\n};\n\n/* Given a string representing a space separated lowercase letters, return a string \n  representing a space separated string containing the letters that have the largest \n  occurrence in the original string.\n  \n  Example:\n  histogram('a b c') == 'b c'\n  histogram('a b c a b') == 'a b c'\n  histogram('b b b b a') == 'b b b b'\n  histogram('') == ''\n\n  */\nconst histogram4 = (test) => {\n  if(!test) return '';\n  const dict = histogram(test);\n  const max = Object.keys(dict).sort((a, b) => {\n    return dict[a] - dict[b];\n  });\n  const count = max.length;\n  return max.join(' ');\n};\n\n/* Given a string representing a space separated lowercase letters, return a string \n  representing a space separated string containing the letters that have the largest \n  occurrence in the original string.\n  \n  Example:\n  histogram('a b c') == 'b c'\n  histogram('a b c a b') == 'a b c'\n  histogram('b b b b a') == 'b b b b'\n  histogram('') == ''\n\n  */\nconst histogram5 = (test) => {\n  if(!test) return '';\n  const dict = histogram(test);\n  const max = Object.keys(dict).sort((a, b) => {\n    return dict[a] - dict[b];\n  });\n  const count = max.length;\n  const max2 = max.slice(0, count - 1);\n  return max2.join(' ');\n};\n\n/* Given a string representing a space separated lowercase letters, return a string \n  representing a space separated string containing the letters that have the largest \n  occurrence in the original string.\n  \n  Example:\n  histogram('a b c') == 'b c'\n  histogram('a b c a b') == 'a b c'\n  histogram('b b b b a') == 'b b b b'\n  histogram('') == ''\n\n  */\nconst histogram6 = (test) => {\n  if(!test) return '';\n  const dict = histogram(test);\n  const max = Object.keys(dict).sort((a, b) => {\n    return dict[a] - dict[b];\n  });\n  const count = max.length;\n  const max2 = max.slice(0, count - 1);\n  const max3 = max.slice(0, count - 2);\n  return max2.join(' ');\n};\n\n/* Given a string representing a space separated lowercase letters, return a string \n  representing a space separated string containing the letters that have the largest \n  occurrence in the original string.\n  \n  Example:\n  histogram('a b c') == 'b c'\n  histogram('a b c a b') == 'a b c'\n  histogram('b b b b a') == 'b b b b'\n  histogram('') == ''\n\n  */\nconst histogram7 = (test) => {\n  if(!test) return '';\n  const dict = histogram(test);\n  const max = Object.keys(dict).sort((a, b) => {\n    return dict[a] - dict[b];\n  });\n  const count = max.length;\n  const max2 = max.slice(0, count - 2);\n  const max3 = max.slice(0, count - 3);\n  return max2.join(' ');\n};\n\n// console.log(histogram('a b c a b'));\n// console.log(histogram('b b b b a'));\n//"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const cLen = c.length;\n  let i = 0, j = s.length - 1;\n  const palin = (s, c, i, j) => {\n    let start = i, end = j;\n    while (start < end) {\n      if (s.charAt(start) === c.charAt(i)) {\n        start++;\n      } else {\n        break;\n      }\n    }\n    while (start < end) {\n      if (s.charAt(end) === c.charAt(j)) {\n        end--;\n      } else {\n        break;\n      }\n    }\n    return [s.slice(start, end + 1), true];\n  }\n  let [sReverse, isPali] = palin(s, c, i, j);\n  return [sReverse.join(''), isPali];\n}\n\nconsole.log(reverseDelete('abcde', 'ae'));\nconsole.log(reverseDelete('abcdef', 'b'));\nconsole.log(reverseDelete('abcdedcba', 'ab'));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = lst.reduce((acc, val) => {\n    if (!isNumber(val)) {\n      throw new Error(`the value ${val} is not a number`)\n    }\n    const num = Number(val)\n    if (num % 2) {\n      acc.push(val)\n    }\n    return acc\n  }, [])\n  return count\n}\n\nconst isNumber = (val) => {\n  if (typeof val!=='string') {\n    throw new Error(`${val} is not a string`)\n  }\n  const num = Number(val)\n  if (!num ||!isFinite(num)) {\n    throw new Error(`${val} is not a number`)\n  }\n  return true\n}\n\nconst main = () => {\n  const lst = ['1', '2', '3', '4', '5']\n  console.log(oddCount(lst))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let result = -1;\n  for(let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for(let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if(sum >= 0) {\n        if(sum > result) {\n          result = sum;\n        }\n      }\n    }\n  }\n  return result;\n};\n\n// TEST\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const rowCount = rows + 1\n  const colCount = cols + 1\n  const rowCapacity = rows\n  const colCapacity = cols\n  const maxBucketFill = rowCount * colCount\n\n  const buckets = Array.from({ length: rowCount * colCount }, () => {\n    return {\n      fill: 0,\n      row: Math.floor((Math.random() * rowCapacity) + 1),\n      col: Math.floor((Math.random() * colCapacity) + 1)\n    }\n  })\n\n  let count = 0\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < colCount; j++) {\n      if (grid[i][j] === 1) {\n        buckets[count].fill += 1\n        count += 1\n      }\n    }\n  }\n\n  count = 0\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < colCount; j++) {\n      if (buckets[count].fill > capacity) {\n        return count\n      }\n      count += 1\n    }\n  }\n\n  return 0\n}\n\nconsole.log(maxFill([[1, 1], [1, 1]], 1))\nconsole.log(maxFill([[1, 1], [1, 1]], 2))\nconsole.log(maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 5))\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5))\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 0))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const sortFunction = (arr, i, j) => {\n        if (arr[i] === arr[j]) {\n            return 0;\n        }\n        if (arr[i] > arr[j]) {\n            return 1;\n        }\n        return -1;\n    }\n\n    const sortedArray = arr.slice(0);\n    sortedArray.sort(sortFunction);\n\n    return sortedArray;\n};\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (n === 0) {\n    return []\n  }\n  const result = []\n  let i = 0\n  while (i < s.length) {\n    const next = s.charAt(i)\n    if (isConsonant(next)) {\n      const word = s.slice(i, i + n)\n      if (word.length === n) {\n        result.push(word)\n      }\n      i += n\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\nconst isConsonant = (c) => {\n  return c.match(/[bcdfghjklmnpqrstvwxyz]/)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let lastConsonant = word.length - 1;\n  let closestVowel = '';\n  let closestVowelPos = 0;\n  let currVowelPos = 0;\n  let currChar = word.charAt(0);\n  while (currVowelPos < lastConsonant) {\n    for (let i = 0; i < vowels.length; i++) {\n      if (vowels[i] === currChar) {\n        if (Math.abs(lastConsonant - currVowelPos) < Math.abs(lastConsonant - closestVowelPos)) {\n          closestVowelPos = currVowelPos;\n          closestVowel = vowels[i];\n        }\n      }\n    }\n    currChar = word.charAt(++currVowelPos);\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel_v2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let closestVowelPos = 0;\n  let currVowelPos = 0;\n  let currChar = word.charAt(0);\n  while (currVowelPos < word.length) {\n    if (vowels.indexOf(currChar)!== -1) {\n      if (Math.abs(word.length - currVowelPos) < Math.abs(word.length - closestVowelPos)) {\n        closestVowelPos = currVowelPos;\n        closestVowel = currChar;\n      }\n    }\n    currChar = word.charAt(++currVowelPos);\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel_v3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let closestVowelPos = 0;\n  let currVowelPos = 0;\n  let currChar = word.charAt(0);\n  while (currVowelPos < word.length) {\n    if (vowels.indexOf(currChar)!== -1) {\n      if (Math.abs(word.length - currVowelPos) < Math.abs(word.length - closestVowelPos)) {\n        closestVowelPos = currVowelPos;\n        closestVowel = currChar;\n      }\n    }\n    currChar = word.charAt(++currVowelPos);\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel_v4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let closestVowelPos = 0;\n  let currVowelPos = 0;\n  let currChar = word.charAt(0);\n  while (currVowelPos < word.length) {\n    if (vowels.indexOf(currChar)!== -1) {\n      if (Math.abs(word.length - currVowelPos) < Math.abs(word.length - closestVowelPos)) {\n        closestVowelPos = currVowelPos;\n        closestVowel = currChar;\n      }\n    }\n    currChar = word.charAt(++currVowelPos);\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel_v5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let closestVowelPos = 0;\n  let currVowelPos = 0;\n  let currChar = word.charAt(0);\n  while (currVowelPos < word.length) {\n    if (vowels.indexOf(currChar)!== -1) {\n      if (Math.abs(word.length - currVowelPos) < Math.abs(word.length - closestVowelPos)) {\n        closestVowelPos = currVowelPos;\n        closestVowel = currChar;\n      }\n    }\n    currChar = word.charAt(++currVowelPos);\n  }\n  return closestVowel;\n};\n\nconst getClosestVowel_v6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let closestVowelPos = 0;\n  let currVowelPos = 0;\n  let currChar = word.charAt(0);\n  while (currVowelPos < word.length) {\n    if (vowels.indexOf(currChar)!== -1) {\n      if (Math.abs(word.length - currVowelPos) < Math.abs(word.length - closestVowelPos)) {\n        closestVowelPos = currVowelPos;\n        closestVowel = cur"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    let stack = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === '(') {\n            stack.push(lst[i]);\n        } else if (lst[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack.pop()!== '(') {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\nmodule.exports = matchParens;<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (i >= k) {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, n) => (acc + (n % 2 === 0? 0 : n) ), 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sortedArr = arr.slice().sort();\n  const sum = sortedArr.reduce((a, b) => a + b, 0);\n  return sum.toString();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x > 1) {\n        if(x % 2 === 1) {\n            x = Math.floor(x / 2)\n        } else {\n            x = 3 * x + 1\n        }\n        result.push(x)\n    }\n    return result\n}\n\nconst getOddCollatz = (n) => {\n    const result = []\n    let x = n\n    while(x >"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  return (\n    date.length &&\n    date.length > 0 &&\n    date.split(\"-\").length === 3 &&\n    date.split(\"-\").every((val, index) => {\n      if (index === 0) return val > 0 && val < 32;\n      else if (index === 1) return val > 0 && val < 32;\n      else return val > 0 && val < 30;\n    })\n  );\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  let word_list = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    word_list.push(word.toLowerCase());\n  }\n  return word_list;\n};\n\nconst splitWordsByWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  let word_list = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const word_array = word.split(/\\s/);\n    for (let j = 0; j < word_array.length; j++) {\n      const word_chunk = word_array[j];\n      word_list.push(word_chunk.toLowerCase());\n    }\n  }\n  return word_list;\n};\n\nconst get_count = (words, word) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === word) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_count_of_chunks = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_count_of_words_in_chunks = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_count_of_words = (words, word) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === word) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_letters = (words, word) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(word)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_words_in_chunks = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_words = (words, word) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === word) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_chunks = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_characters = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_sentences = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_words_in_sentence = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_words_in_sentences = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_sentences_in_chunks = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_sentences_in_words = (words, chunk) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf(chunk)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst get_number_of_sentences_in_words_in_chunks = (words, chunk) => {\n  let count = 0;\n  for (let"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = lst.slice(0).sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted.length === lst.length\n}\n\n/*\n  Given a list of numbers, return the highest number in the list.\n  If the list has no elements, return undefined.\n  Examples\n  getHighest([]) ➞ undefined\n  getHighest([1]) ➞ 1\n  getHighest([1, 2, 3, 4]) ➞ 4\n  getHighest([1, 2, 3, 4, 5]) ➞ 5\n  getHighest([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n*/\nconst getHighest = (lst) => {\n  let max = -Infinity\n  lst.forEach((num) => {\n    if (num > max) {\n      max = num\n    }\n  })\n  return max\n}\n\n/*\n  Given a list of numbers, return the lowest number in the list.\n  If the list has no elements, return undefined.\n  Examples\n  getLowest([]) ➞ undefined\n  getLowest([1]) ➞ 1\n  getLowest([1, 2, 3, 4]) ➞ 1\n  getLowest([1, 2, 3, 4, 5]) ➞ 1\n  getLowest([1, 2, 3, 4, 5, 6, 7]) ➠ 1\n*/\nconst getLowest = (lst) => {\n  let min = Infinity\n  lst.forEach((num) => {\n    if (num < min) {\n      min = num\n    }\n  })\n  return min\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the elements.\n  If the list has no elements, return undefined.\n  Examples\n  sum([]) ➞ undefined\n  sum([1]) ➞ 1\n  sum([1, 2, 3, 4]) ➠ 10\n  sum([1, 2, 3, 4, 5, 6, 7]) ➠ 42\n*/\nconst sum = (lst) => {\n  let result = 0\n  lst.forEach((num) => {\n    result += num\n  })\n  return result\n}\n\n/*\n  Given a list of numbers, return a list of the product of the elements.\n  If the list has no elements, return undefined.\n  Examples\n  product([]) ➠ undefined\n  product([1]) ➠ 1\n  product([1, 2, 3, 4]) ➠ 24\n  product([1, 2, 3, 4, 5, 6, 7]) ➠ 724\n*/\nconst product = (lst) => {\n  let result = 1\n  lst.forEach((num) => {\n    result *= num\n  })\n  return result\n}\n\n/*\n  Given a list of numbers, return a list of the average of the elements.\n  If the list has no elements, return undefined.\n  Examples\n  average([]) ➠ undefined\n  average([1]) ➠ 1\n  average([1, 2, 3, 4]) ➠ 2.25\n  average([1, 2, 3, 4, 5, 6, 7]) ➠ 5.5\n*/\nconst average = (lst) => {\n  let result = 0\n  lst.forEach((num) => {\n    result += num\n  })\n  return result / lst.length\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the squares of the elements.\n  If the list has no elements, return undefined.\n  Examples\n  sumSquares([]) ➠ undefined\n  sumSquares([1]) ➠ 1\n  sumSquares([1, 2, 3, 4]) ➠ 14\n  sumSquares([1, 2, 3, 4, 5, 6, 7]) ➠ 428\n*/\nconst sumSquares = (lst) => {\n  let result = 0\n  lst.forEach((num) => {\n    result += num * num\n  })\n  return result\n}\n\n/*\n  Given a list of numbers, return a list of the sum of the products of the elements.\n  If the list has no elements, return undefined.\n  Examples\n  productSquares([]) ➠ undefined\n  productSquares([1]) ➠ 1\n  productSquares([1, 2, 3, 4]) ➠ 12\n  productSquares([1, 2, 3, 4, 5, 6, 7]) ➠ 724\n*/\nconst productSquares = (lst) => {\n  let result = 0\n  lst.forEach((num) => {\n    result += num * num\n  })\n  return result\n}\n\n/*\n  Given a list of numbers, return a list of the average of the products of the elements.\n  If the list has no elements, return undefined.\n  Examples\n  averageSquares([]) ➠ undefined\n  averageSquares([1]) ➠ 1\n  averageSquares([1, 2, 3, 4]) ➠ 3.75\n  averageSquares([1, 2, 3, 4, 5, 6, 7]) ➠ 5.875\n*/\nconst averageSquares = (lst) => {\n  let result = 0\n  lst.forEach((num) => {\n    result +="}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1.start ||!interval1.end ||!interval2.start ||!interval2.end) {\n    return false\n  }\n  if (interval1.end <= interval1.start || interval2.end <= interval2.start) {\n    return false\n  }\n  if (interval1.start >= interval2.end || interval2.start >= interval1.end) {\n    return false\n  }\n\n  const int1 = interval1.end - interval1.start + 1\n  const int2 = interval2.end - interval2.start + 1\n  const intersection = int1 * int2\n  if (isPrime(intersection)) {\n    return true\n  }\n  return false\n}\n\nconst isPrime = (number) => {\n  if (number < 2) {\n    return false\n  }\n\n  if (number < 4) {\n    return true\n  }\n\n  const divisors = []\n  for (let i = 2; i <= number; i++) {\n    if (number % i === 0) {\n      divisors.push(i)\n    }\n  }\n\n  return divisors.length === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signSum = (x, y) => x === 0 || y === 0? 0 : x > 0? x * y : y * x;\n  return arr.reduce((acc, x) => acc + signSum(x, -x), 0);\n};\n\nconsole.log(prodSigns([1, 2, 2, -4])); // -9\nconsole.log(prodSigns([0, 1])); // 0\nconsole.log(prodSigns([])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let n = grid.length\n  if (n <= 1) return [grid[0][0]]\n  let lst = grid[0][0]\n  for (let i = 1; i < n; i++) {\n    lst = Math.min(lst, grid[i][0])\n  }\n  lst = lst.toString()\n  let arr = []\n  for (let i = 1; i < n; i++) {\n    let lst = grid[i][0]\n    for (let j = 1; j < n; j++) {\n      if (grid[i][j] <= lst) {\n        lst = grid[i][j]\n        arr.push(lst)\n      }\n    }\n  }\n  let r = k - 1\n  while (r > 0) {\n    let lst = arr.shift()\n    for (let i = 0; i < n; i++) {\n      if (grid[i][lst] > lst) {\n        lst = grid[i][lst]\n        arr.unshift(lst)\n      }\n    }\n    r--\n  }\n  return arr\n}\n\nconsole.log(minPath([[1,2,3],[4,5,6],[7,8,9]], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const list = []\n  let curr = 1\n  for (let i = 0; i <= n; i++) {\n    curr = (curr + 1) / 2\n    if (i % 2 === 0) {\n      list.push(curr)\n    } else {\n      list.push(list[i - 1] + curr)\n    }\n  }\n  return list\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      res *= i;\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n \tlet len= string.length,\n \t\tarr=[],\n \t\topenBracket= 1,\n \t\tclosedBracket= 1;\n \tfor(let i=0; i<len; i++){\n \t\tif(string[i]=='[')\n \t\t\topenBracket++;\n \t\telse if(string[i]==']')\n \t\t\tclosedBracket--;\n \t\tif(openBracket==closedBracket)\n \t\t\tarr.push(string[i]);\n \t}\n \treturn arr.length===0? false: true;\n };\n \n isNested('[][]')\n // false\n isNested('[]')\n // false\n isNested('[][')\n // true\n isNested('[[][]]')\n // true\n isNested('[][[')\n // true\n isNested('[]]')\n // false<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = (n) => {\n    return (Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) + Math.pow(n, 2) +"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    if(txt.length > 0) {\n        return (txt[txt.length - 1].toLowerCase() >= 'a' && txt[txt.length - 1].toLowerCase() <= 'z') &&!(/[^a-z]/.test(txt.slice(0, -1)));\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the first character \n   of a given string is a letter or apostrophe.\n  Examples:\n  isFirstCharALetter(\"apple pie\") ➞ false\n  isFirstCharALetter(\"'apple pie\") ➞ true\n  isFirstCharALetter(\"apple pi e\") ➞ true\n  isFirstCharALetter(\"apple pi e \") ➞ true\n  isFirstCharALetter(\"\") ➞ false\n  */\nconst isFirstCharALetter = (txt) => {\n    if(txt.length > 0) {\n        return (txt[0].toLowerCase() >= 'a' && txt[0].toLowerCase() <= 'z') || (txt[0] === \"'\");\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the last character \n   of a given string is a letter or apostrophe.\n  Examples:\n  isLastCharALetter(\"apple pie\") ➞ true\n  isLastCharALetter(\"'apple pie\") ➞ true\n  isLastCharALetter(\"apple pi e\") ➞ true\n  isLastCharALetter(\"apple pi e \") ➞ true\n  isLastCharALetter(\"\") ➞ false\n  */\nconst isLastCharALetter = (txt) => {\n    if(txt.length > 0) {\n        return (txt[txt.length - 1].toLowerCase() >= 'a' && txt[txt.length - 1].toLowerCase() <= 'z') || (txt[txt.length - 1] === \"'\");\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the first and last characters \n   of a given string are a letter or apostrophe.\n  Examples:\n  isALetter(\"apple pie\") ➞ true\n  isALetter(\"'apple pie\") ➞ true\n  isALetter(\"apple pi e\") ➞ true\n  isALetter(\"apple pi e \") ➞ true\n  isALetter(\"\") ➞ false\n  */\nconst isALetter = (txt) => {\n    if(txt.length > 0) {\n        return (txt[0].toLowerCase() >= 'a' && txt[0].toLowerCase() <= 'z') || (txt[0] === \"'\") && (txt[txt.length - 1].toLowerCase() >= 'a' && txt[txt.length - 1].toLowerCase() <= 'z') || (txt[txt.length - 1] === \"'\");\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the given string contains \n   an upper case letter.\n  Examples:\n  containsUpperCaseLetters(\"apple pie\") ➞ false\n  containsUpperCaseLetters(\"'apple pie\") ➞ true\n  containsUpperCaseLetters(\"apple pi e\") ➞ false\n  containsUpperCaseLetters(\"apple pi e \") ➞ false\n  containsUpperCaseLetters(\"\") ➞ false\n  */\nconst containsUpperCaseLetters = (txt) => {\n    if(txt.length > 0) {\n        return (txt.split('').every(x => x >= 'A' && x <= 'Z'));\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the given string contains \n   an lower case letter.\n  Examples:\n  containsLowerCaseLetters(\"apple pie\") ➞ false\n  containsLowerCaseLetters(\"'apple pie\") ➞ true\n  containsLowerCaseLetters(\"apple pi e\") ➞ false\n  containsLowerCaseLetters(\"apple pi e \") ➞ true\n  containsLowerCaseLetters(\"\") ➞ false\n  */\nconst containsLowerCaseLetters = (txt) => {\n    if(txt.length > 0) {\n        return (txt.split('').every(x => x >= 'a' && x <= 'z'));\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the given string contains \n   an alphabetical character.\n  Examples:\n  containsAlphaLetters(\"apple pie\") ➞ false\n  containsAlphaLetters(\"'apple pie\") ➞ true\n  containsAlphaLetters(\"apple pi e\") ➞ true\n  containsAlphaLetters(\"apple pi e \") ➞ true\n  containsAlphaLetters(\"\") ➞ false\n  */\nconst containsAlphaLetters = (txt) => {\n    if(txt.length > 0) {\n        return (txt.split('').every(x => x >= 'a' && x <= 'z') || x >= 'A' && x <= 'Z');\n    }\n    return false;\n};\n\n/*\n  Create a function that returns true if the given string contains \n   an numeric character.\n  Examples:\n  containsNumericLetters(\"apple pie\") ➞ false\n  containsNumericLetters(\"'apple pie\") ➞ false\n  containsNumericLetters(\"apple pi e\") ➞ false\n  containsNumericLetters(\"apple pi e \") ➞ false\n  containsNumericLetters(\"\") ➞ false\n  */\nconst containsNumericLetters = (txt) => {\n    if(txt.length > 0) {\n        return (txt.split('').every(x => x >= '0' && x <= '9'));\n    }\n    return false"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lastElement = arr[arr.length - 1]\n  let left = 0\n  let right = arr.length - 1\n  let current = 0\n\n  while (right >= left) {\n    if (arr[current] >= lastElement) {\n      return current\n    }\n    if (arr[current] < lastElement) {\n      if (arr[current + 1] > lastElement) {\n        return current + 1\n      }\n    }\n    right -= 1\n    current += 1\n  }\n\n  return -1\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (!lst.length) {\n    return null\n  }\n  const lstMax = largest(lst)\n  const lstMin = smallest(lst)\n  if (lstMax === null) {\n    return null\n  }\n  return [lstMax, lstMin]\n}\n\nmodule.exports = largestSmallestIntegers<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(a === b) return null;\n   if(typeof a!== typeof b) {\n     if(a > b) return a;\n     if(b > a) return b;\n   }\n   if(typeof a === \"number\") return a > b? a : b;\n   if(typeof a === \"string\") {\n     if(typeof b === \"number\") return a > b? a : b;\n     return b > a? b : a;\n   }\n   return a > b? a : b;\n }\n\nconsole.log(compareOne(1,2.5));\nconsole.log(compareOne(1,\" 2,3\"));\nconsole.log(compareOne(\"5,1\",\" 6\"));\nconsole.log(compareOne(\"1\", 1));\n\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n      count++;\n    }\n  }\n  return (count === 4);\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\nconsole.log(specialFactorial(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial2(n - 1) * specialFactorial2(n - 2) * specialFactorial2(n - 3);\n};\n\nconsole.log(specialFactorial2(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial3(n - 1) * specialFactorial3(n - 2) * specialFactorial3(n - 3);\n};\n\nconsole.log(specialFactorial3(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial4(n - 1) * specialFactorial4(n - 2) * specialFactorial4(n - 3);\n};\n\nconsole.log(specialFactorial4(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial5(n - 1) * specialFactorial5(n - 2) * specialFactorial5(n - 3);\n};\n\nconsole.log(specialFactorial5(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial6(n - 1) * specialFactorial6(n - 2) * specialFactorial6(n - 3);\n};\n\nconsole.log(specialFactorial6(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial7(n - 1) * specialFactorial7(n - 2) * specialFactorial7(n - 3);\n};\n\nconsole.log(specialFactorial7(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial8(n - 1) * specialFactorial8(n - 2) * specialFactorial8(n - 3);\n};\n\nconsole.log(specialFactorial8(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial9(n - 1) * specialFactorial9(n - 2) * specialFactorial9(n - 3);\n};\n\nconsole.log(specialFactorial9(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial10(n - 1) * specialFactorial10(n - 2) * specialFactorial10(n - 3);\n};\n\nconsole.log(specialFactorial10(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial11(n - 1) * specialFactorial11(n - 2) * specialFactorial11(n - 3);\n};\n\nconsole.log(specialFactorial11(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial12(n - 1) * specialFactorial12(n - 2) * specialFactorial12(n - 3);\n};\n\nconsole.log(specialFactorial12(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial13(n - 1) * specialFactorial13(n - 2) * specialFactorial13(n - 3);\n};\n\nconsole.log(specialFactorial13(4));\n\n/*\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial14(n - 1) * specialFactorial14(n - 2) * specialFactorial14("}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, \"_\");\n};\n\nconst isSpace = (text) => {\n  return /^\\s*$/.test(text);\n};\n\nconst hasTwoSpaces = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwo = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unify = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fix = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fixSpacesFrom = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst hasTwoSpacesFrom = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwoFrom = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unifyFrom = (text) => {\n  const [ first, second ] = splitAtTwoFrom(text);\n  return first + '_' + second;\n};\n\nconst fixFrom = (text) => {\n  const [ first, second ] = splitAtTwoFrom(text);\n  return first + '_' + second;\n};\n\nconst hasTwoSpacesFrom = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpacesFrom = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fix = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst hasTwoSpaces = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwo = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unify = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fix = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpacesFrom = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fix = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst hasTwoSpaces = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwo = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unify = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fix = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpacesFrom = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fix = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst hasTwoSpaces = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwo = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unify = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fix = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpacesFrom = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fix = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst hasTwoSpaces = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwo = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unify = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fix = (text) => {\n  const [ first, second ] = splitAtTwo(text);\n  return first + '_' + second;\n};\n\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixSpacesFrom = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fix = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst hasTwoSpaces = (text) => {\n  return /\\s+/.test(text);\n};\n\nconst splitAtTwo = (text) => {\n  return text.split(/\\s+/);\n};\n\nconst unify = (text) => {\n  const"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const invalid_char = /[^a-zA-Z0-9\\.\\s]/\n  if (file_name.length <= 3) {\n    return \"Yes\"\n  }\n  if (file_name.indexOf(\".\") === -1) {\n    return \"No\"\n  }\n  if (file_name.indexOf(\".\") === 0) {\n    return \"No\"\n  }\n  if (file_name.indexOf(\".\") === file_name.length - 3) {\n    return \"No\"\n  }\n  const name = file_name.substring(0, file_name.indexOf(\".\"))\n  if (name.length === 0) {\n    return \"No\"\n  }\n  if (invalid_char.test(name)) {\n    return \"No\"\n  }\n  if (name.charAt(0).toLowerCase()!== name.charAt(0)) {\n    return \"No\"\n  }\n  return \"Yes\"\n}\n\nconst main = () => {\n  const input = parseInt(process.argv[2])\n  const output = parseInt(process.argv[3])\n  console.log(fileNameCheck(input))\n  console.log(fileNameCheck(output))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      result += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return result;\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall replace all occurrences of the \n   substring in the list with the same substring in the replacement string. The function did not changed the entries \n   in the list whose substring in the replacement string was not in the list. The function shall then return the \n   concatenation of all entries. \n  \n  Examples:\n  For lst = ['a','b','c','d','e'] the output should be 'abcd'\n  For lst = []  the output should be ''\n  For lst = ['a','b','c','d','e','f'] the output should be 'abcd'\n  For lst = ['aa','bb','cc','dd','ee','ff'] the output should be 'aaabbccddeeff'\n  */\nconst replaceAll = (lst, oldSubstring, newSubstring) => {\n  let result = '';\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i].replace(oldSubstring, newSubstring);\n  }\n  return result;\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall replace the first occurrence of the \n   substring in the list with the same substring in the replacement string. The function did not changed the entries \n   in the list whose substring in the replacement string was not in the list. The function shall then return the \n   concatenation of all entries. \n  \n  Examples:\n  For lst = ['a','b','c','d','e'] the output should be 'abcd'\n  For lst = []  the output should be ''\n  For lst = ['a','b','c','d','e','f'] the output should be 'abcdef'\n  For lst = ['aa','bb','cc','dd','ee','ff'] the output should be 'aaabbccddeeff'\n  */\nconst replaceFirst = (lst, oldSubstring, newSubstring) => {\n  let result = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(oldSubstring)!== -1) {\n      result += lst[i].replace(oldSubstring, newSubstring);\n    } else {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall replace all occurrences of the \n   substring in the list with the same substring in the replacement string. The function did not changed the entries \n   in the list whose substring in the replacement string was not in the list. The function shall then return the \n   concatenation of all entries. \n  \n  Examples:\n  For lst = ['a','b','c','d','e'] the output should be 'abcd'\n  For lst = []  the output should be ''\n  For lst = ['a','b','c','d','e','f'] the output should be 'abcdef'\n  For lst = ['aa','bb','cc','dd','ee','ff'] the output should be 'aaabbccddeeff'\n  */\nconst replaceAllOccurrences = (lst, oldSubstring, newSubstring) => {\n  let result = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(oldSubstring)!== -1) {\n      result += lst[i].replace(oldSubstring, newSubstring);\n    } else {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the number of \n   occurrences of the substring in the list. The function did not changed the entries in the list. The function \n   shall then return the sum of all occurrences. \n  \n  Examples:\n  For lst = ['a','b','c','d','e'] the output should be 2\n  For lst = []  the output should be 0\n  For lst = ['a','b','c','d','e','f'] the output should be 6\n  */\nconst countOccurrences = (lst, substr) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].indexOf(substr)!== -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the string without \n   the first occurrence of the substring. The function did not changed the entries in the list. The function \n   shall then return the concatenation of all entries. \n  \n  Examples:\n  For lst = ['a','b','c','d','e'] the output should be 'bcde'\n  For lst = []  the output should be ''\n  For lst = ['a','b','c','d','e','f'] the output should be 'bcdef'\n  */\nconst removeFirstOccurrence = (lst, substr) => {\n  let"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let a = sentence.split(\" \")\n    let s = \"\"\n    for (let i = 0; i < a.length; i++) {\n        let x = a[i]\n        let xLength = x.length\n        let sLength = s.length\n        if (xLength > 1) {\n            if (isPrime(xLength)) {\n                s += x\n            }\n        }\n    }\n    return s\n}\n\nconst isPrime = (num) => {\n    let i = 2\n    while (i <= num) {\n        if (num % i === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n\tlet [numerator,denominator] = x.split('/');\n\tlet [numeratorN,denominatorN] = n.split('/');\n\tlet xN = +numeratorN;\n\tlet yN = +denominatorN;\n\tlet [x,y] = [+numerator,+denominator];\n\tif(yN==1) return true;\n\tif(xN>yN){\n\t\treturn false;\n\t}\n\twhile(xN>1){\n\t\tlet [numeratorN,denominatorN] = xN.toString().split('/');\n\t\tlet [x,y] = [+numeratorN,+denominatorN];\n\t\tif(xN==yN){\n\t\t\treturn true;\n\t\t}\n\t\txN=xN/yN;\n\t}\n\treturn false;\n }\n\nexport default simplify;<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints2 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints3 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints4 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints5 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints6 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints7 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints8 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints9 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints10 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints11 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints12 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints13 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    if (diff > 0) return a > b? 1 : -1\n    if (diff < 0) return a < b? -1 : 1\n  })\n  return sorted\n}\n\nconst orderByPoints14 = (nums) => {\n  let sorted = nums.slice(0)\n  sorted.sort((a, b) => {\n    let diff = Math.abs(a - b)\n    if (diff === 0) return 0\n    "}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let length = nums.length;\n  let i = 0;\n  while (i < length) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 3 || nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 5 || nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 7 || nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 9) {\n      return i + 1;\n    }\n    i++;\n  }\n  return 0;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}).map(() => (Math.floor(Math.random() * n) + 1))\n  return a.reduce((acc, i) => {\n    const j = Math.floor(Math.random() * n) + 1\n    const k = Math.floor(Math.random() * n) + 1\n    if (i < j && j < k) {\n      acc += (a[i] + a[j] + a[k]) % 3\n    }\n    return acc\n  }, 0)\n}\n\nconsole.log(getMaxTriples(5))<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    var result = [];\n    var result2 = [];\n    var i, j, k, l, m;\n    var temp1, temp2, temp3;\n    var temp4, temp5, temp6;\n    var temp7, temp8, temp9;\n    var temp10, temp11, temp12;\n    var temp13, temp14, temp15;\n    var temp16, temp17, temp18;\n    var temp19, temp20, temp21;\n    var temp22, temp23, temp24;\n    var temp25, temp26, temp27;\n    var temp28, temp29, temp30;\n    var temp31, temp32, temp33;\n    var temp34, temp35, temp36;\n    var temp37, temp38, temp39;\n    var temp40, temp41, temp42;\n    var temp43, temp44, temp45;\n    var temp46, temp47, temp48;\n    var temp49, temp50, temp51;\n    var temp52, temp53, temp54;\n    var temp55, temp56, temp57;\n    var temp58, temp59, temp60;\n    var temp61, temp62, temp63;\n    var temp64, temp65, temp66;\n    var temp67, temp68, temp69;\n    var temp70, temp71, temp72;\n    var temp73, temp74, temp75;\n    var temp76, temp77, temp78;\n    var temp79, temp80, temp81;\n    var temp82, temp83, temp84;\n    var temp85, temp86, temp87;\n    var temp88, temp89, temp90;\n    var temp91, temp92, temp93;\n    var temp94, temp95, temp96;\n    var temp97, temp98, temp99;\n    var temp100, temp101, temp102;\n    var temp103, temp104, temp105;\n    var temp106, temp107, temp108;\n    var temp109, temp110, temp111;\n    var temp112, temp113, temp114;\n    var temp115, temp116, temp117;\n    var temp118, temp119, temp120;\n    var temp121, temp122, temp123;\n    var temp124, temp125, temp126;\n    var temp127, temp128, temp129;\n    var temp130, temp131, temp132;\n    var temp133, temp134, temp135;\n    var temp136, temp137, temp138;\n    var temp139, temp140, temp141;\n    var temp142, temp143, temp144;\n    var temp145, temp146, temp147;\n    var temp148, temp149, temp150;\n    var temp151, temp152, temp153;\n    var temp154, temp155, temp156;\n    var temp157, temp158, temp159;\n    var temp160, temp161, temp162;\n    var temp163, temp164, temp165;\n    var temp166, temp167, temp168;\n    var temp169, temp170, temp171;\n    var temp172, temp173, temp174;\n    var temp175, temp176, temp177;\n    var temp178, temp179, temp180;\n    var temp181, temp182, temp183;\n    var temp184, temp185, temp186;\n    var temp187, temp188, temp189;\n    var temp190, temp191, temp192;\n    var temp193, temp194, temp195;\n    var temp196, temp197, temp198;\n    var temp199, temp200, temp201;\n    var temp202, temp203, temp204;\n    var temp205, temp206, temp207;\n    var temp208, temp209, temp210;\n    var temp211, temp212, temp213;\n    var temp214, temp215, temp216;\n    var temp217, temp218, temp219;\n    var temp220, temp221, temp222;\n    var temp223, temp224, temp225;\n    var temp226, temp227, temp228;\n    var temp229, temp230, temp231;\n    var temp232, temp233, temp234;\n    var temp235, temp236, temp237;\n    var temp238, temp239, temp240;\n    var temp241, temp242, temp243;\n    var temp244, temp245, temp246;\n    var temp247, temp248, temp249;\n    var temp250, temp251, temp252;\n    var temp253, temp254, temp255;\n    var temp256, temp257, temp258;\n    var temp259, temp260, temp261;\n    var temp262, temp263, temp264;\n    var temp265, temp266, temp267;\n    var temp268, temp269, temp270;\n    var temp271, temp272, temp273;\n    var temp274, temp275, temp276;\n    var temp277, temp278, temp279;\n    var temp280, temp281, temp282;\n    var temp283, temp284, temp285;\n    var temp286, temp287, temp288;\n    var temp289, temp290, temp291;\n    var temp292, temp293, temp294;\n    var temp295, temp296, temp297;\n    var temp298, temp299, temp300;\n    var temp301, temp302, temp303;\n    var temp304, temp305, temp306;\n    var temp307, temp308, temp309;\n    var temp310, temp311, temp312;\n    var temp313, temp314, temp315;\n    var temp316, temp317, temp318;\n    var temp319, temp320, temp321;\n    "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  if (!lst) return lst\n  const len = lst.length\n  const sum = (lst.reduce((acc, val) => acc + val.length, 0))\n  if (sum % 2) {\n    const even = lst.filter(val => val.length % 2 === 0)\n    const odd = lst.filter(val => val.length % 2!== 0)\n    const sortedOdd = sortedListSum(odd)\n    const sortedEven = sortedListSum(even)\n    const merged = [...sortedOdd,...sortedEven]\n    return merged\n  } else {\n    return lst.sort((a, b) => a.length - b.length)\n  }\n}\n\n/*\n  Write a function that accepts a list of strings as a parameter, \n   and return a list of strings that is sorted in alphabetical order. \n   The list may contain duplicates. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"a\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\", \"a\"]\n  */\nconst sortedList = (lst) => {\n  if (!lst) return lst\n  const sortedListSum = (lst) => {\n    return lst.sort((a, b) => a.localeCompare(b))\n  }\n  return sortedListSum(lst)\n}\n\n/*\n  Write a function that accepts a list of strings as a parameter, \n   and return a list of strings that is sorted in alphabetical order. \n   The list may contain duplicates. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\", \"a\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\", \"a\"]\n  */\nconst sortedList = (lst) => {\n  if (!lst) return lst\n  const len = lst.length\n  const sortedListSum = (lst) => {\n    return lst.sort((a, b) => a.localeCompare(b))\n  }\n  return sortedListSum(lst)\n}\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\", \"ab\", \"cd\"]\n]\n\nconsole.log(sortedList(test[0]))\nconsole.log(sortedList(test[1]))\nconsole.log(sortedList(test[2]))\nconsole.log(sortedList(test[3]))\nconsole.log(sortedList(test[4]))\nconsole.log(sortedList(test[5]))\nconsole.log(sortedList(test[6]))\nconsole.log(sortedList(test[7]))\nconsole.log(sortedList(test[8]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) {\n    return y;\n  }\n  if (isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\nconst isPrime = (n) => {\n  const nInt = n | 0;\n  for (let i = 2; i <= nInt; i++) {\n    if (nInt % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(11, 5, 17));\n//console.log(xOrY(7, 4, 13));\n//console.log(xOrY(19, 7, 23));\n//console.log(xOrY(17, 4, 13));\n//console.log(xOrY(19, 7,"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   let sum = 0; \n   for (let i = 0; i < lst.length; i++) { \n     let num = lst[i]; \n     if (num % 2 === 0) { \n       sum += num * num; \n     } \n   } \n   return sum; \n } \n \n const isEven = (num)=>{\n   return num % 2 === 0; \n } \n \n const evenSum = (lst)=>{\n   let sum = 0; \n   for (let i = 0; i < lst.length; i++) { \n     let num = lst[i]; \n     if (isEven(num)) { \n       sum += num; \n     } \n   } \n   return sum; \n } \n \n const sum = (lst)=>{\n   return lst.reduce((x, y) => x + y, 0); \n } \n \n \n const findOdd = (lst)=>{\n   let sum = 0; \n   for (let i = 0; i < lst.length; i++) { \n     let num = lst[i]; \n     if (isEven(num)) { \n       sum += num; \n     } \n   } \n   return sum; \n } \n \n const main = ()=>{\n   let lst = [1, 3, 2, 0, 9, -2]; \n   console.log(doubleTheDifference(lst)); \n   console.log(evenSum(lst)); \n   console.log(sum(lst)); \n   console.log(findOdd(lst)); \n } \n \n main(); \n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map(Number.prototype.valueOf)\n  const guess = guess.map(Number.prototype.valueOf)\n  const difference = (guess - score)\n  const index = guess.indexOf(0)\n  return difference.filter(x => x > 0).map(x => x * x)\n}\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  extensions.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n\n    let capA = 0;\n    let capB = 0;\n    for (let i = 0; i < a.length; i++) {\n      if (a[i].toUpperCase() === a[i]) {\n        capA += 1;\n      }\n      if (b[i].toUpperCase() === b[i]) {\n        capB += 1;\n      }\n    }\n    return capA - capB;\n  });\n\n  return class_name + '.' + extensions[0];\n};\n\nconst createExtension = (class_name, extension) => {\n  let extensionName = extension.split('.').pop();\n  let ext_class = require(`${class_name}${extension}`);\n\n  return Object.assign(ext_class, {\n    create(extension) {\n      return require(`${extension}`);\n    }\n  });\n};\n\nconst createClass = (class_name, extensions) => {\n  return Object.assign(class_name, {\n    create(extension) {\n      return require(`${extension}`);\n    }\n  });\n};\n\nconst getExtensions = (class_name, extensions) => {\n  return extensions.map(extension => {\n    return createExtension(class_name, extension);\n  });\n};\n\nconst getClasses = (class_name, extensions) => {\n  return extensions.map(extension => {\n    return createClass(class_name, extension);\n  });\n};\n\nconst getClassesAndExtensions = (class_name, extensions) => {\n  return getClasses(class_name, extensions).concat(getExtensions(class_name, extensions));\n};\n\nmodule.exports = {\n  strongestExtension,\n  getClassesAndExtensions\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   var a_cyc=a.split(\"\");\n   var b_cyc=b.split(\"\");\n   var len=a_cyc.length;\n   for(var i=0;i<len;i++){\n     if(b_cyc.indexOf(a_cyc[i])!==-1){\n       return true;\n     }\n   }\n   return false;\n }\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    if (num === 0) {\n        return (1, 1)\n    }\n\n    let oddDigits = 0\n    let evenDigits = 0\n    while (num > 0) {\n        if (num % 2 === 0) {\n            evenDigits += 1\n        } else {\n            oddDigits += 1\n        }\n\n        num = Math.floor(num / 2)\n    }\n\n    return (oddDigits, evenDigits)\n}\n\nexport default evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const digits = ['', 'i', 'x', 'c', 'd', 'v', 'l', 'x', 'x', 'x', 'x', 'x', 'x'];\n  const values = [1000, 900, 500, 400, 100, 50, 10, 9, 5, 4, 1];\n  const result = [];\n  let roman = '';\n  for (let i = 0; i < values.length; i++) {\n    while (number >= values[i]) {\n      roman += digits[i];\n      number -= values[i];\n    }\n  }\n  roman = roman.toLowerCase();\n  return roman;\n};\n\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const [x, y] = [a, b];\n  const [z, w] = [c, c];\n\n  return (x + y <= z + w && x + z <= y + w && y + z <= x + w);\n};\n\n/*\n Given the lengths of the three sides of a triangle, return true if the\n   triangle is equilateral, false otherwise.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle = (a, b, c) => {\n  const [x, y] = [a, b];\n  const [z, w] = [c, c];\n\n  return (x + y === z + w && x + z === y + w);\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the perimeter of the\n   triangle.\n  Example:\n  perimeterTriangle(3, 4, 5) == 12\n  perimeterTriangle(1, 2, 3) == 4\n  */\nconst perimeterTriangle = (a, b, c) => {\n  return (2 * a + 2 * b + 2 * c);\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the area of the\n   triangle.\n  Example:\n  areaTriangle(3, 4, 5) == 12\n  areaTriangle(1, 2, 3) == 8\n  */\nconst areaTriangle = (a, b, c) => {\n  return (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a + b + c, 2) / 2);\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the volume of the\n   triangle.\n  Example:\n  volumeTriangle(3, 4, 5) == 25\n  volumeTriangle(1, 2, 3) == 8\n  */\nconst volumeTriangle = (a, b, c) => {\n  return (Math.pow(a, 2) * b * c);\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the hypotenuse of the\n   triangle.\n  Example:\n  hypotenuseTriangle(3, 4, 5) == 7\n  hypotenuseTriangle(1, 2, 3) == 3\n  */\nconst hypotenuseTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the height of the\n   triangle.\n  Example:\n  heightTriangle(3, 4, 5) == 4\n  heightTriangle(1, 2, 3) == 3\n  */\nconst heightTriangle = (a, b, c) => {\n  return Math.max(a, Math.max(b, c));\n};\n\n/*\n Given the lengths of the three sides of a triangle, return the area of the\n   triangle.\n  Example:\n  areaTriangle(3, 4, 5) == 12\n  areaTriangle(1, 2, 3) == 8\n  */\nconst areaTriangle = (a, b, c) => {\n  return (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a + b + c, 2) / 2);\n};\n\nconst triangle = {\n  rightAngleTriangle,\n  equilateralTriangle,\n  perimeterTriangle,\n  areaTriangle,\n  volumeTriangle,\n  hypotenuseTriangle,\n  heightTriangle\n};\n\nexport default triangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n    let uniqueChars=0,maxLen=0;\n    words.forEach((word)=>{\n        uniqueChars+=word.length;\n        if(word.length>maxLen){\n            maxLen=word.length;\n        }\n    });\n    if(maxLen==0){\n        return null;\n    }\n    return words.reduce((acc,word)=>{\n        if(acc.length<word.length){\n            return word;\n        }\n        return acc;\n    }).reduce((acc,word)=>{\n        let prevAcc=acc.slice(0,acc.length-word.length),currAcc=word;\n        let i=0;\n        while(i<prevAcc.length){\n            if(prevAcc[i]!==currAcc[i]){\n                return prevAcc;\n            }\n            i++;\n        }\n        return currAcc;\n    },words[0]);\n}\n\nlet findMax= (words)=>{\n    let uniqueChars=0,maxLen=0;\n    words.forEach((word)=>{\n        uniqueChars+=word.length;\n        if(word.length>maxLen){\n            maxLen=word.length;\n        }\n    });\n    if(maxLen==0){\n        return null;\n    }\n    return words.reduce((acc,word)=>{\n        if(acc.length<word.length){\n            return word;\n        }\n        return acc;\n    }).reduce((acc,word)=>{\n        let prevAcc=acc.slice(0,acc.length-word.length),currAcc=word;\n        let i=0;\n        while(i<prevAcc.length){\n            if(prevAcc[i]!==currAcc[i]){\n                return prevAcc;\n            }\n            i++;\n        }\n        return currAcc;\n    },words[0]);\n}\n\nlet findMax= (words)=>{\n    let uniqueChars=0,maxLen=0;\n    words.forEach((word)=>{\n        uniqueChars+=word.length;\n        if(word.length>maxLen){\n            maxLen=word.length;\n        }\n    });\n    if(maxLen==0){\n        return null;\n    }\n    return words.reduce((acc,word)=>{\n        if(acc.length<word.length){\n            return word;\n        }\n        return acc;\n    }).reduce((acc,word)=>{\n        let prevAcc=acc.slice(0,acc.length-word.length),currAcc=word;\n        let i=0;\n        while(i<prevAcc.length){\n            if(prevAcc[i]!==currAcc[i]){\n                return prevAcc;\n            }\n            i++;\n        }\n        return currAcc;\n    },words[0]);\n}\n\nconst findMax= (words)=>{\n    let uniqueChars=0,maxLen=0;\n    words.forEach((word)=>{\n        uniqueChars+=word.length;\n        if(word.length>maxLen){\n            maxLen=word.length;\n        }\n    });\n    if(maxLen==0){\n        return null;\n    }\n    return words.reduce((acc,word)=>{\n        if(acc.length<word.length){\n            return word;\n        }\n        return acc;\n    }).reduce((acc,word)=>{\n        let prevAcc=acc.slice(0,acc.length-word.length),currAcc=word;\n        let i=0;\n        while(i<prevAcc.length){\n            if(prevAcc[i]!==currAcc[i]){\n                return prevAcc;\n            }\n            i++;\n        }\n        return currAcc;\n    },words[0]);\n}\n\nconst findMax= (words)=>{\n    let uniqueChars=0,maxLen=0;\n    words.forEach((word)=>{\n        uniqueChars+=word.length;\n        if(word.length>maxLen){\n            maxLen=word.length;\n        }\n    });\n    if(maxLen==0){\n        return null;\n    }\n    return words.reduce((acc,word)=>{\n        if(acc.length<word.length){\n            return word;\n        }\n        return acc;\n    }).reduce((acc,word)=>{\n        let prevAcc=acc.slice(0,acc.length-word.length),currAcc=word;\n        let i=0;\n        while(i<prevAcc.length){\n            if(prevAcc[i]!==currAcc[i]){\n                return prevAcc;\n            }\n            i++;\n        }\n        return currAcc;\n    },words[0]);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  }\n  return [number + remaining, remaining];\n}\n\nconst eat = (number, need, remaining) => {\n  if (remaining >= need) {\n    return [number + need, remaining - need];\n  }\n  return [number + remaining, remaining];\n}\n\nconst [eat, remaining] = eat(5, 6, 10);\nconsole.log(eat);\nconsole.log(remaining);\n\nconst [eat, remaining] = eat(4, 8, 9);\nconsole.log(eat);\nconsole.log(remaining);\n\nconst [eat, remaining] = eat(1, 10, 10);\nconsole.log(eat);\nconsole.log(remaining);\n\nconst [eat, remaining] = eat(2, 11, 5);\nconsole.log(eat);\nconsole.log(remaining);\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const operandLength = operand.length - 1\n    const operatorLength = operator.length\n    const result = [0]\n\n    for (let i = 0; i < operandLength; i++) {\n        const operandValue = operand[i]\n        const operatorValue = operator[i]\n        result[i + 1] = (operandValue * (operandLength - i)) + (operandValue * operatorValue)\n    }\n\n    return result\n}\n\n/*\n  Given an expression in infix form, return the evaluation of this expression.\n  Example:\n  The expression \"3 + 4 * 5 - 6\" returns 23\n  */\nconst doInfix = (expression) => {\n    const operators = ['+', '-', '*', '/', '**']\n    const operands = expression.split(' ')\n    const expressionLength = operands.length - 1\n    const result = [0]\n\n    for (let i = 0; i < expressionLength; i++) {\n        const operator = operators[i]\n        const operand = operands[i]\n        const operandLength = operand.length - 1\n\n        if (operandLength > 0) {\n            const operandValue = parseInt(operand[0])\n            const operatorValue = parseInt(operator)\n\n            result[i + 1] = (operandValue * (operandLength - i)) + (operandValue * operatorValue)\n        }\n    }\n\n    return result\n}\n\nconst doPostfix = (expression) => {\n    const operators = ['+', '-', '*', '/', '**']\n    const operands = expression.split(' ')\n    const expressionLength = operands.length - 1\n    const result = [0]\n\n    for (let i = expressionLength - 1; i >= 0; i--) {\n        const operator = operators[i]\n        const operand = operands[i]\n        const operandLength = operand.length - 1\n\n        if (operandLength > 0) {\n            const operandValue = parseInt(operand[0])\n            const operatorValue = parseInt(operator)\n\n            result[i + 1] = (operandValue * (operandLength - i)) + (operandValue * operatorValue)\n        }\n    }\n\n    return result\n}\n\nconst evaluate = (expression) => {\n    const operator = expression[0]\n    const operand = expression.slice(1)\n\n    if (operator === '+') {\n        return doAlgebra(operator, operand)\n    } else if (operator === '-') {\n        return doAlgebra(operator, operand)\n    } else if (operator === '*') {\n        return doAlgebra(operator, operand)\n    } else if (operator === '/') {\n        return doAlgebra(operator, operand)\n    } else if (operator === '**') {\n        return doAlgebra(operator, operand)\n    } else if (operator === '+') {\n        return doInfix(expression)\n    } else if (operator === '-') {\n        return doInfix(expression)\n    } else if (operator === '*') {\n        return doInfix(expression)\n    } else if (operator === '/') {\n        return doInfix(expression)\n    } else if (operator === '**') {\n        return doInfix(expression)\n    } else if (operator === '-') {\n        return doPostfix(expression)\n    } else if (operator === '+') {\n        return doPostfix(expression)\n    } else if (operator === '/') {\n        return doPostfix(expression)\n    } else if (operator === '**') {\n        return doPostfix(expression)\n    } else if (operator === '-') {\n        return doPostfix(expression)\n    } else {\n        return undefined\n    }\n}\n\nconst evaluateAndPrint = (expression) => {\n    const evaluation = evaluate(expression)\n\n    if (evaluation === undefined) {\n        console.log('Error: Invalid expression.')\n    } else {\n        console.log(evaluation)\n    }\n}\n\nconst parseInput = () => {\n    const expression = readLine()\n    return expression\n}\n\nconst readLine = () => {\n    return console.readline()\n}\n\nconst main = () => {\n    const expression = parseInput()\n\n    evaluateAndPrint(expression)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s = s.split('');\n  let r = [];\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i].match(/[a-z]/)) {\n      r.push(s[i].toUpperCase());\n    } else {\n      r.push(s[i]);\n    }\n  }\n  return r.join('');\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  let md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
