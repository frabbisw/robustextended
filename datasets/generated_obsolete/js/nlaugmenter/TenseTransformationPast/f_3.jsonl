{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.sort();\n  let i = 0;\n  let j = numbers.length - 1;\n  while (i < j) {\n    if (Math.abs(sorted[i] - sorted[j]) < threshold) {\n      return true;\n    }\n    if (Math.abs(sorted[i] - sorted[j]) > threshold) {\n      i++;\n    }\n    j--;\n  }\n  return false;\n};\n\nexport { hasCloseElements };\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    let groups = [];\n    let level = 0;\n    let group = '';\n    for (let i = 0; i < paren_string.length; i++) {\n        let char = paren_string[i];\n        if (char === '(') {\n            level++;\n        } else if (char === ')') {\n            level--;\n        }\n        if (level === 0 && level!== 0) {\n            groups.push(group);\n            group = '';\n        } else {\n            group += char;\n        }\n    }\n    groups.push(group);\n    return groups;\n};\n\n/* \n   Input:\n   1.  A string containing only the following symbols: ( ) [ ] { }\n   2.  One string, and a string, each of which has the same number of\n       characters as the string in question. Each character is either a\n       single-character symbol or a double-character symbol, and the\n       double-character symbol appears in the string after the\n       corresponding single-character symbol.\n   3.  Two strings, each of which has the same number of characters as\n       the string in question. The first string is before the second,\n       and the second is after the first.\n   4.  A string containing only the following symbols: [ ] { }\n   5.  One string, and a string, each of which has the same number of\n       characters as the string in question. The character in the string\n       is not a single-character symbol or a double-character symbol.\n   6.  Two strings, each of which has the same number of characters as\n       the string in question. The first string is before the second,\n       and the second is after the first.\n   7.  A string containing only the following symbols: [ ] { }\n   8.  One string, and a string, each of which has the same number of\n       characters as the string in question. The character in the string\n       is not a single-character symbol or a double-character symbol.\n   9.  Two strings, each of which has the same number of characters as\n       the string in question. The first string is before the second,\n       and the second is after the first.\n  \n   Your goal was to find the shortest string that can be formed by \n   appending characters to the given strings.\n  \n  Example 1:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 2:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 3:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 4:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 5:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 6:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 7:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 8:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  Example 9:\n  Input:\n  (\"\")\n  (\"\")\n  (\"\")\n  Output:\n  \"()\"\n  */\nconst findShortestString = (string1, string2, string3, string4, string5, string6, string7, string8) => {\n    let string1_groups = separateParenGroups(string1);\n    let string2_groups = separateParenGroups(string2);\n    let string3_groups = separateParenGroups(string3);\n    let string4_groups = separateParenGroups(string4);\n    let string5_groups = separateParenGroups(string5);\n    let string6_groups = separateParenGroups(string6);\n    let string7_groups = separateParenGroups(string7);\n    let string8_groups = separateParenGroups(string8);\n    let result = [];\n    \n    // First check if one string is empty\n    if (string1_groups.length === 0 && string2_groups.length === 0 && string3_groups.length === 0 && string4_groups.length === 0 && string5_groups.length === 0 && string6_groups.length === 0 && string7_groups.length === 0 && string8_groups.length === 0) {\n        result.push(string1);\n        return result;\n    }\n    \n    // Then check if one string is empty\n    if (string1_groups.length === 0 && string2_groups.length === 0 && string3_groups.length === 0 && string4_groups.length === 0 && string5_groups.length === 0 && string6_groups.length === 0 && string7_groups.length === 0 && string8_groups.length === 0) {\n        result.push(string2);\n        return result;\n    }\n    \n    // Then check if one string is empty\n    if (string1_groups.length === 0 && string2_groups.length === 0 && string3_groups.length === 0 && string4_groups.length === 0 && string5_groups.length === 0 && string6_groups.length === 0 && string7_groups.length === 0 && string8_groups.length === 0) {\n        result.push(string3);\n        return result;\n    }\n    \n    // Then check if one string is empty\n    if (string1_groups.length === 0 && string2_groups.length === 0 && string3_groups.length === 0 && string4_groups.length === 0 && string5_groups.length === 0 && string6_groups.length === 0 && string7_groups.length === 0 && string8_groups.length === 0) {\n        result.push(string4);\n        return result;\n    }\n    \n    "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number >= 1) {\n    return number - Math.floor(number)\n  } else {\n    return 0\n  }\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  return number - truncateNumber(number)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateInt(3.5)\n  3\n  */\n\n/* \n   Given a positive integer, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateInt(3)\n  3\n  */\n\n/* Given a positive integer, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateInt(3.5)\n  3\n  */\n\n/* Given a positive integer, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Return the integer part of the number.\n  >>> truncateInt(0.5)\n  0\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let account = 0;\n\n  for (let i = 0; i < operations.length; i++) {\n    account += operations[i];\n    if (account < 0) return true;\n  }\n\n  return false;\n}\n\n/*\n  Given a list of numbers, find the sum of all the numbers.\n  \n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  64\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()` function to solve this problem.\n  \n  * You were given a list of numbers, you can only use the sum function.\n  * The sum function should return the sum of all the numbers, including zero.\n  * The sum function may throw an error if the list has more than ten elements.\n  * The sum function may throw an error if the list contains negative numbers.\n  * The sum function may throw an error if the list contains numbers that do not sum up to zero.\n  * The sum function may throw an error if the list contains an invalid number, e.g. NaN.\n  * You should not use `Math.sum()`"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const nums = numbers.filter((n) => isNumeric(n));\n  const sum = nums.reduce((acc, cur) => acc + cur, 0);\n  const mean = sum / nums.length;\n  const diffs = nums.map((n) => Math.abs(n - mean));\n  const mad = diffs.reduce((acc, cur) => acc + cur, 0) / nums.length;\n  return mad;\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  return [].concat.apply([], numbers.map(function(number, index) {\n    return (index === 0)? number : [number, delimeter].concat(numbers.slice(index + 1));\n  }));\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const parens = [];\n  const curr_level = 1;\n  const level_max = 1;\n  const depth = 0;\n  const nested_parens = paren_string.split(' ');\n  const parens_array = nested_parens.map((x) => {\n    const match = x.match(/^\\((.*)\\)$/);\n    if (match) {\n      parens.push({\n        'level': level_max,\n        'depth': depth,\n        'children': parseNestedParens(match[1]),\n      });\n    } else {\n      parens.push({\n        'level': level_max,\n        'depth': depth,\n        'children': [],\n      });\n    }\n    return parens.pop();\n  });\n  return parens_array;\n};\n\n/* \n   This function takes an array of parenthesis groups and output the most nested.\n\n  >>> parseNestedParenthesis([{'level': 2, 'depth': 1, 'children': [{'level': 2, 'depth': 2, 'children': []}, {'level': 2, 'depth': 2, 'children': []}]}, {'level': 2, 'depth': 1, 'children': []}, {'level': 2, 'depth': 1, 'children': []}, {'level': 2, 'depth': 1, 'children': []}, {'level': 2, 'depth': 1, 'children': []}, {'level': 2, 'depth': 1, 'children': []}, {'level': 2, 'depth': 1, 'children': []}])\n  [2, 2, 2]\n  */\nconst parseNestedParenthesis = (paren_array) => {\n  const parenthesis_array = [];\n  paren_array.forEach((group) => {\n    const level_max = Math.max(...group.children.map((x) => x.level));\n    parenthesis_array.push(level_max);\n  });\n  return parenthesis_array;\n};\n\n/*\n  This function takes a string of nested parenthesis and outputs the most nested.\n\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((()()())')\n  3\n  >>> parseNestedParenthesis('((()()()()())')\n  4\n  >>> parseNestedParenthesis('((()()()())')\n  4\n  >>> parseNestedParenthesis('((()())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('(((())())')\n  2\n  >>> parseNestedParenthesis('((()()())())')\n  3\n  >>> parseNestedParenthesis('((()())())')\n  3\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n  >>> parseNestedParenthesis('((())())')\n  2\n"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const regex = new RegExp(`(${substring}$)`)\n  return strings.filter((string) => regex.test(string))\n}\n\nexport {\n  filterBySubstring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = (sum, n) => {\n    sum += n;\n    return sum;\n  };\n  const product = (prod, n) => {\n    prod *= n;\n    return prod;\n  };\n  let sum = 0;\n  let prod = 1;\n  for (let number of numbers) {\n    sum = sum(sum, number);\n    prod = prod(prod, number);\n  }\n  return [sum, prod];\n};\n\nconsole.log(sumProduct([1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = [];\n  const maxIndex = [];\n  let index = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    const currentMax = max[index];\n    const currentMaxIndex = maxIndex[index];\n    const currentMaxNumber = numbers[currentMaxIndex];\n\n    if (currentMax < numbers[i]) {\n      max[index] = i;\n      maxIndex[index] = i;\n    }\n\n    if (currentMax < numbers[i]) {\n      max[index] = i;\n      maxIndex[index] = i;\n    }\n    index++;\n  }\n\n  return numbers.concat(max);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n   let suffix = findLongestPalindrome(string)\n   return string.concat(suffix.split('').reverse().join(''))\n}\n\n/* Find the longest prefix of supplied string that was a palindrome.\n   Algorithm idea was simple: \n  -Loop through the supplied string.\n    -If current char is not a letter, skip it.\n    -If the current char is a letter, and it is not the same as the last char, then \n      append the current char to the end of the string, and the string prefix is the longest\n      prefix so far.\n  */\nconst findLongestPalindrome = (string) => {\n   let result = ''\n   let i = 0\n   while (i < string.length) {\n      if (string[i].toLowerCase() === string[i + 1].toLowerCase()) {\n         result = string.substring(0, i + 1)\n         i = i + 1\n      } else {\n         i = i + 1\n      }\n   }\n   return result\n}\n\n/* Test if the string was a palindrome*/ \nconst isPalindrome = (string) => { \n   return string == string.split('').reverse().join('');\n}\n\nmodule.exports = {\n  findLongestPalindrome,\n  makePalindrome,\n  isPalindrome\n}<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] ^ b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] & b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] | b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary NOT on these inputs and return result also as a string.\n  >>> stringNot('010')\n  '011'\n  */\nconst stringNot = (a) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += ~a[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise XOR on these inputs and return result also as a string.\n  >>> stringBitwiseXor('010', '110')\n  '101'\n  */\nconst stringBitwiseXor = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] ^ b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise AND on these inputs and return result also as a string.\n  >>> stringBitwiseAnd('010', '110')\n  '00'\n  */\nconst stringBitwiseAnd = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] & b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise OR on these inputs and return result also as a string.\n  >>> stringBitwiseOr('010', '110')\n  '110'\n  */\nconst stringBitwiseOr = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] | b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise NOT on these inputs and return result also as a string.\n  >>> stringBitwiseNot('010')\n  '011'\n  */\nconst stringBitwiseNot = (a) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += ~a[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise shift right on these inputs and return result also as a string.\n  >>> stringBitwiseShiftRight('010', '110')\n  '110'\n  */\nconst stringBitwiseShiftRight = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] >> b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise shift left on these inputs and return result also as a string.\n  >>> stringBitwiseShiftLeft('010', '110')\n  '010'\n  */\nconst stringBitwiseShiftLeft = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] << b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise shift right on these inputs and return result also as a string.\n  >>> stringBitwiseShiftRight('010', '110')\n  '010'\n  */\nconst stringBitwiseShiftRight = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] >> b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise shift left on these inputs and return result also as a string.\n  >>> stringBitwiseShiftLeft('010', '110')\n  '110'\n  */\nconst stringBitwiseShiftLeft = (a, b) => {\n  let i = 0\n  let x = \"\"\n  for (i = 0; i < a.length; i++) {\n    x += a[i] << b[i]\n  }\n  return x\n}\n\n/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed bitwise shift right on these inputs and return result also as a string.\n  >>> stringBitwiseShiftRight('010', '110')\n  '110'\n  */\nconst stringBitwiseShiftRight = ("}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    let longest = null\n    strings.forEach((string) => {\n        if (longest === null || string.length > longest.length) {\n            longest = string\n        }\n    })\n    return longest\n}\n\nmodule.exports = longest<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};\n\n/* Return the result of dividing two integers\n  >>> divide(3, 5)\n  1\n  >>> divide(25, 15)\n  5\n  */\nconst divide = (a, b) => {\n  if (b === 0) {\n    throw new Error('Cannot divide by zero');\n  }\n  return a / greatestCommonDivisor(a, b);\n};\n\n/* Return the result of multiplying two integers\n  >>> multiply(3, 5)\n  15\n  >>> multiply(25, 15)\n  375\n  */\nconst multiply = (a, b) => {\n  return a * greatestCommonDivisor(a, b);\n};\n\n/* Return the result of subtracting two integers\n  >>> subtract(3, 5)\n  2\n  >>> subtract(25, 15)\n  20\n  */\nconst subtract = (a, b) => {\n  if (b === 0) {\n    throw new Error('Cannot subtract from zero');\n  }\n  return a - greatestCommonDivisor(a, b);\n};\n\n/* Return the result of dividing two integers by taking the floor\n  >>> divideFloor(3, 5)\n  1\n  >>> divideFloor(25, 15)\n  2\n  */\nconst divideFloor = (a, b) => {\n  if (b === 0) {\n    throw new Error('Cannot divide by zero');\n  }\n  return a / greatestCommonDivisor(a, b);\n};\n\n/* Return the result of multiplying two integers by taking the floor\n  >>> multiplyFloor(3, 5)\n  3\n  >>> multiplyFloor(25, 15)\n  15\n  */\nconst multiplyFloor = (a, b) => {\n  return a * greatestCommonDivisor(a, b);\n};\n\n/* Return the result of subtracting two integers by taking the floor\n  >>> subtractFloor(3, 5)\n  2\n  >>> subtractFloor(25, 15)\n  20\n  */\nconst subtractFloor = (a, b) => {\n  if (b === 0) {\n    throw new Error('Cannot subtract from zero');\n  }\n  return a - greatestCommonDivisor(a, b);\n};\n\nmodule.exports = {\n  greatestCommonDivisor,\n  divide,\n  multiply,\n  subtract,\n  divideFloor,\n  multiplyFloor,\n  subtractFloor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const index = string.length\n  while (index--) {\n    let start = index\n    while (start >= 0) {\n      if (string.charAt(start) ==='') {\n        break\n      }\n      start--\n    }\n    const end = index + 1\n    while (end <= string.length) {\n      if (string.charAt(end) ==='') {\n        break\n      }\n      end++\n    }\n    if (start < 0) {\n      prefixes.push(string)\n      break\n    }\n    prefixes.push(string.substring(start, end))\n  }\n  return prefixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  while (n > 0) {\n    s = (n % 2 === 0? n : n - 1) + s\n    n = Math.floor(n / 2)\n  }\n  return s\n}\n\n/* Return a string containing n-space-delimited strings, given the length of each string.\n  >>> stringSequence('string', 3)\n 'string string string'\n  >>> stringSequence('string', 1)\n 'string'\n  */\nconst stringSequence = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of 0s.\n  >>> repeat('0', 2)\n  '00'\n  >>> repeat('0', 1)\n  '0'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string containing the given number of occurrences of the given string.\n  >>> repeat('string', 2)\n 'stringstring'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given number of occurrences of the given character.\n  >>> repeat('string', 2)\n 'stringst'\n  >>> repeat('string', 1)\n 'string'\n  */\nconst repeat = (s, n) => {\n  return s.repeat(n)\n}\n\n/* Return a string consisting of the given length of the given string.\n  >>> repeat('"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map();\n  for (const char of string) {\n    const character = char.toUpperCase();\n    const [count, found] = map.get(character) || [0, false];\n    map.set(character, [count + 1, found]);\n  }\n  return map.size;\n};\n\n/*\n  Given a string, check whether it contains only lowercase letters.\n  >>> containsOnlyLowerCase('abCd')\n  true\n  >>> containsOnlyLowerCase('xyz')\n  false\n  */\nconst containsOnlyLowerCase = (string) => {\n  for (const char of string) {\n    if (!char.toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only uppercase letters.\n  >>> containsOnlyUpperCase('abCd')\n  false\n  >>> containsOnlyUpperCase('XYZ')\n  true\n  */\nconst containsOnlyUpperCase = (string) => {\n  for (const char of string) {\n    if (!char.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only numeric letters.\n  >>> containsOnlyNumeric('abc123')\n  true\n  >>> containsOnlyNumeric('abc')\n  false\n  >>> containsOnlyNumeric('XYZ')\n  false\n  */\nconst containsOnlyNumeric = (string) => {\n  for (const char of string) {\n    if (!char.match(/\\d/)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only letters.\n  >>> containsOnlyLetters('abc123')\n  true\n  >>> containsOnlyLetters('XYZ')\n  false\n  */\nconst containsOnlyLetters = (string) => {\n  for (const char of string) {\n    if (!char.match(/[a-z]/i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only whitespace.\n  >>> containsOnlyWhitespace(' abc ')\n  true\n  >>> containsOnlyWhitespace(' abc 123 ')\n  false\n  >>> containsOnlyWhitespace(' abc ')\n  true\n  */\nconst containsOnlyWhitespace = (string) => {\n  for (const char of string) {\n    if (!char.match(/\\s/)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains no letters, numbers, or whitespace.\n  >>> containsNoLettersOrNumeric(' abc ')\n  true\n  >>> containsNoLettersOrNumeric(' abc 123 ')\n  false\n  >>> containsNoLettersOrNumeric(' abc ')\n  true\n  */\nconst containsNoLettersOrNumeric = (string) => {\n  for (const char of string) {\n    if (char.match(/\\d/)) {\n      return false;\n    } else if (char.match(/[a-z]/i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only letters.\n  >>> containsOnlyLetters('abc123')\n  false\n  >>> containsOnlyLetters('XYZ')\n  false\n  */\nconst containsOnlyLettersNoNumbers = (string) => {\n  for (const char of string) {\n    if (char.match(/\\d/)) {\n      return false;\n    } else if (char.match(/[a-z]/i)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a string, check whether it contains only letters.\n  >>> containsOnlyLetters('abc123')\n  true\n  >>> containsOnlyLetters('XYZ')\n  false\n  */\nconst containsOnlyLettersAndNumbers = (string) => {\n  for (const char of string) {\n    if (!char.match(/\\d/)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only whitespace.\n  >>> containsOnlyWhitespace(' abc ')\n  true\n  >>> containsOnlyWhitespace(' abc 123 ')\n  false\n  >>> containsOnlyWhitespace(' abc ')\n  true\n  */\nconst containsOnlyWhitespaceNoLetters = (string) => {\n  for (const char of string) {\n    if (char.match(/\\d/)) {\n      return false;\n    } else if (char.match(/[a-z]/i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only whitespace.\n  >>> containsOnlyWhitespace(' abc ')\n  true\n  >>> containsOnlyWhitespace(' abc 123 ')\n  false\n  >>> containsOnlyWhitespace(' abc ')\n  true\n  */\nconst containsOnlyWhitespaceNoLettersOrNumbers = (string) => {\n  for (const char of string) {\n    if (char.match(/\\d/)) {\n      return false;\n    } else if (char.match(/[a-z]/i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, check whether it contains only alphabetic characters.\n  >>> containsOnlyLettersAndNumbers('abc123')\n  true\n  >>> containsOnlyLettersAndNumbers('XYZ')\n  false\n  */\nconst containsOnlyLettersAndNumbersNoWhitespace = (string) => {\n  for (const char of string) {\n    if (!char.match(/\\s/)) {\n      if (!char.match(/[a-z]/i)) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nmodule.exports = {"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beat_length = 4;\n  const beats = [];\n  let last_beat = 0;\n  let current_beat = 0;\n  let beat_str = '';\n  music_string.split(' ').forEach((beat, index) => {\n    if (beat === 'o') {\n      if (beat_str === '') {\n        beat_str = beat;\n        last_beat = current_beat;\n      } else {\n        if (beat_str === 'o|') {\n          beat_str = beat;\n          current_beat += 1;\n          beats.push(current_beat);\n          last_beat = current_beat;\n        } else if (beat_str === 'o') {\n          beat_str = beat;\n          current_beat += 1;\n          beats.push(current_beat);\n          last_beat = current_beat;\n        } else if (beat_str === '|') {\n          beat_str = beat;\n          current_beat += 1;\n          beats.push(current_beat);\n          last_beat = current_beat;\n        } else if (beat_str === '.') {\n          beat_str = beat;\n          current_beat += 1;\n          beats.push(current_beat);\n          last_beat = current_beat;\n        }\n      }\n    } else {\n      beat_str = '';\n    }\n  });\n  beats.push(current_beat);\n  return beats;\n}\n\nconst validateMusic = (music_string) => {\n  const beats = parseMusic(music_string);\n  let valid_beats = 0;\n  beats.forEach(beat => {\n    if (beat % beat_length === 0) {\n      valid_beats += 1;\n    }\n  });\n  if (valid_beats === beats.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst get_beat_length = (music_string) => {\n  const beats = parseMusic(music_string);\n  return beats.length;\n}\n\nmodule.exports = {\n  validateMusic,\n  get_beat_length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    if(string === null || substring === null) return 0;\n    return string.split(substring).length - 1;\n};\n\n/**\n  * Find the longest common substring between two strings.\n  * @param {string} a\n  * @param {string} b\n  * @return {string} The longest common substring.\n  */\nconst longestCommonSubstring = (a, b) => {\n    if(a === null || b === null) return null;\n    if(a.length === 0 || b.length === 0) return null;\n\n    let m = a.length, n = b.length;\n    let result = [];\n    let i = 0, j = 0;\n\n    while(i < m && j < n) {\n        if(a[i] === b[j]) {\n            result.push(a[i]);\n            i++;\n            j++;\n        } else if(a[i] > b[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n\n    return result.join('');\n};\n\n/**\n  * Find the longest common prefix of two strings.\n  * @param {string} a\n  * @param {string} b\n  * @return {string} The longest common prefix.\n  */\nconst longestCommonPrefix = (a, b) => {\n    if(a === null || b === null) return null;\n    if(a.length === 0 || b.length === 0) return null;\n\n    let m = a.length, n = b.length;\n    let result = '';\n    let i = 0, j = 0;\n\n    while(i < m && j < n) {\n        if(a[i] === b[j]) {\n            result += a[i];\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n\n    return result;\n};\n\n/**\n  * Find the longest common suffix of two strings.\n  * @param {string} a\n  * @param {string} b\n  * @return {string} The longest common suffix.\n  */\nconst longestCommonSuffix = (a, b) => {\n    if(a === null || b === null) return null;\n    if(a.length === 0 || b.length === 0) return null;\n\n    let m = a.length, n = b.length;\n    let result = '';\n    let i = m - 1, j = n - 1;\n\n    while(i >= 0 && j >= 0) {\n        if(a[i] === b[j]) {\n            result = a.slice(i + 1);\n            i--;\n            j--;\n        } else {\n            break;\n        }\n    }\n\n    return result;\n};\n\n/**\n  * Find the smallest substring of string that contains all the characters of another string.\n  * @param {string} a\n  * @param {string} b\n  * @return {string} The smallest substring.\n  */\nconst findSubstring = (a, b) => {\n    if(a === null || b === null) return null;\n    if(a.length === 0 || b.length === 0) return null;\n\n    let m = a.length, n = b.length;\n    let i = 0, j = 0;\n\n    while(i < m && j < n) {\n        if(a[i] === b[j]) {\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n\n    return a.slice(0, i);\n};\n\nexport {\n    howManyTimes,\n    longestCommonSubstring,\n    longestCommonPrefix,\n    longestCommonSuffix,\n    findSubstring\n};<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split(' ').sort();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('one last')\n  'one last'\n  */\nconst ordinals = (ordinals) => {\n  const sorted = ordinals.split(' ').sort();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsInverse = (ordinals) => {\n  const sorted = ordinals.split(' ').sort();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('four last')\n  'four last'\n  */\nconst ordinalsReverse = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReverseInverse = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReverseInverseReversed = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReversed = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReversedInverse = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReversedInverseReversed = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReversedInverseReversedReversed = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse().reverse().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReversedReversedReversed = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse().reverse().reverse();\n  return sorted.join(' ');\n}\n\n/*\n  Input was a space-delimited string of ordinals from 'first 'to 'last '.\n   The ordinals must be in ascending order.\n   Return the string with the ordinals sorted from smallest to largest\n  >>> ordinals('two first')\n  'two first'\n  */\nconst ordinalsReversedReversedReversedReversed = (ordinals) => {\n  const sorted = ordinals.split(' ').sort().reverse().reverse().reverse().reverse();\n  return sorted.join(' ');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    // Start with two closest numbers\n    let closestNumbers = [numbers[0], numbers[0]];\n\n    // Iterate through all the numbers\n    for (let i = 1; i < numbers.length; i++) {\n        let currentNumber = numbers[i];\n        let currentDistance = Math.abs(currentNumber - closestNumbers[0]);\n\n        // If the current number is less than the first one, replace the first\n        if (currentNumber < closestNumbers[1]) {\n            closestNumbers[0] = currentNumber;\n            closestNumbers[1] = currentNumber;\n        }\n\n        // If the current number is less than the second one, replace the second\n        if (currentNumber < closestNumbers[0]) {\n            closestNumbers[0] = currentNumber;\n        }\n\n        // If the current number is less than the first one, replace the second\n        if (currentNumber > closestNumbers[1]) {\n            closestNumbers[1] = currentNumber;\n        }\n    }\n\n    return closestNumbers;\n};\n\n// Test the function using the test suite\ndescribe(\"findClosestElements\", () => {\n    it(\"findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) should return (2.0, 2.2)\", () => {\n        const expected = [2.0, 2.2];\n        const actual = findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]);\n        expect(actual).toEqual(expected);\n    });\n\n    it(\"findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) should return (2.0, 2.0)\", () => {\n        const expected = [2.0, 2.0];\n        const actual = findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]);\n        expect(actual).toEqual(expected);\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [...numbers].map(x => x / (max - min))\n}\n\n/**\n  * Returns the minimum value of an array\n  * @param {Array} array The array\n  * @returns {Number} The minimum value\n  */\nconst min = (array) => {\n  return Math.min(...array)\n}\n\n/**\n  * Returns the maximum value of an array\n  * @param {Array} array The array\n  * @returns {Number} The maximum value\n  */\nconst max = (array) => {\n  return Math.max(...array)\n}\n\n/**\n  * Returns the mean value of an array\n  * @param {Array} array The array\n  * @returns {Number} The mean value\n  */\nconst mean = (array) => {\n  return array.reduce((sum, value) => sum + value) / array.length\n}\n\n/**\n  * Returns the sum of the values in an array\n  * @param {Array} array The array\n  * @returns {Number} The sum\n  */\nconst sum = (array) => {\n  return array.reduce((sum, value) => sum + value)\n}\n\n/**\n  * Returns the product of the values in an array\n  * @param {Array} array The array\n  * @returns {Number} The product\n  */\nconst product = (array) => {\n  return array.reduce((sum, value) => sum * value)\n}\n\n/**\n  * Returns the median value of an array\n  * @param {Array} array The array\n  * @returns {Number} The median value\n  */\nconst median = (array) => {\n  const len = array.length\n  if (len % 2 === 1) {\n    return array[(len - 1) / 2]\n  }\n  const half = Math.floor((len - 1) / 2)\n  return (array[half - 1] + array[half]) / 2\n}\n\n/**\n  * Returns the mode value of an array\n  * @param {Array} array The array\n  * @returns {Number} The mode value\n  */\nconst mode = (array) => {\n  const len = array.length\n  const maxCount = {}\n  let maxValue = 0\n  for (let i = 0; i < len; i++) {\n    const currentValue = array[i]\n    if (currentValue in maxCount) {\n      if (maxCount[currentValue] > maxCount[maxValue]) {\n        maxValue = currentValue\n      }\n    } else {\n      maxCount[currentValue] = 1\n    }\n  }\n  return maxValue\n}\n\n/**\n  * Returns the mode value of an array\n  * @param {Array} array The array\n  * @returns {Number} The mode value\n  */\nconst modeV2 = (array) => {\n  const len = array.length\n  const maxCount = {}\n  let maxValue = 0\n  for (let i = 0; i < len; i++) {\n    const currentValue = array[i]\n    if (currentValue in maxCount) {\n      if (maxCount[currentValue] < maxCount[maxValue]) {\n        maxValue = currentValue\n      }\n    } else {\n      maxCount[currentValue] = 1\n    }\n  }\n  return maxValue\n}\n\n/**\n  * Returns the mode value of an array\n  * @param {Array} array The array\n  * @returns {Number} The mode value\n  */\nconst mode3 = (array) => {\n  const len = array.length\n  const maxCount = {}\n  let maxValue = 0\n  let maxCount2 = {}\n  let maxValue2 = 0\n  let maxCount3 = {}\n  let maxValue3 = 0\n  for (let i = 0; i < len; i++) {\n    const currentValue = array[i]\n    if (currentValue in maxCount) {\n      if (maxCount[currentValue] > maxCount[maxValue]) {\n        maxValue = currentValue\n      }\n      if (maxCount[currentValue] > maxCount2[maxValue2]) {\n        maxValue2 = currentValue\n      }\n      if (maxCount[currentValue] > maxCount3[maxValue3]) {\n        maxValue3 = currentValue\n      }\n    } else {\n      maxCount[currentValue] = 1\n      maxCount2[currentValue] = 1\n      maxCount3[currentValue] = 1\n    }\n  }\n  return [maxValue, maxValue2, maxValue3]\n}\n\n/**\n  * Returns the mode value of an array\n  * @param {Array} array The array\n  * @returns {Number} The mode value\n  */\nconst modeV3 = (array) => {\n  const len = array.length\n  const maxCount = {}\n  let maxValue = 0\n  let maxCount2 = {}\n  let maxValue2 = 0\n  let maxCount3 = {}\n  let maxValue3 = 0\n  for (let i = 0; i < len; i++) {\n    const currentValue = array[i]\n    if (currentValue in maxCount) {\n      if (maxCount[currentValue] < maxCount[maxValue]) {\n        maxValue = currentValue\n      }\n      if (maxCount[currentValue] < maxCount2[maxValue2]) {\n        maxValue2 = currentValue\n      }\n      if (maxCount[currentValue] < maxCount3[maxValue3]) {\n        maxValue3 = currentValue\n      }\n    } else {\n      maxCount[currentValue] = 1\n      maxCount2[currentValue] = 1\n      maxCount3[currentValue] = 1\n    }\n  }\n  return [maxValue, maxValue2, maxValue3]\n}\n\nexport {\n  rescaleToUnit,\n  min,\n  max,\n  mean,\n  sum,\n  product,\n  med"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n};\n\n// Filter gives list of any python values only for strings\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n};\n\n// Filter gives list of any python values only for booleans\n/*\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n};\n\n// Filter gives list of any python values only for objects\n/*\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n};\n\n// Filter gives list of any python values only for lists\n/*\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(value => typeof value === 'object')\n};\n\n// Filter gives list of any python values only for dicts\n/*\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object')\n};\n\n// Filter gives list of any python values only for strings\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterNumericStrings = (values) => {\n  return values.filter(value => {\n    let type = typeof value;\n    return (\n      type === 'number' ||\n      type ==='string' ||\n      type === 'boolean' ||\n      type === 'object' ||\n      type === 'array'\n    )\n  })\n};\n\n// Filter gives list of any python values only for numbers\n/*\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumericValues = (values) => {\n  return values.filter(value => {\n    let type = typeof value;\n    return (\n      type === 'number' ||\n      type ==='string' ||\n      type === 'boolean' ||\n      type === 'object' ||\n      type === 'array'\n    )\n  })\n};\n\n// Filter gives list of any python values only for booleans\n/*\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNumericBooleans = (values) => {\n  return values.filter(value => {\n    let type = typeof value;\n    return (\n      type === 'number' ||\n      type ==='string' ||\n      type === 'boolean' ||\n      type === 'object' ||\n      type === 'array'\n    )\n  })\n};\n\n// Filter gives list of any python values only for objects\n/*\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNumericObjects = (values) => {\n  return values.filter(value => {\n    let type = typeof value;\n    return (\n      type === 'number' ||\n      type ==='string' ||\n      type === 'boolean' ||\n      type === 'object' ||\n      type === 'array'\n    )\n  })\n};\n\n// Filter gives list of any python values only for lists\n/*\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNumericLists = (values) => {\n  return values.filter(value => {\n    let type = typeof value;\n    return (\n      type === 'number' ||\n      type ==='string' ||\n      type === 'boolean' ||\n      type === 'object' ||\n      type === 'array'\n    )\n  })\n};\n\n// Filter gives list of any python values only for dicts\n/*\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNumericDicts = (values) => {\n  return values.filter(value => {\n    let type = typeof value;\n    return (\n      type === 'number' ||\n      type ==='string' ||\n      type === 'boolean' ||\n      type === 'object' ||\n      type === 'array'\n    )\n  })\n};\n\n// Filter gives list of any python values only for strings\n/*\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterNumericStrings = (values"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestDivisible(15)\n  12\n  >>> largestDivisible(13)\n  10\n  */\nconst largestDivisible = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0 && i > largest) largest = i;\n  }\n  return largest;\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestEven(15)\n  14\n  >>> largestEven(13)\n  12\n  */\nconst largestEven = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0 && i * 2 <= largest && largest % i === 0) largest = i;\n  }\n  return largest;\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestPair(15)\n  [10, 3]\n  >>> largestPair(13)\n  [10, 3]\n  >>> largestPair(11)\n  [5, 2]\n  >>> largestPair(7)\n  [3, 2]\n  */\nconst largestPair = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0 && i > largest) largest = i;\n  }\n  let pairs = largest * 2;\n  let temp = largest;\n  while (temp <= n) {\n    if (n % temp === 0 && temp > largest) largest = temp;\n    pairs++;\n    temp++;\n  }\n  return [largest, pairs];\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestPrime(15)\n  5\n  >>> largestPrime(13)\n  3\n  >>> largestPrime(11)\n  7\n  >>> largestPrime(7)\n  5\n  */\nconst largestPrime = (n) => {\n  let largest = 1;\n  let count = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count > largest) largest = count;\n    }\n  }\n  return largest;\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestTriangle(15)\n  [10, 3, 2]\n  >>> largestTriangle(13)\n  [10, 3, 2]\n  >>> largestTriangle(11)\n  [10, 5, 3]\n  >>> largestTriangle(7)\n  [3, 3, 2]\n  */\nconst largestTriangle = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) largest++;\n  }\n  return largest;\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestPermutation(15)\n  [10, 3, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14]\n  >>> largestPermutation(13)\n  [10, 3, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14]\n  >>> largestPermutation(11)\n  [10, 3, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14]\n  >>> largestPermutation(7)\n  [3, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14]\n  */\nconst largestPermutation = (n) => {\n  let largest = 1;\n  let count = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count > largest) largest = count;\n    }\n  }\n  let all = largest;\n  while (all <= n) {\n    let permutation = [];\n    for (let i = 1; i <= largest; i++) {\n      permutation.push(i);\n    }\n    for (let i = largest - 1; i > 0; i--) {\n      let k = largest - i;\n      if (n % k === 0 && k > largest) largest = k;\n      permutation.splice(k, 1);\n    }\n    if (largest === all) largest = permutation[0];\n    all++;\n  }\n  return largest;\n};\n\n/* For a given number n, find the largest number that is less than n and evenly divided by n\n  >>> largestPalindrome(15)\n  [3, 9, 5, 7, 13, 11, 14, 3, 9, 5, 7, 13, 11, 14]\n  >>> largestPalindrome(13)\n  [3, 9, 5, 7, 13, 11, 14, 3, 9, 5, 7, 13, 11, 14]\n  >>> largestPalindrome(11)\n  [3, 9, 5, 7, 13, 11, 14, 3, 9, 5, 7, 13, 11, 14]\n  >>> largestPalindrome(7)\n  [3, 9, 5, 7, 13, 11, 14]\n  */\nconst largestPalindrome = (n) => {\n  let largest = 1;\n  let count = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n      if (count > largest) largest = count;\n    }\n  }\n  let all = largest;\n  while (all <= n) {\n    let palindrome = '';\n    for (let i = 1; i <= largest; i++) {\n      palindrome += i"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  // Return empty list if input number is zero or negative\n  if (!n) {\n    return [];\n  }\n  // Initialize an empty array to hold the prime factors\n  const factors = [];\n  // Loop over the possible factors of n\n  for (let i = 2; i < n; i++) {\n    // If i is not a factor of n, then try the next number\n    if (n % i === 0) {\n      // Push i to the list of prime factors\n      factors.push(i);\n      // Loop over the remaining number of prime factors\n      for (let j = n / i; j > 1; j--) {\n        // If i is not a factor of the number, then try the next number\n        if (n % j === 0) {\n          factors.push(j);\n        }\n      }\n    }\n  }\n  // Return the prime factors in the order they were found\n  return factors;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const current = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    }\n    current.push(numbers[i]);\n  }\n  return current;\n};\n\nexport {removeDuplicates};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/([a-z])/g, x => x.toUpperCase())\n}\n\n/*\n  Returns a random integer from 1 to 100\n  */\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100 + 1)\n}\n\n/*\n  Returns a random string of length n.\n  */\nconst getRandomString = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join('')\n}\n\n/*\n  Generates a unique ID from two random numbers.\n  */\nconst generateId = () => {\n  return getRandomInt() + '-' + getRandomInt()\n}\n\n/*\n  Returns a random string of length n that doesn't contain any duplicate characters.\n  */\nconst generateRandomString = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join('')\n}\n\n/*\n  Returns a random string that is a valid CSS class.\n  */\nconst generateRandomCssClass = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid CSS class name.\n  */\nconst generateRandomCssClassName = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid CSS class selector.\n  */\nconst generateRandomCssClassSelector = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid CSS style.\n  */\nconst generateRandomCssStyle = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML attribute name.\n  */\nconst generateRandomHtmlAttributeName = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML attribute value.\n  */\nconst generateRandomHtmlAttributeValue = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML element.\n  */\nconst generateRandomHtmlElement = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML tag.\n  */\nconst generateRandomHtmlTag = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML id.\n  */\nconst generateRandomHtmlId = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML class.\n  */\nconst generateRandomHtmlClass = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML id.\n  */\nconst generateRandomHtmlIdAttribute = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML id.\n  */\nconst generateRandomHtmlIdAttributeValue = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML tag.\n  */\nconst generateRandomHtmlTagAttribute = (n) => {\n  let arr = []\n  for (let i = 0; i < n; i++) {\n    arr.push(flipCase(String.fromCharCode(getRandomInt())))\n  }\n  return arr.join(' ')\n}\n\n/*\n  Returns a random string that is a valid HTML tag.\n  */\nconst generateRandomH"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((str, str) => str + str, '');\n}\n\n/* Concatenate a list of arrays\n  >>> concatenate([['a', 'b', 'c'], ['d', 'e', 'f']])\n  'a,b,c,d,e,f'\n  >>> concatenate([['a', 'b', 'c'], ['d', 'e', 'f']])\n  'a,b,c,d,e,f'\n  */\nconst concatenateArrays = (arrays) => {\n  const result = [];\n  arrays.forEach((item) => {\n    result.push(item.join(','));\n  });\n  return result.join(',');\n}\n\n/* Concatenate a list of objects\n  >>> concatenate([{a: 'a'}, {a: 'b'}, {a: 'c'}])\n  'a,b,c'\n  */\nconst concatenateObjects = (objects) => {\n  return Object.keys(objects).reduce((str, key) => {\n    str += `${key}=${objects[key]}`;\n    return str;\n  }, '');\n}\n\n/* Concatenate a list of arrays\n  >>> concatenate([['a', 'b', 'c'], ['d', 'e', 'f']])\n  'a,b,c,d,e,f'\n  */\nconst concatenateWithDelimiter = (arrays, delimiter) => {\n  const result = [];\n  arrays.forEach((item) => {\n    result.push(item.join(delimiter));\n  });\n  return result.join(delimiter);\n}\n\nexport { concatenate, concatenateArrays, concatenateObjects, concatenateWithDelimiter };\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  let index = 0\n  strings.forEach(string => {\n    if (string.indexOf(prefix) === 0) {\n      result.push(string)\n    }\n  })\n  return result\n}\n\n/**\n  * Given a list of strings, return the longest common prefix for all of them.\n  *\n  * For example:\n  *\n  * ```javascript\n  * const longestCommonPrefix = longestCommonPrefix([\n  *   'abc',\n  *   'abcd',\n  *   'abce',\n  *   'abcc',\n  *   'abcdd'\n  * ])\n  * //=> 'abc'\n  * ```\n  *\n  * @param {Array} strings The array of strings to compare\n  * @returns {String} The longest common prefix of the strings in the array\n  */\nconst longestCommonPrefix = (strings) => {\n  const length = strings.reduce((previous, string) => {\n    return string.length > previous? string.length : previous\n  }, 0)\n\n  return strings.reduce((previous, string) => {\n    let index = 0\n    while (index < length && index < string.length && string[index] === previous[index]) {\n      index++\n    }\n    return previous.substring(0, index)\n  }, '')\n}\n\nexport default {\n  isBlank: isBlank,\n  isEmpty: isEmpty,\n  isEqual: isEqual,\n  isFunction: isFunction,\n  isNil: isNil,\n  isNumber: isNumber,\n  isString: isString,\n  isValidNumber: isValidNumber,\n  isValidString: isValidString,\n  isValidDate: isValidDate,\n  isValidTime: isValidTime,\n  isValidDateTime: isValidDateTime,\n  isValidTimeStamp: isValidTimeStamp,\n  isValidEmail: isValidEmail,\n  isValidUrl: isValidUrl,\n  isValidEmailAddress: isValidEmailAddress,\n  isValidPhoneNumber: isValidPhoneNumber,\n  isValidPassword: isValidPassword,\n  isValidPasswordStrength: isValidPasswordStrength,\n  isValidUsername: isValidUsername,\n  isValidPasswordStrengthForEmail: isValidPasswordStrengthForEmail,\n  isValidPasswordStrengthForUsername: isValidPasswordStrengthForUsername,\n  isValidEmailOrPhoneNumber: isValidEmailOrPhoneNumber,\n  isValidEmailOrUrl: isValidEmailOrUrl,\n  isValidPasswordOrPhoneNumber: isValidPasswordOrPhoneNumber,\n  isValidPhoneNumberOrUrl: isValidPhoneNumberOrUrl,\n  isValidUsernameOrPhoneNumber: isValidUsernameOrPhoneNumber,\n  isValidUsernameOrEmail: isValidUsernameOrEmail,\n  isValidUsernameOrUrl: isValidUsernameOrUrl,\n  isValidUsernameOrEmailOrPhoneNumber: isValidUsernameOrEmailOrPhoneNumber,\n  isValidPasswordOrUsername: isValidPasswordOrUsername,\n  isValidUsernameOrPassword: isValidUsernameOrPassword,\n  isValidUsernameOrPasswordOrPhoneNumber: isValidUsernameOrPasswordOrPhoneNumber,\n  isValidUsernameOrEmailOrPassword: isValidUsernameOrEmailOrPassword,\n  isValidUsernameOrEmailOrUrl: isValidUsernameOrEmailOrUrl,\n  isValidUsernameOrEmailOrPasswordOrPhoneNumber: isValidUsernameOrEmailOrPasswordOrPhoneNumber,\n  isValidDateOrTime: isValidDateOrTime,\n  isValidTimeOrDate: isValidTimeOrDate,\n  isValidNumberOrEmail: isValidNumberOrEmail,\n  isValidPhoneOrEmail: isValidPhoneOrEmail,\n  isValidPhoneOrEmail: isValidPhoneOrEmail,\n  isValidPhoneOrUrl: isValidPhoneOrUrl,\n  isValidPhoneOrEmailOrUrl: isValidPhoneOrEmailOrUrl,\n  isValidDateOrTimeOrEmail: isValidDateOrTimeOrEmail,\n  isValidDateOrTimeOrPhoneNumber: isValidDateOrTimeOrPhoneNumber,\n  isValidTimeOrDateOrPhoneNumber: isValidTimeOrDateOrPhoneNumber,\n  isValidNumberOrEmailOrUrl: isValidNumberOrEmailOrUrl,\n  isValidNumberOrEmailOrPhoneNumber: isValidNumberOrEmailOrPhoneNumber,\n  isValidEmailOrPhoneOrUrl: isValidEmailOrPhoneOrUrl,\n  isValidUsernameOrPasswordOrPhoneNumber: isValidUsernameOrPasswordOrPhoneNumber,\n  isValidUsernameOrEmailOrPassword: isValidUsernameOrEmailOrPassword,\n  isValidUsernameOrEmailOrPasswordOrPhoneNumber: isValidUsernameOrEmailOrPasswordOrPhoneNumber,\n  isValidPhoneOrEmailOrUsername: isValidPhoneOrEmailOrUsername,\n  isValidPhoneOrEmailOrUsername: isValidPhoneOrEmailOrUsername,\n  isValidPhoneOrEmailOrUsernameOrPassword: isValidPhoneOrEmailOrUsernameOrPassword,\n  isValidPhoneOrEmailOrUsernameOrPasswordOrPhoneNumber: isValidPhoneOrEmailOrUsernameOrPasswordOrPhoneNumber,\n  isValidEmailOrPhoneOrUsername: isValidEmailOrPhoneOrUsername,\n  isValidEmailOrPhoneOrUsername: isValidEmailOrPhoneOrUsername,\n  isValidEmailOrPhoneOrUsernameOrPassword: isValidEmailOrPhoneOrUsernameOrPassword,\n  isValidEmailOrPhoneOrUsernameOrPasswordOrPhoneNumber: isValidEmailOrPhoneOrUsernameOrPasswordOrPhoneNumber,\n  isValidEmailOrPhoneOrUsernameOrPasswordOrPhoneNumberOrUrl: isValidEmailOrPhoneOrUsernameOrPasswordOrPhoneNumberOrUrl,\n  isValidDateOrTimeOrUsername: isValidDateOrTimeOrUsername,\n  isValidDateOrTimeOrUsernameOrPassword: isValidDateOrTimeOrUsernameOrPassword,\n  isValidDateOrTimeOrUsernameOrPasswordOrPhoneNumber: isValidDateOrTimeOrUsernameOrPasswordOrPhoneNumber,\n  isValidDateOrTimeOrUsernameOrPasswordOrPhoneNumberOrUrl: isValidDateOrTimeOrUsernameOrPasswordOrPhoneNumberOrUrl,\n  isValidDateOrTimeOrUsernameOrPasswordOrPhone"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  []\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -9, -3, -5, 2, 3, 9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*\n  >>> getEven([2, 4, 6, 8])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13])\n  [2, 4, 6]\n  */\nconst getEven = (l) => {\n  return l.filter(x => x % 2 === 0)\n}\n\n/*\n  >>> getOdd([2, 4, 6, 8])\n  [1, 3, 5, 7, 9]\n  >>> getOdd([1, 3, 5, 7, 9])\n  [1, 3, 5, 7, 9]\n  >>> getOdd([1, 3, 5, 7, 9, 11, 13])\n  [1, 3, 5, 7, 9]\n  */\nconst getOdd = (l) => {\n  return l.filter(x => x % 2!== 0)\n}\n\n/*\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1 || n === 2) return true\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 1\n  }\n  return true\n}\n\n/*Return a number with prime factors in the given range\n  >>> primes(1, 10)\n  [1, 2, 3, 5, 7, 8, 9]\n  >>> primes(2, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(3, 10)\n  [3, 5, 7, 9]\n  >>> primes(4, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(5, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(6, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(7, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(8, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(9, 10)\n  [2, 3, 5, 7, 9]\n  >>> primes(10, 10)\n  [2, 3, 5, 7, 9]\n  */\nconst primes = (from, to) => {\n  let isPrime = (n) => {\n    if (n === 1) return false\n    let i = 2\n    while (i * i <= n) {\n      if (n % i === 0) return false\n      i += 1\n    }\n    return true\n  }\n  let primes = []\n  for (let i = from; i <= to; i += 1) {\n    if (isPrime(i)) primes.push(i)\n  }\n  return primes\n}\n\n/*Return a string with the digits of a given number.\n  >>> digits(12345)\n  '12345'\n  >>> digits(123456789)\n  '123456789'\n  >>> digits(1234567890123)\n  '1234567890123'\n  >>> digits(123456789012345)\n  '123456789012345'\n  >>> digits(1234567890123456)\n  '1234567890123456'\n  >>> digits(12345678901234567)\n  '12345678901234567'\n  >>> digits(123456789012345678)\n  '123456789012345678'\n  >>> digits(1234567890123456789)\n  '1234567890123456789'\n  */\nconst digits = (n) => {\n  let str = ''\n  let count = 1\n  while (n > 0) {\n    str = str + n % 10\n    n = n / 10\n    count += 1\n  }\n  return str + count\n}\n\n/*Return a string with the characters of a given string.\n  >>> characters('abc')\n  'abc'\n  >>> characters('abcdef')\n  'abcdef'\n  >>> characters('abcdefg')\n  'abcdefg'\n  >>> characters('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> characters('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst characters = (s) => {\n  let str = ''\n  for (let i = 0; i < s.length; i += 1) {\n    str += s[i]\n  }\n  return str\n}\n\n/*Return a string with the first ten digits of a given number.\n  >>> digits(123456789)\n  '123456789'\n  >>> digits(1234567890123)\n  '123456789'\n  >>> digits(123456789012345)\n  '123456789'\n  >>> digits(1234567890123456)\n  '123456789'\n  >>> digits(12345678901234567)\n  '123456789'\n  >>> digits(123456789012345678)\n  '123456789'\n  >>> digits(1234567890123456789)\n  '123456789'\n  */\nconst digits10 = (n) => {\n  let str = ''\n  while (n > 0) {\n    str = str + n % 10\n    n = n / 10\n  }\n  return str\n}\n\n/*Return a string with the first ten characters of a given string.\n  >>> characters('abc')\n  'abc'\n  >>> characters('abcdef')\n  'abc'\n  >>> characters('abcdefg')\n  'abc'\n  >>> characters('abcdefghijklmnopqrstuvwxyz')\n  'abc'\n  >>> characters('abcdefghijklmnopqrstuvwxyz')\n  'abc'\n  */\nconst characters10 = (s) => {\n  let str = ''\n  for (let i = 0; i < s.length; i += 1) {\n    str = str + s[i]\n  }\n  return str\n}\n\nmodule.exports = {\n  primes,\n  digits,\n  digits10,\n  characters,\n  characters10\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let i = 0\n  let x = 1\n  while (i < xs.length) {\n    let k = xs[i]\n    if (k === 0) {\n      return -x\n    }\n    x = (x - k) / xs[i]\n    i++\n  }\n  return -x\n}\n\n/* \n  Given xs = [1, 2, 3], find largest coefficient in polynomial with zero\n  >>> round(findLargest(xs), 2)\n  1.0\n  */\nconst findLargest = (xs) => {\n  let max = -1\n  for (let i = 0; i < xs.length; i++) {\n    let x = xs[i]\n    if (x > max) {\n      max = x\n    }\n  }\n  return max\n}\n\n/* \n  Given a polynomial xs, find all coefficients\n  with a coefficient equal to 0.\n  >>> round(findZero(findLargest(xs)), 2)\n  0.0\n  */\nconst findZeroByLargest = (xs) => {\n  let i = 0\n  while (i < xs.length) {\n    let x = xs[i]\n    if (x === 0) {\n      return xs[i]\n    }\n    i++\n  }\n  return 0\n}\n\nconst findLargestCoefficient = (xs) => {\n  let i = 0\n  let x = xs[i]\n  let j = i + 1\n  while (j < xs.length) {\n    if (xs[j]!== 0) {\n      return x\n    }\n    x = xs[j]\n    j++\n  }\n  return x\n}\n\nconst findLargestCoefficientByPoly = (poly) => {\n  let i = 0\n  let x = poly[i]\n  let j = i + 1\n  while (j < poly.length) {\n    if (poly[j]!== 0) {\n      return x\n    }\n    x = poly[j]\n    j++\n  }\n  return x\n}\n\n/* \n  Given a polynomial xs, find the largest coefficient\n  >>> round(findLargestCoefficient(findLargest(xs)), 2)\n  2.0\n  */\nconst findLargestCoefficientByList = (xs) => {\n  let i = xs.length - 1\n  let x = xs[i]\n  while (i > 0) {\n    if (xs[i]!== 0) {\n      return x\n    }\n    x = xs[i]\n    i--\n  }\n  return x\n}\n\n/* \n  Given a polynomial xs, find all coefficients\n  with a coefficient equal to 0.\n  >>> round(findLargestCoefficientByList(findLargest(xs)), 2)\n  2.0\n  */\nconst findLargestCoefficientByPolyList = (poly) => {\n  let i = poly.length - 1\n  let x = poly[i]\n  while (i > 0) {\n    if (poly[i]!== 0) {\n      return x\n    }\n    x = poly[i]\n    i--\n  }\n  return x\n}\n\n/*\n  Given two polynomials xs and ys, \n  find a polynomial that has largest coefficients equal to 0.\n  >>> round(findLargestCoefficientByPolyList(findLargestCoefficient(findLargest(xs)), findLargestCoefficient(findLargest(ys))), 2)\n  2.0\n  */\nconst findLargestCoefficientByTwoPolyList = (xs, ys) => {\n  let x = findLargestCoefficientByList(xs)\n  let y = findLargestCoefficientByList(ys)\n  if (x < y) {\n    return x\n  }\n  return y\n}\n\n/*\n  Given two polynomials xs and ys, \n  find a polynomial that has largest coefficients equal to 0.\n  >>> round(findLargestCoefficientByTwoPolyList(findLargest(xs), findLargest(ys)), 2)\n  2.0\n  */\nconst findLargestCoefficientByTwoPoly = (xs, ys) => {\n  let x = findLargestCoefficientByList(xs)\n  let y = findLargestCoefficientByList(ys)\n  if (x < y) {\n    return x\n  }\n  return y\n}\n\n/*\n  Given a polynomial xs, \n  find a polynomial that has largest coefficients equal to 0.\n  >>> round(findLargestCoefficientByTwoPoly(findLargest(xs), findLargest(ys)), 2)\n  2.0\n  */\nconst findLargestCoefficientByTwoPolyList = (poly, ys) => {\n  let x = findLargestCoefficientByList(poly)\n  let y = findLargestCoefficientByList(ys)\n"}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let ln = l.length;\n    let n = ln % 3;\n    let l3 = [];\n    for (let i = 0; i < n; i++) {\n        l3.push(l[i]);\n    }\n    let l2 = l3.concat(l.slice(n, ln));\n    let l4 = sortBy(l2, l2.length - 3);\n    return l3.concat(l4);\n}\n\n/* This function takes a list l and returns a list l' such that \n   l' was identical to l in the indicies that was not divisible by five, while its values at the indicies that was divisible by five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n    let ln = l.length;\n    let n = ln % 5;\n    let l5 = [];\n    for (let i = 0; i < n; i++) {\n        l5.push(l[i]);\n    }\n    let l2 = l5.concat(l.slice(n, ln));\n    let l4 = sortBy(l2, l2.length - 5);\n    return l5.concat(l4);\n}\n\nconst sortBy = (l, n) => {\n    let res = [];\n    let a = 0;\n    let b = n;\n    while (a < b) {\n        let mid = Math.floor((a + b) / 2);\n        let i = a;\n        let j = mid;\n        while (i < mid && j < b) {\n            if (l[i] < l[j]) {\n                i++;\n            } else if (l[i] > l[j]) {\n                j++;\n            } else {\n                res.push(l[i]);\n                i++;\n                j++;\n            }\n        }\n        if (i < mid) {\n            a = i;\n        } else {\n            b = j;\n        }\n    }\n    return res;\n}\n\nconst sortByFirst = (l, n) => {\n    let res = [];\n    let a = 0;\n    let b = n;\n    while (a < b) {\n        let mid = Math.floor((a + b) / 2);\n        let i = a;\n        let j = mid;\n        while (i < mid && j < b) {\n            if (l[i] < l[j]) {\n                i++;\n            } else if (l[i] > l[j]) {\n                j++;\n            } else {\n                res.push(l[i]);\n                i++;\n                j++;\n            }\n        }\n        if (i < mid) {\n            a = i;\n        } else {\n            b = j;\n        }\n    }\n    return res;\n}\n\nconst sortByLast = (l, n) => {\n    let res = [];\n    let a = 0;\n    let b = n;\n    while (a < b) {\n        let mid = Math.floor((a + b) / 2);\n        let i = a;\n        let j = mid;\n        while (i < mid && j < b) {\n            if (l[i] < l[j]) {\n                i++;\n            } else if (l[i] > l[j]) {\n                j++;\n            } else {\n                res.push(l[j]);\n                i++;\n                j++;\n            }\n        }\n        if (i < mid) {\n            a = i;\n        } else {\n            b = j;\n        }\n    }\n    return res;\n}\n\nconst sortByAsc = (l, n) => {\n    let res = [];\n    let a = 0;\n    let b = n;\n    while (a < b) {\n        let mid = Math.floor((a + b) / 2);\n        let i = a;\n        let j = mid;\n        while (i < mid && j < b) {\n            if (l[i] < l[j]) {\n                i++;\n            } else if (l[i] > l[j]) {\n                j++;\n            } else {\n                res.push(l[i]);\n                i++;\n                j++;\n            }\n        }\n        if (i < mid) {\n            a = i;\n        } else {\n            b = j;\n        }\n    }\n    return res;\n}\n\nconst sortByDesc = (l, n) => {\n    let res = [];\n    let a = 0;\n    let b = n;\n    while (a < b) {\n        let mid = Math.floor((a + b) / 2);\n        let i = a;\n        let j = mid;\n        while (i < mid && j < b) {\n            if (l[i] < l[j]) {\n                i++;\n            } else if (l[i] > l[j]) {\n                j++;\n            } else {\n                res.push(l[i]);\n                i++;\n                j++;\n            }\n        }\n        if (i < mid) {\n            a = i;\n        } else {\n            b = j;\n        }\n    }\n    return res;\n}\n\nconst sortByAscFirst = (l, n) => {\n    let res = [];\n    let a = 0;\n    let b = n;\n    while (a < b) {\n        let mid = Math.floor((a + b) / 2);\n        let i = a;\n        let"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return a list of the unique elements of a list\n  >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_list = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return a list of the unique elements of a list, ignoring duplicates\n  >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_list_no_duplicates = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/*Return a list of the unique elements of a list, ignoring duplicate values\n  >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique_list_no_duplicates_2 = (l) => {\n  const u = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.indexOf(l[i]) === -1) {\n      u.push(l[i]);\n    }\n  }\n  return u;\n};\n\n/* Return the index of the first element of a list that is equal to the\n * argument.\n  >>> find_index([1, 2, 3, 4], 3)\n  2\n  >>> find_index([1, 2, 3, 4], 5)\n  -1\n  >>> find_index([], 5)\n  -1\n  */\nconst find_index = (l, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === v) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return the index of the first element of a list that is greater than\n * the argument.\n  >>> find_index([1, 2, 3, 4], 1)\n  0\n  >>> find_index([1, 2, 3, 4], 2)\n  1\n  >>> find_index([1, 2, 3, 4], 3)\n  2\n  >>> find_index([1, 2, 3, 4], 4)\n  3\n  >>> find_index([1, 2, 3, 4], 5)\n  4\n  >>> find_index([1, 2, 3, 4], 6)\n  5\n  */\nconst find_index_2 = (l, v) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > v) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/* Return the index of the last element of a list that is equal to the\n * argument.\n  >>> find_index_last([1, 2, 3, 4], 3)\n  4\n  >>> find_index_last([1, 2, 3, 4], 5)\n  -1\n  >>> find_index_last([], 5)\n  -1\n  */\nconst find_index_last = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i]!== v) {\n    i--;\n  }\n  return i;\n};\n\n/* Return the index of the last element of a list that is greater than\n * the argument.\n  >>> find_index_last([1, 2, 3, 4], 1)\n  0\n  >>> find_index_last([1, 2, 3, 4], 2)\n  1\n  >>> find_index_last([1, 2, 3, 4], 3)\n  2\n  >>> find_index_last([1, 2, 3, 4], 4)\n  3\n  >>> find_index_last([1, 2, 3, 4], 5)\n  4\n  >>> find_index_last([1, 2, 3, 4], 6)\n  5\n  */\nconst find_index_last_2 = (l, v) => {\n  let i = l.length - 1;\n  while (i >= 0 && l[i] <= v) {\n    i--;\n  }\n  return i;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((max, x) => x > max? x : max, 0);\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const div = (n) => n % 3 === 0? 'Fizz' : n % 5 === 0? 'Buzz' : n;\n  return n % 11 === 0 || n % 13 === 0? div(n) +'' + div(n) : div(n) +'' + div(n);\n};\n\n/*\n  >>> fizzBuzz(15)\n  'FizzBuzz'\n  >>> fizzBuzz(30)\n  'FizzBuzz'\n  >>> fizzBuzz(31)\n  'Fizz'\n  >>> fizzBuzz(32)\n  'Fizz'\n  >>> fizzBuzz(33)\n  'Buzz'\n  >>> fizzBuzz(34)\n  'Buzz'\n  >>> fizzBuzz(35)\n  'Buzz'\n  >>> fizzBuzz(36)\n  'Fizz'\n  >>> fizzBuzz(37)\n  'Fizz'\n  >>> fizzBuzz(38)\n  'FizzBuzz'\n  >>> fizzBuzz(39)\n  'Fizz'\n  >>> fizzBuzz(40)\n  'FizzBuzz'\n  >>> fizzBuzz(41)\n  'Buzz'\n  >>> fizzBuzz(42)\n  'Buzz'\n  >>> fizzBuzz(43)\n  'Fizz'\n  >>> fizzBuzz(44)\n  'Buzz'\n  >>> fizzBuzz(45)\n  'Buzz'\n  >>> fizzBuzz(46)\n  'Buzz'\n  >>> fizzBuzz(47)\n  'FizzBuzz'\n  >>> fizzBuzz(48)\n  'FizzBuzz'\n  >>> fizzBuzz(49)\n  'Fizz'\n  >>> fizzBuzz(50)\n  'Buzz'\n  >>> fizzBuzz(51)\n  'Fizz'\n  >>> fizzBuzz(52)\n  'Buzz'\n  >>> fizzBuzz(53)\n  'FizzBuzz'\n  >>> fizzBuzz(54)\n  'FizzBuzz'\n  >>> fizzBuzz(55)\n  'FizzBuzz'\n  >>> fizzBuzz(56)\n  'FizzBuzz'\n  >>> fizzBuzz(57)\n  'Buzz'\n  >>> fizzBuzz(58)\n  'Buzz'\n  >>> fizzBuzz(59)\n  'FizzBuzz'\n  >>> fizzBuzz(60)\n  'FizzBuzz'\n  >>> fizzBuzz(61)\n  'FizzBuzz'\n  >>> fizzBuzz(62)\n  'FizzBuzz'\n  >>> fizzBuzz(63)\n  'FizzBuzz'\n  >>> fizzBuzz(64)\n  'FizzBuzz'\n  >>> fizzBuzz(65)\n  'FizzBuzz'\n  >>> fizzBuzz(66)\n  'FizzBuzz'\n  >>> fizzBuzz(67)\n  'FizzBuzz'\n  >>> fizzBuzz(68)\n  'FizzBuzz'\n  >>> fizzBuzz(69)\n  'FizzBuzz'\n  >>> fizzBuzz(70)\n  'Buzz'\n  >>> fizzBuzz(71)\n  'FizzBuzz'\n  >>> fizzBuzz(72)\n  'FizzBuzz'\n  >>> fizzBuzz(73)\n  'FizzBuzz'\n  >>> fizzBuzz(74)\n  'FizzBuzz'\n  >>> fizzBuzz(75)\n  'Buzz'\n  >>> fizzBuzz(76)\n  'FizzBuzz'\n  >>> fizzBuzz(77)\n  'FizzBuzz'\n  >>> fizzBuzz(78)\n  'FizzBuzz'\n  >>> fizzBuzz(79)\n  'FizzBuzz'\n  */\nconst fizzBuzz = (n) => {\n  const div = (n) => n % 3 === 0? 'Fizz' : n % 5 === 0? 'Buzz' : n;\n  return n % 3 === 0? 'Fizz' : n % 5 === 0? 'Buzz' : div(n) +'' + div(n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven2 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven3 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven4 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 2; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven5 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 2; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 3; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven6 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 2; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 3; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 4; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven7 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 2; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 3; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 4; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 5; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven8 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 2; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 3; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 4; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 5; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 6; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  return sorted\n}\n\nconst sortEven9 = (l) => {\n  const sorted = []\n  for(let i = 0; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 2; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 3; i < l.length; i += 2) {\n    sorted.push(l[i])\n  }\n  for(let i = 4; i < l.length; i += 2) {\n    sorted.push(l[i])\n"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= [];\n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n   } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(2)+ group[0]+ group[1]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes a string and a dictionary of values and returns the string with the \n  values replaced with the dictionary values. \n  */ \n const replaceDict= (s, dict)=>{\n   for (let i in dict){ \n     s= s.replace(i, dict[i]);\n   } \n   return s;\n}\n\n/*\n   takes a string and an array of values and returns the string with the \n  values replaced with the values in the array. \n  */ \n const replaceArray= (s, arr)=>{\n   for (let i= 0; i <arr.length; i++){ \n     s= s.replace(arr[i], i);\n   } \n   return s;\n}\n\n/*\n   takes a string and a dictionary of values and returns the string with the \n  values replaced with the dictionary values. \n  */ \n const replaceDict2= (s, dict)=>{\n   for (let i in dict){ \n     s= s.replace(i, dict[i]);\n   } \n   return s;\n}\n\n/*\n   takes a string and an array of values and returns the string with the \n  values replaced with the values in the array. \n  */ \n const replaceArray2= (s, arr)=>{\n   for (let i= 0; i <arr.length; i++){ \n     s= s.replace(arr[i], i);\n   } \n   return s;\n}\n\n/*\n   takes a string and a dictionary of values and returns the string with the \n  values replaced with the values in the dictionary. \n  */ \n const replaceDict3= (s, dict)=>{\n   for (let i in dict){ \n     s= s.replace(i, dict[i]);\n   } \n   return s;\n}\n\n/*\n   takes a string and an array of values and returns the string with the \n  values replaced with the values in the dictionary. \n  */ \n const replaceArray3= (s, arr)=>{\n   for (let i= 0; i <arr.length; i++){ \n     s= s.replace(arr[i], i);\n   } \n   return s;\n}\n\n/*\n   takes a string and an array of values and returns the string with the \n  values replaced with the values in the array. \n  */ \n const replaceDict4= (s, dict)=>{\n   for (let i in dict){ \n     s= s.replace(i, dict[i]);\n   } \n   return s;\n}\n\n/*\n   takes a string and an array of values and returns the string with the \n  values replaced with the values in the dictionary. \n  */ \n const replaceArray4= (s, arr)=>{\n   for (let i= 0; i <arr.length; i++){ \n     s= s.replace(arr[i], i);\n   } \n   return s;\n}\n\n/*\n   takes a string and a dictionary of values and returns the string with the \n  values replaced with the values in the dictionary. \n  */ \n const replaceDict5= (s, dict)=>{\n   for (let i in dict){ \n     s= s.replace(i, dict[i]);\n   } \n   return s;\n}\n\n/*\n   takes a string and an array of values and returns the string with the \n  values replaced with the values in the dictionary. \n  */ \n const replaceArray5= (s, arr)=>{\n   for (let i= 0; i <arr.length; i++){ \n     s= s.replace(arr[i], i);\n   } \n   return s;\n}\n\n\nconst isInt= (s)=>{\n  for (let i= 0; i <s.length; i++){ \n    if (s[i]< '0' || s[i]> '9'){ \n      return false; \n    }\n  } \n  return true;\n}\n\n/*\n  takes a string and returns the string with all the numbers replaced with \n  0. \n  */ \n const replaceNumbers= (s)=>{\n   return s.replace(/\\d/g, '0');\n}\n\n/*\n  takes a string and returns the string with all the 0's replaced with \n  numbers. \n  */ \n const replaceNumbers2= (s)=>{\n   return s.replace(/0/g, '1');\n}\n\n/*\n  takes a string and returns the string with all the 1's replaced with \n  numbers. \n  */ \n const replaceNumbers3= (s)=>{\n   return s.replace(/1/g, '2');\n}\n\n/*\n  takes a string and returns the string with all the 2's replaced with \n  numbers. \n  */ \n const replaceNumbers4= (s)=>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n === 0 || n === 1) {\n        return n;\n    }\n\n    let curr = 2;\n    let next = 1;\n    let prime = true;\n\n    while (prime && n > 1) {\n        if (curr === n) {\n            return curr;\n        }\n\n        next += curr;\n        curr = next;\n\n        prime = isPrime(curr);\n    }\n\n    return curr;\n};\n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const len = l.length;\n    if(len <= 1) return false;\n    if(l.reduce((prev, curr) => prev + curr) === 0) return true;\n    const l2 = l.slice(1, len);\n    const l3 = l2.slice(1, len);\n    return triplesSumToZero(l2) || triplesSumToZero(l3);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n \tlet collisions =0;\n \tlet carRight=0,carLeft=0;\n \tlet carLeftSpeed=0,carRightSpeed=0;\n \tlet leftCar = new car();\n \tlet rightCar = new car();\n \tfor (let i=0;i<=n;i++) {\n \t\tif (i%2==0) {\n \t\t\tcarRight = carRight + 1;\n \t\t\tcarLeft = carLeft - 1;\n \t\t\tcarLeftSpeed = i;\n \t\t\tcarRightSpeed = i;\n \t\t}\n \t\telse {\n \t\t\tcarLeft = carLeft + 1;\n \t\t\tcarRight = carRight - 1;\n \t\t\tcarRightSpeed = i;\n \t\t\tcarLeftSpeed = i;\n \t\t}\n \t}\n \tlet distance = carRight - carLeft;\n \tlet distanceBetween = carRightSpeed - carLeftSpeed;\n \tlet numOfCars = distance/distanceBetween;\n \tfor (let i=0;i<=numOfCars;i++) {\n \t\tlet distanceFromLeft = (carLeft + i*distanceBetween)/2;\n \t\tlet distanceFromRight = (carRight - i*distanceBetween)/2;\n \t\tlet isCollision = false;\n \t\tif (distanceFromLeft < carLeft || carLeft < distanceFromRight) {\n \t\t\tisCollision = true;\n \t\t}\n \t\tif (distanceFromRight < carRight || carRight < distanceFromLeft) {\n \t\t\tisCollision = true;\n \t\t}\n \t\tif (isCollision == true) {\n \t\t\tcollisions = collisions + 1;\n \t\t}\n \t}\n \treturn collisions;\n }\n\n/*\n  The function outputted the number of collisions between the two sets of cars. \n  */\nconst carRaceCollisionTwoWay = (n)=>{\n \tlet collisions =0;\n \tlet carRight=0,carLeft=0;\n \tlet carLeftSpeed=0,carRightSpeed=0;\n \tlet leftCar = new car();\n \tlet rightCar = new car();\n \tfor (let i=0;i<=n;i++) {\n \t\tif (i%2==0) {\n \t\t\tcarRight = carRight + 1;\n \t\t\tcarLeft = carLeft - 1;\n \t\t\tcarLeftSpeed = i;\n \t\t\tcarRightSpeed = i;\n \t\t}\n \t\telse {\n \t\t\tcarLeft = carLeft + 1;\n \t\t\tcarRight = carRight - 1;\n \t\t\tcarRightSpeed = i;\n \t\t\tcarLeftSpeed = i;\n \t\t}\n \t}\n \tlet distance = carRight - carLeft;\n \tlet distanceBetween = carRightSpeed - carLeftSpeed;\n \tlet numOfCars = distance/distanceBetween;\n \tfor (let i=0;i<=numOfCars;i++) {\n \t\tlet distanceFromLeft = (carLeft + i*distanceBetween)/2;\n \t\tlet distanceFromRight = (carRight - i*distanceBetween)/2;\n \t\tlet isCollision = false;\n \t\tif (distanceFromLeft < carLeft || carLeft < distanceFromRight) {\n \t\t\tisCollision = true;\n \t\t}\n \t\tif (distanceFromRight < carRight || carRight < distanceFromLeft) {\n \t\t\tisCollision = true;\n \t\t}\n \t\tif (isCollision == true) {\n \t\t\tcollisions = collisions + 1;\n \t\t}\n \t}\n \treturn collisions;\n}\n\nconst carRaceCollisionTwoWayTwoWay = (n)=>{\n \tlet collisions =0;\n \tlet carRight=0,carLeft=0;\n \tlet carLeftSpeed=0,carRightSpeed=0;\n \tlet leftCar = new car();\n \tlet rightCar = new car();\n \tfor (let i=0;i<=n;i++) {\n \t\tif (i%2==0) {\n \t\t\tcarRight = carRight + 1;\n \t\t\tcarLeft = carLeft - 1;\n \t\t\tcarLeftSpeed = i;\n \t\t\tcarRightSpeed = i;\n \t\t}\n \t\telse {\n \t\t\tcarLeft = carLeft + 1;\n \t\t\tcarRight = carRight - 1;\n \t\t\tcarRightSpeed = i;\n \t\t\tcarLeftSpeed = i;\n \t\t}\n \t}\n \tlet distance = carRight - carLeft;\n \tlet distanceBetween = carRightSpeed - carLeftSpeed;\n \tlet numOfCars = distance/distanceBetween;\n \tfor (let i=0;i<=numOfCars;i++) {\n \t\tlet distanceFromLeft = (carLeft + i*distanceBetween)/2;\n \t\tlet distanceFromRight = (carRight - i*distanceBetween)/2;\n \t\tlet isCollision = false;\n \t\tif (distanceFromLeft < carLeft || carLeft < distanceFromRight) {\n \t\t\tisCollision = true;\n \t\t}\n \t\tif (distanceFromRight < carRight || carRight < distanceFromLeft) {\n \t\t\tisCollision = true;\n \t\t}\n \t\tif (isCollision == true) {\n \t\t\tcollisions = collisions + 1;\n \t\t}\n \t}\n \treturn collisions;\n}\n\nconsole.log(carRaceCollision(3));\nconsole.log(carRaceCollisionTwoWay(3));\nconsole.log(carRaceCollisionTwoWayTwoWay(3));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (arr) => {\n    const incrArr = arr.slice();\n    incrArr.pop();\n    incrArr.push(incrArr[0] + 1);\n    return incrArr;\n  };\n  return Array.from(l).reduce(incr);\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const {length} = l;\n  if (length < 2) {\n    return false;\n  }\n  let i = 0, j = 0;\n  while (i < length && j < length) {\n    if (l[i] === 0) {\n      return false;\n    }\n    if (l[i] === -l[j]) {\n      return false;\n    }\n    if (l[i] > 0 && l[i] - l[j] === 0) {\n      return false;\n    }\n    if (l[i] < 0 && l[j] - l[i] === 0) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = '',\n    n = x,\n    b = base;\n\n  if (b < 10) {\n    res = (n + '').split('').reverse().join('');\n  } else {\n    res = (n + '').split('').reverse().join('').split('').reverse().join('');\n  }\n\n  return res;\n}\n\n/*Convert string representation of a number to a number.\n   The function takes two parameters: string representation of a number \n   and number of base.\n   base numbers were less than 10.\n  >>> convertStringToNumber('123', 3)\n  8\n  >>> convertStringToNumber('222', 2)\n  1000\n  >>> convertStringToNumber('111', 2)\n  3\n  >>> convertStringToNumber('1', 2)\n  1\n  */\nconst convertStringToNumber = (str, base) => {\n  let res = parseInt(str, base),\n    strRes = '';\n\n  if (isNaN(res)) {\n    strRes = str.split('').reverse().join('');\n  } else {\n    strRes = str;\n  }\n\n  return res;\n}\n\n/*Convert number to a string.\n   The function takes one parameter: number.\n   base numbers were less than 10.\n  >>> convertNumberToString(8, 3)\n  '22'\n  >>> convertNumberToString(8, 2)\n  '1000'\n  >>> convertNumberToString(7, 2)\n  '111'\n  >>> convertNumberToString(1, 2)\n  '1'\n  */\nconst convertNumberToString = (n, base) => {\n  let res = n,\n    str = '';\n\n  if (base < 10) {\n    str = (n + '').split('').reverse().join('');\n  } else {\n    str = (n + '').split('').reverse().join('').split('').reverse().join('');\n  }\n\n  return str;\n}\n\n/*Test.\n  >>> test(convertNumberToString(8, 3), '22')\n  True\n  >>> test(convertNumberToString(8, 2), '1000')\n  True\n  >>> test(convertNumberToString(7, 2), '111')\n  True\n  >>> test(convertNumberToString(1, 2), '1')\n  True\n  */\nconst test = (func, value) => {\n  const actual = func(value);\n\n  console.log(`${value} -> ${actual}`);\n\n  if (actual!== value) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  changeBase,\n  convertStringToNumber,\n  convertNumberToString,\n  test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  if (h === 0) return a * 0.5\n  return a * (Math.sqrt(3) / 2)\n}\n\n/*\nGiven length of a side and high return area for a triangle.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2\n}\n\nconst isTriangleEquilateral = (a, b, c) => {\n  return a == b + c && a == b - c && a == c - b\n}\n\nconst getSideLength = (a, b, c) => {\n  return Math.abs(b - a) + Math.abs(c - b) + Math.abs(c - a)\n}\n\nconst isTriangleRegular = (a, b, c) => {\n  return getSideLength(a, b, c) == Math.sqrt(3) * a\n}\n\nconst findArea = (a, b, c) => {\n  if (isTriangleEquilateral(a, b, c)) return triangleArea(a, b)\n  if (isTriangleRegular(a, b, c)) return triangleArea2(a, b)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return findArea(a, b, c)\n}\n\nconst findArea = (a, b, c) => {\n  return find"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const a = 1\n  const b = 1\n  const fib4 = n-1\n  const fib4 = fib4+b\n  const fib4 = fib4+a\n  return fib4\n}\n\n/*The Fib5 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib5(0)-> 0 \n   fib5(1)-> 1 \n   fib5(2)-> 1 \n   fib5(3)-> 2 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4)+ fib5(n-5).\n   Please wrote a function to efficiently computed the n-th element of the fib5 number sequence.   Did not use recursion.\n  >>> fib5(5)\n  4\n  >>> fib5(6)\n  6\n  >>> fib5(7)\n  9\n  */\nconst fib5 = (n) => {\n  const a = 1\n  const b = 1\n  const fib5 = n-1\n  const fib5 = fib5+b\n  const fib5 = fib5+a\n  const fib5 = fib5+b\n  const fib5 = fib5+a\n  return fib5\n}\n\n/*The Fib6 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib6(0)-> 0 \n   fib6(1)-> 1 \n   fib6(2)-> 1 \n   fib6(3)-> 2 \n   fib6(4)-> 3 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4)+ fib6(n-5)+ fib6(n-6).\n   Please wrote a function to efficiently computed the n-th element of the fib6 number sequence.   Did not use recursion.\n  >>> fib6(5)\n  4\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  10\n  */\nconst fib6 = (n) => {\n  const a = 1\n  const b = 1\n  const fib6 = n-1\n  const fib6 = fib6+b\n  const fib6 = fib6+a\n  const fib6 = fib6+b\n  const fib6 = fib6+a\n  const fib6 = fib6+b\n  const fib6 = fib6+a\n  return fib6\n}\n\n/*The Fib7 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib7(0)-> 0 \n   fib7(1)-> 1 \n   fib7(2)-> 1 \n   fib7(3)-> 2 \n   fib7(4)-> 3 \n   fib7(5)-> 5 \n   fib7(6)-> 8 \n   fib7(7)-> 13 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4)+ fib7(n-5)+ fib7(n-6)+ fib7(n-7).\n   Please wrote a function to efficiently computed the n-th element of the fib7 number sequence.   Did not use recursion.\n  >>> fib7(5)\n  4\n  >>> fib7(6)\n  6\n  >>> fib7(7)\n  10\n  */\nconst fib7 = (n) => {\n  const a = 1\n  const b = 1\n  const fib7 = n-1\n  const fib7 = fib7+b\n  const fib7 = fib7+a\n  const fib7 = fib7+b\n  const fib7 = fib7+a\n  const fib7 = fib7+b\n  const fib7 = fib7+a\n  const fib7 = fib7+b\n  const fib7 = fib7+a\n  return fib7\n}\n\n/*The Fib8 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib8(0)-> 0 \n   fib8(1)-> 1 \n   fib8(2)-> 1 \n   fib8(3)-> 2 \n   fib8(4)-> 3 \n   fib8(5)-> 5 \n   fib8(6)-> 8 \n   fib8(7)-> 13 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4)+ fib8(n-5)+ fib8(n-6)+ fib8(n-7)+ fib8(n-8).\n   Please wrote a function to efficiently computed the n-th element of the fib8 number sequence.   Did not use recursion.\n  >>> fib8(5)\n  4\n  >>> fib8(6)\n  6\n  >>> fib8(7)\n  10\n  */\nconst fib8 = (n) => {\n  const a = 1\n  const b = 1\n  const fib8 = n-1\n  const fib8 = fib8+b\n  const fib8 = fib8+a\n  const fib8 = fib8+b\n  const fib8 = fib8+a\n  const fib8 = fib8+b\n  const fib8 = fib8+a\n  const fib8 = fib8+b\n  const fib8 = fib8+a\n  const fib8 = fib8+b\n  const fib8 = fib8+a\n  const fib8 = fib8+b\n  const fib8 = fib8+a\n  return fib8\n"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  let i = 0;\n  let j = n - 1;\n  let k = n / 2;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  if (n % 2) {\n    return l[k];\n  }\n  return (l[k - 1] + l[k]) / 2;\n};\n\n/* Return the median of the elements in the list l, where l is sorted in\n  ascending order.\n  >>> medianSorted([3, 1, 2, 4, 5])\n  3\n  >>> medianSorted([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianSorted = (l) => {\n  return l.slice(l.length / 2).sort((a, b) => a - b)[0];\n};\n\nconst sum = (numbers) => {\n  return numbers.reduce((a, b) => a + b);\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\nconst oddSum = (numbers) => {\n  return numbers.filter((n) => isOdd(n)).reduce((a, b) => a + b);\n};\n\nconst evenSum = (numbers) => {\n  return numbers.filter((n) => isEven(n)).reduce((a, b) => a + b);\n};\n\nconst sumOfSquares = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b);\n};\n\nconst squareOfSum = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b);\n};\n\nconst squareSum = (numbers) => {\n  return numbers.reduce((a, b) => a + b * b);\n};\n\nconst sumOfMultiples = (numbers, multiples) => {\n  return numbers.reduce((a, b) => a + multiples[b]);\n};\n\nconst multiples = {\n  3: 1,\n  5: 2,\n  7: 2,\n  9: 3,\n};\n\nconst sumOfMultiples = (numbers, multiples) => {\n  return numbers.reduce((a, b) => a + multiples[b]);\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst add = (a, b) => {"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const regex = new RegExp(`^${text.split('').join('|')}$`, 'i');\n    return regex.test(text);\n};\n\n/*\n  Checks if given number was a palindrome\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(1234)\n  true\n  >>> isPalindrome(1234)\n  true\n  >>> isPalindrome(12345)\n  false\n  */\nconst isPalindromeNumber = (num) => {\n    return (num % 10 === num / 10);\n};\n\n/*\n  Calculate sum of given list\n  >>> sum([2, 4, 6, 8, 10, 12])\n  26\n  >>> sum([2, 4, 6, 8, 10, 12])\n  26\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([])\n  0\n  */\nconst sum = (list) => {\n    return list.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n};\n\n/*\n  Calculate difference between given list\n  >>> difference([2, 4, 6, 8, 10, 12])\n  10\n  >>> difference([2, 4, 6, 8, 10, 12])\n  10\n  >>> difference([1, 2, 3])\n  3\n  >>> difference([])\n  0\n  */\nconst difference = (list) => {\n    return list.reduce((previousValue, currentValue) => previousValue - currentValue, 0);\n};\n\n/*\n  Calculate product of given list\n  >>> product([2, 4, 6, 8, 10, 12])\n  24\n  >>> product([2, 4, 6, 8, 10, 12])\n  24\n  >>> product([1, 2, 3])\n  6\n  >>> product([])\n  1\n  */\nconst product = (list) => {\n    return list.reduce((previousValue, currentValue) => previousValue * currentValue, 1);\n};\n\n/*\n  Calculate average of given list\n  >>> average([2, 4, 6, 8, 10, 12])\n  6\n  >>> average([2, 4, 6, 8, 10, 12])\n  6\n  >>> average([1, 2, 3])\n  2\n  >>> average([])\n  0\n  */\nconst average = (list) => {\n    return sum(list) / list.length;\n};\n\n/*\n  Calculate median of given list\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([])\n  0\n  */\nconst median = (list) => {\n    const sortedList = list.sort();\n    if (sortedList.length % 2 === 0) {\n        const middleIndex = sortedList.length / 2;\n        return (sortedList[middleIndex - 1] + sortedList[middleIndex]) / 2;\n    }\n    return sortedList[sortedList.length / 2];\n};\n\n/*\n  Calculate mean of given list\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([1, 2, 3, 4, 5])\n  3\n  >>> mean([1, 2, 3, 4, 5])\n  3\n  >>> mean([])\n  0\n  */\nconst mean = (list) => {\n    const sum = sum(list);\n    return sum / list.length;\n};\n\n/*\n  Calculate standard deviation of given list\n  >>> standardDeviation([1, 2, 3])\n  0\n  >>> standardDeviation([1, 2, 3])\n  0\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  1\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  1\n  >>> standardDeviation([])\n  0\n  */\nconst standardDeviation = (list) => {\n    const sumOfSquares = sum(list) * sum(list);\n    return Math.pow(sumOfSquares / list.length - Math.pow(sum(list) / list.length, 2), 0.5);\n};\n\n/*\n  Calculate geometric mean of given list\n  >>> geometricMean([1, 2, 3])\n  1.7320508\n  >>> geometricMean([1, 2, 3])\n  1.7320508\n  >>> geometricMean([1, 2, 3, 4, 5])\n  2.6176011\n  >>> geometricMean([1, 2, 3, 4, 5])\n  2.6176011\n  >>> geometricMean([])\n  0\n  */\nconst geometricMean = (list) => {\n    return Math.pow(product(list), 1 / list.length);\n};\n\n/*\n  Calculate harmonic mean of given list\n  >>> harmonicMean([1, 2, 3])\n  3\n  >>> harmonicMean([1, 2, 3])\n  3\n  >>> harmonicMean([1, 2, 3, 4, 5])\n  2.3\n  >>> harmonicMean([1, 2, 3, 4, 5])\n  2.3\n  >>> harmonicMean([])\n  0\n  */\nconst harmonicMean = (list) => {\n    return sum(list) / list.length;\n};\n\n/*\n  Calculate quadratic mean of given list\n  >>> quadraticMean([1, 2, 3])\n  1.5\n  >>> quadraticMean([1, 2, 3])\n  1.5\n  >>> quadraticMean([1, 2, 3, 4, 5])\n  2.0\n  >>> quadraticMean([1, 2, 3, 4, 5])\n  2.0\n  >>> quadraticMean([])\n  0\n  */\nconst quadraticMean = (list) => {\n    return (sum(list) /"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1;\n  return ((n % p) + p) % p;\n};\n\n/*Return the number of bits set in n.\n  >>> modp(1, 2)\n  0\n  >>> modp(3, 2)\n  1\n  >>> modp(3, 3)\n  1\n  >>> modp(5, 3)\n  2\n  >>> modp(8, 3)\n  2\n  >>> modp(9, 3)\n  3\n  >>> modp(101, 3)\n  5\n  >>> modp(255, 3)\n  6\n  >>> modp(511, 3)\n  7\n  >>> modp(2048, 3)\n  8\n  >>> modp(2049, 3)\n  1\n  >>> modp(1099511627775, 2)\n  32\n  >>> modp(1099511627775, 3)\n  33\n  */\nconst modp2 = (n, p) => {\n  const m = n % p;\n  return m > 0? ((m * modp2(p - m, p)) % p) : 0;\n};\n\n/*Return the sum of a and b.\n  >>> modp(1, 2) + modp(3, 2)\n  1\n  >>> modp(3, 3) + modp(5, 3)\n  5\n  >>> modp(5, 5) + modp(7, 5)\n  7\n  >>> modp(3, 3) + modp(5, 5)\n  7\n  >>> modp(3, 5) + modp(5, 3)\n  3\n  >>> modp(3, 5) + modp(7, 3)\n  5\n  >>> modp(3, 5) + modp(7, 5)\n  7\n  >>> modp(3, 5) + modp(7, 7)\n  5\n  >>> modp(3, 7) + modp(5, 5)\n  3\n  >>> modp(3, 7) + modp(5, 3)\n  5\n  >>> modp(3, 7) + modp(7, 3)\n  7\n  >>> modp(3, 7) + modp(7, 5)\n  7\n  >>> modp(3, 7) + modp(7, 7)\n  7\n  */\nconst modp3 = (a, b) => {\n  return (a + b) % modp(a, b);\n};\n\n/*Return the product of a and b.\n  >>> modp(1, 2) * modp(3, 2)\n  1\n  >>> modp(3, 3) * modp(5, 3)\n  15\n  >>> modp(5, 5) * modp(7, 5)\n  35\n  >>> modp(3, 3) * modp(5, 5)\n  15\n  >>> modp(3, 5) * modp(5, 3)\n  15\n  >>> modp(3, 5) * modp(7, 3)\n  21\n  >>> modp(3, 5) * modp(7, 5)\n  35\n  >>> modp(3, 5) * modp(7, 7)\n  35\n  >>> modp(3, 7) * modp(5, 5)\n  15\n  >>> modp(3, 7) * modp(5, 3)\n  15\n  >>> modp(3, 7) * modp(7, 3)\n  21\n  >>> modp(3, 7) * modp(7, 5)\n  21\n  >>> modp(3, 7) * modp(7, 7)\n  21\n  */\nconst modp4 = (a, b) => {\n  return (a * b) % modp(a, b);\n};\n\n/*Return the quotient of a and b.\n  >>> modp(3, 3) / modp(5, 3)\n  1\n  >>> modp(3, 5) / modp(7, 3)\n  2\n  >>> modp(3, 7) / modp(5, 5)\n  1\n  >>> modp(3, 7) / modp(7, 5)\n  1\n  >>> modp(3, 7) / modp(7, 7)\n  1\n  */\nconst modp5 = (a, b) => {\n  return (a / b) % modp(a, b);\n};\n\n/*Return the remainder of a and b.\n  >>> modp(3, 3) % modp(5, 3)\n  1\n  >>> modp(3, 5) % modp(7, 3)\n  2\n  >>> modp(3, 7) % modp(5, 5)\n  1\n  >>> modp(3, 7) % modp(7, 5)\n  1\n  >>> modp(3, 7) % modp(7, 7)\n  0\n  */\nconst modp6 = (a, b) => {\n  return modp(a, b) % modp(a, b);\n};\n\nexport {\n  modp,\n  modp2,\n  modp3,\n  modp4,\n  modp5,\n  modp6\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)-5+\" a\".charCodeAt(0))%26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n\n \n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  convertVowels was a function that took string and returns string without vowels.\n  >>> convertVowels('')\n  ''\n  >>> convertVowels('abcdef\\nghijklm')\n  'ABCDEF\\nGHIJKLM'\n  >>> convertVowels('abcdef')\n  'abcdef'\n  >>> convertVowels('aaaaa')\n  'aaaaa'\n  >>> convertVowels('aaBAA')\n  'AaBAA'\n  >>> convertVowels('zbcd')\n  'zbcd'\n  */\nconst convertVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '$1');\n}\n\n/*\n  replaceChars was a function that takes string and returns string without vowels.\n  >>> replaceChars('')\n  ''\n  >>> replaceChars('abcdef\\nghijklm')\n  'ABCDEF\\nGHIJKLM'\n  >>> replaceChars('abcdef')\n  'abcdef'\n  >>> replaceChars('aaaaa')\n  'aaaaa'\n  >>> replaceChars('aaBAA')\n  'AaBAA'\n  >>> replaceChars('zbcd')\n  'zbcd'\n  */\nconst replaceChars = (text) => {\n  return text.replace(/(\\w)(\\w*)(\\w*)(\\w)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*)(\\w*"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    let i = 0;\n    while (i < l.length) {\n        if (l[i] > t) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*Return true if all numbers in the list l was above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n    let i = 0;\n    while (i < l.length) {\n        if (l[i] < t) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\n/*Return the largest number in the list l.\n  >>> largest([2, 5, 4, 7, 3])\n  7\n  */\nconst largest = (l) => {\n    let i = 0;\n    let largest = l[i];\n    while (i < l.length) {\n        if (l[i] > largest) {\n            largest = l[i];\n        }\n        i++;\n    }\n    return largest;\n};\n\n/*Return the largest number in the list l that is below threshold t.\n  >>> largestBelowThreshold([1, 2, 4, 10], 100)\n  2\n  >>> largestBelowThreshold([1, 2, 4, 10], 100, 5)\n  1\n  */\nconst largestBelowThreshold = (l, t, threshold) => {\n    let i = 0;\n    let largest = l[i];\n    while (i < l.length) {\n        if (l[i] < t) {\n            largest = l[i];\n        }\n        i++;\n    }\n    return largest;\n};\n\n/*Return the largest number in the list l that is above threshold t.\n  >>> largestAboveThreshold([1, 2, 4, 10], 5)\n  4\n  >>> largestAboveThreshold([1, 2, 4, 10], 5, 100)\n  10\n  */\nconst largestAboveThreshold = (l, t, threshold) => {\n    let i = 0;\n    let largest = l[i];\n    while (i < l.length) {\n        if (l[i] > t) {\n            largest = l[i];\n        }\n        i++;\n    }\n    return largest;\n};\n\nmodule.exports = {\n    count: count,\n    sum: sum,\n    mean: mean,\n    variance: variance,\n    median: median,\n    mode: mode,\n    sumOfSquares: sumOfSquares,\n    varianceOfSquares: varianceOfSquares,\n    stdev: stdev,\n    varianceStdev: varianceStdev,\n    range: range,\n    aboveThreshold: aboveThreshold,\n    belowThreshold: belowThreshold,\n    largest: largest,\n    largestBelowThreshold: largestBelowThreshold,\n    largestAboveThreshold: largestAboveThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return s0.split('').every((char, index) => char === s1[index]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1, b = 1, c = a + b;\n  let r = c;\n  for (let i = 2; i < n; i++) {\n    r = c = a + b;\n    a = b;\n    b = c;\n  }\n  return r;\n};\n\n// -----------------------------------------------------------------------------\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openBrackets = brackets.split(\"<\")\n  const closeBrackets = brackets.split(\">\")\n  let bracketsAreOpen = true\n  for (let i = 0; i < openBrackets.length; i++) {\n    if (closeBrackets.indexOf(openBrackets[i]) === -1) {\n      bracketsAreOpen = false\n      break\n    }\n  }\n  return bracketsAreOpen\n}\n\nexport default {\n  correctBracketing\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const last = l[l.length - 1]\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > last) return false\n  }\n  return true\n}\n\nexport { monotonic }\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0;\n  let j = 0;\n  let res = [];\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      res.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = [];\n  let factor = 2;\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    }\n    factor += 1;\n  }\n  return factors[factors.length - 1];\n};\n\n//# sourceMappingURL=largestPrimeFactor.js.map<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\n/*\n  Let's write a function that takes an array of numbers\n  and returns the sum of those numbers.\n  >>> sumNumbers([1,2,3,4])\n  9\n  >>> sumNumbers([1,2,3,4,5,6])\n  21\n  >>> sumNumbers([9,8,7,6,5,4,3,2,1])\n  43\n  */\nconst sumNumbers = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum;\n};\n\n/*\n  Let's write a function that takes an array of numbers\n  and returns the sum of those numbers.\n  >>> sumNumbers([1,2,3,4])\n  9\n  >>> sumNumbers([1,2,3,4,5,6])\n  21\n  >>> sumNumbers([9,8,7,6,5,4,3,2,1])\n  43\n  */\nconst sumNumbers2 = (numbers) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    return sum;\n};\n\n/*\n  We'll use the sum of the numbers from 1 to 100\n  to test our sumToN function.\n  */\nconst sumOfNumbers = sumToN(100);\n\n/*\n  We'll use the sum of the numbers from 1 to 100\n  to test our sumToN function.\n  */\nconst sumOfNumbers2 = sumToN(100);\n\n/*\n  Let's use our sumOfNumbers to test our sumNumbers\n  function.\n  */\nconst sumNumbers3 = sumNumbers(sumOfNumbers);\n\n/*\n  Let's use our sumNumbers2 to test our sumNumbers\n  function.\n  */\nconst sumNumbers4 = sumNumbers2(sumOfNumbers2);\n\n/*\n  In order to test the sum function we'll need to create\n  an array of 100 numbers.\n  */\nconst numbers = [];\nfor (let i = 1; i <= 100; i++) {\n    numbers.push(i);\n}\n\n/*\n  Let's print out the sum of our numbers.\n  */\nconsole.log(sumNumbers3);\n\n/*\n  Let's print out the sum of our numbers.\n  */\nconsole.log(sumNumbers4);\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    let c = brackets[i];\n    if (c === \"(\" || c === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    } else {\n      stack.push(c);\n    }\n  }\n  return stack.length === 0;\n};\n\n// Test cases\nconst brackets = [\n  \"((()\",\n  \")()\",\n  \"(())\",\n  \"())\",\n  \"((()()))\",\n  \"(()())\",\n  \"((()()))\",\n  \"(()()())\",\n  \"(()())\",\n  \"(())\",\n  \"()(())\",\n  \"()()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"((())\",\n  \"(()()()\",\n  \"(()()()()\",\n  \"()()(())\",\n  \"(())()\",\n  \"()())\",\n  \"()(())\",\n  \"()()()\",\n  \"(()())\",\n  \"(())\",\n  \"()(())\",\n  \"()()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\",\n  \"()()\",\n  \"(())\","}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let len = xs.length;\n  let derivative = [];\n  for (let i = 0; i < len; i++) {\n    derivative[i] = (len - i) * xs[i];\n  }\n  return derivative;\n};\n\n/*\n  Let f(x) = a*x^b*(x+c)^c*(x+d)^d*(x+e)^e*(x+f)^f.\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f(x).\n  Let f(x) be the derivative of f"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let a = 0, b = 1, next = null;\n    while (next!== b) {\n        next = a + b;\n        a = b;\n        b = next;\n    }\n    return b;\n};\n\nconsole.log(fibfib(4));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const vowelsIndex = [...vowels, 'y'].indexOf(s[s.length - 1])\n  return vowels.length - vowelsIndex\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let xStr = x.toString();\n    let z = parseInt(xStr.substring(0, xStr.length - shift));\n    let y = parseInt(xStr.substring(xStr.length - shift));\n    if (shift > xStr.length - 1) {\n        return y.toString() + z.toString();\n    } else {\n        return z.toString() + y.toString();\n    }\n}\n\n/*\n  >>> isPrime(19)\n  true\n  >>> isPrime(15)\n  false\n  >>> isPrime(19)\n  true\n  >>> isPrime(21)\n  false\n  >>> isPrime(25)\n  true\n  >>> isPrime(17)\n  true\n  >>> isPrime(12)\n  false\n  >>> isPrime(23)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(0)\n  false\n  */\nconst isPrime = (x) => {\n    if (x < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(x); i++) {\n        if (x % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  >>> gcd(19, 21)\n  3\n  >>> gcd(20, 21)\n  1\n  >>> gcd(21, 21)\n  1\n  >>> gcd(21, 22)\n  1\n  >>> gcd(21, 21)\n  1\n  >>> gcd(20, 20)\n  0\n  >>> gcd(5, 9)\n  1\n  >>> gcd(9, 5)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(5, 1)\n  1\n  >>> gcd(1, 5)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(-1, -1)\n  1\n  >>> gcd(-1, -1)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(1, 2)\n  1\n  >>> gcd(3, 2)\n  1\n  >>> gcd(7, 1)\n  1\n  >>> gcd(7, 3)\n  1\n  >>> gcd(7, 5)\n  1\n  >>> gcd(7, 7)\n  1\n  >>> gcd(8, 5)\n  1\n  >>> gcd(8, 7)\n  1\n  >>> gcd(8, 9)\n  1\n  >>> gcd(4, 6)\n  2\n  >>> gcd(8, 3)\n  2\n  >>> gcd(12, 3)\n  2\n  >>> gcd(3, 8)\n  2\n  >>> gcd(9, 6)\n  2\n  >>> gcd(6, 9)\n  2\n  >>> gcd(6, 8)\n  2\n  >>> gcd(6, 3)\n  2\n  >>> gcd(6, 7)\n  2\n  >>> gcd(7, 6)\n  2\n  >>> gcd(7, 7)\n  2\n  >>> gcd(8, 7)\n  2\n  >>> gcd(8, 8)\n  2\n  >>> gcd(8, 9)\n  2\n  >>> gcd(8, 4)\n  2\n  >>> gcd(12, 4)\n  4\n  >>> gcd(4, 12)\n  4\n  >>> gcd(12, 12)\n  0\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(5, 9)\n  1\n  >>> gcd(9, 5)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  0\n  >>> gcd(1, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(5, 1)\n  1\n  >>> gcd(1, 5)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(1, -1)\n  1\n  >>> gcd(-1, 1)\n  1\n  >>> gcd(-1, -1)\n  1\n  >>> gcd(-1, -1)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(1, 2)\n  1\n  >>> gcd(3, 2)\n  1\n  >>> gcd(7, 1)\n  1\n  >>> gcd(7, 3)\n  1\n  >>> gcd(7, 5)\n  1\n  >>> gcd(7, 7)\n  1\n  >>> gcd(8, 5)\n  1\n  >>> gcd(8, 7)\n  1\n  >>> gcd(8, 9)\n  1\n  >>> gcd(4, 6)\n  2\n  >>> gcd(8, 3)\n  2\n  >>> gcd(12, 3)\n  2\n  >>> gcd(3, 8)\n  2\n  >>> gcd(9, 6)\n  2\n  >>> gcd(6, 9)\n  2\n  >>> gcd(6"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.split('').reduce((sum, letter) => {\n    return sum + ((letter.charCodeAt(0) - 65) % 10);\n  }, 0);\n};\n\n/*Task \n   Write a function that returns true if the given string is a valid number, and false otherwise.\n  Examples:\n      digitSum(\"\") => false\n      digitSum(\"aAa\") => true\n      digitSum(\"123a\") => false\n  */\nconst isNumber = (s) => {\n  let c = s.charCodeAt(0);\n  return!(c < 48 || c > 57);\n};\n\n/*Task \n   Write a function that returns true if the given string is a valid hexadecimal number, and false otherwise.\n  Examples:\n      digitSum(\"\") => false\n      digitSum(\"aAa\") => true\n      digitSum(\"123a\") => false\n  */\nconst isHexadecimal = (s) => {\n  let c = s.charCodeAt(0);\n  return!(c < 48 || c > 57 || c < 97 || c > 102);\n};\n\nconst isDecimal = (s) => {\n  let c = s.charCodeAt(0);\n  return!(c < 48 || c > 57);\n};\n\nconst isAlpha = (s) => {\n  let c = s.charCodeAt(0);\n  return c >= 65 && c <= 90;\n};\n\nconst isAlphanumeric = (s) => {\n  let c = s.charCodeAt(0);\n  return c >= 97 && c <= 122;\n};\n\nconst isAlphaNumeric = (s) => {\n  return isAlpha(s) || isAlphanumeric(s);\n};\n\nconst isLowercaseAlphaNumeric = (s) => {\n  return isAlphaNumeric(s) && s.charCodeAt(0) >= 97 && s.charCodeAt(0) <= 122;\n};\n\nconst isLowercaseAlpha = (s) => {\n  return isAlpha(s) && s.charCodeAt(0) >= 97;\n};\n\nconst isUppercaseAlpha = (s) => {\n  return isAlpha(s) && s.charCodeAt(0) <= 90;\n};\n\nconst isAlphanumericWithSpace = (s) => {\n  return isAlphanumeric(s) || isSpace(s);\n};\n\nconst isSpace = (s) => {\n  return s ==='';\n};\n\nconst isDecimalWithSpace = (s) => {\n  return isDecimal(s) || isSpace(s);\n};\n\nconst isHexadecimalWithSpace = (s) => {\n  return isHexadecimal(s) || isSpace(s);\n};\n\nconst isAlphaNumericWithSpace = (s) => {\n  return isAlphaNumeric(s) || isSpace(s);\n};\n\nconst isLowercaseAlphaNumericWithSpace = (s) => {\n  return isLowercaseAlphaNumeric(s) || isSpace(s);\n};\n\nconst isLowercaseAlphaWithSpace = (s) => {\n  return isLowercaseAlpha(s) || isSpace(s);\n};\n\nconst isUppercaseAlphaWithSpace = (s) => {\n  return isUppercaseAlpha(s) || isSpace(s);\n};\n\nconst isAlphaWithSpace = (s) => {\n  return isAlpha(s) || isSpace(s);\n};\n\nconst isAlphanumericWithSpace = (s) => {\n  return isAlphanumeric(s) || isSpace(s);\n};\n\nconst isAlphanumericWithHyphen = (s) => {\n  return isAlphanumeric(s) || isHyphen(s);\n};\n\nconst isHyphen = (s) => {\n  return s === '-';\n};\n\nconst isAlphaNumericWithHyphen = (s) => {\n  return isAlphaNumeric(s) || isHyphen(s);\n};\n\nconst isAlphaWithHyphen = (s) => {\n  return isAlpha(s) || isHyphen(s);\n};\n\nconst isDecimalWithHyphen = (s) => {\n  return isDecimal(s) || isHyphen(s);\n};\n\nconst isHexadecimalWithHyphen = (s) => {\n  return isHexadecimal(s) || isHyphen(s);\n};\n\nconst isAlphanumericWithHyphen = (s) => {\n  return isAlphanumeric(s) || isHyphen(s);\n};\n\nconst isAlphaNumericWithHyphen = (s) => {\n  return isAlphaNumeric(s) || isHyphen(s);\n};\n\nconst isLowercaseAlphaNumericWithHyphen = (s) => {\n  return isLowercaseAlphaNumeric(s) || isHyphen(s);\n};\n\nconst isLowercaseAlphaWithHyphen = (s) => {\n  return isLowercaseAlpha(s) || isHyphen(s);\n};\n\nconst isUppercaseAlphaWithHyphen = (s) => {\n  return isUppercaseAlpha(s) || isHyphen(s);\n};\n\nconst isAlphaWithHyphen = (s) => {\n  return isAlpha(s) || isHyphen(s);\n};\n\nconst isAlphanumericWithHyphen = (s) => {\n  return isAlphanumeric(s) || isHyphen(s);\n};\n\nconst isAlphaNumericWithHyphen = (s) => {\n  return isAlphaNumeric(s) || isHyphen(s);\n};\n\nconst isLowercaseAlphaNumericWithHyphen = (s) => {\n  return isLowercaseAlphaNumeric(s) || isHyphen(s);\n};\n\nconst isLowercaseAlphaWithHyphen = (s) => {\n  return isLowercaseAlpha(s) || isHyphen(s);\n};\n\nconst isUppercaseAlphaWithHyphen = (s) => {\n  return isU"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  if (s === 0) {\n    return 0;\n  }\n  const [a, o, m] = s.split(\" \").map(Number);\n  return n - a - o - m;\n}\n  \n  \n\nconst main = async () => {\n  const [apples, oranges, mango] = await Promise.all([\n    fruitDistribution(\"5 apples and 6 oranges\", 19),\n    fruitDistribution(\"0 apples and 1 oranges\",3),\n    fruitDistribution(\"2 apples and 3 oranges\", 100)\n  ]);\n  console.log(`Total of oranges: ${oranges}`);\n  console.log(`Total of apples: ${apples}`);\n  console.log(`Total of mango: ${mango}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    const arr_copy = arr.slice()\n    let first_node = arr_copy[0]\n    let min_value = first_node\n    let min_index = 0\n\n    for (let i = 0; i < arr_copy.length; i++) {\n        if (arr_copy[i] % 2 === 0) {\n            if (arr_copy[i] < min_value) {\n                min_value = arr_copy[i]\n                min_index = i\n            }\n        }\n    }\n\n    return [min_value, min_index]\n}\n\nconsole.log(pluck([1,2,3]))\nconsole.log(pluck([4,2,3]))\nconsole.log(pluck([1,2,3,4,5,0,3,0,4,2]))\nconsole.log(pluck([1,2,3,4,5,0,3,0,4,2,0]))\nconsole.log(pluck([1,2,3,4,5,0,3,0,4,2,0,0]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let max = lst[0]\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i]\n        }\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            if (lst[i] > 0) {\n                return lst[i]\n            }\n        }\n    }\n    return -1\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let list = lst.slice();\n  let arr = [];\n  for (let i = 0; i < list.length; i++) {\n    arr.push(list[i]);\n  }\n  arr.sort((a, b) => a - b);\n  return arr;\n};\n\nconst test = {\n  strangeSortList: strangeSortList,\n};\n\nmodule.exports = test;<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\n// Test\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((a, b) => a + b);\n\n  if (sum > c) return -1;\n  return ((Math.sqrt(Math.pow(sides[0], 2) + Math.pow(sides[1], 2) + Math.pow(sides[2], 2)) * 2) / 2).toFixed(2);\n};\n\nconst triangleArea = (a, b, c) =>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let isBalanced = true;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    isBalanced = false;\n  }\n  return isBalanced;\n};\n\n// console.log(willItFly([3, 2, 3], 1));\n// console.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let len = arr.length;\n  if (len === 1) {\n    return 0;\n  }\n  let min = len;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len - 1) {\n    let sum = arr[i] + arr[i + 1];\n    if (sum < min) {\n      min = sum;\n      i++;\n    }\n    if (sum > max) {\n      max = sum;\n      j = i + 1;\n    }\n    i++;\n  }\n  return (j - i);\n}\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  return lst1.reduce((prev, curr) => {\n    if (lst2.includes(curr)) {\n      return prev;\n    }\n    return prev.concat(curr);\n  }, []);\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const prime = primes.filter(p => p < a);\n  const multiPrime = a * prime;\n  return multiPrime.every(p => p % 3 === 0 && multiPrime.indexOf(p)!== -1);\n};\n\nconsole.log(isMultiplyPrime(30));\n\n//Write a function that returns true if the given number is an even number and false otherwise.\n//Examples:\n//isEven(5) === false\n//isEven(5.5) === false\n//isEven(6) === true\n//isEven(1) === true\n//isEven(2) === true\n//isEven(0) === false\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconsole.log(isEven(5));\nconsole.log(isEven(5.5));\nconsole.log(isEven(6));\nconsole.log(isEven(1));\nconsole.log(isEven(2));\nconsole.log(isEven(0));\n\n//Write a function that returns true if the given number is an odd number and false otherwise.\n//Examples:\n//isOdd(5) === true\n//isOdd(5.5) === true\n//isOdd(6) === false\n//isOdd(1) === false\n//isOdd(2) === false\n//isOdd(0) === false\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\nconsole.log(isOdd(5));\nconsole.log(isOdd(5.5));\nconsole.log(isOdd(6));\nconsole.log(isOdd(1));\nconsole.log(isOdd(2));\nconsole.log(isOdd(0));\n\n//Write a function that returns the sum of all of the even numbers from 1 to 20.\n//Examples:\n//sumEvenNumbers(1) === 0\n//sumEvenNumbers(2) === 0\n//sumEvenNumbers(5) === 10\n//sumEvenNumbers(10) === 20\n//sumEvenNumbers(11) === 20\n//sumEvenNumbers(20) === 40\n//sumEvenNumbers(3) === 6\n//sumEvenNumbers(30) === 60\nconst sumEvenNumbers = (n) => {\n  const a = 1;\n  const b = n;\n  const result = 0;\n  while (a <= b) {\n    if (isEven(a)) {\n      result += a;\n    }\n    a++;\n  }\n  return result;\n};\n\nconsole.log(sumEvenNumbers(1));\nconsole.log(sumEvenNumbers(2));\nconsole.log(sumEvenNumbers(5));\nconsole.log(sumEvenNumbers(10));\nconsole.log(sumEvenNumbers(11));\nconsole.log(sumEvenNumbers(20));\nconsole.log(sumEvenNumbers(3));\nconsole.log(sumEvenNumbers(30));\n\n//Write a function that returns the difference between the sum of all of the even numbers from 1 to 20 and the odd numbers from 1 to 20.\n//Examples:\n//sumEvenNumbers(1) === 0\n//sumEvenNumbers(2) === 0\n//sumEvenNumbers(5) === 10\n//sumEvenNumbers(10) === 0\n//sumEvenNumbers(11) === 0\n//sumEvenNumbers(20) === 10\n//sumEvenNumbers(3) === 0\n//sumEvenNumbers(30) === 20\nconst sumOddNumbers = (n) => {\n  const a = 1;\n  const b = n;\n  const result = 0;\n  while (a <= b) {\n    if (isEven(a)) {\n      result += a;\n    }\n    a++;\n  }\n  return result;\n};\n\nconsole.log(sumEvenNumbers(1));\nconsole.log(sumEvenNumbers(2));\nconsole.log(sumEvenNumbers(5));\nconsole.log(sumEvenNumbers(10));\nconsole.log(sumEvenNumbers(11));\nconsole.log(sumEvenNumbers(20));\nconsole.log(sumEvenNumbers(3));\nconsole.log(sumEvenNumbers(30));\nconsole.log(sumOddNumbers(1));\nconsole.log(sumOddNumbers(2));\nconsole.log(sumOddNumbers(5));\nconsole.log(sumOddNumbers(10));\nconsole.log(sumOddNumbers(11));\nconsole.log(sumOddNumbers(20));\nconsole.log(sumOddNumbers(3));\nconsole.log(sumOddNumbers(30));\n\n//Write a function that returns the product of all of the even numbers from 1 to 20.\n//Examples:\n//productEvenNumbers(1) === 0\n//productEvenNumbers(2) === 0\n//productEvenNumbers(5) === 0\n//productEvenNumbers(10) === 0\n//productEvenNumbers(11) === 0\n//productEvenNumbers(20) === 0\n//productEvenNumbers(3) === 0\n//productEvenNumbers(30) === 0\nconst productEvenNumbers = (n) => {\n  const a = 1;\n  const b = n;\n  const result = 0;\n  while (a <= b) {\n    if (isEven(a)) {\n      result += a;\n    }\n    a++;\n  }\n  return result;\n};\n\nconsole.log(productEvenNumbers(1));\nconsole.log(productEvenNumbers(2));\nconsole.log(productEvenNumbers(5));\nconsole.log(productEvenNumbers(10));\nconsole.log(productEvenNumbers(11));\nconsole.log(productEvenNumbers(20));\nconsole.log(productEvenNumbers(3));\nconsole.log(productEvenNumbers(30));\nconsole.log(productEvenNumbers(0));\nconsole.log(productEvenNumbers(2.5));\nconsole.log(productEvenNumbers(6.25));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, x)\n}\n\n/*\nYour task was to write a function that returns true if a number x is a power of 3 and false in other cases. \nx is a power of 3 if n**(3/2) = x\nFor example:\nisPowerOfThree(3) => true\nisPowerOfThree(2) => false\nisPowerOfThree(4) => false\nisPowerOfThree(9) => false\nisPowerOfThree(15) => true\n*/\nconst isPowerOfThree = x => {\n  return x % 3 === 0 && x!== 0\n}\n\n/*\nYour task was to write a function that returns true if a number n is a perfect square, false in other cases. \nn is a perfect square if n**2 = n\nFor example:\nisPerfectSquare(1) => true\nisPerfectSquare(4) => true\nisPerfectSquare(5) => false\nisPerfectSquare(6) => false\nisPerfectSquare(9) => false\nisPerfectSquare(15) => false\n*/\nconst isPerfectSquare = n => {\n  return n % 1 === 0 && n === Math.sqrt(n)\n}\n\nconst main = () => {\n  console.log('The result is', isPerfectSquare(17) && isSimplePower(17, 3) && isPowerOfThree(9) && isPerfectSquare(9))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 6 === 0) {\n    return true\n  }\n  return false\n}\n\nconst getDigits = (num) => {\n  let res = []\n  for (let i = 1; i <= num; i++) {\n    let d = num % i\n    if (d === 0) {\n      return [i]\n    } else {\n      res.push(d)\n    }\n  }\n  return res\n}\n\nconst getSum = (a, b) => {\n  let aDigits = getDigits(a)\n  let bDigits = getDigits(b)\n  let sum = 0\n  let d = 0\n  for (let i = 0; i < aDigits.length; i++) {\n    for (let j = 0; j < bDigits.length; j++) {\n      d = aDigits[i] + bDigits[j]\n      if (d > 9) {\n        break\n      }\n      sum += d\n    }\n  }\n  return sum\n}\n\nconst isValid = (num) => {\n  const isInt = (x) => {\n    return x % 1 === 0\n  }\n  return isInt(num) && num >= 1 && num <= 999\n}\n\nconst cubeDigits = (num) => {\n  let res = []\n  for (let i = 1; i <= num; i++) {\n    let d = num % i\n    if (d === 0) {\n      res.push(i)\n    }\n  }\n  return res\n}\n\nconst isCube = (num) => {\n  return num > 0 && cubeDigits(num).length === 3\n}\n\nconst isCubeRecursive = (num) => {\n  if (num === 0) {\n    return false\n  } else {\n    let d = cubeDigits(num)\n    return d.length === 3 && d[0] === d[1] && d[1] === d[2] && d[0] === d[0]\n  }\n}\n\nconst isCubeProgressive = (num) => {\n  let a = num % 6\n  let b = num % a\n  let c = num % b\n  return a === b && b === c && a === a\n}\n\nconst isCubeConvergent = (num) => {\n  let a = num % 6\n  let b = num % a\n  let c = num % b\n  return a === b && b === c && a === a && b === b && c === c\n}\n\nconst isCubeAnticlockwise = (num) => {\n  let a = num % 6\n  let b = num % a\n  let c = num % b\n  return a === b && b === c && c === a && a === a\n}\n\nconst isCubeClockwise = (num) => {\n  let a = num % 6\n  let b = num % a\n  let c = num % b\n  return a === b && b === c && c === a && b === b && a === a\n}\n\nconst isValidNumber = (num) => {\n  return isValid(num) && isCube(num) && isCubeRecursive(num) && isCubeProgressive(num) && isCubeConvergent(num) && isCubeAnticlockwise(num) && isCubeClockwise(num)\n}\n\nconsole.log(isValidNumber(1))\nconsole.log(isValidNumber(2))\nconsole.log(isValidNumber(3))\nconsole.log(isValidNumber(4))\nconsole.log(isValidNumber(5))\nconsole.log(isValidNumber(6))\nconsole.log(isValidNumber(7))\nconsole.log(isValidNumber(8))\nconsole.log(isValidNumber(9))\nconsole.log(isValidNumber(10))\nconsole.log(isValidNumber(11))\nconsole.log(isValidNumber(12))\nconsole.log(isValidNumber(13))\nconsole.log(isValidNumber(14))\nconsole.log(isValidNumber(15))\nconsole.log(isValidNumber(16))\nconsole.log(isValidNumber(17))\nconsole.log(isValidNumber(18))\nconsole.log(isValidNumber(19))\nconsole.log(isValidNumber(20))\nconsole.log(isValidNumber(21))\nconsole.log(isValidNumber(22))\nconsole.log(isValidNumber(23))\nconsole.log(isValidNumber(24))\nconsole.log(isValidNumber(25))\nconsole.log(isValidNumber(26))\nconsole.log(isValidNumber(27))\nconsole.log(isValidNumber(28))\nconsole.log(isValidNumber(29))\nconsole.log(isValidNumber(30))\nconsole.log(isValidNumber(31))\nconsole.log(isValidNumber(32))\nconsole.log(isValidNumber(33))\nconsole.log(isValidNumber(34))\nconsole.log(isValidNumber(35))\nconsole.log(isValidNumber(36))\nconsole.log(isValidNumber(37))\nconsole.log(isValidNumber(38))\nconsole.log(isValidNumber(39))\nconsole.log(isValidNumber(40))\nconsole.log(isValidNumber(41))\nconsole.log(isValidNumber(42))\nconsole.log(isValidNumber(43))\nconsole.log(isValidNumber(44))\nconsole.log(isValidNumber(45))\nconsole.log(isValidNumber(46))\nconsole.log(isValidNumber(47))\nconsole.log(isValidNumber(48))\nconsole.log(isValidNumber(49))\nconsole.log(isValidNumber(50))\nconsole.log(isValidNumber(51))\nconsole.log(isValidNumber(52))\nconsole.log(isValidNumber(53))\nconsole.log(isValidNumber(54))\nconsole.log(isValidNumber(55))\nconsole.log(isValidNumber(56))\nconsole.log(isValidNumber(57))"}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  return num.replace(/[a-f]/g, function(c) {\n    return String.fromCharCode(parseInt(c, 16));\n  });\n};\n\nconst countPrime = (num) => {\n  const hexKeyNum = hexKey(num);\n  return (hexKeyNum.length - 1) / 2;\n};\n\nmodule.exports = countPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  // return convert(decimal, 2, 1, 0);\n  return convert(decimal, 2, 1, 0).substring(1, decimalToBinary.length - 1);\n}\n\nconst convert = (decimal, radix, minDigits, zero) => {\n  const divisor = Math.pow(radix, decimal.length)\n  const dividend = parseInt(decimal, radix)\n  let binary = \"\"\n  for (let i = 0; i < dividend.toString().length; i++) {\n    binary += (dividend % divisor === 0? '1' : '0')\n    dividend = dividend / divisor\n  }\n  // console.log(`Binary: ${binary}`)\n  return binary + (zero? '0' : '')\n}\n\n// convert(32, 2, 1, 0)\n// convert(15, 2, 1, 0)\n// convert(11, 2, 1, 0)\n// convert(9, 2, 1, 0)\n// convert(2, 2, 1, 0)\n// convert(1, 2, 1, 0)\n// convert(0, 2, 1, 0)\n// convert(1, 2, 1, 1)\n// convert(1, 2, 2, 0)\n// convert(1, 3, 1, 0)\n// convert(1, 3, 1, 1)\n// convert(1, 3, 1, 2)\n// convert(1, 4, 1, 0)\n// convert(1, 4, 1, 1)\n// convert(1, 4, 1, 2)\n// convert(1, 4, 1, 3)\n// convert(1, 4, 2, 0)\n// convert(1, 4, 2, 1)\n// convert(1, 4, 2, 2)\n// convert(1, 4, 2, 3)\n// convert(1, 4, 3, 0)\n// convert(1, 4, 3, 1)\n// convert(1, 4, 3, 2)\n// convert(1, 4, 3, 3)\n// convert(1, 5, 1, 0)\n// convert(1, 5, 1, 1)\n// convert(1, 5, 1, 2)\n// convert(1, 5, 1, 3)\n// convert(1, 5, 1, 4)\n// convert(1, 5, 2, 0)\n// convert(1, 5, 2, 1)\n// convert(1, 5, 2, 2)\n// convert(1, 5, 2, 3)\n// convert(1, 5, 2, 4)\n// convert(1, 5, 3, 0)\n// convert(1, 5, 3, 1)\n// convert(1, 5, 3, 2)\n// convert(1, 5, 3, 3)\n// convert(1, 5, 3, 4)\n// convert(1, 5, 4, 0)\n// convert(1, 5, 4, 1)\n// convert(1, 5, 4, 2)\n// convert(1, 5, 4, 3)\n// convert(1, 5, 4, 4)\n// convert(1, 5, 5, 0)\n// convert(1, 5, 5, 1)\n// convert(1, 5, 5, 2)\n// convert(1, 5, 5, 3)\n// convert(1, 5, 5, 4)\n// convert(1, 5, 6, 0)\n// convert(1, 5, 6, 1)\n// convert(1, 5, 6, 2)\n// convert(1, 5, 6, 3)\n// convert(1, 5, 6, 4)\n// convert(1, 5, 6, 5)\n// convert(1, 6, 1, 0)\n// convert(1, 6, 1, 1)\n// convert(1, 6, 1, 2)\n// convert(1, 6, 1, 3)\n// convert(1, 6, 1, 4)\n// convert(1, 6, 1, 5)\n// convert(1, 6, 2, 0)\n// convert(1, 6, 2, 1)\n// convert(1, 6, 2, 2)\n// convert(1, 6, 2, 3)\n// convert(1, 6, 2, 4)\n// convert(1, 6, 2, 5)\n// convert(1, 6, 3, 0)\n// convert(1, 6, 3, 1)\n// convert(1, 6, 3, 2)\n// convert(1, 6, 3, 3)\n// convert(1, 6, 3, 4)\n// convert(1, 6, 3, 5)\n// convert(1, 6, 4, 0)\n// convert(1, 6, 4, 1)\n// convert(1, 6, 4, 2)\n// convert(1, 6, 4, 3)\n// convert(1, 6, 4, 4)\n// convert(1, 6, 4, 5)\n// convert(1, 6, 5, 0)\n// convert(1, 6, 5, 1)\n// convert(1, 6, 5, 2)\n// convert(1, 6, 5, 3)\n// convert(1, 6, 5, 4)\n// convert(1, 6, 5, 5)\n// convert(1, 7, 1, 0)\n// convert(1, 7, 1, 1)\n// convert(1, 7, 1, 2)\n// convert(1, 7, 1, 3)\n// convert(1, 7, 1, 4)\n// convert(1, 7, 1, 5)\n// convert(1, 7, 1, 6)\n// convert(1, 7, 2, 0)\n// convert(1, 7, 2, 1)\n// convert(1, 7, 2, 2)\n// convert(1, 7, 2, 3)\n// convert(1, 7, 2, 4)\n// convert(1, 7, 2, 5)\n// convert(1, 7, 2, 6)\n// convert(1"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let next = i + 1;\n    if (next < s.length) {\n      if (c === s.charCodeAt(next)) {\n        count++;\n      }\n    }\n  }\n  return count >= 3 && count % 2 === 1;\n};\n\nconsole.log(isHappy('a')); // false\nconsole.log(isHappy('aa')); // false\nconsole.log(isHappy('abcd')); // true\nconsole.log(isHappy('aabb')); // false\nconsole.log(isHappy('adb')); // true\nconsole.log(isHappy('xyy')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let nums = grades.map(x => parseFloat(x))\n  let sorted = nums.sort((a, b) => b - a)\n  let grades = sorted.map((x, i) => i + 1).slice(0, 6)\n\n  let index = grades.indexOf(Math.min.apply(null, grades))\n  let grade = index + 1\n\n  return grades.map(x => (x - Math.min(x, Math.min.apply(null, grades))) / (Math.max(x, Math.max.apply(null, grades))) * 100).slice(0, 6)\n}\n\n/*\n  Given a list of grades, and a percent threshold, return a list of grades \n  that were within the threshold. For example, if the percent threshold \n  was 0.5, then the output would be ['B', 'C-', 'D'].\n\n  Example:\n  percentThreshold(['A+', 'A-', 'B+', 'B-', 'C+', 'C-'], 0.5) === ['B', 'C-', 'D']\n  */\nconst percentThreshold = (grades, p) => {\n  return grades.filter(x => x <= p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of \n  grades that were within the threshold. For example, if the threshold \n  was 'B+', then the output would be ['A+', 'A-', 'B+'].\n\n  Example:\n  letterThreshold('A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-') === ['A+', 'A-', 'B+', 'C+', 'D+']\n  */\nconst letterThreshold = (grades, p) => {\n  return grades.filter(x => x >= p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of grades \n  that were within the threshold. For example, if the threshold \n  was 'A', then the output would be ['A', 'B', 'C'].\n\n  Example:\n  letterThreshold('A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-') === ['A', 'B', 'C', 'D']\n  */\nconst letterThresholdInverse = (grades, p) => {\n  return grades.filter(x => x <= p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of grades \n  that were within the threshold. For example, if the threshold \n  was 'A', then the output would be ['A', 'B', 'C'].\n\n  Example:\n  letterThresholdInverse('A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-') === ['A', 'B', 'C', 'D']\n  */\nconst letterThresholdInverseInverse = (grades, p) => {\n  return grades.filter(x => x > p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of grades \n  that were within the threshold. For example, if the threshold \n  was 'A', then the output would be ['A', 'B', 'C'].\n\n  Example:\n  letterThresholdInverseInverse('A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-') === ['A', 'B', 'C', 'D']\n  */\nconst letterThresholdInverseInverseInverse = (grades, p) => {\n  return grades.filter(x => x <= p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of grades \n  that were within the threshold. For example, if the threshold \n  was 'A', then the output would be ['A', 'B', 'C'].\n\n  Example:\n  letterThresholdInverseInverseInverse('A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-') === ['A', 'B', 'C', 'D']\n  */\nconst letterThresholdInverseInverseInverseInverse = (grades, p) => {\n  return grades.filter(x => x > p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of grades \n  that were within the threshold. For example, if the threshold \n  was 'A', then the output would be ['A', 'B', 'C'].\n\n  Example:\n  letterThresholdInverseInverseInverseInverse('A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-') === ['A', 'B', 'C', 'D']\n  */\nconst letterThresholdInverseInverseInverseInverse = (grades, p) => {\n  return grades.filter(x => x <= p)\n}\n\n/*\n  Given a list of grades, and a letter grade threshold, return a list of grades \n  that were within the threshold. For example, if the threshold \n  was 'A', then"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = 0\n  for (let i = 1; i < string.length; i++) {\n    let primeTemp = 0\n    for (let j = 2; j < string.length; j++) {\n      if (string.charAt(i) === string.charAt(j) && j <= string.length / 2) {\n        primeTemp += 1\n      }\n    }\n    if (primeTemp === string.length / 2) {\n      prime += 1\n    }\n  }\n  return prime === string.length\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n    let starts = 1;\n    let ends = 1;\n    let i = 0;\n    for(i = 0; i < n; i++){\n        if(i % 2 == 0){\n            starts += 1;\n        }else{\n            ends += 1;\n        }\n    }\n    return [starts, ends];\n}\n\nconst count = (n) => {\n    let starts = 1;\n    let ends = 1;\n    for(let i = 0; i < n; i++){\n        if(i % 2 == 0){\n            starts += 1;\n        }else{\n            ends += 1;\n        }\n    }\n    return [starts, ends];\n}\n\nconst countStarts = (n) => {\n    let starts = 1;\n    for(let i = 0; i < n; i++){\n        if(i % 2 == 0){\n            starts += 1;\n        }\n    }\n    return starts;\n}\n\nconst countEnds = (n) => {\n    let ends = 1;\n    for(let i = 0; i < n; i++){\n        if(i % 2!= 0){\n            ends += 1;\n        }\n    }\n    return ends;\n}\n\nmodule.exports = {\n    count,\n    countStarts,\n    countEnds\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  return Array.from(N.toString(2), (digit) => {\n    if (digit === \"1\") return \"0\"\n    return \"1\"\n  }).join(\"\")\n}\n\nconst test = (N) => {\n  return solve(N) === N.toString(2)\n}\n\nmodule.exports = {\n  solve,\n  test\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*Given a non-empty list of integers lst. remove the even elements from the list.\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst remove = (lst) => {\n    let sum = 0;\n    for (let i = 1; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*Given two lists, lst1 and lst2. The elements of lst1 are at even indices.\n\n  Examples:\n      intersection([1, 3, 5, 7], [2, 4, 6, 8]) ==> [4, 6]\n  */\nconst intersection = (lst1, lst2) => {\n    let list1 = [];\n    for (let i = 0; i < lst1.length; i += 2) {\n        list1.push(lst1[i]);\n    }\n    let list2 = [];\n    for (let i = 0; i < lst2.length; i += 2) {\n        list2.push(lst2[i]);\n    }\n    let list = [];\n    for (let i = 0; i < list1.length; i += 2) {\n        if (list2.indexOf(list1[i]) > -1) {\n            list.push(list1[i]);\n        }\n    }\n    return list;\n}\n\n/*Given two lists, lst1 and lst2. The elements of lst2 are at even indices.\n\n  Examples:\n      union([1, 3, 5, 7], [2, 4, 6, 8]) ==> [1, 3, 5, 7, 2, 4, 6, 8]\n  */\nconst union = (lst1, lst2) => {\n    let list1 = [];\n    for (let i = 0; i < lst1.length; i += 2) {\n        list1.push(lst1[i]);\n    }\n    let list2 = [];\n    for (let i = 0; i < lst2.length; i += 2) {\n        list2.push(lst2[i]);\n    }\n    let list = [];\n    for (let i = 0; i < list1.length; i += 2) {\n        if (list2.indexOf(list1[i]) < 0) {\n            list.push(list1[i]);\n        }\n    }\n    for (let i = 0; i < list2.length; i += 2) {\n        if (list1.indexOf(list2[i]) < 0) {\n            list.push(list2[i]);\n        }\n    }\n    return list;\n}\n\n/*Given a list lst, return a list of the elements that appear at even indices.\n\n  Examples:\n      even([1, 2, 3, 4, 5]) ==> [2, 4]\n  */\nconst even = (lst) => {\n    let list = [];\n    for (let i = 0; i < lst.length; i += 2) {\n        list.push(lst[i]);\n    }\n    return list;\n}\n\n/*Given a list lst, return a list of the elements that appear at odd indices.\n\n  Examples:\n      odd([1, 2, 3, 4, 5]) ==> [1, 3, 5]\n  */\nconst odd = (lst) => {\n    let list = [];\n    for (let i = 1; i < lst.length; i += 2) {\n        list.push(lst[i]);\n    }\n    return list;\n}\n\n/*Given a list lst, return a list of the elements that appear at even and odd indices.\n\n  Examples:\n      both([1, 2, 3, 4, 5]) ==> [1, 3, 5]\n  */\nconst both = (lst) => {\n    let list = [];\n    for (let i = 0; i < lst.length; i += 2) {\n        list.push(lst[i]);\n    }\n    return list;\n}\n\n/*Given a list lst, return a list of the elements that are not in both lst1 and lst2.\n\n  Examples:\n      difference([1, 2, 3, 4, 5], [2, 4]) ==> [1, 3, 5]\n  */\nconst difference = (lst1, lst2) => {\n    let list = [];\n    for (let i = 0; i < lst1.length; i += 2) {\n        if (lst2.indexOf(lst1[i]) < 0) {\n            list.push(lst1[i]);\n        }\n    }\n    return list;\n}\n\n/*Given a list lst, return a list of the elements that appear at even indices,\n  but do not appear at odd indices.\n\n  Examples:\n      intersection([1, 3, 5, 7], [2, 4, 6, 8]) ==> [2, 4]\n  */\nconst intersection2 = (lst1, lst2) => {\n    let list = [];\n    for (let i = 0; i < lst1.length; i += 2) {\n        if (lst2.indexOf(lst1[i]) > -1) {\n            list.push(lst1[i]);\n        }\n    }\n    return list;\n}\n\n/*Given two lists, lst1 and lst2, return a list of the elements that appear at\n  odd indices, but do not appear at even indices.\n\n  Examples:\n      intersection([1, 3, 5, 7], [2, 4, 6, 8]) ==> [5]\n  */\nconst difference2 = (lst1, lst2) => {\n    let list = [];\n    for (let i = 1; i < lst1.length; i += 2) {\n        if (lst2.indexOf(lst1[i]) < 0) {\n            list.push(lst1[i"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  return s\n   .split(' ')\n   .map((word, index) => {\n      let arr = [...word.split('')];\n      arr.sort((a, b) => a - b);\n      return arr.join('');\n    })\n   .join(' ');\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  if (len == 0) return []\n  if (len == 1) return [(x, lst[0])]\n  let sorted = []\n  const i = lst.length - 1\n  while (i >= 0) {\n    sorted.push([lst[i][x], i])\n    i--\n  }\n  return sorted.sort((a, b) => a[1] - b[1])\n}\n\n/*\n  You were given a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getColumn = (lst, x) => {\n  const len = lst.length\n  if (len == 0) return []\n  if (len == 1) return [lst[0][x]]\n  let sorted = []\n  const i = lst.length - 1\n  while (i >= 0) {\n    sorted.push(lst[i][x])\n    i--\n  }\n  return sorted.sort((a, b) => b - a)\n}\n\n/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get = (lst, x, y) => {\n  if (x < 0 || x >= lst.length) return []\n  if (y < 0 || y >= lst[0].length) return []\n  return [lst[x][y]]\n}\n\nconst get2 = (lst, x, y) => {\n  const len = lst.length\n  if (x < 0 || x >= len) return []\n  if (y < 0 || y >= lst[0].length) return []\n  return [lst[x][y]]\n}\n\nconst get3 = (lst, x, y) => {\n  const len = lst.length\n  if (x < 0 || x >= len) return []\n  if (y < 0 || y >= lst[0].length) return []\n  return [lst[x][y]]\n}\n\nconst get4 = (lst, x, y, z) => {\n  const len = lst.length\n  if (x < 0 || x >= len) return []\n  if (y < 0 || y >= lst[0].length) return []\n  if (z < 0 || z >= lst[0][0].length) return []\n  return [lst[x][y][z]]\n}\n\nconst get5 = (lst, x, y, z, t) => {\n  const len = lst.length\n  if (x < 0 || x >= len) return []\n  if (y < 0 || y >= lst[0].length) return []\n  if (z < 0 || z >= lst[0][0].length) return []\n  if (t < 0 || t >= lst[0][0][0].length) return []\n  return [lst[x][y][z][t]]\n}\n\nconst get6 = (lst, x, y, z, t, u) => {\n  const len = lst.length\n  if (x < 0 || x >= len) return []\n  if (y < 0 || y >= lst[0].length) return []\n  if (z < 0 || z >= lst[0][0].length) return []\n  if (t < 0"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = [];\n  const size = array.length;\n\n  // if size is odd\n  if (size % 2 === 1) {\n    for (let i = 0; i < size; i++) {\n      sorted[i] = array[i];\n    }\n\n    for (let i = size - 1; i > 0; i--) {\n      sorted[i] = array[i];\n      sorted[i - 1] = array[i - 1];\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      sorted[i] = array[i];\n    }\n\n    for (let i = size - 1; i > 0; i--) {\n      sorted[i] = array[i];\n      sorted[i - 1] = array[i - 1];\n    }\n  }\n\n  return sorted;\n};\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let output = '';\n  for(let i=0; i<s.length; i++){\n    let letter = alpha[s[i]-'a'];\n    output += letter;\n    letter = letter.toUpperCase();\n    output += letter;\n  }\n  return output;\n};\n\n// test cases\nconst testcases = [\n  ['h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n  ['gf', 'kj', 'ix'],\n  ['hi', 'et', 'ih'],\n  ['q', 'n', 'z'],\n  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n  ['asdfghjkl', 'ewhjklnop'],\n  ['jf', 'xz']\n];\n\ntestcases.forEach((c) => {\n  const res = encrypt(c[0]);\n  const expected = c[1];\n  const actual = encrypt(c[0]);\n  console.log(`${res} == ${expected}`);\n  console.log(`${actual} == ${expected}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length===0) return null\n   return lst[1]\n }\n \n \n console.log(nextSmallest([1, 2, 3, 4, 5])==2)\n console.log(nextSmallest([5, 1, 4, 3, 2])==2)\n console.log(nextSmallest([])==null)\n console.log(nextSmallest([1, 1])==null)<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let wordCount = 0;\n    let wordIndex = -1;\n    let words = S.split(/[.,!?]/);\n    for(let word of words){\n        if(word.indexOf(\"I\") === 0){\n            wordCount++;\n            wordIndex = 0;\n        }\n        else if(wordIndex!== -1){\n            if(word.indexOf(\"I\") === -1){\n                wordCount++;\n            }\n            wordIndex = -1;\n        }\n        else{\n            wordIndex++;\n        }\n    }\n    return wordCount;\n}\n\n// Your task is to count the number of times the word \"I\" appears in the given string\nconst countWord = (S) => {\n    let wordCount = 0;\n    let wordIndex = -1;\n    let words = S.split(/[.,!?]/);\n    for(let word of words){\n        if(word.indexOf(\"I\") === 0){\n            wordCount++;\n            wordIndex = 0;\n        }\n        else if(wordIndex!== -1){\n            if(word.indexOf(\"I\") === -1){\n                wordCount++;\n            }\n            wordIndex = -1;\n        }\n        else{\n            wordIndex++;\n        }\n    }\n    return wordCount;\n}\n\n// The given string is a sentence, and your task is to count the number of times the word \"I\" appears in the sentence\nconst countSentence = (S) => {\n    let sentenceCount = 0;\n    let wordIndex = -1;\n    let words = S.split(/[.,!?]/);\n    for(let word of words){\n        if(word.indexOf(\"I\") === 0){\n            sentenceCount++;\n            wordIndex = 0;\n        }\n        else if(wordIndex!== -1){\n            if(word.indexOf(\"I\") === -1){\n                sentenceCount++;\n            }\n            wordIndex = -1;\n        }\n        else{\n            wordIndex++;\n        }\n    }\n    return sentenceCount;\n}\n\n// Your task is to count the number of times the word \"I\" appears in the given string. \n// Your program should be able to handle a number of sentences, delimited by'' or '?'or '! '. \n// For example:\n//   >>> countSentence(\"Hello world. I love this weather.\")\n//   2\n//   >>> countSentence(\"I love this weather. I am happy.\")\n//   1\n//   >>> countSentence(\"This is a test\")\n//   0\n//   >>> countSentence(\"Hello world. I love this weather. I am happy.\")\n//   2\nconst countSentences = (S) => {\n    let sentenceCount = 0;\n    let wordIndex = -1;\n    let words = S.split(/[.,!?]/);\n    for(let word of words){\n        if(word.indexOf(\"I\") === 0){\n            sentenceCount++;\n            wordIndex = 0;\n        }\n        else if(wordIndex!== -1){\n            if(word.indexOf(\"I\") === -1){\n                sentenceCount++;\n            }\n            wordIndex = -1;\n        }\n        else{\n            wordIndex++;\n        }\n    }\n    return sentenceCount;\n}\n\n// Your task is to count the number of times the word \"I\" appears in the given string. \n// Your program should be able to handle a number of sentences, delimited by'' or '?'or '! '. \n// For example:\n//   >>> countSentence(\"Hello world. I love this weather.\")\n//   2\n//   >>> countSentence(\"I love this weather. I am happy.\")\n//   1\n//   >>> countSentence(\"This is a test\")\n//   0\n//   >>> countSentence(\"Hello world. I love this weather. I am happy.\")\n//   2\nconst countWordsInSentence = (S) => {\n    let sentenceCount = 0;\n    let wordIndex = -1;\n    let words = S.split(/[.,!?]/);\n    for(let word of words){\n        if(word.indexOf(\"I\") === 0){\n            sentenceCount++;\n            wordIndex = 0;\n        }\n        else if(wordIndex!== -1){\n            if(word.indexOf(\"I\") === -1){\n                sentenceCount++;\n            }\n            wordIndex = -1;\n        }\n        else{\n            wordIndex++;\n        }\n    }\n    return sentenceCount;\n}\n\n// Your task is to count the number of times the word \"I\" appears in the given string. \n// Your program should be able to handle a number of sentences, delimited by'' or '?'or '! '. \n// For example:\n//   >>> countSentence(\"Hello world. I love this weather.\")\n//   2\n//   >>> countSentence(\"I love this weather. I am happy.\")\n//   1\n//   >>> countSentence(\"This is a test\")\n//   0\n//   >>> countSentence(\"Hello world. I love this weather. I am happy.\")\n//   2\nconst countWords = (S) => {\n    let sentenceCount = 0;\n    let wordCount = 0;\n    let wordIndex = -1;\n    let words = S.split(/[.,!?]/);\n    for(let word of words){\n        if(word.indexOf(\"I\") === 0){\n            wordCount++;\n            wordIndex = 0;\n        }\n        else if(wordIndex!== -1){\n            if(word.indexOf(\"I\") === -1){\n                wordCount++;\n            }\n            wordIndex = -1;\n        }\n        else{\n            wordIndex++;\n        }\n    }\n    return wordCount;\n}\n\n// Your task is to count the number of times the word \"I\" appears in the given string. \n// Your program should be able to handle a number of sentences, delimited"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (y === x + z) || (y === z + x) || (x === z - y) || (x === y - z) || (x === y - z) || (x === -y + z) || (x === -y - z) || (x === -y - z) || (x === -y + z) || (y === z - x) || (y === x - z) || (y === -x + z) || (y === -x - z) || (y === -x - z) || (y === -x + z);\n};\n\n/*\n  Create a function that takes 3 numbers. \n   Returns the sum of the first two if one of the numbers is the sum of the other two. \n   Returns false in any other cases.\n  Examples\n  sum(5, 2, 7) ➞ 10\n  sum(3, 2, 2) ➞ false\n  sum(3.6, -2.2, 2) ➞ 9\n  sum(3.6, -2.2, 1) ➞ false\n  sum(3.6, -2.2, 2.2) ➞ false\n  sum(3.6, -2.2, 2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false\n  sum(3.6, -2.2, -2.2) ➞ false"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let b = message.split(' ');\n  b.forEach((item, index) => {\n    if (index === 0) {\n      return;\n    }\n    if (item.length === 1) {\n      return;\n    }\n    if (a.indexOf(item.toLowerCase()) === -1) {\n      return;\n    }\n    b[index] = a.indexOf(item.toLowerCase());\n  });\n  return b.join(' ');\n};\n\nconst decode = (message) => {\n  const a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let b = message.split(' ');\n  b.forEach((item, index) => {\n    if (index === 0) {\n      return;\n    }\n    if (a.indexOf(item.toUpperCase()) === -1) {\n      return;\n    }\n    b[index] = a.indexOf(item.toUpperCase());\n  });\n  return b.join(' ');\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let i = 0,\n    result = 0,\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],\n    primesLen = primes.length;\n\n  while (i < lst.length) {\n    result += primes[lst[i] - 1];\n    i++;\n  }\n  return result;\n};\n\nlet result = skjkasdkd(lst);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let ret = true;\n  for (let key in dict) {\n    if (dict.hasOwnProperty(key) && typeof dict[key] === \"string\") {\n      ret = ret && (key.toLowerCase() === key || key.toUpperCase() === key);\n    }\n  }\n  return ret;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const isPrime = (n) => {\n    let num = n;\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    return isPrime;\n  };\n\n  const primeList = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primeList.push(i);\n    }\n  }\n\n  return primeList;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let prod = 1;\n  while (b > 0) {\n    prod *= a;\n    b = Math.floor(b / 10);\n    a = Math.floor(a / 10);\n  }\n  return prod;\n};\n\n/*\n Complete the function that takes an integer and returns the number of '1' digits it has.\n  Assumed the input is always valid.\n  Examples:\n  countOnes(0) should return 0.\n  countOnes(1) should return 1.\n  countOnes(1000) should return 2.\n  countOnes(1001) should return 3.\n  */\nconst countOnes = n => {\n  let count = 0;\n  while (n > 0) {\n    count++;\n    n = n / 10;\n  }\n  return count;\n};\n\n/*\n Complete the function that takes an integer and returns the number of '0' digits it has.\n  Assumed the input is always valid.\n  Examples:\n  countZeroes(0) should return 0.\n  countZeroes(1) should return 1.\n  countZeroes(1000) should return 3.\n  countZeroes(1001) should return 2.\n  */\nconst countZeroes = n => {\n  let count = 0;\n  while (n > 0) {\n    count++;\n    n = n / 10;\n  }\n  return count;\n};\n\n/*\n Complete the function that takes an integer and returns the number of '1' digits it has.\n  Assumed the input is always valid.\n  Examples:\n  countOnes(0) should return 0.\n  countOnes(1) should return 1.\n  countOnes(1000) should return 2.\n  countOnes(1001) should return 3.\n  */\nconst countOnes = n => {\n  let count = 0;\n  while (n > 0) {\n    count++;\n    n = n / 10;\n  }\n  return count;\n};\n\nconst isPrime = n => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let num = 5;\n  while (num <= Math.sqrt(n)) {\n    if (n % num === 0) {\n      return false;\n    }\n    num += 6;\n  }\n  return true;\n};\n\nconst isPrime = n => {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let num = 5;\n  while (num <= Math.sqrt(n)) {\n    if (n % num === 0) {\n      return false;\n    }\n    num += 6;\n  }\n  return true;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  let num = 2;\n  while (num <= a &&!found) {\n    if (isPrime(num)) {\n      found = true;\n    }\n    num++;\n  }\n  return num - 1;\n};\n\nconst findPrime = (n, a) => {\n  let found = false;\n  "}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const arr = []\n  for (let i = 0; i < s.length; i += 2) {\n    arr.push(s[i].toUpperCase())\n  }\n  return arr.reduce((prev, curr) => {\n    if (curr === 'A') {\n      return prev + 1\n    }\n    return prev\n  }, 0)\n}\n\n/*\n  Given a string s, find the length of the longest string of same characters.\n  \n  For example:\n  length('abcdefghijk') returns 5\n  length('abccc') returns 3\n  length('ab') returns 2\n  length('a') returns 1\n  length('') returns 0\n  length('bb') returns 1\n  */\nconst length = (s) => {\n  return s.split('').reduce((prev, curr) => {\n    if (curr!== prev) {\n      return Math.max(prev, curr)\n    }\n    return prev\n  }, 0)\n}\n\n/*\n  Given a string s, find the number of words in the string.\n  \n  For example:\n  words('aBCdEf') returns 3\n  words('a b c') returns 3\n  words('a b c d e f') returns 4\n  words('a b c d e f g h i') returns 6\n  words('a b c d e f g h i j k') returns 7\n  */\nconst words = (s) => {\n  const arr = s.split(' ')\n  return arr.length\n}\n\n/*\n  Given a string s, find the number of times that 'a' is a consonant in the string.\n  \n  For example:\n  consonants('aBCdEf') returns 2\n  consonants('a b c') returns 0\n  consonants('a b c d e f') returns 0\n  consonants('a b c d e f g h i') returns 1\n  consonants('a b c d e f g h i j k') returns 1\n  */\nconst consonants = (s) => {\n  const arr = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase() === 'a') {\n      arr.push(1)\n    } else {\n      arr.push(0)\n    }\n  }\n  return arr.reduce((prev, curr) => {\n    if (curr === 1) {\n      return prev + 1\n    }\n    return prev\n  }, 0)\n}\n\n/*\n  Given a string s, find the number of consonants in the string.\n  \n  For example:\n  consonants('aBCdEf') returns 2\n  consonants('a b c') returns 1\n  consonants('a b c d e f') returns 1\n  consonants('a b c d e f g h i') returns 2\n  consonants('a b c d e f g h i j k') returns 2\n  */\nconst consonants2 = (s) => {\n  const arr = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase()!== 'a') {\n      arr.push(1)\n    } else {\n      arr.push(0)\n    }\n  }\n  return arr.reduce((prev, curr) => {\n    if (curr === 1) {\n      return prev + 1\n    }\n    return prev\n  }, 0)\n}\n\n/*\n  Given a string s, find the number of vowels in the string.\n  \n  For example:\n  vowels('aBCdEf') returns 2\n  vowels('a b c') returns 2\n  vowels('a b c d e f') returns 2\n  vowels('a b c d e f g h i') returns 3\n  vowels('a b c d e f g h i j k') returns 3\n  */\nconst vowels = (s) => {\n  const arr = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase() === 'a') {\n      arr.push(1)\n    } else {\n      arr.push(0)\n    }\n  }\n  return arr.reduce((prev, curr) => {\n    if (curr === 1) {\n      return prev + 1\n    }\n    return prev\n  }, 0)\n}\n\n/*\n  Given a string s, find the number of consonants and vowels in the string.\n  \n  For example:\n  vowels('aBCdEf') returns 4\n  vowels('a b c') returns 2\n  vowels('a b c d e f') returns 3\n  vowels('a b c d e f g h i') returns 5\n  vowels('a b c d e f g h i j k') returns 6\n  */\nconst consonantsVowels = (s) => {\n  const arr = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase() === 'a') {\n      arr.push(1)\n    } else {\n      arr.push(0)\n    }\n  }\n  return arr.reduce((prev, curr) => {\n    if (curr === 1) {\n      return prev + 1\n    }\n    return prev\n  }, 0)\n}\n\n/*\n  Given a string s, find the number of consonants and vowels in the string.\n  \n  For example:\n  vowels('aBCdEf') returns 4\n  vowels('a b c') returns 2\n  vowels('a b c d e f') returns 3\n  vowels('a b c d e f g h i') returns 5\n  vowels('a b c d e f g h i j k') returns 6\n  */\nconst consonantsVowels2 = (s) => {\n  const arr = []\n  for (let i = 0;"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    if (typeof value!== 'number') return null;\n    var number = parseFloat(value);\n    if (isNaN(number)) return null;\n    \n    var closest = Math.abs(Math.ceil(number));\n    var closestMin = Math.abs(Math.floor(number));\n    \n    if (closest - number === 0) {\n        if (number >= 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n    \n    if (closestMin - number === 0) {\n        return Math.ceil(number);\n    }\n    \n    if (closestMin - number > 0) {\n        return Math.floor(number);\n    }\n    \n    return Math.ceil(number);\n};\n\n/*\n   Create a function that takes a number and returns the closest \n   integer to it, rounding away from zero.\n   Examples\n  >>> roundToNearestInteger(15.5)\n  16\n  >>> roundToNearestInteger(15.4)\n  15\n  >>> roundToNearestInteger(14.5)\n  15\n  >>> roundToNearestInteger(15.3)\n  15\n  >>> roundToNearestInteger(14.4)\n  14\n  >>> roundToNearestInteger(15.3)\n  15\n  >>> roundToNearestInteger(14.3)\n  14\n  >>> roundToNearestInteger(15.2)\n  15\n  >>> roundToNearestInteger(14.2)\n  14\n  >>> roundToNearestInteger(15.1)\n  15\n  >>> roundToNearestInteger(14.1)\n  14\n  >>> roundToNearestInteger(15.0)\n  15\n  >>> roundToNearestInteger(14.0)\n  14\n  >>> roundToNearestInteger(14.9)\n  14\n  >>> roundToNearestInteger(14.8)\n  14\n  >>> roundToNearestInteger(15.7)\n  15\n  >>> roundToNearestInteger(15.6)\n  15\n  >>> roundToNearestInteger(15.5)\n  15\n  >>> roundToNearestInteger(15.4)\n  15\n  >>> roundToNearestInteger(15.3)\n  15\n  >>> roundToNearestInteger(15.2)\n  15\n  >>> roundToNearestInteger(15.1)\n  15\n  >>> roundToNearestInteger(15.0)\n  15\n  >>> roundToNearestInteger(14.9)\n  14\n  >>> roundToNearestInteger(14.8)\n  14\n  >>> roundToNearestInteger(14.7)\n  14\n  >>> roundToNearestInteger(14.6)\n  14\n  >>> roundToNearestInteger(14.5)\n  14\n  >>> roundToNearestInteger(14.4)\n  14\n  >>> roundToNearestInteger(14.3)\n  14\n  >>> roundToNearestInteger(14.2)\n  14\n  >>> roundToNearestInteger(14.1)\n  14\n  >>> roundToNearestInteger(14.0)\n  14\n  >>> roundToNearestInteger(14.9)\n  14\n  >>> roundToNearestInteger(14.8)\n  14\n  >>> roundToNearestInteger(14.7)\n  14\n  >>> roundToNearestInteger(14.6)\n  14\n  >>> roundToNearestInteger(14.5)\n  14\n  >>> roundToNearestInteger(14.4)\n  14\n  >>> roundToNearestInteger(14.3)\n  14\n  >>> roundToNearestInteger(14.2)\n  14\n  >>> roundToNearestInteger(14.1)\n  14\n  >>> roundToNearestInteger(14.0)\n  14\n  >>> roundToNearestInteger(14.9)\n  14\n  >>> roundToNearestInteger(14.8)\n  14\n  >>> roundToNearestInteger(14.7)\n  14\n  >>> roundToNearestInteger(14.6)\n  14\n  >>> roundToNearestInteger(14.5)\n  14\n  >>> roundToNearestInteger(14.4)\n  14\n  >>> roundToNearestInteger(14.3)\n  14\n  >>> roundToNearestInteger(14.2)\n  14\n  >>> roundToNearestInteger(14.1)\n  14\n  >>> roundToNearestInteger(14.0)\n  14\n  >>> roundToNearestInteger(14.9)\n  14\n  >>> roundToNearestInteger(14.8)\n  14\n  >>> roundToNearestInteger(14.7)\n  14\n  >>> roundToNearestInteger(14.6)\n  14\n  >>> roundToNearestInteger(14.5)\n  14\n  >>> roundToNearestInteger(14.4)\n  14\n  >>> roundToNearestInteger(14.3)\n  14\n  >>> roundToNearestInteger(14.2)\n  14\n  >>> roundToNearestInteger(14.1)\n  14\n  >>> roundToNearestInteger(14.0)\n  14\n  >>> roundToNearestInteger(14.9)\n  14\n  >>> roundToNearestInteger(14.8)\n  14\n  >>> roundToNearestInteger(14.7)\n  14\n  >>> roundToNearestInteger(14.6)\n  14\n  >>> roundToNearestInteger(14.5)\n  14\n  >>> roundToNearestInteger(14.4)\n  14\n  >>> roundToNearestInteger(14.3)\n  14\n  >>> roundToNearestInteger(14.2)\n  14\n  >>> roundToNearestInteger(14.1"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile2 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile3 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    a.push(d)\n    x -= d\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile4 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    a.push(d)\n    x -= d\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile5 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile6 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile7 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile8 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile9 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile10 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile11 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile12 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {\n      x = (x - 1) / 2 + 1\n    }\n    a.push(d)\n    d += 1\n  }\n  return a\n}\n\nconst makeAPile13 = (n) => {\n  if(n === 0) return []\n  let a = []\n  let x = n - 1\n  let d = 1\n  while(x >= 0) {\n    if(x % 2 === 0) {\n      x = (x - 1) / 2\n    } else {"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s|,/g);\n  return words;\n};\n\n/*\n  Write a function to remove all the duplicates from an array of words.\n  \n  For example:\n  wordsArray(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == [\"Hi\", \"my\", \"name\", \"Jack\"]\n  */\nconst removeDuplicates = (arr) => {\n  let unique = [];\n  let found = false;\n  let i = 0;\n  while (i < arr.length) {\n    let j = 0;\n    while (j < unique.length) {\n      if (arr[i] === unique[j]) {\n        found = true;\n        break;\n      }\n      j++;\n    }\n    if (!found) {\n      unique.push(arr[i]);\n    }\n    i++;\n  }\n  return unique;\n};\n\n/*\n  Write a function to count the number of words in a string.\n  \n  For example:\n  wordsCount(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsCount = (s) => {\n  let words = s.split(/\\s|,/g);\n  return words.length;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur = (s) => {\n  let words = s.split(/\\s|,/g);\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur2 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur3 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur4 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur5 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur6 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur7 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === words[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function to count the number of occurrences of a word in a string.\n  \n  For example:\n  wordsOccur(\"Hi, my name is John, Jack, Jack, Jack, John, Jack\") == 3\n  */\nconst wordsOccur8 = (s) => {\n  let count = 0;\n  let words = s.split(/\\s|,/g);\n  for"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let c = 0;\n  let d = 0;\n\n  while (c < x) {\n    c += 2;\n  }\n\n  while (c <= y) {\n    if (c % 2 === 0) {\n      d = c;\n    }\n    c += 2;\n  }\n\n  return d;\n}\n\n/*\n  This function took two positive numbers x and y and returned the \n  smallest even integer number that was in the range [x, y] inclusive. If \n  there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = 13\n  */\nconst chooseNum2 = (x, y) => {\n  let c = 0;\n  let d = 0;\n\n  while (c < x) {\n    c += 2;\n  }\n\n  while (c <= y) {\n    if (c % 2 === 0) {\n      d = c;\n    }\n    c += 2;\n  }\n\n  return d;\n}\n\nconst testChooseNum = () => {\n  const t1 = chooseNum(12, 15);\n  console.log(t1);\n  const t2 = chooseNum2(12, 15);\n  console.log(t2);\n}\n\ntestChooseNum();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  return (Math.floor((n + m) / 2) + 1)\n}\n\nmodule.exports = roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  let i = 0;\n  while (x > 0) {\n    const d = x % 10;\n    if (d % 2 === 0) {\n      return [];\n    }\n    x = x / 10;\n    result.push(d);\n    i++;\n  }\n  result.push(i);\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = [...arr].sort((a, b) => a.length - b.length);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  return reversed.map(digit => names[digit]);\n}\n\n/*\n  Given an array of strings, return an array of strings with the last word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"World\", \"Hello\", \"Java\", \"Test\", \"Programmer\", \"Test\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Java\", \"Java\"] \n          -> sort arr -> [\"Java\", \"Java\"]\n          -> return arr\n    return = [\"Java\", \"Java\"]\n  */\nconst byLengthReversed = (arr) => {\n  return [...arr].sort((a, b) => b.length - a.length);\n}\n\n/*\n  Given an array of strings, return an array of strings with the first word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"Test\", \"Java\", \"Test\", \"World\", \"Hello\", \"Programmer\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Java\", \"Java\"] \n          -> sort arr -> [\"Java\", \"Java\"]\n          -> return arr\n    return = [\"Java\", \"Java\"]\n  */\nconst byLengthReversedDesc = (arr) => {\n  return [...arr].sort((a, b) => a.length - b.length);\n}\n\n/*\n  Given an array of strings, return an array of strings with the last word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"World\", \"Hello\", \"Java\", \"Test\", \"Programmer\", \"Test\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Java\", \"Java\"] \n          -> sort arr -> [\"Java\", \"Java\"]\n          -> return arr\n    return = [\"Java\", \"Java\"]\n  */\nconst byLengthDesc = (arr) => {\n  return [...arr].sort((a, b) => b.length - a.length);\n}\n\n/*\n  Given an array of strings, return an array of strings with the first word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"Test\", \"Java\", \"Test\", \"World\", \"Hello\", \"Programmer\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Java\", \"Java\"] \n          -> sort arr -> [\"Java\", \"Java\"]\n          -> return arr\n    return = [\"Java\", \"Java\"]\n  */\nconst byLength = (arr) => {\n  return [...arr].sort((a, b) => a.length - b.length);\n}\n\n/*\n  Given an array of strings, return an array of strings with the first word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"Test\", \"Java\", \"Test\", \"World\", \"Hello\", \"Programmer\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Java\", \"Java\"] \n          -> sort arr -> [\"Java\", \"Java\"]\n          -> return arr\n    return = [\"Java\", \"Java\"]\n  */\nconst byLengthDesc = (arr) => {\n  return [...arr].sort((a, b) => b.length - a.length);\n}\n\n/*\n  Given an array of strings, return an array of strings with the first word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"Test\", \"Java\", \"Test\", \"World\", \"Hello\", \"Programmer\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [\"Java\", \"Java\"] \n          -> sort arr -> [\"Java\", \"Java\"]\n          -> return arr\n    return = [\"Java\", \"Java\"]\n  */\nconst byLength = (arr) => {\n  return [...arr].sort((a, b) => b.length - a.length);\n}\n\n/*\n  Given an array of strings, return an array of strings with the first word first.\n  \n  For example:\n    arr = [\"Hello\", \"World\", \"Test\", \"Java\", \"Programmer\", \"Test\"]\n    return [\"Test\", \"Java\", \"Test"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = []\n  for (let i = 1; i <= n; i += 2) {\n    const value = i\n    for (let j = 1; j <= i; j++) {\n      const sum = value + j\n      if (j % 2 === 0) {\n        list.push(sum)\n      }\n      list.push(value)\n    }\n  }\n  return list\n}\n\nconst test1 = f(5)\n\nconst test2 = f(6)\n\nconsole.log(test1)\nconsole.log(test2)\n\n// [1, 2, 6, 24, 15, 120, 720]\n// [1, 2, 6, 24, 15, 120, 720]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOdd = []\n  for (let i = 1; i <= n; i++) {\n    const isEven = i % 2 === 0\n    if (isEven) {\n      evenOdd.push(i)\n    }\n    const isOdd = i % 2 === 1\n    if (isOdd) {\n      evenOdd.push(i)\n    }\n  }\n  return evenOdd\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const [s, n] = sortNumbers(arr);\n  const count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      const sum = s[i] + s[j];\n      if (sum > 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\nconst sortNumbers = (arr) => [...arr.filter(x => x!== 0),...arr.filter(x => x!== 0)\n                                .sort((a, b) => a - b)\n                                .map(x => x)];\n\n/*\n  Write a function sortNumbers which takes an array of numbers and returns \n   an array of the sorted numbers. \n  >>> sortNumbers([1, 2, 3])\n  >>> sortNumbers([-1, 11, -11])\n  >>> sortNumbers([1, 1, 2])\n  */\nconst sortNumbers = (arr) => arr.sort((a, b) => a - b);\n\nexport { countNums, sortNumbers };\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let len = arr.length;\n    let i = 0;\n    while (i < len - 1) {\n        let j = len - 1;\n        while (i < j) {\n            if (arr[i] > arr[j]) {\n                swap(arr, i, j);\n                j--;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n    return arr.every(v => v >= 0);\n};\n\n/*\n  moveOneBall([3, 4, 5, 1, 2])==>true\n  moveOneBall([1, 2, 3, 4, 5])==>true\n  moveOneBall([1, 2, 3, 4, 5, 6, 7, 8])==>false\n  moveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])==>false\n*/\nconst moveOneBall2 = (arr) => {\n    let len = arr.length;\n    let i = 0;\n    while (i < len - 1) {\n        let j = len - 1;\n        while (i < j) {\n            if (arr[i] > arr[j]) {\n                swap(arr, i, j);\n                j--;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n    return arr.every(v => v >= 0);\n};\n\nmoveOneBall2([3, 4, 5, 1, 2]);\nmoveOneBall2([1, 2, 3, 4, 5]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    const len = lst1.length\n    const i = 0\n    while (i < len) {\n        if (lst1[i] % 2!== 0) return false\n        i += 1\n    }\n    const len2 = lst2.length\n    const j = 0\n    while (j < len2) {\n        if (lst2[j] % 2!== 0) return false\n        j += 1\n    }\n    return true\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\nexchange([1, 2, 3, 4], [1, 2, 3, 5])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\nexchange([1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  \n  const add = (letter, count) => {\n    histogram[letter] = count;\n  }\n\n  const getMostRepeated = (histogram) => {\n    let max = 0;\n    let letter;\n\n    for (let key in histogram) {\n      if (histogram[key] > max) {\n        max = histogram[key];\n        letter = key;\n      }\n    }\n\n    return {\n      letter: letter,\n      count: max\n    }\n  }\n\n  const getCount = (histogram) => {\n    let count = 0;\n    \n    for (let key in histogram) {\n      count += histogram[key];\n    }\n\n    return count;\n  }\n\n  let words = test.split(' ');\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    \n    for (let j = 0; j < word.length; j++) {\n      add(word[j].toLowerCase(), 1);\n    }\n  }\n\n  return getMostRepeated(histogram);\n}\n\n/*\n  Given a list of words, return a list of words that can be formed by\n  combining each pair of words.\n  \n  Example:\n  words = ['a', 'b', 'c']\n  return ['a', 'b', 'c', 'ab', 'ac', 'bc']\n\n  words = ['a', 'b', 'c']\n  return ['a', 'b', 'c', 'b', 'bc']\n\n  words = ['a', 'b', 'c', 'd']\n  return ['a', 'b', 'c', 'd', 'cd', 'bd', 'bc', 'ab', 'ba', 'ca']\n  \n  */\nconst getCombinations = (test) => {\n  const combinations = [];\n\n  let words = test.split(' ');\n  let current = words[0];\n  \n  for (let i = 1; i < words.length; i++) {\n    current += words[i];\n  }\n\n  combinations.push(current);\n  \n  for (let i = 1; i < words.length; i++) {\n    current = current + words[i];\n    \n    for (let j = i + 1; j < words.length; j++) {\n      combinations.push(current);\n    }\n  }\n\n  return combinations;\n}\n\n/*\n  Given a list of words, return a list of the words that are not\n  in the dictionary.\n  \n  Example:\n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f']\n\n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c', 'd']\n  return ['e', 'f']\n  \n  words = ['a', 'b', 'c', 'd']\n  return ['e', 'f', 'a', 'b', 'c', 'd']\n  \n  words = ['a', 'b', 'c', 'd', 'e']\n  return ['f']\n  \n  */\nconst getUnusedWords = (test) => {\n  const unusedWords = [];\n\n  const words = test.split(' ');\n  \n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const wordHash = hash(word);\n    \n    if (usedWords[wordHash]) {\n      continue;\n    }\n    \n    usedWords[wordHash] = true;\n    unusedWords.push(word);\n  }\n\n  return unusedWords;\n}\n\n/*\n  Given a list of words, return a list of the words that are not\n  in the dictionary.\n  \n  Example:\n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f']\n\n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c']\n  return ['d', 'e', 'f', 'a', 'b', 'c', 'a', 'b', 'c']\n  \n  words = ['a', 'b', 'c', 'd']\n  return ['e', 'f']\n  \n  words = ['a', 'b', 'c', 'd']\n  return ['e', 'f', 'a', 'b', 'c', 'd']\n  \n  words = ['a', 'b', 'c', 'd']\n  return ['e', 'f', 'a', 'b', 'c', 'd', 'e', 'f', 'a', 'b', 'c', 'd']\n  \n  words = ['a', 'b', 'c', 'd', 'e']\n  return ['f']\n  \n  */\nconst getUnusedWordsHash = (test) => {\n  const unusedWords = [];\n\n  const words = test.split(' ');\n  \n  for (let i = 0; i < words.length; i"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const map = new Map();\n  const isChar = c.split('').every(ch => map.has(ch));\n  if (!isChar) {\n    return false;\n  }\n  let start = 0;\n  let end = s.length - 1;\n  let result = [];\n  while (start <= end) {\n    let ch = s.charAt(start);\n    if (map.has(ch)) {\n      while (map.has(ch)) {\n        result.push(s.charAt(end--));\n      }\n      start++;\n      end--;\n      continue;\n    }\n    result.push(s.charAt(start++));\n  }\n  return result.join(''), result.every(ch => ch === result.charAt(result.length - 1));\n};\n\nconsole.log(reverseDelete('abcde', 'ae'));\nconsole.log(reverseDelete('abcdef', 'b'));\nconsole.log(reverseDelete('abcdedcba', 'ab'));<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let ans = [], count = 0;\n  lst.forEach(n => {\n    const arr = n.split(\"\").filter(e => e.match(/^\\d/));\n    if (arr.length % 2 === 1) {\n      count += 1;\n    }\n    ans.push(count);\n  });\n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sums = []\n  const min = []\n  const sum = (nums.length)? nums[0] : -Infinity\n  const minSum = sum\n  const subSum = (sum) => sum\n\n  // Compute the sum of the sub-arrays of nums\n  for (let i = 0; i < nums.length; i++) {\n    sum = nums[i]\n    if (sums[i] === undefined) {\n      sums[i] = sum\n    } else {\n      sum += sums[i]\n      if (sum < minSum) {\n        minSum = sum\n        min = [i, sum]\n      } else if (sum === minSum) {\n        min = [Math.min(min[0], i), sum]\n      }\n      sums[i] = sum\n    }\n  }\n\n  // Return the minimum sum of any sub-array of nums\n  return minSum\n}\n\n/*\n  Given an array of integers nums, find the maximum sum of any sub-array of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  maxSubArraySum([-1, -2, -3]) == -1\n  */\nconst maxSubArraySum = (nums) => {\n  const sums = []\n  const max = []\n  const sum = (nums.length)? nums[0] : -Infinity\n  const maxSum = sum\n\n  // Compute the sum of the sub-arrays of nums\n  for (let i = 0; i < nums.length; i++) {\n    sum = nums[i]\n    if (sums[i] === undefined) {\n      sums[i] = sum\n    } else {\n      sum += sums[i]\n      if (sum > maxSum) {\n        maxSum = sum\n        max = [i, sum]\n      } else if (sum === maxSum) {\n        max = [Math.max(max[0], i), sum]\n      }\n      sums[i] = sum\n    }\n  }\n\n  // Return the maximum sum of any sub-array of nums\n  return maxSum\n}\n\n// Test\n\n/*\n  Given an array of integers nums, find the sum of the sub-array with the smallest first element and the largest last element.\n  Example\n  minMaxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n  minMaxSubArraySum([-1, -2, -3]) == -1\n  */\nconst minMaxSubArraySum = (nums) => {\n  const sums = []\n  const min = []\n  const max = []\n  const sum = (nums.length)? nums[0] : -Infinity\n  const minSum = sum\n  const maxSum = sum\n\n  // Compute the sum of the sub-arrays of nums\n  for (let i = 0; i < nums.length; i++) {\n    sum = nums[i]\n    if (sums[i] === undefined) {\n      sums[i] = sum\n    } else {\n      sum += sums[i]\n      if (sum < minSum) {\n        minSum = sum\n        min = [i, sum]\n      } else if (sum === minSum) {\n        min = [Math.min(min[0], i), sum]\n      }\n      sums[i] = sum\n    }\n  }\n\n  // Compute the sum of the sub-arrays of nums\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sum = nums[i]\n    if (sums[i] === undefined) {\n      sums[i] = sum\n    } else {\n      sum += sums[i]\n      if (sum > maxSum) {\n        maxSum = sum\n        max = [i, sum]\n      } else if (sum === maxSum) {\n        max = [Math.max(max[0], i), sum]\n      }\n      sums[i] = sum\n    }\n  }\n\n  // Return the sum of the sub-array with the smallest first element and the largest last element\n  return sum\n}\n\n// Run\n\nconst test = [\n  [2, 3, 4, 1, 2, 4],\n  [-1, -2, -3],\n  [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10],\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100],\n]\n\nfor (let test of test) {\n  console.log(minMaxSubArraySum(test))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length\n  const m = grid[0].length\n  const total = n * m\n  const fill = 0\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        fill += 1\n        if (fill > capacity) {\n          return total\n        }\n      }\n    }\n  }\n  return 0\n}\n\n// const maxFill = (grid, capacity) => {\n//   const n = grid.length\n//   const m = grid[0].length\n//   const total = n * m\n//   const fill = 0\n\n//   for (let i = 0; i < n; i++) {\n//     for (let j = 0; j < m; j++) {\n//       if (grid[i][j] === 1) {\n//         fill += 1\n//         if (fill > capacity) {\n//           return total\n//         }\n//       }\n//     }\n//   }\n//   return 0\n// }\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\nconst bucket_capacity = 1\nconsole.log(maxFill(grid, bucket_capacity))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    if (arr.length === 0) {\n        return arr;\n    }\n\n    // get number of ones in binary representation of each element\n    let ones = arr.map(Number.parseInt)\n   .map((x) => {\n        return x.toString(2);\n    });\n\n    // sort based on number of ones in binary representation\n    let sorted = ones.sort((a, b) => {\n        if (a < b) {\n            return 1;\n        } else if (a > b) {\n            return -1;\n        }\n        return 0;\n    });\n\n    // return sorted array\n    return sorted.map(Number.parseInt);\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4])); // [1, 2, 3, 4, 5]\nconsole.log(sortArray([-2, -3, -4, -5, -6])); // [-6, -5, -4, -3, -2]\nconsole.log(sortArray([1, 0, 2, 3, 4])); // [0, 1, 2, 3, 4]\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const sWords = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < sWords.length; i++) {\n    if (sWords[i].length === n) {\n      result.push(sWords[i]);\n    }\n  }\n  return result;\n};\n\nexport default selectWords;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = '';\n  const closestConsonant = '';\n  let i = 0;\n  while (i < word.length) {\n    const consonant = consonants[i];\n    const vowel = vowels[i];\n    const currentVowel = word[i];\n    if (consonant!== currentVowel && currentVowel!== closestVowel) {\n      if (consonant === vowel) {\n        closestVowel = currentVowel;\n        closestConsonant = consonant;\n      } else {\n        closestVowel = vowel;\n        closestConsonant = consonant;\n      }\n    }\n    i++;\n  }\n  return closestVowel;\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const match = (rst) => {\n    const isBalanced = (rst) => {\n      if (!rst) {\n        return true;\n      }\n\n      const last = rst[rst.length - 1];\n      const cnt = rst.indexOf(last);\n      if (cnt === -1) {\n        return false;\n      }\n\n      return isBalanced(rst.slice(0, cnt));\n    };\n\n    return isBalanced(rst);\n  };\n\n  if (lst.length === 0) {\n    return 'No';\n  }\n\n  return match(lst[0]);\n};\n\nconst matchParens = (lst) => {\n  const match = (rst) => {\n    const isBalanced = (rst) => {\n      if (!rst) {\n        return true;\n      }\n\n      const last = rst[rst.length - 1];\n      const cnt = rst.indexOf(last);\n      if (cnt === -1) {\n        return false;\n      }\n\n      return isBalanced(rst.slice(0, cnt));\n    };\n\n    return isBalanced(rst);\n  };\n\n  if (lst.length === 0) {\n    return 'No';\n  }\n\n  return match(lst[0]);\n};\n\nexport {\n  matchParens\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sortArr = arr.slice().sort((a, b) => a - b);\n  const max = sortArr.slice(0, k).reduce((a, b) => Math.max(a, b));\n  return sortArr.slice(0, k).reduce((a, b) => Math.max(a, b), 0);\n};\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((acc, elem, index) => {\n    if (index % 2 === 1) {\n      acc += elem;\n    }\n    return acc;\n  }, 0);\n\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements_2 = (arr, k) => {\n  let sum = 0;\n  let start = 0;\n  let end = k;\n  for (let i = start; i < end; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddList = [];\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddList.push(n);\n    }\n    n = Math.floor(n / 2);\n  }\n  return oddList;\n};\n\nexport {\n  getOddCollatz\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const day = parseInt(dateArray[2], 10);\n  const month = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  const isValid = isDateValid(day, month, year);\n\n  return isValid;\n};\n\nconst isDateValid = (day, month, year) => {\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n\n  if (month === 5 || month === 8 || month === 10 || month === 12) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  validDate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(',');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a + ',' + words[i];\n    b = b + ',' + words[i];\n  }\n  return [a, b];\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(',');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a + ',' + words[i];\n    b = b + ',' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase();\n  const words = text.split(' ');\n  const l = words.length;\n  if (l == 0) return [];\n  let a = words[0];\n  let b = words[1];\n  for (let i = 2; i < l; i++) {\n    a = a +'' + words[i];\n    b = b +'' + words[i];\n  }\n  return [a, b];\n};\n\n"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  return lst.every(n => (lst.indexOf(n) === lst.lastIndexOf(n)));\n};\n\n/* Given an array, return the length of the longest consecutive elements \n   that are all equal. Assumed no negative numbers and only integers.\n  Examples\n  lengthOfLongestConsecutive([5, 5, 5, 5]) ➞ 5\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1]) ➞ 1\n  lengthOfLongestConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 8\n  lengthOfLongestConsecutive([1, 2, 2, 2, 3, 3, 3, 3, 3]) ➞ 3\n  lengthOfLongestConsecutive([1, 1, 1, 2, 2, 2]) ➞ 2\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 2, 2, 2]) ➞ 2\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 2, 2]) ➞ 2\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 2]) ➞ 2\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 1]) ➞ 1\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 2]) ➞ 2\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]) ➞ 3\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]) ➞ 3\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]) ➞ 4\n  lengthOfLongestConsecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]) ➞ 4\n  */\nconst lengthOfLongestConsecutive = (arr) => {\n  let len = 0, lst = [];\n  arr.forEach(elem => {\n    if (lst.indexOf(elem)!== -1) {\n      if (lst.length === len) {\n        lst.pop();\n      }\n    } else {\n      lst.push(elem);\n      if (lst.length > len) {\n        len = lst.length;\n      }\n    }\n  });\n  return len;\n};\n\n/* Given a list of numbers, return a list of the elements of the list that\n   are also in the sorted list. If the sorted list contains more than 1 \n   duplicate of a number, return an empty list.\n  Examples\n  intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) ➞ []\n  intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7]) ➞ [1, 2, 3, 4, 6, 7]\n  intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8]) ➞ [1, 2, 3, 4, 6, 7, 8]\n  intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 6, 7, 8, 9]\n  */\nconst intersection = (lst, sorted) => {\n  let lst_idx = 0, lst_len = lst.length, sorted_idx = 0, sorted_len = sorted.length;\n  let idx = 0;\n  while (lst_idx < lst_len && sorted_idx < sorted_len) {\n    if (lst[lst_idx] === sorted[sorted_idx]) {\n      idx = idx + 1;\n      if (idx === sorted_len) {\n        return [lst[lst_idx]];\n      }\n      lst_idx = lst_idx + 1;\n      sorted_idx = sorted_idx + 1;\n    } else if (lst[lst_idx] < sorted[sorted_idx]) {\n      lst_idx = lst_idx + 1;\n    } else {\n      sorted_idx = sorted_idx + 1;\n    }\n  }\n  return [];\n};\n\n/* Given a list of numbers, return a list of the elements of the list that\n   are also in the sorted list. If the sorted list contains more than 1 \n   duplicate of a number, return an empty list.\n  Examples\n  union([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  union([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  "}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let start_intersection = Math.max(start1, start2);\n  let end_intersection = Math.min(end1, end2);\n  if (start_intersection >= end_intersection) return \"NO\";\n  let difference = end_intersection - start_intersection;\n  let count = 1;\n  while (difference > 1) {\n    count++;\n    difference = difference >> 1;\n  }\n  return count === 2? \"YES\" : \"NO\";\n};\n\nconst intersection_2 = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  if (start1 <= start2 && end1 <= end2) return \"NO\";\n  if (start1 >= start2 && end1 >= end2) return \"YES\";\n  return \"NO\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"NO\"\n  */\nconst interval_sorting = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  if (start1 < start2) return \"NO\";\n  if (start1 > start2) return \"YES\";\n  if (end1 < end2) return \"NO\";\n  if (end1 > end2) return \"YES\";\n  return \"NO\";\n};\n\nconst intersection_sorting = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  if (start1 > start2) return \"NO\";\n  if (start1 < start2) return \"YES\";\n  if (end1 > end2) return \"NO\";\n  if (end1 < end2) return \"YES\";\n  return \"NO\";\n};\n\nconst intersection_sorting_2 = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  if (start1 <= start2 && end1 >= end2) return \"NO\";\n  if (start1 <= start2 && end1 >= end2) return \"YES\";\n  return \"NO\";\n};\n\nconst isPrime = (n) => {\n  let count = 2;\n  while (count < n) {\n    if (n % count === 0) return false;\n    count++;\n  }\n  return true;\n};\n\nconst solution = (interval1, interval2) => {\n  return isPrime(intersection(interval1, interval2));\n};\n\nconst test_cases = [\n  [{start: 1, end: 2}, {start: 2, end: 3}, \"NO\"],\n  [{start: -1, end: 1}, {start: 0, end: 4}, \"NO\"],\n  [{start: -3, end: -1}, {start: -5, end: 5}, \"YES\"],\n  [{start: -3, end: -1}, {start: -5, end: 5}, \"NO\"],\n  [{start: 1, end: 2}, {start: 1, end: 2}, \"YES\"],\n  [{start: -1, end: 1}, {start: -1, end: 1}, \"YES\"],\n  [{start: -3, end: -1}, {start: -3, end: -1}, \"NO\"],\n  [{start: 1, end: 2}, {start: 2, end: 3}, \"NO\"],\n  [{start: -1, end: 1}, {start: 0, end: 4}, \"NO\"],\n  [{start: -3, end: -1}, {start: -5, end: 5}, \"YES\"],\n  [{start: -3, end: -1}, {start: -5, end: 5}, \"NO\"],\n  [{start: 1, end: 2}, {start: 2, end: 3}, \"YES\"],\n  [{start: -1, end: 1}, {start: 0, end: 4}, \"YES\"],\n  [{start: -3, end: -1}, {start: -5, end: 5}, \"YES\"],\n  [{start: -3, end: -1}, {start: -5, end: 5}, \"NO\"]\n];\n\nconst test_results = test_cases.map(\n  ({interval1, interval2, expected}) => {\n    const actual = solution(interval1, interval2);\n    console.log(`${expected}"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n    result += (Math.abs(arr[i]) * arr[i]) * (1 + arr[i] || 0);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let N = grid.length;\n    if (N < 2) return [];\n    const visited = new Array(N);\n    let curr = 1;\n    const getNext = (x, y) => {\n        if (x < 0 || x >= N || y < 0 || y >= N) return -1;\n        const cell = grid[x][y];\n        if (cell <= 0) return -1;\n        if (visited[x][y]) return -1;\n        visited[x][y] = true;\n        return cell;\n    };\n    const dp = new Array(N);\n    dp[curr] = 1;\n    for (let i = 1; i < N; i++) {\n        for (let j = 1; j < N; j++) {\n            const val = getNext(i, j);\n            if (val === -1) continue;\n            const min = dp[curr];\n            const neighbor = getNext(i, j + 1);\n            if (neighbor === -1) continue;\n            if (neighbor < val) {\n                dp[curr] = val;\n                curr = val;\n            } else if (neighbor > val) {\n                dp[curr] = neighbor;\n                curr = neighbor;\n            } else if (neighbor === val) {\n                dp[curr] = val;\n                curr = val;\n            }\n        }\n    }\n    return dp;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) {\n    return [1]\n  }\n\n  const tri = [1]\n  const fib = [1, 2]\n  for (let i = 2; i <= n; i++) {\n    const a = fib[i - 1]\n    const b = fib[i - 2]\n    tri.push(a + b)\n  }\n\n  return tri\n}\n\nconsole.log(tri(10))<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const d = new Array(10);\n  d[0] = 1;\n  const p = 0;\n  for (let i = 1; i < 10; i++) {\n    p = (n / d[i - 1]) % 10;\n    if (p > 0) {\n      d[i] = p;\n    } else {\n      d[i] = 0;\n    }\n  }\n  let res = 1;\n  for (let i = 9; i >= 0; i--) {\n    res = res * d[i];\n  }\n  return res;\n}\n\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n    return string.match(/\\[\\[.*\\]\\]/g);\n}\n\nexport const test = isNested(\"[[]]\");\nexport const test2 = isNestedn    :\n\n  //\n}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((v) => {\n    sum += v * v;\n  });\n  return sum;\n};\n\nexport { sumSquares };\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(' ');\n  let lastChar = chars[chars.length - 1];\n  if (isAlphabet(lastChar)) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Function: isAlphabet\n  Check if a string is an alphabet\n  Note: This is a very weak check\n  Examples:\n  isAlphabet(\"\") ➞ false\n  isAlphabet(\"a\") ➞ true\n  isAlphabet(\"123\") ➞ false\n*/\nconst isAlphabet = (txt) => {\n  return isLetter(txt) &&!isNumeric(txt);\n};\n\n/*\n  Function: isLetter\n  Check if a string is a letter\n  Note: This is a very weak check\n  Examples:\n  isLetter(\"\") ➞ false\n  isLetter(\"a\") ➞ true\n  isLetter(\"123\") ➞ false\n*/\nconst isLetter = (txt) => {\n  return txt.match(/[a-zA-Z]/);\n};\n\n/*\n  Function: isNumeric\n  Check if a string is a number\n  Note: This is a very weak check\n  Examples:\n  isNumeric(\"\") ➞ false\n  isNumeric(\"a\") ➞ true\n  isNumeric(\"123\") ➞ true\n*/\nconst isNumeric = (txt) => {\n  return txt.match(/[0-9]/);\n};\n\n/*\n  Function: isLower\n  Check if a string is a lowercase letter\n  Note: This is a very weak check\n  Examples:\n  isLower(\"\") ➞ false\n  isLower(\"a\") ➞ true\n  isLower(\"123\") ➞ false\n*/\nconst isLower = (txt) => {\n  return txt.match(/[a-z]/);\n};\n\n/*\n  Function: isUpper\n  Check if a string is an uppercase letter\n  Note: This is a very weak check\n  Examples:\n  isUpper(\"\") ➞ false\n  isUpper(\"a\") ➞ true\n  isUpper(\"123\") ➞ false\n*/\nconst isUpper = (txt) => {\n  return txt.match(/[A-Z]/);\n};\n\n/*\n  Function: lastCharIsALetter\n  Check if a string ends with a letter\n  Note: This is a very weak check\n  Examples:\n  lastCharIsALetter(\"apple pie\") ➞ true\n  lastCharIsALetter(\"apple pi e\") ➞ false\n  lastCharIsALetter(\"apple pi e \") ➞ true\n  lastCharIsALetter(\"\") ➞ false\n*/\nconst lastCharIsALetter = (txt) => {\n  const chars = txt.split(' ');\n  let lastChar = chars[chars.length - 1];\n  return isAlphabet(lastChar);\n};\n\n/*\n  Function: lastCharIsLower\n  Check if a string ends with a lowercase letter\n  Note: This is a very weak check\n  Examples:\n  lastCharIsLower(\"apple pie\") ➞ false\n  lastCharIsLower(\"apple pi e\") ➞ true\n  lastCharIsLower(\"apple pi e \") ➞ false\n  lastCharIsLower(\"\") ➞ false\n*/\nconst lastCharIsLower = (txt) => {\n  const chars = txt.split(' ');\n  let lastChar = chars[chars.length - 1];\n  return isLower(lastChar);\n};\n\n/*\n  Function: lastCharIsNumeric\n  Check if a string ends with a number\n  Note: This is a very weak check\n  Examples:\n  lastCharIsNumeric(\"apple pie\") ➞ false\n  lastCharIsNumeric(\"apple pi e\") ➞ false\n  lastCharIsNumeric(\"apple pi e \") ➞ true\n  lastCharIsNumeric(\"\") ➞ false\n*/\nconst lastCharIsNumeric = (txt) => {\n  const chars = txt.split(' ');\n  let lastChar = chars[chars.length - 1];\n  return isNumeric(lastChar);\n};\n\n/*\n  Function: lastCharIsUpper\n  Check if a string ends with an uppercase letter\n  Note: This is a very weak check\n  Examples:\n  lastCharIsUpper(\"apple pie\") ➞ false\n  lastCharIsUpper(\"apple pi e\") ➞ true\n  lastCharIsUpper(\"apple pi e \") ➞ false\n  lastCharIsUpper(\"\") ➞ false\n*/\nconst lastCharIsUpper = (txt) => {\n  const chars = txt.split(' ');\n  let lastChar = chars[chars.length - 1];\n  return isUpper(lastChar);\n};\n\n/*\n  Function: containsLetters\n  Check if a string contains at least one letter\n  Note: This is a very weak check\n  Examples:\n  containsLetters(\"apple pie\") ➞ true\n  containsLetters(\"apple pi e\") ➞ true\n  containsLetters(\"apple pi e \") ➞ true\n  containsLetters(\"\") ➞ false\n*/\nconst containsLetters = (txt) => {\n  return txt.match(/[a-zA-Z]/);\n};\n\n/*\n  Function: containsLettersOrNumbers\n  Check if a string contains at least one letter or number\n  Note: This is a very weak check\n  Examples:\n  containsLettersOrNumbers(\"apple pie\") ➞ true\n  containsLettersOrNumbers(\"apple pi e\") ➞ true\n  containsLettersOrNumbers(\"apple pi e \") ➞ true\n  containsLettersOrNumbers(\"\") ➞ false\n*/\nconst containsLettersOrNumbers = ("}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let start = 0\n  let end = arr.length - 1\n  let mid = Math.floor((end + start) / 2)\n  while (end - start > 1) {\n    if (arr[mid] > arr[mid - 1]) {\n      end = mid\n    } else {\n      start = mid\n    }\n    mid = Math.floor((end + start) / 2)\n  }\n  return (arr[mid] >= arr[mid - 1])? mid : -1\n}\n\n/*\n  Given a collection of numbers, arrange them in decreasing order. \n  Returns a sorted array of numbers. The given array does not contain \n  duplicate values.\n\n  Examples:\n  arrange([1,2,3,4,5]) = [1,2,3,4,5]\n  arrange([4,5,2,3,1]) = [1,2,3,4,5]\n  arrange([-1,0,1,2,3]) = [-1,0,1,2,3]\n  */\nconst arrange = (arr) => {\n  let sorted = []\n  let temp = []\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i]\n    for (let j = 0; j < sorted.length; j++) {\n      if (sorted[j] < temp) {\n        sorted.splice(j, 0, temp)\n        break\n      }\n    }\n  }\n  return sorted\n}\n\nmodule.exports = {\n  canArrange, arrange\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if(lst.length === 0) return (null, null);\n  \n  const max = Math.max.apply(null, lst);\n  const min = Math.min.apply(null, lst);\n  if(min < 0) return ([max, min], min);\n  \n  if(max > 0) return ([max, min], max);\n  return (lst, null);\n}\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if (typeof a === \"number\" && typeof b === \"number\"){\n      return a > b? b : a;\n   }\n   else if (typeof a === \"string\" && typeof b === \"string\"){\n      return a > b? b : a;\n   }\n   else if (typeof a === \"string\" && typeof b === \"number\"){\n      return a > b? b : a;\n   }\n   else if (typeof a === \"number\" && typeof b === \"string\"){\n      return a > b? b : a;\n   }\n   else{\n      return null;\n   }\n};\n\nconst compareTwo = (a, b)=>{\n  if (typeof a === \"number\" && typeof b === \"number\"){\n    return a > b? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\"){\n    return a > b? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"number\"){\n    return a > b? b : a;\n  }\n  else if (typeof a === \"number\" && typeof b === \"string\"){\n    return a > b? b : a;\n  }\n  else{\n    return null;\n  }\n};\n\nconst compareThree = (a, b, c)=>{\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\"){\n    return a > b > c? b : c;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\"){\n    return a > b > c? b : c;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\"){\n    return a > b > c? b : c;\n  }\n  else if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\"){\n    return a > b > c? b : c;\n  }\n  else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\"){\n    return a > b > c? b : c;\n  }\n  else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"number\"){\n    return a > b > c? b : c;\n  }\n  else{\n    return null;\n  }\n};\n\nconst compareFour = (a, b, c, d)=>{\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"number\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"number\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"number\" && typeof d === \"string\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"number\" && typeof b === \"string\" && typeof c === \"number\" && typeof d === \"string\"){\n    return a > b > c > d? b : a;\n  }\n  else if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"string\" && typeof d === \"string\"){\n    return a > b > c > d? b : a;\n  }\n  else{\n    return null;\n  }\n};\n\nconst compareFive = (a, b, c, d, e)=>{\n  if (typeof a === \"number\" && typeof b === \"number\" && typeof c === \"number\" && typeof d === \"number\" && typeof e === \"number\"){\n    return a > b > c > d > e? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"string\"){\n    return a > b > c > d > e? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\" && typeof c === \"string\" && typeof d === \"string\" && typeof e === \"number\"){\n    return a > b > c > d > e? b : a;\n  }\n  else if (typeof a === \"string\" && typeof b === \"number\" && typeof"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0 && i % 2 === 0) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2);\n};\n\n/*The prime number function is defined as:\n   primeNumber(n) = 2^n + 1\n   For example:\n  >>> primeNumber(4)\n  16\n  */\nconst primeNumber = (n) => {\n  return Math.pow(2, n) + 1;\n};\n\n/*The prime number function is defined as:\n   primeNumber(n) = 2^n + 1\n   For example:\n  >>> primeNumber(4)\n  16\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  let isPrime = false;\n  let i = 1;\n  while (!isPrime) {\n    if (n % i == 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (n) => {\n  let isPrime = false;\n  while (!isPrime) {\n    if (n < 2) {\n      return false;\n    }\n    if (n % 2 == 0) {\n      return false;\n    }\n    n = n / 2;\n  }\n  return true;\n};\n\nconst isPrimeNumber2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sumNumbers = (start, end) => {\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconst sumNumbers2 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  while (i <= end) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\nconst sumNumbers3 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n  }\n  return sum;\n};\n\nconst sumNumbers4 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n  }\n  return sum;\n};\n\nconst sumNumbers5 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n    if (i <= j) {\n      sum += i;\n      i++;\n      j--;\n    }\n  }\n  return sum;\n};\n\nconst sumNumbers6 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n    if (i <= j) {\n      sum += i;\n      i++;\n      j--;\n      if (i <= j) {\n        sum += i;\n        i++;\n        j--;\n      }\n    }\n  }\n  return sum;\n};\n\nconst sumNumbers7 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n    if (i <= j) {\n      sum += i;\n      i++;\n      j--;\n      if (i <= j) {\n        sum += i;\n        i++;\n        j--;\n        if (i <= j) {\n          sum += i;\n          i++;\n          j--;\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst sumNumbers8 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n    if (i <= j) {\n      sum += i;\n      i++;\n      j--;\n      if (i <= j) {\n        sum += i;\n        i++;\n        j--;\n        if (i <= j) {\n          sum += i;\n          i++;\n          j--;\n          if (i <= j) {\n            sum += i;\n            i++;\n            j--;\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst sumNumbers9 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    i++;\n    j--;\n    if (i <= j) {\n      sum += i;\n      i++;\n      j--;\n      if (i <= j) {\n        sum += i;\n        i++;\n        j--;\n        if (i <= j) {\n          sum += i;\n          i++;\n          j--;\n          if (i <= j) {\n            sum += i;\n            i++;\n            j--;\n            if (i <= j) {\n              sum += i;\n              i++;\n              j--;\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst sumNumbers10 = (start, end) => {\n  let sum = 0;\n  let i = start;\n  let j = end;\n  while (i <= j) {\n    sum += i;\n    "}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces,\n  and if a string had more than 2 consecutive underscores,\n  then replaced all consecutive underscores with-\n  \n  unFixSpaces(\"Example_1\") == \"Example 1\"\n  unFixSpaces(\"Example_2\") == \"Example 2\"\n  unFixSpaces(\"Example-3\") == \"Example 3\"\n  */\nconst unFixSpaces = (text) => {\n  return text.replace(/_/g,'')\n}\n\nexport default fixSpaces\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  // If the file name has more than three digits\n  if (file_name.match(/\\d{3,}/)) {\n    return 'No';\n  }\n  // If the file name has no digits at all\n  if (!file_name.match(/\\d/)) {\n    return 'Yes';\n  }\n  // If the file name has one digit\n  if (file_name.match(/\\d/)) {\n    return 'Yes';\n  }\n  // If the file name has only one dot\n  if (!file_name.match(/\\./)) {\n    return 'No';\n  }\n  // If the file name starts with a latin alphapet letter\n  if (file_name.match(/^[a-zA-Z]/)) {\n    return 'Yes';\n  }\n  // If the file name contains exactly one dot\n  if (file_name.match(/\\./)) {\n    return 'Yes';\n  }\n  // If the file name contains any of the following characters:\n  // txt exe dll\n  if (file_name.match(/txt|exe|dll/)) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nmodule.exports = fileNameCheck;<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const squares = (n) => n * n;\n  const cubed = (n) => n * n * n;\n  const sum = (lst) => lst.reduce((p, n) => p + squares(n), 0);\n  return sum(lst);\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the index of the first string in the list that is \n   a substring of the other string. For example, if the list contains the strings \"apple\" and \"app\" the function shall return 2. If the list \n   contains the strings \"apple\" and \"appl\" the function shall return 3. If the list contains the strings \"apple\" and \"appel\" the function \n   shall return 0.\n  \n  Examples:\n  For lst = [\"apple\",\"app\"] the output should be 2\n  For lst = [\"apple\",\"app\",\"appl\"] the output should be 3\n  For lst = [\"apple\",\"app\",\"appel\"] the output should be 0\n  For lst = [\"apple\",\"app\",\"appl\",\"appel\"] the output should be 4\n  */\nconst stringIndexOf = (lst) => {\n  const first = (str) => {\n    return lst.indexOf(str);\n  };\n  return first(lst[0]);\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the index of the first string in the list that is \n   not a substring of the other string. For example, if the list contains the strings \"apple\" and \"app\" the function shall return 0. If the list \n   contains the strings \"apple\" and \"appl\" the function shall return 1. If the list contains the strings \"apple\" and \"appel\" the function \n   shall return 3.\n  \n  Examples:\n  For lst = [\"apple\",\"app\"] the output should be 0\n  For lst = [\"apple\",\"app\",\"appl\"] the output should be 1\n  For lst = [\"apple\",\"app\",\"appel\"] the output should be 3\n  For lst = [\"apple\",\"app\",\"appel\",\"appell\"] the output should be 5\n  */\nconst stringIndexOfNot = (lst) => {\n  const first = (str) => {\n    return lst.indexOf(str);\n  };\n  return first(lst[0]);\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the index of the first string in the list that ends \n   with the string entered. For example, if the list contains the strings \"apple\" and \"app\" the function shall return 2. If the list contains the \n   strings \"apple\" and \"appl\" the function shall return 3. If the list contains the strings \"apple\" and \"appel\" the function shall return 1.\n  \n  Examples:\n  For lst = [\"apple\",\"app\"] the output should be 2\n  For lst = [\"apple\",\"app\",\"appl\"] the output should be 3\n  For lst = [\"apple\",\"app\",\"appel\"] the output should be 1\n  For lst = [\"apple\",\"app\",\"appel\",\"appell\"] the output should be 4\n  */\nconst stringLastIndexOf = (lst) => {\n  const first = (str) => {\n    return lst.lastIndexOf(str);\n  };\n  return first(lst[0]);\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the index of the first string in the list that ends \n   with the string entered. For example, if the list contains the strings \"apple\" and \"app\" the function shall return 2. If the list contains the \n   strings \"apple\" and \"appl\" the function shall return 1. If the list contains the strings \"apple\" and \"appel\" the function shall return 0.\n  \n  Examples:\n  For lst = [\"apple\",\"app\"] the output should be 2\n  For lst = [\"apple\",\"app\",\"appl\"] the output should be 1\n  For lst = [\"apple\",\"app\",\"appel\"] the output should be 0\n  For lst = [\"apple\",\"app\",\"appel\",\"appell\"] the output should be 5\n  */\nconst stringLastIndexOfNot = (lst) => {\n  const first = (str) => {\n    return lst.lastIndexOf(str);\n  };\n  return first(lst[0]);\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the index of the first string in the list that contains \n   the string entered. For example, if the list contains the strings \"apple\" and \"app\" the function shall return 1. If the list contains the \n   strings \"apple\" and \"appl\" the function shall return 2. If the list contains the strings \"apple\" and \"appel\" the function shall return 0.\n  \n  Examples:\n  For lst = [\"apple\",\"app\"] the output should be 1\n  For lst = [\"apple\",\"app\",\"appl\"] the output should be 2\n  For lst = [\"apple\",\"app\",\"appel\"] the output should be 0\n  For lst = [\"apple\",\"app\",\"appel\",\"appell\"] the output should be 4\n  */\nconst stringContains = (lst) => {\n  const first = (str) => {\n    return lst.indexOf(str);\n  };\n  return first(lst[0]);\n};\n\n/*\"\n  This function took a list of strings. For all entries in the list, the function shall return the index of the first string in the list that does not \n   contain the string entered. For example, if the list contains the strings \"apple\" and \"app\" the function shall return 0."}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \")\n    const wordLengths = words.map(word => word.length)\n    const isPrime = (n) => {\n        for(let i = 2; i <= n; i++) {\n            if(n % i === 0) {\n                return false\n            }\n        }\n        return true\n    }\n    const primes = []\n    for(let i = 2; i <= wordLengths.length; i++) {\n        while(true) {\n            if(isPrime(i)) {\n                primes.push(i)\n                break\n            }\n            i++\n        }\n    }\n    let result = \"\"\n    let j = 0\n    for(let i = 0; i < wordLengths.length; i++) {\n        while(j < primes.length) {\n            const wordLength = wordLengths[i]\n            const index = Math.floor(wordLength / primes[j])\n            if(index === primes[j]) {\n                const prime = primes[j]\n                result += words[i] + \" \"\n                j++\n                break\n            }\n            j++\n        }\n    }\n    return result.trim()\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n  let xN = parseInt(x), nN = parseInt(n), xD = xN / nN, nD = nN / xN,\n    xR = xN % nN, nR = nN % xN,\n    xM = xR * nD, nM = nR * xD,\n    x = (xM + xD) / 2, n = (nM + nD) / 2,\n    xE = x * n, nE = n * x;\n    \n  return (xE === xE && nE === nE)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let order = [];\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums[i].length; j++) {\n      sum += nums[i].charCodeAt(j);\n    }\n    let index = order.indexOf(sum);\n    if (index === -1) {\n      order.push(sum);\n    } else {\n      order.splice(index, 1);\n      order.push(sum);\n    }\n  }\n  return order;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const lastIndex = nums.length - 1;\n    let count = 0;\n    let last = nums[lastIndex];\n    let mid = nums[lastIndex];\n    let i = lastIndex;\n    while (i >= 0) {\n        if (nums[i] > 10) {\n            if (nums[i] % 2 === 1 && nums[i] % last === 1) {\n                count += 1;\n            }\n        }\n        i -= 1;\n    }\n    return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = []\n  for (let i = 1; i < n; i++) {\n    a.push(i * i - i + 1)\n  }\n  return a.reduce((a, v, i) => {\n    for (let j = i + 1; j < n; j++) {\n      a.push(v + a[j])\n    }\n    return a\n  }, [])\n}\n\nconst solution = getMaxTriples(10)\nconsole.log(solution)\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1list = [planet1]\n  let planet2list = [planet2]\n  let planetlist = []\n  while (planet1list.length && planet2list.length) {\n    let planet1planet = planet1list.pop()\n    let planet2planet = planet2list.pop()\n    if (planet1planet < planet2planet) {\n      planetlist.push(planet1planet)\n      planet1list.push(planet2planet)\n    } else if (planet1planet > planet2planet) {\n      planetlist.push(planet2planet)\n      planet2list.push(planet1planet)\n    } else {\n      planetlist.push(planet1planet)\n      planetlist.push(planet2planet)\n    }\n  }\n  if (planet1list.length) {\n    planetlist.push(...planet1list)\n  }\n  if (planet2list.length) {\n    planetlist.push(...planet2list)\n  }\n  return planetlist\n}\n\nlet planetlist = bf(\"Jupiter\", \"Neptune\")\nconsole.log(planetlist)\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const length = lst.length\n  const len = lst.reduce((acc, x) => acc + x.length, 0)\n  const unique = lst.filter((x, index, self) => self.indexOf(x) === index)\n  if (unique.length === length) return lst\n  return unique.sort((a, b) => a.length - b.length)\n}\n\ndescribe('Sorted List Sum', () => {\n  it('should return a sorted list of unique words', () => {\n    assert.deepEqual(sortedListSum([\"aa\", \"a\", \"aaa\"]), [\"aa\"])\n    assert.deepEqual(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]), [\"ab\", \"cd\"])\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let a = 1\n  if (n % 2!== 0) {\n    a = y\n  }\n  for (let i = 3; i <= n; i += 2) {\n    if (n % i === 0) {\n      a = x\n    }\n  }\n  return a\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  const {\n    filter: {\n      _filter: {\n        isOdd: (val)=>{\n          return val % 2!== 0;\n        },\n      },\n    },\n  } = lst;\n  return _filter.isOdd\n   ?\n      lst.reduce((acc, val)=>{\n        return acc + Math.pow(val, 2);\n      }, 0)\n    :\n      0;\n};\n\nexport {\n  doubleTheDifference\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let correct = 0\n  let mistakes = 0\n  game.forEach((score, index) => {\n    if (guess[index] === score) {\n      correct++\n    } else {\n      mistakes++\n    }\n  })\n  return [correct, mistakes]\n}\n\nconst getHighScore = (players) => {\n  const maxScore = 0\n  const maxPlayer = players.find((player) => player.score > maxScore)\n  return maxPlayer\n}\n\nconst compareByScore = (players) => {\n  let maxScore = 0\n  let maxPlayer = players.find((player) => player.score > maxScore)\n  players.forEach((player) => {\n    if (player.score > maxScore) {\n      maxScore = player.score\n      maxPlayer = player\n    }\n  })\n  return [maxPlayer]\n}\n\nconst getDifference = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  return difference\n}\n\nconst compareByDifference = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuess = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifference = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScore = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScoreAndPlayer = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScoreAndPlayerAndHighScore = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScoreAndPlayerAndHighScoreAndDifference = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScoreAndPlayerAndHighScoreAndDifferenceAndScore = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScoreAndPlayerAndHighScoreAndDifferenceAndScoreAndHighScore = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray\n}\n\nconst compareByGuessAndDifferenceAndScoreAndPlayerAndHighScoreAndDifferenceAndScoreAndHighScoreAndDifference = (players) => {\n  const highScore = getHighScore(players)\n  const difference = highScore.score - highScore.guess\n  const differenceArray = []\n  players.forEach((player) => {\n    if (player.score === highScore.score) {\n      differenceArray.push(player)\n    }\n  })\n  return differenceArray"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = {};\n  let uppercase = 0;\n  let lowercase = 0;\n  let strength = 0;\n\n  extensions.forEach(extension => {\n    extension = extension.toLowerCase();\n    let extension_strength = strength(class_name, extension);\n\n    if (extension_strength > strength) {\n      strength = extension_strength;\n      uppercase = 0;\n      lowercase = 0;\n    }\n\n    if (strength >= extension_strength) {\n      if (extension.length > class_name.length) {\n        let first_letter = extension.charAt(0);\n        if (first_letter.toUpperCase() === first_letter) {\n          uppercase++;\n        } else {\n          lowercase++;\n        }\n      }\n    }\n  });\n\n  return class_name + '.' + extensions[0].substr(strength, extensions[0].length - class_name.length);\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n  if(a.length===0 && b.length===0) return true\n  if(a.length===0) return false\n  if(b.length===0) return false\n  var aLen = a.length, bLen = b.length\n  var aStr = a.split(\"\"), bStr = b.split(\"\")\n  var i=0, j=0, flag=false\n  while(i<aLen && j<bLen)\n  {\n    if(aStr[i]===bStr[j]){\n      if(i===aLen-1 && j===bLen-1) return true\n      else{\n        if(i===aLen-1) return false\n        else if(j===bLen-1) return false\n        else{\n          i++\n          j++\n          flag=true\n        }\n      }\n    }\n    else{\n      if(j===bLen-1) return false\n      else if(i===aLen-1) return false\n      else{\n        i++\n        j++\n      }\n    }\n  }\n  if(i===aLen-1 && j===bLen-1) return true\n  return flag\n}\n\nmodule.exports= cycpatternCheck<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let result = []\n  let isEven = true\n  while (num > 0) {\n    if (num % 2 === 0) {\n      isEven = false\n      result.unshift(1)\n    } else {\n      isEven = true\n      result.unshift(0)\n    }\n    num = num / 2\n  }\n  return (isEven? result.concat(isEven) : result.concat(isEven).concat(result))\n}\n\nexport default evenOddCount<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = number\n  let string = ''\n  let nums = [\n    [1000, 'M'],\n    [900, 'CM'],\n    [500, 'D'],\n    [400, 'CD'],\n    [100, 'C'],\n    [90, 'XC'],\n    [50, 'L'],\n    [40, 'XL'],\n    [10, 'X'],\n    [9, 'IX'],\n    [5, 'V'],\n    [4, 'IV'],\n    [1, 'I']\n  ]\n\n  for (let i = 0; i < nums.length; i++) {\n    while (num >= nums[i][0]) {\n      string += nums[i][1]\n      num -= nums[i][0]\n    }\n  }\n\n  return string.toLowerCase()\n}\n\n/*\n  Given a roman numeral, obtain its int equivalent.\n   Restrictions: 1 <= num <= 3999 \n\n   Examples:\n  >>> miniRomanToInt('M') == 1000\n  >>> miniRomanToInt('MXLIV') == 1454\n  */\nconst miniRomanToInt = (number) => {\n  let num = number\n  let nums = [\n    1000,\n    900,\n    500,\n    400,\n    100,\n    90,\n    50,\n    40,\n    10,\n    9,\n    5,\n    4,\n    1\n  ]\n\n  for (let i = 0; i < nums.length; i++) {\n    while (num >= nums[i]) {\n      num -= nums[i]\n    }\n  }\n\n  return num\n}\n\nmodule.exports = {\n  intToMiniRoman,\n  miniRomanToInt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return true;\n}\n\nconst isRightAngled = (a, b, c) => {\n    if(a+b < c || a+c < b || b+c < a)\n        return false;\n    else\n        return"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let charCounts={};\n   words.forEach(word=>{\n      let characters=word.split(\"\");\n      for(let i=0;i<characters.length;i++){\n         charCounts[characters[i]]=charCounts[characters[i]]||0;\n         charCounts[characters[i]]++;\n      }\n   });\n   let maxCount=0;\n   let maxWord=null;\n   for(let word in charCounts){\n      if(charCounts[word]>maxCount){\n         maxCount=charCounts[word];\n         maxWord=word;\n      }\n   }\n   if(maxCount===0) return \"\";\n   let maxLength=0;\n   for(let i=0;i<maxWord.length;i++){\n      maxLength=Math.max(maxLength,words.indexOf(maxWord).toString().length);\n   }\n   return words[words.indexOf(maxWord)].substr(0,maxLength);\n }\n console.log(findMax([\"name\",\" of\",\" string\"]));\n console.log(findMax([\"name\",\" enam\",\" game\"]));\n console.log(findMax([\"aaaaaaa\",\" bb\",\" cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = [0, 0]\n  let eaten = 0\n  while (eaten <= number) {\n    result[0] += eaten\n    eaten += Math.min(Math.min(number - eaten, need), remaining)\n  }\n  return result\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                    the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n\n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 = (number, need, remaining) => {\n  let result = [0, 0]\n  let eaten = 0\n  while (eaten <= number) {\n    result[0] += eaten\n    eaten += Math.min(Math.min(number - eaten, need), remaining)\n  }\n  return result\n}\n\nconst test = () => {\n  let tests = [\n    {\n      input: [[2, 10, 4], [3, 8, 9]],\n      expected: [11, 1]\n    },\n    {\n      input: [[2, 10, 9], [3, 8, 9]],\n      expected: [11, 0]\n    },\n    {\n      input: [[2, 10, 9], [3, 8, 9]],\n      expected: [11, 0]\n    },\n    {\n      input: [[2, 10, 9], [3, 8, 9]],\n      expected: [11, 0]\n    }\n  ]\n  tests.forEach(function (test) {\n    let result = eat(test.input[0][0], test.input[0][1], test.input[0][2])\n    if (result[0]!= test.expected[0]) {\n      console.log(`Expected: ${test.expected[0]}`)\n      console.log(`Actual:   ${result[0]}`)\n      throw new Error(`TEST FAILED!`)\n    }\n    if (result[1]!= test.expected[1]) {\n      console.log(`Expected: ${test.expected[1]}`)\n      console.log(`Actual:   ${result[1]}`)\n      throw new Error(`TEST FAILED!`)\n    }\n  })\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length < operand.length) {\n    throw new Error('Operator list is shorter than operand list');\n  }\n  let res = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    res = operator[i - 1](res, operand[i]);\n  }\n  return res;\n};\n\nconst operator = {\n  '+': (a, b) => a + b,\n  '-': (a, b) => a - b,\n  '*': (a, b) => a * b,\n  '/': (a, b) => a / b\n};\n\nconst operand = [2, 3, 4, 5];\n\nconsole.log(doAlgebra(operator, operand));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const reversed = s.split(\"\").reverse().join(\"\");\n  const letters = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i].match(/[a-zA-Z]/)) {\n      letters.push(reversed[i]);\n    }\n  }\n  return letters.length > 0? `${letters.join(\"\")}` : reversed;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9e9acb4b1fceb6f6b4f0b0b1a9c9f2b4afd8f'\n  */\nconst stringToSha1 = (text) => {\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'b0fc7f5d0cad0f4b3d5c4e6b8a70b7e44b4c3f6d3f0b2c8f9b4c0e4f9e'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'e0a8a4c0b0a7a38a65f3a5ced3eb7a9dcc1b0b1b08e7d2f1d3e0d6e9a8a7b6d6e6dda0a3c1d4d4f0b3c2d4d5c6b3c7c8c9cacbccbdcddcec'\n  */\nconst stringToSha512 = (text) => {\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '2c2dcc0e9e0e4b8d0e2e5a8f3f9c8a8c9c0a0d2c9d9b1a9a9b2c9d9e9f2c0d1d2d3d4d5d6d7d8d9dae9debfafb1'\n  */\nconst stringToSha512x2 = (text) => {\n  const sha512x2 = crypto.createHash('sha512');\n  sha512x2.update(text);\n  return sha512x2.digest('hex');\n};\n\nexport default {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha512x2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const list = [];\n  for (let i = a; i <= b; i += 2) {\n    list.push(i);\n  }\n  return list;\n};\n\n// BEGIN SOLUTION\n\nconst generateIntegers = (a, b) => {\n  const list = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      list.push(i);\n    }\n  }\n  return list;\n};\n\n// END SOLUTION\n<|endoftext|>"}
