{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sortedNumbers = [...numbers].sort();\n  for (let i = 0; i < sortedNumbers.length - 1; i++) {\n    if (Math.abs(sortedNumbers[i] - sortedNumbers[i + 1]) <= threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n  * Count how many numbers are close to given number\n  * @param  {Array} numbers\n  * @param  {Number} number\n  * @return {Number}\n  */\nconst countNumbers = (numbers, number) => {\n  return numbers.filter((element) => {\n    return Math.abs(element - number) <= 0.00001;\n  }).length;\n};\n\n/**\n  * Calculate the sum of all elements in array\n  * @param  {Array} numbers\n  * @return {Number}\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\nexport { hasCloseElements, countNumbers, sum };\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    let stack = [];\n    const results = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            stack.push(paren_string[i]);\n        } else if (paren_string[i] === ')') {\n            while (stack.pop()!== '(') {\n                results.push(stack.pop());\n            }\n        }\n    }\n    return results;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number % 1;\n  const whole = number - decimal;\n  return whole;\n}\n\nconst truncate = (number) => {\n  return number.toFixed(1);\n}\n\nconst convertNumber = (number) => {\n  const num = truncateNumber(number);\n  const dec = truncate(num);\n  return [num, dec];\n}\n\nconst convert = (number) => {\n  const [num, dec] = convertNumber(number);\n  return [num, dec];\n}\n\nconst convertNumbers = (array) => {\n  const numbers = array.map(convert);\n  return numbers;\n}\n\nconst convertToNumber = (array) => {\n  const numbers = array.map(convert);\n  return numbers;\n}\n\nconst getNumber = (array) => {\n  return array[0];\n}\n\nconst getNumbers = (array) => {\n  return array[1];\n}\n\nconst isArray = (array) => {\n  return Array.isArray(array);\n}\n\nconst isNumber = (number) => {\n  return typeof number === 'number';\n}\n\nconst isArrayOfNumbers = (array) => {\n  return isArray(array) && isNumber(array[0]) && isNumber(array[1]);\n}\n\nconst isString = (string) => {\n  return typeof string ==='string';\n}\n\nconst isArrayOfStrings = (array) => {\n  return isArray(array) && isString(array[0]) && isString(array[1]);\n}\n\nconst toArray = (array) => {\n  return array;\n}\n\nconst isEmpty = (array) => {\n  return array.length === 0;\n}\n\nconst isNotEmpty = (array) => {\n  return array.length!== 0;\n}\n\nconst isObject = (object) => {\n  return typeof object === 'object';\n}\n\nconst isNotObject = (object) => {\n  return!isObject(object);\n}\n\nconst isObjectOfStrings = (object) => {\n  return isObject(object) && isString(object.name) && isString(object.age);\n}\n\nconst isObjectOfNumbers = (object) => {\n  return isObject(object) && isNumber(object.height) && isNumber(object.weight);\n}\n\nconst isEmptyObject = (object) => {\n  return isObject(object) && isEmpty(object.name) && isEmpty(object.age) && isEmpty(object.height) && isEmpty(object.weight);\n}\n\nconst isNotEmptyObject = (object) => {\n  return isObject(object) && isNotEmpty(object.name) && isNotEmpty(object.age) && isNotEmpty(object.height) && isNotEmpty(object.weight);\n}\n\nconst isObjectOfArrays = (object) => {\n  return isObject(object) && isArrayOfStrings(object.names) && isArrayOfNumbers(object.ages) && isArrayOfNumbers(object.heights) && isArrayOfNumbers(object.weights);\n}\n\nconst isNotObjectOfArrays = (object) => {\n  return isNotObject(object) && isNotEmptyObject(object) && isNotEmptyObject(object) && isNotEmptyObject(object) && isNotEmptyObject(object);\n}\n\nconst isObjectOfObjects = (object) => {\n  return isObject(object) && isObjectOfArrays(object) && isObjectOfNumbers(object) && isObjectOfNumbers(object);\n}\n\nconst isNotObjectOfObjects = (object) => {\n  return isNotObject(object) && isNotEmptyObject(object) && isNotEmptyObject(object) && isNotEmptyObject(object) && isNotEmptyObject(object);\n}\n\nconst isEmptyArray = (array) => {\n  return isArray(array) && isEmpty(array);\n}\n\nconst isNotEmptyArray = (array) => {\n  return isArray(array) && isNotEmpty(array);\n}\n\nconst isEmptyObjectOfArrays = (object) => {\n  return isObject(object) && isEmptyObject(object);\n}\n\nconst isNotEmptyObjectOfArrays = (object) => {\n  return isObject(object) && isNotEmptyObject(object);\n}\n\nconst isEmptyObjectOfObjects = (object) => {\n  return isObject(object) && isEmptyObject(object);\n}\n\nconst isNotEmptyObjectOfObjects = (object) => {\n  return isObject(object) && isNotEmptyObject(object);\n}\n\nconst isObjectOfObjects = (object) => {\n  return isObject(object) && isObjectOfObjects(object);\n}\n\nconst isNotObjectOfObjects = (object) => {\n  return isNotObject(object) && isNotObjectOfObjects(object);\n}\n\nconst isArrayOfObjects = (array) => {\n  return isArray(array) && isObjectOfObjects(array);\n}\n\nconst isNotArrayOfObjects = (array) => {\n  return isArray(array) && isNotObjectOfObjects(array);\n}\n\nconst isArrayOfObjects = (array) => {\n  return isArrayOfObjects(array);\n}\n\nconst isNotArrayOfObjects = (array) => {\n  return isNotArrayOfObjects(array);\n}\n\nconst isArrayOfArrays = (array) => {\n  return isArray(array) && isArrayOfArrays(array);\n}\n\nconst isNotArrayOfArrays = (array) => {\n  return isArray(array) && isNotArrayOfArrays(array);\n}\n\nconst isArrayOfObjects = (array) => {\n  return isArrayOfObjects(array);\n}\n\nconst isNotArrayOfObjects = (array) => {\n  return isNotArrayOfObjects(array);\n}\n\nconst isArrayOfObjects = (array) => {\n  return isArrayOfObjects(array);\n}\n\nconst isNotArrayOfObjects ="}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let [balance, newBalance] = operations\n  let diff = newBalance - balance\n  return diff < 0? true : false\n}\n\nexport default belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((acc, n) => acc + n, 0)\n  const mean = sum / numbers.length\n  const diffs = numbers.map(n => Math.abs(n - mean))\n  return diffs.reduce((acc, d) => acc + d) / numbers.length\n}\n\n// Mean Absolute Deviation\nconst testMeanAbsDev = (input) => {\n  const list = input.map(n => n.toString())\n  console.log(`The mean absolute deviation of ${list} is ${meanAbsDev(list)}`)\n}\n\n// testMeanAbsDev([\"1\", \"2\", \"3\", \"4\"])\n\n/*\n * #### Mean Absolute Deviation\n *\n * For a given list of numbers, calculate the Mean Absolute Deviation \n * around the mean of this dataset. \n * Mean Absolute Deviation was the average absolute difference between each \n * element and a centerpoint (mean in this case): \n * MAD= average| x-x_mean|\n *\n * Example 1:\n * \n * ```\n * const list = [1, 2, 3, 4]\n * ```\n *\n * The mean absolute deviation of this list is 1.0\n *\n * Example 2:\n * \n * ```\n * const list = [1, 2, 3, 4, 5, 6]\n * ```\n *\n * The mean absolute deviation of this list is 2.5\n *\n * */\nconst meanAbsDev = (list) => {\n  const n = list.length\n  const mean = list.reduce((acc, n) => acc + n, 0) / n\n  const diffs = list.map(n => Math.abs(n - mean))\n  return diffs.reduce((acc, d) => acc + d) / n\n}\n\n// Mean Absolute Deviation\nconst testMeanAbsDev2 = (input) => {\n  const list = input.map(n => n.toString())\n  console.log(`The mean absolute deviation of ${list} is ${meanAbsDev(list)}`)\n}\n\n// testMeanAbsDev2([\"1\", \"2\", \"3\", \"4\"])\n\n/*\n * #### Mean Absolute Deviation\n *\n * For a given list of numbers, calculate the Mean Absolute Deviation \n * around the mean of this dataset. \n * Mean Absolute Deviation was the average absolute difference between each \n * element and a centerpoint (mean in this case): \n * MAD= average| x-x_mean|\n *\n * Example 1:\n * \n * ```\n * const list = [1, 2, 3, 4]\n * ```\n *\n * The mean absolute deviation of this list is 1.0\n *\n * Example 2:\n * \n * ```\n * const list = [1, 2, 3, 4, 5, 6]\n * ```\n *\n * The mean absolute deviation of this list is 2.5\n *\n * */\nconst meanAbsDev2 = (list) => {\n  const n = list.length\n  const mean = list.reduce((acc, n) => acc + n, 0) / n\n  const diffs = list.map(n => Math.abs(n - mean))\n  return diffs.reduce((acc, d) => acc + d) / n\n}\n\n// Mean Absolute Deviation\nconst testMeanAbsDev3 = (input) => {\n  const list = input.map(n => n.toString())\n  console.log(`The mean absolute deviation of ${list} is ${meanAbsDev2(list)}`)\n}\n\n// testMeanAbsDev3([\"1\", \"2\", \"3\", \"4\"])\n\n/*\n * #### Mean Absolute Deviation\n *\n * For a given list of numbers, calculate the Mean Absolute Deviation \n * around the mean of this dataset. \n * Mean Absolute Deviation was the average absolute difference between each \n * element and a centerpoint (mean in this case): \n * MAD= average| x-x_mean|\n *\n * Example 1:\n * \n * ```\n * const list = [1, 2, 3, 4]\n * ```\n *\n * The mean absolute deviation of this list is 1.0\n *\n * Example 2:\n * \n * ```\n * const list = [1, 2, 3, 4, 5, 6]\n * ```\n *\n * The mean absolute deviation of this list is 2.5\n *\n * */\nconst meanAbsDev3 = (list) => {\n  const n = list.length\n  const mean = list.reduce((acc, n) => acc + n, 0) / n\n  const diffs = list.map(n => Math.abs(n - mean))\n  return diffs.reduce((acc, d) => acc + d) / n\n}\n\n// Mean Absolute Deviation\nconst testMeanAbsDev4 = (input) => {\n  const list = input.map(n => n.toString())\n  console.log(`The mean absolute deviation of ${list} is ${meanAbsDev3(list)}`)\n}\n\n// testMeanAbsDev4([\"1\", \"2\", \"3\", \"4\"])\n\n/*\n * #### Mean Absolute Deviation\n *\n * For a given list of numbers, calculate the Mean Absolute Deviation \n * around the mean of this dataset. \n * Mean Absolute Deviation was the average absolute difference between each \n * element and a centerpoint (mean in this case): \n * MAD= average| x-x_mean|\n *\n * Example 1:\n * \n * ```\n * const list = [1, 2, 3, 4]\n * ```\n *\n * The mean absolute deviation of this list is 1.0\n *\n * Example 2:\n * \n * ```\n * const list = [1, 2, 3, 4, 5, 6]\n * ```\n *\n * The mean absolute deviation of this list is 2.5\n *\n * */\nconst meanAbsDev4 = (list) => {\n  const n ="}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const length = numbers.length;\n  const half_length = Math.floor(length / 2);\n  const i = half_length;\n  const j = length - half_length;\n  const output = [];\n\n  while (i < length) {\n    output.push(numbers[i++]);\n    if (i < length) {\n      output.push(delimeter);\n      output.push(numbers[j++]);\n    }\n  }\n  return output;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    let stack = [];\n    let levels = [];\n\n    for (let i = 0; i < paren_string.length; i++) {\n        let paren = paren_string[i];\n\n        if (paren === '(') {\n            stack.push(paren);\n        } else if (paren === ')') {\n            let top = stack.pop();\n            if (top === '(') {\n                levels.push(stack.length - 1);\n            }\n        }\n    }\n    return levels;\n}\n\n/* Input to this function was a string representing multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst getNestedLevels = (paren_string) => {\n    let levels = [];\n    let stack = [];\n\n    for (let i = 0; i < paren_string.length; i++) {\n        let paren = paren_string[i];\n\n        if (paren === '(') {\n            stack.push(paren);\n        } else if (paren === ')') {\n            let top = stack.pop();\n            if (top === '(') {\n                levels.push(stack.length - 1);\n            }\n        }\n    }\n    return levels;\n}\n\n/* Input to this function was a string representing multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst getNestedMaxLevel = (paren_string) => {\n    let levels = [];\n    let stack = [];\n\n    for (let i = 0; i < paren_string.length; i++) {\n        let paren = paren_string[i];\n\n        if (paren === '(') {\n            stack.push(paren);\n        } else if (paren === ')') {\n            let top = stack.pop();\n            if (top === '(') {\n                levels.push(stack.length - 1);\n            }\n        }\n    }\n    return levels;\n}\n\n/* Input to this function was a string representing multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst getNestedMinLevel = (paren_string) => {\n    let levels = [];\n    let stack = [];\n\n    for (let i = 0; i < paren_string.length; i++) {\n        let paren = paren_string[i];\n\n        if (paren === '(') {\n            stack.push(paren);\n        } else if (paren === ')') {\n            let top = stack.pop();\n            if (top === '(') {\n                levels.push(stack.length - 1);\n            }\n        }\n    }\n    return levels;\n}\n\n/* Input to this function was a string representing multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst getNestedCount = (paren_string) => {\n    let stack = [];\n    let count = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        let paren = paren_string[i];\n\n        if (paren === '(') {\n            stack.push(paren);\n            count++;\n        } else if (paren === ')') {\n            let top = stack.pop();\n            if (top === '(') {\n                count--;\n            }\n        }\n    }\n    return count;\n}\n\nmodule.exports = {\n    parseNestedParens,\n    getNestedLevels,\n    getNestedMaxLevel,\n    getNestedMinLevel,\n    getNestedCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach((str) => {\n    if (str.includes(substring)) {\n      result.push(str);\n    }\n  });\n  return result;\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let number of numbers) {\n    sum += number;\n    product *= number;\n  }\n  return {\n    sum,\n    product\n  };\n};\n\n/*\n  This function should calculate the sum of all the even numbers in a list.\n  >>> sumEven([1, 2, 4, 5, 6, 8])\n  20\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18])\n  28\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20])\n  32\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22])\n  40\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24])\n  48\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26])\n  56\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])\n  64\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30])\n  72\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32])\n  80\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34])\n  88\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36])\n  96\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38])\n  104\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40])\n  112\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42])\n  120\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44])\n  128\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46])\n  136\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48])\n  144\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50])\n  152\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52])\n  160\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54])\n  168\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56])\n  176\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58])\n  184\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60])\n  192\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62])\n  200\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64])\n  208\n  >>> sumEven([1, 2, 4, 5, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38,"}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    let max = numbers[0];\n    let counter = 1;\n    let length = numbers.length;\n\n    for (let i = 1; i < length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            counter = 1;\n        } else if (numbers[i] === max) {\n            counter += 1;\n        }\n    }\n    return [max, counter];\n};\n\n// From a given list of integers, generated a list of rolling minimum element found until gave moment\nconst rollingMin = (numbers) => {\n    let min = numbers[0];\n    let counter = 1;\n    let length = numbers.length;\n\n    for (let i = 1; i < length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n            counter = 1;\n        } else if (numbers[i] === min) {\n            counter += 1;\n        }\n    }\n    return [min, counter];\n};\n\nconst rollMax = (numbers, max) => {\n    let counter = 0;\n    let maxs = max(numbers);\n    let length = numbers.length;\n    let maxRolling = maxs[0];\n\n    while (counter < length) {\n        let currentRolling = maxs[1];\n        if (numbers[counter] === maxRolling) {\n            counter += 1;\n        } else {\n            maxs = rollingMax(numbers.slice(counter));\n            maxRolling = maxs[0];\n            counter += maxs[1] + 1;\n        }\n    }\n    return counter - 1;\n};\n\nconst rollMin = (numbers, min) => {\n    let counter = 0;\n    let mins = min(numbers);\n    let minRolling = mins[0];\n    let length = numbers.length;\n    let minRollingCounter = 0;\n\n    while (counter < length) {\n        let currentRolling = mins[1];\n        if (numbers[counter] === minRolling) {\n            counter += 1;\n        } else {\n            mins = rollingMin(numbers.slice(counter));\n            minRolling = mins[0];\n            minRollingCounter += mins[1] + 1;\n            counter += minRollingCounter;\n        }\n    }\n    return counter - 1;\n};\n\nconst rollingMax = (numbers) => {\n    let maxs = rollingMax(numbers);\n    let maxRolling = maxs[0];\n    let maxCounter = maxs[1];\n    let length = numbers.length;\n\n    while (maxCounter < length) {\n        let currentMax = maxs[1];\n        if (numbers[maxCounter] === maxRolling) {\n            maxCounter += 1;\n        } else {\n            maxs = rollingMax(numbers.slice(maxCounter));\n            maxRolling = maxs[0];\n            maxCounter += maxs[1] + 1;\n        }\n    }\n    return maxCounter - 1;\n};\n\nconst rollingMin = (numbers) => {\n    let mins = rollingMin(numbers);\n    let minRolling = mins[0];\n    let minCounter = mins[1];\n    let length = numbers.length;\n\n    while (minCounter < length) {\n        let currentMin = mins[1];\n        if (numbers[minCounter] === minRolling) {\n            minCounter += 1;\n        } else {\n            mins = rollingMin(numbers.slice(minCounter));\n            minRolling = mins[0];\n            minCounter += mins[1] + 1;\n        }\n    }\n    return minCounter - 1;\n};\n\nconst rollingMax = (numbers) => {\n    let maxs = rollingMax(numbers);\n    let maxRolling = maxs[0];\n    let maxCounter = maxs[1];\n    let length = numbers.length;\n\n    while (maxCounter < length) {\n        let currentMax = maxs[1];\n        if (numbers[maxCounter] === maxRolling) {\n            maxCounter += 1;\n        } else {\n            maxs = rollingMax(numbers.slice(maxCounter));\n            maxRolling = maxs[0];\n            maxCounter += maxs[1] + 1;\n        }\n    }\n    return maxCounter - 1;\n};\n\nconst rollingMin = (numbers) => {\n    let mins = rollingMin(numbers);\n    let minRolling = mins[0];\n    let minCounter = mins[1];\n    let length = numbers.length;\n\n    while (minCounter < length) {\n        let currentMin = mins[1];\n        if (numbers[minCounter] === minRolling) {\n            minCounter += 1;\n        } else {\n            mins = rollingMin(numbers.slice(minCounter));\n            minRolling = mins[0];\n            minCounter += mins[1] + 1;\n        }\n    }\n    return minCounter - 1;\n};\n\n// rollingMax([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 5, 5, 5, 5, 5])\n// [1, 2, 3, 3, 3, 4, 4]\n\n// rollingMin([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 2, 3, 4, 2]\n// rollingMin([1, 2, 3, 2, 3, 4, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n// [1, 2, 3, 2, 3, 4, 2]\n\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5])\n// [1, 2, 3, 3, 3, 4, 4]\n\n// rollingMin([1, 2, 3, 2, 3, 4, 2, 5, 5,"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let longestPrefix = '';\n  let longestPrefix = string.split('').reverse().join('');\n  for (let i = 0; i < longestPrefix.length; i++) {\n    let suffix = longestPrefix.substring(i, longestPrefix.length);\n    if (isPalindrome(suffix) && suffix.length > palindrome.length) {\n      palindrome = suffix;\n      longestPrefix = suffix;\n    }\n  }\n  return palindrome + longestPrefix;\n}\n\n/* \n  Find the longest palindrome that begins with a supplied string\n  \n  Algorithm idea:\n    - Use a map of pairs to track the palindromes, \n      each pair is a palindrome and the length of the longest\n      palindrome that begins with the supplied string.\n    - Start at the head of the string and work down to the tail.\n    - If the pair exists in the map then we found a longest \n      palindrome that begins with the supplied string\n    - If the pair doesn't exist in the map, then we have\n      a new longest palindrome that begins with the supplied string\n  \n  >>> makeLongestPalindrome('cat')\n  'cat'\n  >>> makeLongestPalindrome('cata')\n  'cata'\n  >>> makeLongestPalindrome('catac')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  let map = {};\n  let palindrome = '';\n  let longestPrefix = '';\n  let longestPrefix = string.split('').reverse().join('');\n  for (let i = 0; i < longestPrefix.length; i++) {\n    let suffix = longestPrefix.substring(i, longestPrefix.length);\n    if (isPalindrome(suffix) && suffix.length > palindrome.length) {\n      palindrome = suffix;\n      longestPrefix = suffix;\n      map[suffix] = suffix.length;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    let suffix = string.substring(i, string.length);\n    if (isPalindrome(suffix) && suffix.length > palindrome.length) {\n      palindrome = suffix;\n      longestPrefix = suffix;\n      map[suffix] = suffix.length;\n    }\n  }\n  return map[longestPrefix] === undefined? palindrome : map[longestPrefix];\n}\n\n/* \n  Find the first string that is a palindrome of the supplied string\n  \n  Algorithm idea:\n    - Use a map of pairs to track the palindromes, \n      each pair is a palindrome and the length of the longest\n      palindrome that begins with the supplied string\n    - Start at the head of the string and work down to the tail.\n    - If the pair exists in the map then we found a longest \n      palindrome that begins with the supplied string\n    - If the pair doesn't exist in the map, then we have\n      a new longest palindrome that begins with the supplied string\n  \n  >>> makeFirstPalindrome('cat')\n  'cat'\n  >>> makeFirstPalindrome('cata')\n  'cata'\n  >>> makeFirstPalindrome('catac')\n  'catac'\n  */\nconst makeFirstPalindrome = (string) => {\n  let map = {};\n  let palindrome = '';\n  let longestPrefix = '';\n  let longestPrefix = string.split('').reverse().join('');\n  for (let i = 0; i < longestPrefix.length; i++) {\n    let suffix = longestPrefix.substring(i, longestPrefix.length);\n    if (isPalindrome(suffix) && suffix.length > palindrome.length) {\n      palindrome = suffix;\n      longestPrefix = suffix;\n      map[suffix] = suffix.length;\n    }\n  }\n  for (let i = 0; i < string.length; i++) {\n    let suffix = string.substring(i, string.length);\n    if (isPalindrome(suffix) && suffix.length > palindrome.length) {\n      palindrome = suffix;\n      longestPrefix = suffix;\n      map[suffix] = suffix.length;\n    }\n  }\n  return map[longestPrefix] === undefined? palindrome : map[longestPrefix];\n}\n\n/*\n  Find the longest palindrome that begins with a supplied string\n  \n  Algorithm idea:\n    - Use a map of pairs to track the palindromes, \n      each pair is a palindrome and the length of the longest\n      palindrome that begins with the supplied string\n    - Start at the head of the string and work down to the tail.\n    - If the pair exists in the map then we found a longest \n      palindrome that begins with the supplied string\n    - If the pair doesn't exist in the map, then we have\n      a new longest palindrome that begins with the supplied string\n  \n  >>> makeLongestPalindrome('cat')\n  'cat'\n  >>> makeLongestPalindrome('cata')\n  'cata'\n  >>> makeLongestPalindrome('catac')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  let map = {};\n  let palindrome = '';\n  let longestPrefix = '';\n  let longestPrefix = string.split('').reverse().join('');\n  for (let"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) throw new Error(\"stringXor: strings must have same length\");\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) return null;\n  const longest = strings[0];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": false, "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  let a_is_odd = false;\n  while (a!== 0) {\n    if (a % 2 === 1) {\n      a_is_odd = true;\n    }\n    a = Math.floor(a / 2);\n  }\n  let b_is_odd = false;\n  while (b!== 0) {\n    if (b % 2 === 1) {\n      b_is_odd = true;\n    }\n    b = Math.floor(b / 2);\n  }\n  if (a_is_odd && b_is_odd) {\n    return 2;\n  }\n  if (a_is_odd) {\n    return b;\n  }\n  if (b_is_odd) {\n    return a;\n  }\n  return a + b;\n};\n\n// Returns a random number in the range [0, n)\nconst getRandomIntInRange = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n// Returns a random number in the range [a, b)\nconst getRandomIntInRange2 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange3 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange4 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange5 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange6 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange7 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange8 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange9 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange10 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange11 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange12 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange13 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange14 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange15 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange16 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange17 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange18 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange19 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange20 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange21 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange22 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b]\nconst getRandomIntInRange23 = (a, b) => {\n  return a + Math.floor(Math.random() * (b - a + 1));\n};\n\n// Returns a random number in the range [a, b"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n\n  let prefixes = [];\n  const stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    prefixes = prefixes.concat(allPrefixes(string.slice(0, i + 1)));\n  }\n  return prefixes;\n};\n\n/* Return the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  if (string1.length === 0) {\n    return '';\n  }\n  if (string2.length === 0) {\n    return '';\n  }\n\n  let length = 0;\n  let char = string1.charAt(0);\n  while (char === string2.charAt(length)) {\n    char = string1.charAt(++length);\n    if (length === string2.length) {\n      return string1;\n    }\n  }\n\n  return string1.slice(0, length);\n};\n\nmodule.exports = {\n  allPrefixes,\n  longestCommonPrefix\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": false, "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 3)\n  '1 2 3'\n  >>> stringSequence(5, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n, m) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    res += ` ${nums[n]}`;\n    return res;\n}\n\nconst stringSequence3 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence4 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence5 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence6 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence7 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence8 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence9 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence10 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence11 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence12 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence13 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}`;\n    for (let i = 1; i < nums.length - 1; i++) {\n        res += ` ${nums[i]}`;\n    }\n    return res + ` ${nums[n]}`;\n}\n\nconst stringSequence14 = (n) => {\n    const nums = Array.from({length: n + 1}, (_, i) => i + 1);\n    const res = `${nums[0]}"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let counts = {};\n\n  for (let i = 0; i < string.length; i++) {\n    let char = string.charAt(i);\n    if (counts[char] === undefined) {\n      counts[char] = 1;\n    } else {\n      counts[char]++;\n    }\n  }\n\n  return Object.keys(counts).length;\n};\n\n//\n// ### @fn stringToLowerCase\n//\n// Given a string, convert it to lowercase\n//\n// Returns:\n//\n//   * `string`\n//\nconst stringToLowerCase = (string) => string.toLowerCase();\n\n//\n// ### @fn stringToUpperCase\n//\n// Given a string, convert it to uppercase\n//\n// Returns:\n//\n//   * `string`\n//\nconst stringToUpperCase = (string) => string.toUpperCase();\n\n//\n// ### @fn stringLength\n//\n// Given a string, return the length of it\n//\n// Returns:\n//\n//   * `number`\n//\nconst stringLength = (string) => string.length;\n\n//\n// ### @fn stringContains\n//\n// Given a string, return a boolean of whether or not it contains another string\n//\n// Returns:\n//\n//   * `boolean`\n//\nconst stringContains = (string, stringToCheck) => string.indexOf(stringToCheck)!== -1;\n\n//\n// ### @fn stringSubstring\n//\n// Given a string, return a substring of it\n//\n// Returns:\n//\n//   * `string`\n//\nconst stringSubstring = (string, startIndex, endIndex) => string.substring(startIndex, endIndex);\n\n//\n// ### @fn stringLeft\n//\n// Given a string, return the left of it\n//\n// Returns:\n//\n//   * `string`\n//\nconst stringLeft = (string, index) => string.substring(0, index);\n\n//\n// ### @fn stringRight\n//\n// Given a string, return the right of it\n//\n// Returns:\n//\n//   * `string`\n//\nconst stringRight = (string, index) => string.substring(index);\n\n//\n// ### @fn trim\n//\n// Given a string, return a trimmed copy\n//\n// Returns:\n//\n//   * `string`\n//\nconst trim = (string) => string.trim();\n\n//\n// ### @fn upperCase\n//\n// Given a string, return the upper case version\n//\n// Returns:\n//\n//   * `string`\n//\nconst upperCase = (string) => stringToUpperCase(string);\n\n//\n// ### @fn lowerCase\n//\n// Given a string, return the lower case version\n//\n// Returns:\n//\n//   * `string`\n//\nconst lowerCase = (string) => stringToLowerCase(string);\n\n//\n// ### @fn countLines\n//\n// Given a string, return the number of lines it contains\n//\n// Returns:\n//\n//   * `number`\n//\nconst countLines = (string) => string.split('\\n').length;\n\n//\n// ### @fn stringToArray\n//\n// Given a string, split it into an array of its individual characters\n//\n// Returns:\n//\n//   * `array`\n//\nconst stringToArray = (string) => string.split('');\n\n//\n// ### @fn stringToNumber\n//\n// Given a string, convert it to a number\n//\n// Returns:\n//\n//   * `number`\n//\nconst stringToNumber = (string) => parseInt(string, 10);\n\n//\n// ### @fn arrayToString\n//\n// Given an array, convert it to a string\n//\n// Returns:\n//\n//   * `string`\n//\nconst arrayToString = (array) => array.join('');\n\n//\n// ### @fn arrayToArray\n//\n// Given an array, convert it to another array\n//\n// Returns:\n//\n//   * `array`\n//\nconst arrayToArray = (array) => array.slice();\n\n//\n// ### @fn arrayToNumber\n//\n// Given an array, convert it to a number\n//\n// Returns:\n//\n//   * `array`\n//\nconst arrayToNumber = (array) => array.reduce((accumulator, item) => accumulator + parseInt(item, 10), 0);\n\n//\n// ### @fn numberToArray\n//\n// Given a number, convert it to an array\n//\n// Returns:\n//\n//   * `array`\n//\nconst numberToArray = (number) => [number];\n\n//\n// ### @fn numberToString\n//\n// Given a number, convert it to a string\n//\n// Returns:\n//\n//   * `string`\n//\nconst numberToString = (number) => String(number);\n\n//\n// ### @fn numberToArray\n//\n// Given a number, convert it to an array\n//\n// Returns:\n//\n//   * `array`\n//\nconst numberToArray = (number) => numberToArray(numberToString(number));\n\n//\n// ### @fn stringToArray\n//\n// Given a string, convert it to an array\n//\n// Returns:\n//\n//   * `array`\n//\nconst stringToArray = (string) => stringToArray(string);\n\n//\n// ### @fn stringToNumber\n//\n// Given a string, convert it to a number\n//\n// Returns:\n//\n//   * `string`\n//\nconst stringToNumber = (string) => stringToNumber(string);\n\n//\n// ### @fn stringToArray\n//\n// Given a string, convert it to an array\n//\n// Returns:\n//\n//   * `array`\n//\nconst stringToArray = (string) => stringToArray(string);\n\n//\n// ### @fn numberToString\n//\n// Given a number, convert it to a string\n//\n// Returns:\n//\n//   * `string`\n//\nconst numberToString = (number) => String(number);\n\n//\n// ### @fn arrayToString\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beat_list = [];\n  const beat_string = music_string.replace(/o|\\./g, '');\n  const beats = beat_string.split('');\n  for (let i = 0; i < beats.length; i++) {\n    if (beats[i] === 'o') {\n      beat_list.push(4);\n    } else if (beats[i] === '|') {\n      beat_list.push(2);\n    } else if (beats[i] === '.') {\n      beat_list.push(1);\n    }\n  }\n  return beat_list;\n}\n\n/*\n  Input: a list of integers representing how many beats each note lasted in a song. \n   Your task was to find the total number of notes in the song and return it.\n  \n  >>> parseMusic([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  15\n  */\nconst parseMusic_2 = (beat_list) => {\n  let total_length = 0;\n  for (let i = 0; i < beat_list.length; i++) {\n    total_length += beat_list[i];\n  }\n  return total_length;\n}\n\n/*\n  Input: a string representing a number of beats per measure. \n   Your task was to split the string into list of numbers, where each number represent how many beats \n   did each measure last. \n   Note that each measure contains exactly four beats. \n\n  >>> parseMusic('4 4 4 4 4')\n  [4, 4, 4, 4]\n  */\nconst parseMeasure = (measure_string) => {\n  const beat_list = [];\n  const beats = measure_string.split(' ');\n  for (let i = 0; i < beats.length; i++) {\n    beat_list.push(parseInt(beats[i]));\n  }\n  return beat_list;\n}\n\n/*\n  Input: a string representing a song in a special ASCII format. \n   Your task was to split the string into list of integers, where each integer represent how many beats \n   did each song last. \n   Note that each song contains exactly four beats. \n\n  >>> parseMusic('4 4 4 4 4')\n  [4, 4, 4, 4]\n  */\nconst parseSong = (song_string) => {\n  const beat_list = [];\n  const beats = song_string.split(' ');\n  for (let i = 0; i < beats.length; i++) {\n    beat_list.push(parseInt(beats[i]));\n  }\n  return beat_list;\n}\n\n/*\n  Input: a string representing a song in a special ASCII format. \n   Your task was to split the string into list of integers, where each integer represent how many beats \n   did each song last. \n   Note that each song contains exactly four beats. \n\n  >>> parseMusic('4 4 4 4 4')\n  [4, 4, 4, 4]\n  */\nconst parseSong_2 = (song_string) => {\n  const beat_list = [];\n  const beat_string = song_string.split(' ');\n  for (let i = 0; i < beat_string.length; i++) {\n    beat_list.push(parseInt(beat_string[i]));\n  }\n  return beat_list;\n}\n\n/*\n  Input: a string representing a song in a special ASCII format. \n   Your task was to split the string into list of integers, where each integer represent how many beats \n   did each song last. \n   Note that each song contains exactly four beats. \n\n  >>> parseMusic('4 4 4 4 4')\n  [4, 4, 4, 4]\n  */\nconst parseSong_3 = (song_string) => {\n  const beat_list = [];\n  const beat_string = song_string.split(' ');\n  for (let i = 0; i < beat_string.length; i++) {\n    beat_list.push(parseInt(beat_string[i]));\n  }\n  return beat_list;\n}\n\n/*\n  Input: a string representing a song in a special ASCII format. \n   Your task was to split the string into list of integers, where each integer represent how many beats \n   did each song last. \n   Note that each song contains exactly four beats. \n\n  >>> parseMusic('4 4 4 4 4')\n  [4, 4, 4, 4]\n  */\nconst parseSong_4 = (song_string) => {\n  const beat_list = [];\n  const beat_string = song_string.split(' ');\n  for (let i = 0; i < beat_string.length; i++) {\n    beat_list.push(parseInt(beat_string[i]));\n  }\n  return beat_list;\n}\n\n/*\n  Input: a string representing a song in a special ASCII format. \n   Your task was to split the string into list of integers, where each integer represent how many beats \n   did each song last. \n   Note that each song contains exactly four beats. \n\n  >>> parseMusic('4 4 4 4 4')\n  [4, 4, 4, 4]\n  */\nconst parseSong_5 = (song_string) => {\n  const beat_list = [];\n  const beat_string = song_string.split(' ');\n  for (let i = 0; i < beat_string.length; i++) {\n    beat_list.push(parseInt(beat_string[i]));\n  }\n  return beat_list;\n}\n\n/*\n  Input: a string representing a song in a special ASCII format. \n   Your task was to split the string into list of integers, where each integer represent how many beats \n   did each song last."}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let times = 0;\n  while (string.indexOf(substring)!== -1) {\n    times += 1;\n    string = string.replace(substring, '');\n  }\n  return times;\n};\n\n/*\n  Given an array of strings, return the longest common substring.\n  For example:\n  >>> longestCommonSubstring(['kitten','sitting', 'kitten','sitting', 'kitten'])\n  'kitten'\n  >>> longestCommonSubstring(['kitten','sitting', 'kitten'])\n  'kitten'\n  >>> longestCommonSubstring(['cat', 'bat', 'rat'])\n  'at'\n  >>> longestCommonSubstring(['', '', ''])\n  ''\n  */\nconst longestCommonSubstring = (strings) => {\n  let common = '';\n  for (let i = 0; i < strings[0].length; i++) {\n    for (let j = 0; j < strings.length; j++) {\n      if (strings[j].charAt(i) === strings[0].charAt(i)) {\n        if (common.length === 0) {\n          common = strings[j].slice(i);\n        } else if (strings[j].slice(i).indexOf(common) === 0) {\n          common = common.concat(strings[j].slice(i));\n        } else {\n          common = common.slice(0, i);\n        }\n      }\n    }\n  }\n  return common;\n};\n\n/*\n  Given two strings, return their longest common substring.\n  For example:\n  >>> longestCommonSubstring('cat', 'bat')\n  'at'\n  >>> longestCommonSubstring('', '')\n  ''\n  >>> longestCommonSubstring('cat', 'dog')\n  ''\n  >>> longestCommonSubstring('', 'dog')\n  ''\n  >>> longestCommonSubstring('cat', 'cat')\n  'cat'\n  */\nconst longestCommonSubstring = (a, b) => {\n  let i = 0;\n  let j = 0;\n  let common = '';\n  while (i < a.length && j < b.length) {\n    if (a.charAt(i) === b.charAt(j)) {\n      common += a.charAt(i);\n      i++;\n      j++;\n    } else if (a.charAt(i) < b.charAt(j)) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return common;\n};\n\n/*\n  Given an array of strings, return the length of the longest common substring.\n  For example:\n  >>> longestCommonSubstring(['cat', 'bat', 'rat'])\n  3\n  >>> longestCommonSubstring(['', '', ''])\n  0\n  >>> longestCommonSubstring(['cat', 'dog'])\n  0\n  */\nconst longestCommonSubstring = (strings) => {\n  let maxLength = 0;\n  let common = longestCommonSubstring(strings[0], strings[1]);\n  for (let i = 2; i < strings.length; i++) {\n    let common = longestCommonSubstring(common, strings[i]);\n    if (common.length > maxLength) {\n      maxLength = common.length;\n    }\n  }\n  return maxLength;\n};\n\n/*\n  Given an array of strings, return the minimum of the longest common substring\n  and the number of common characters.\n  For example:\n  >>> longestCommonSubstringAndCommonCharacters(['cat', 'bat', 'rat'])\n  (3, 3)\n  >>> longestCommonSubstringAndCommonCharacters(['', '', ''])\n  (0, 0)\n  >>> longestCommonSubstringAndCommonCharacters(['cat', 'dog'])\n  (0, 0)\n  */\nconst longestCommonSubstringAndCommonCharacters = (strings) => {\n  let maxLength = longestCommonSubstring(strings[0], strings[1]);\n  let commonCharacters = 0;\n  for (let i = 2; i < strings.length; i++) {\n    let common = longestCommonSubstring(strings[i - 2], strings[i - 1]);\n    if (common.length > maxLength) {\n      maxLength = common.length;\n    }\n    commonCharacters += common.length;\n  }\n  return (maxLength, commonCharacters);\n};\n\n/*\n  Given a string and a dictionary of words, return a list of words that\n  appear in the string. The list is in alphabetical order.\n  For example:\n  >>> wordsIn(['Hello', 'world'], {'Hello': 1, 'world': 2})\n  ['Hello', 'world']\n  >>> wordsIn(['Hello', 'world'], {'Hello': 1, 'world': 1, 'hello': 2})\n  ['Hello', 'world']\n  >>> wordsIn(['Hello', 'world'], {'Hello': 1, 'world': 1, 'hello': 1})\n  ['Hello', 'world']\n  >>> wordsIn(['Hello', 'world'], {'Hello': 1, 'world': 1, 'hello': 2})\n  ['Hello', 'world']\n  >>> wordsIn(['Hello', 'world'], {'Hello': 1, 'world': 1, 'hello': 1})\n  ['Hello', 'world']\n  >>> wordsIn(['Hello', 'world'], {'Hello': 2, 'world': 2})\n  ['Hello', 'world']\n  */\nconst wordsIn = (string, dictionary) => {\n  let words = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < dictionary.length; j++) {\n      if (dictionary[j] === string.charAt(i)) {\n        words.push(string.slice(i, i + 1));\n      }\n    }\n  }\n  words.sort();\n  return words;\n};\n\n/*\n  Given a string and a dictionary of words, return a list of words that\n  appear in the string. The list is in alphabetical order. The words in the\n  dictionary are"}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  var sorted = [];\n  var split = numbers.split(' ');\n  for (var i = split.length - 1; i >= 0; i--) {\n    if (isNaN(parseInt(split[i]))) {\n      sorted.push(split[i]);\n      split.splice(i, 1);\n    }\n  }\n  return sorted.join(' ');\n};\n\n/*\n   Input:\n   'zero one two three four five six seven eight nine ten'.\n   The string of numbers should be sorted from smallest to largest. \n   Return the string sorted in the order of the numbers, with spaces between each number. \n   >>> sortNumbers('zero one two three four five six seven eight nine ten')\n   'zero one two three four five six seven eight nine ten'\n   */\nconst sortNumbersByOrder = (numbers) => {\n  var sorted = [];\n  var split = numbers.split(' ');\n  for (var i = split.length - 1; i >= 0; i--) {\n    if (isNaN(parseInt(split[i]))) {\n      sorted.push(split[i]);\n      split.splice(i, 1);\n    }\n  }\n  return sorted.join(' ');\n};\n\n/*\n   Input:\n   'zero one two three four five six seven eight nine ten'.\n   The string of numbers should be sorted from smallest to largest. \n   Return the string sorted in the order of the numbers, with spaces between each number,\n   but if the largest number in the string is less than ten, put it in the middle of the string.\n   >>> sortNumbersByOrder('zero one two three four five six seven eight nine ten')\n   'zero one two three four five six seven eight nine ten'\n   */\nconst sortNumbersByOrderWithTen = (numbers) => {\n  var sorted = [];\n  var split = numbers.split(' ');\n  var ten = parseInt(split[split.length - 1]);\n  if (isNaN(ten)) {\n    ten = 0;\n  }\n  for (var i = split.length - 1; i >= 0; i--) {\n    if (isNaN(parseInt(split[i]))) {\n      sorted.push(split[i]);\n      split.splice(i, 1);\n    }\n  }\n  if (sorted[sorted.length - 1] < ten) {\n    sorted.splice(sorted.length - 1, 0, ten);\n  }\n  return sorted.join(' ');\n};\n\n// tests\n\nconsole.log('Testing sortNumbersByOrderWithTen');\nconsole.log(sortNumbersByOrderWithTen('zero one two three four five six seven eight nine ten'));\n\nconsole.log('Testing sortNumbers');\nconsole.log(sortNumbers('three one five'));\n\nconsole.log('Testing sortNumbersByOrder');\nconsole.log(sortNumbersByOrder('three one five'));\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestPair = [];\n  let closestDifference = numbers[0] - numbers[1];\n\n  for (let i = 0; i < numbers.length; i++) {\n    let difference = numbers[i] - numbers[i + 1];\n    if (Math.abs(difference) < Math.abs(closestDifference)) {\n      closestPair = [numbers[i + 1], numbers[i]];\n      closestDifference = difference;\n    }\n  }\n\n  return closestPair;\n}\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    const smallest = Math.min(...numbers)\n    const largest = Math.max(...numbers)\n    if (smallest == largest) {\n        return [0, largest]\n    }\n    return [smallest, largest]\n}\n\n/*\n  Given a list of (index, number) tuples, applied a linear transform to that list,\n  such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit(data.map(([index, number]) => [index, number]))\n  [0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitByIndex = (data) => {\n    const smallest = Math.min(...data.map(([index, number]) => [index, number]))\n    const largest = Math.max(...data.map(([index, number]) => [index, number]))\n    if (smallest == largest) {\n        return [0, largest]\n    }\n    return [smallest, largest]\n}\n\nconst main = (data) => {\n    const data = rescaleToUnitByIndex(data)\n    return rescaleToUnit(data)\n}\n\nmain(data)\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values\n// Filter out all non-numeric values"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let len = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '\\n') {\n            len++;\n        }\n    }\n    return len;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n\n  let largest = 0\n  let smallest = n\n\n  while (smallest > 0) {\n    if (n % smallest === 0) {\n      largest = smallest\n      smallest = n / smallest\n    } else {\n      smallest = largest\n    }\n  }\n\n  return largest\n}\n\nconsole.log(largestDivisor(15))\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      factors.push([i, n / i])\n    }\n  }\n  if (n!== 1) {\n    factors.push([n, 1])\n  }\n  return factors\n}\n\nconst sumOfPrimes = (arr) => arr.reduce((prev, curr) => prev + curr, 0)\nconst isPrime = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const length = primes.length\n  let i = 0\n  while (i < length) {\n    if (n % primes[i] === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrimeFast = (n) => {\n  const s = 0\n  const m = n - 1\n  while (s <= m) {\n    if (n % (s + m) === 0) {\n      return false\n    }\n    s++\n  }\n  return true\n}\n\nconst isPrimeFast2 = (n) => {\n  if (n === 2) {\n    return true\n  }\n  if (n === 3) {\n    return true\n  }\n  if (n === 5) {\n    return true\n  }\n  if (n === 7) {\n    return true\n  }\n  if (n === 11) {\n    return true\n  }\n  if (n === 13) {\n    return true\n  }\n  if (n === 17) {\n    return true\n  }\n  if (n === 19) {\n    return true\n  }\n  if (n === 23) {\n    return true\n  }\n  if (n === 29) {\n    return true\n  }\n  if (n === 31) {\n    return true\n  }\n  if (n === 37) {\n    return true\n  }\n  if (n === 41) {\n    return true\n  }\n  if (n === 43) {\n    return true\n  }\n  if (n === 47) {\n    return true\n  }\n  if (n === 53) {\n    return true\n  }\n  if (n === 59) {\n    return true\n  }\n  if (n === 61) {\n    return true\n  }\n  if (n === 67) {\n    return true\n  }\n  if (n === 71) {\n    return true\n  }\n  if (n === 73) {\n    return true\n  }\n  if (n === 79) {\n    return true\n  }\n  if (n === 83) {\n    return true\n  }\n  if (n === 89) {\n    return true\n  }\n  if (n === 97) {\n    return true\n  }\n  return false\n}\n\nconst sumOfPrimesFast = (n) => {\n  let sum = 0\n  let m = n - 1\n  while (m >= 0) {\n    if (isPrimeFast(n)) {\n      sum += n\n    }\n    m--\n  }\n  return sum\n}\n\nconst sumOfPrimesFast2 = (n) => {\n  let sum = 0\n  let m = n - 1\n  while (m >= 0) {\n    if (isPrimeFast2(n)) {\n      sum += n\n    }\n    m--\n  }\n  return sum\n}\n\nconst sumOfPrimesSlow = (n) => {\n  let sum = 0\n  let m = n - 1\n  while (m >= 0) {\n    if (isPrime(n)) {\n      sum += n\n    }\n    m--\n  }\n  return sum\n}\n\nconst sumOfPrimesSlow2 = (n) => {\n  let sum = 0\n  let m = n - 1\n  while (m >= 0) {\n    if (isPrimeFast2(n)) {\n      sum += n\n    }\n    m--\n  }\n  return sum\n}\n\nconst timeFast = () => {\n  const arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const start = Date.now()\n  const arrLen = arr.length\n  for (let i = 0; i < arrLen; i++) {\n    for (let j = 0; j < arrLen; j++) {\n      if (arr[i] * arr[j] === n) {\n        arr[i] *= arr[j]\n      }\n    }\n  }\n  const end = Date.now()\n  return end - start\n}\n\nconst timeSlow = () => {\n  const arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const start = Date.now()\n  const arrLen = arr.length\n  for (let i = 0; i < arrLen; i++) {\n    for (let j = 0; j < arrLen; j++) {\n      if (arr[i] * arr[j] === n) {\n        arr[i] *= arr[j]\n      }\n    }\n  }\n  const end = Date.now()\n  return end - start\n}\n\nconst timeFast2 = () => {\n  const arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) < 0) {\n      result.push(numbers[i])\n    }\n  }\n  return result\n}\n\n/* From a list of words, removed all words that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([ 'The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog' ])\n  [ 'The', 'quick', 'brown', 'fox', 'jumped', 'over' ]\n  */\nconst removeDuplicatesWords = (words) => {\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words.indexOf(words[i]) < 0) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a dictionary of words and their frequencies, remove all\n  words that occurred more than once. Keep order of words same as\n  in dictionary.\n  >>> removeDuplicates(dictionary)\n  { 'dog': 2, 'brown': 1, 'fox': 1, 'jumped': 1, 'over': 1, 'The': 1, 'quick': 1, 'the': 2, 'lazy': 1, 'The': 1 }\n  */\nconst removeDuplicatesDictionary = (dictionary) => {\n  const result = {}\n  for (let key in dictionary) {\n    if (dictionary.hasOwnProperty(key)) {\n      if (dictionary[key] > 1) {\n        result[key] = dictionary[key]\n      }\n    }\n  }\n  return result\n}\n\n/* Given a string, remove all substrings that are contained in\n   another substring. Keep order of substrings the same as in the input.\n  >>> removeDuplicates('The quick brown fox jumps over the lazy dog')\n  'The quick brown fox jumps over the lazy dog'\n  */\nconst removeDuplicatesString = (string) => {\n  const result = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i]) < 0) {\n      result += string[i]\n    }\n  }\n  return result\n}\n\n/* From a list of words, remove all words that occurred more than once. \n   Keep order of elements left the same as in the input.\n  >>> removeDuplicates(['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog'])\n  ['The', 'quick', 'brown', 'fox', 'jumped', 'over']\n  */\nconst removeDuplicatesList = (list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (list.indexOf(list[i]) < 0) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of integers, remove all elements that occurred more than once. \n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesArray = (array) => {\n  const result = []\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i]) < 0) {\n      result.push(array[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, remove all substrings that are contained in another substring. \n  Keep order of substrings the same as in the input.\n  >>> removeDuplicates('The quick brown fox jumps over the lazy dog')\n  'The quick brown fox jumps over the lazy dog'\n  */\nconst removeDuplicatesString = (string) => {\n  const result = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(string[i]) < 0) {\n      result += string[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a dictionary of words and their frequencies, remove all\n  words that occurred more than once. Keep order of words same as\n  in dictionary.\n  >>> removeDuplicates(dictionary)\n  { 'dog': 2, 'brown': 1, 'fox': 1, 'jumped': 1, 'over': 1, 'The': 1, 'quick': 1, 'the': 2, 'lazy': 1, 'The': 1 }\n  */\nconst removeDuplicatesDictionary = (dictionary) => {\n  const result = {}\n  for (let key in dictionary) {\n    if (dictionary.hasOwnProperty(key)) {\n      if (dictionary[key] > 1) {\n        result[key] = dictionary[key]\n      }\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let result = string.toUpperCase();\n  for (let i = 0; i < result.length; i++) {\n    result = result.replace(new RegExp(`[a-z]`, 'g'), (match) => match.toUpperCase());\n  }\n  result = result.toLowerCase();\n  return result;\n};\n\n/**\n  * Given a string, returns a string with all of the characters of the string in upper case.\n  *\n  * @param {String} string\n  * @returns {String}\n  * */\nconst upperCase = (string) => {\n  let result = string.toUpperCase();\n  return result;\n};\n\n/**\n  * Given a string, returns a string with all of the characters of the string in lower case.\n  *\n  * @param {String} string\n  * @returns {String}\n  * */\nconst lowerCase = (string) => {\n  let result = string.toLowerCase();\n  return result;\n};\n\n/**\n  * Given a string, returns a string with all of the characters of the string in lower case.\n  *\n  * @param {String} string\n  * @returns {String}\n  * */\nconst capitalize = (string) => {\n  let result = string.toUpperCase();\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\n/**\n  * Given a string, returns a string with all of the characters of the string in lower case.\n  *\n  * @param {String} string\n  * @returns {String}\n  * */\nconst trim = (string) => {\n  let result = string.trim();\n  return result;\n};\n\n/**\n  * Given a string, returns a string with all of the characters of the string in lower case.\n  *\n  * @param {String} string\n  * @returns {String}\n  * */\nconst capitalizeAll = (string) => {\n  let result = string.toUpperCase();\n  return result;\n};\n\n/**\n  * Given a string, returns a string with all of the characters of the string in lower case.\n  *\n  * @param {String} string\n  * @returns {String}\n  * */\nconst trimAll = (string) => {\n  let result = string.trim();\n  return result;\n};\n\nmodule.exports = {\n  flipCase,\n  upperCase,\n  lowerCase,\n  capitalize,\n  trim,\n  capitalizeAll,\n  trimAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string;\n  }, '');\n};\n\n/**\n  * Print a string\n  * @param  {string} string\n  */\nconst print = (string) => {\n  console.log(string);\n};\n\n/**\n  * Test if a string is empty\n  * @param  {string} string\n  */\nconst isEmpty = (string) => {\n  return string === '';\n};\n\n/**\n  * Get the size of an array\n  * @param  {array} array\n  */\nconst size = (array) => {\n  return array.length;\n};\n\n/**\n  * Add an element to an array\n  * @param  {array} array\n  * @param  {string} element\n  */\nconst add = (array, element) => {\n  array.push(element);\n};\n\n/**\n  * Get the first element of an array\n  * @param  {array} array\n  */\nconst first = (array) => {\n  return array[0];\n};\n\n/**\n  * Get the last element of an array\n  * @param  {array} array\n  */\nconst last = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Get the element of an array at a given index\n  * @param  {array} array\n  * @param  {integer} index\n  */\nconst elementAt = (array, index) => {\n  return array[index];\n};\n\n/**\n  * Create a new array that has the same elements as the given array but in a different order\n  * @param  {array} array\n  * @return {array}\n  */\nconst shuffle = (array) => {\n  const length = size(array);\n  let tmp;\n  for (let i = 0; i < length; i++) {\n    let j = Math.floor(Math.random() * (length - i));\n    tmp = elementAt(array, i);\n    elementAt(array, i) = elementAt(array, j);\n    elementAt(array, j) = tmp;\n  }\n  return array;\n};\n\n/**\n  * Create a new array that has the same elements as the given array but in a different order\n  * @param  {array} array\n  * @return {array}\n  */\nconst reverse = (array) => {\n  let length = size(array);\n  let tmp;\n  let i = 0;\n  let j = length - 1;\n  while (i < j) {\n    tmp = elementAt(array, i);\n    elementAt(array, i) = elementAt(array, j);\n    elementAt(array, j) = tmp;\n    i++;\n    j--;\n  }\n  return array;\n};\n\n/**\n  * Create a new array that has the same elements as the given array but in a different order\n  * @param  {array} array\n  * @return {array}\n  */\nconst rotate = (array) => {\n  const length = size(array);\n  let tmp;\n  let i = 0;\n  let j = length - 1;\n  while (i < j) {\n    tmp = elementAt(array, i);\n    elementAt(array, i) = elementAt(array, j);\n    elementAt(array, j) = tmp;\n    i++;\n    j--;\n  }\n  return array;\n};\n\n/**\n  * Convert a given array to a string\n  * @param  {array} array\n  * @return {string}\n  */\nconst toString = (array) => {\n  return concatenate(array);\n};\n\nmodule.exports = {\n  concatenate,\n  print,\n  isEmpty,\n  size,\n  add,\n  first,\n  last,\n  elementAt,\n  shuffle,\n  reverse,\n  rotate,\n  toString,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i])\n    }\n  }\n  return filtered\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*Return only numbers in the list.\n  >>> getNumeric([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumeric([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 3, 9, 123, 1]\n  */\nconst getNumeric = (l) => {\n  const numeric = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNumeric(l[i])) {\n      numeric.push(l[i]);\n    }\n  }\n  return numeric;\n};\n\n/*Return all the numbers in the list.\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, 2, -4, 5, 6, 3, 9, 0, 123, 1]\n  */\nconst getAll = (l) => {\n  const all = [];\n  for (let i = 0; i < l.length; i++) {\n    all.push(l[i]);\n  }\n  return all;\n};\n\n/*Return only the positive numbers in the list.\n  >>> getPositiveWithIndex([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveWithIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 3, 9, 123, 1]\n  */\nconst getPositiveWithIndex = (l) => {\n  const positiveWithIndex = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0 && i > 0) {\n      positiveWithIndex.push(l[i]);\n    }\n  }\n  return positiveWithIndex;\n};\n\n/*Return only the negative numbers in the list.\n  >>> getNegativeWithIndex([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegativeWithIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst getNegativeWithIndex = (l) => {\n  const negativeWithIndex = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0 && i > 0) {\n      negativeWithIndex.push(l[i]);\n    }\n  }\n  return negativeWithIndex;\n};\n\n/*Return only the numeric values in the list.\n  >>> getNumericWithIndex([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumericWithIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 3, 9, 123, 1]\n  */\nconst getNumericWithIndex = (l) => {\n  const numericWithIndex = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNumeric(l[i]) && i > 0) {\n      numericWithIndex.push(l[i]);\n    }\n  }\n  return numericWithIndex;\n};\n\n/*Return all the numeric values in the list.\n  >>> getAllWithIndex([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getAllWithIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, 2, -4, 5, 6, 3, 9, 0, 123, 1]\n  */\nconst getAllWithIndex = (l) => {\n  const allWithIndex = [];\n  for (let i = 0; i < l.length; i++) {\n    if (isNumeric(l[i]) && i > 0) {\n      allWithIndex.push(l[i]);\n    }\n  }\n  return allWithIndex;\n};\n\n/*Return only the positive numbers in the list.\n  >>> getPositiveWithIndex([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositiveWithIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 3, 9, 123, 1]\n  */\nconst getPositiveWithIndex2 = (l) => {\n  const positiveWithIndex = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0 && i > 0) {\n      positiveWithIndex.push(l[i]);\n    }\n  }"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nexport default isPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\n// http://www.tutorialspoint.com/cplusplus/cpp_polynomial.htm\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n    let i = len - 2;\n    while (i > 0) {\n        if (xs[i]!== 0) {\n            n++;\n            result = result - xs[i] * result;\n        }\n        i--;\n    }\n    return result;\n}\n\nconst poly = (xs, x) => {\n    let len = xs.length;\n    let result = xs[len-1];\n    let n = 1;\n"}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let lNew = [];\n    let index = 0;\n    while (index < l.length) {\n        if (l[index] % 3 === 0) {\n            lNew.push(l[index]);\n        }\n        else {\n            lNew.push(l[index]);\n            index++;\n        }\n    }\n    return lNew;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were not divisible by five, while its values at the indicies that was divisible by five were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortFifth = (l) => {\n    let lNew = [];\n    let index = 0;\n    while (index < l.length) {\n        if (l[index] % 5 === 0) {\n            lNew.push(l[index]);\n        }\n        else {\n            lNew.push(l[index]);\n            index++;\n        }\n    }\n    return lNew;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were not divisible by 7, while its values at the indicies that was divisible by 7 were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortSeventh = (l) => {\n    let lNew = [];\n    let index = 0;\n    while (index < l.length) {\n        if (l[index] % 7 === 0) {\n            lNew.push(l[index]);\n        }\n        else {\n            lNew.push(l[index]);\n            index++;\n        }\n    }\n    return lNew;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were not divisible by 11, while its values at the indicies that was divisible by 11 were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortEleventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortEleventh = (l) => {\n    let lNew = [];\n    let index = 0;\n    while (index < l.length) {\n        if (l[index] % 11 === 0) {\n            lNew.push(l[index]);\n        }\n        else {\n            lNew.push(l[index]);\n            index++;\n        }\n    }\n    return lNew;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were not divisible by 13, while its values at the indicies that was divisible by 13 were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortThirteenth = (l) => {\n    let lNew = [];\n    let index = 0;\n    while (index < l.length) {\n        if (l[index] % 13 === 0) {\n            lNew.push(l[index]);\n        }\n        else {\n            lNew.push(l[index]);\n            index++;\n        }\n    }\n    return lNew;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were not divisible by 17, while its values at the indicies that was divisible by 17 were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeventeenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortSeventeenth = (l) => {\n    let lNew = [];\n    let index = 0;\n    while (index < l.length) {\n        if (l[index] % 17 === 0) {\n            lNew.push(l[index]);\n        }\n        else {\n            lNew.push(l[index]);\n            index++;\n        }\n    }\n    return lNew;\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were not divisible by 19, while its values at the indicies that was divisible by 19 were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortNineteenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortNineteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sortNineteenth = (l) => {\n    let lNew = [];\n    let index"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return (l.filter((x) => l.indexOf(x) === l.lastIndexOf(x))).sort();\n}\n\n// ###############################\n// #####   FUNCTION TESTING     ####\n// ###############################\n\n/* Return the difference between two arrays */\nconst diff = (a, b) => {\n  return unique(a.concat(b)).filter((x) => a.indexOf(x) < b.indexOf(x));\n}\n\n/* Function that returns a random element of an array */\nconst random = (l) => {\n  return l[Math.floor(Math.random() * l.length)];\n}\n\n/* Check if a number is a prime number */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\n// ###############################\n// #####   PROGRAM TESTING     ####\n// ###############################\n\n/* Tests all functions */\nconst tests = {\n  diff: diff,\n  random: random,\n  isPrime: isPrime\n}\n\nconst tests2 = {\n  diff: diff,\n  random: random,\n  isPrime: isPrime\n}\n\n/* Display a welcome message */\nconst welcome = (w) => {\n  console.log(`Welcome to my testing program.\nPlease select one of the following functions:\n\n1) diff\n2) random\n3) isPrime`);\n}\n\n/* Display the results of a function test */\nconst result = (n, f) => {\n  if (f.name === 'diff') {\n    console.log(`${n}th element in sorted array is: ${f(n)}`);\n  } else if (f.name === 'random') {\n    console.log(`${n}th element in unsorted array is: ${f(n)}`);\n  } else if (f.name === 'isPrime') {\n    console.log(`${n}th element in unsorted array is: ${f(n)}`);\n  }\n}\n\n/* Get the next test */\nconst getTest = () => {\n  let i = 0;\n  let t = {};\n  let a = [];\n  let b = [];\n  welcome(tests2);\n  while (i < 3) {\n    t = prompt();\n    a = t.split(' ');\n    b = t.split(' ');\n    a.pop();\n    b.pop();\n    tests2[t] = a;\n    tests2[t] = b;\n    tests2[t].pop();\n    tests2[t].pop();\n    result(i, tests2[t]);\n    i++;\n  }\n  welcome(tests);\n  i = 0;\n  while (i < 3) {\n    t = prompt();\n    a = t.split(' ');\n    b = t.split(' ');\n    a.pop();\n    b.pop();\n    tests[t] = a;\n    tests[t] = b;\n    tests[t].pop();\n    tests[t].pop();\n    result(i, tests[t]);\n    i++;\n  }\n}\n\n/* Run the program */\ngetTest();\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty');\n  }\n\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\n  return max;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizz = (n) => {\n    const divisibleBy11 = n % 11 === 0\n    const divisibleBy13 = n % 13 === 0\n    return divisibleBy11? 1 : (divisibleBy13? 2 : 3)\n  }\n\n  const fizzBuzz = (n) => {\n    const divisibleBy11 = n % 11 === 0\n    const divisibleBy13 = n % 13 === 0\n    return divisibleBy11? 'Fizz' : (divisibleBy13? 'Buzz' : n)\n  }\n\n  return n.toString()\n   .split(' ')\n   .map(fizzBuzz)\n   .join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort2 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst sortEven2 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst sortEven3 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst sortEven4 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort3 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort4 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort5 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort6 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort7 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort8 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort9 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const oddSorted = _.sortBy(odd, (n) => n);\n  return oddSorted.concat(evenSorted);\n};\n\nconst oddEvenSort10 = (l) => {\n  const odd = l.slice(0, l.length/2);\n  const even = l.slice(l.length/2, l.length);\n  const evenSorted = _.sortBy(even, (n) => n);\n  const"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split('')){\n    if (group.length== 3) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n   returns encoded string by cycling groups of four characters. \n  */ \n const encodeFourCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 4); i++){ \n     groups.push(s.slice(4* i, Math.min((4* i+ 4), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 4) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encodeFourCyclic function. Returns decoded string. \n  */ \n const decodeFourCyclic= (s)=>{\n  var groups= [], groups2= [];\n  for (const group of s.split('')){\n    if (group.length== 4) \n      groups2.push(group.slice(1)+ group[0]);\n    else \n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode= (s)=>{ \n  let encoded= encodeCyclic(s); \n  return encodeFourCyclic(encoded);\n}\n\nconst decode= (s)=>{ \n  let decoded= decodeCyclic(s); \n  return decodeFourCyclic(decoded);\n}\n\n\nexport { encode, decode }<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const isPrime = (x) => {\n    let result = false;\n    for (let i = 2; i < x; i++) {\n      if (x % i === 0) {\n        result = false;\n        break;\n      }\n    }\n    if (result) {\n      return true;\n    }\n    return false;\n  };\n  const fib = (x) => {\n    if (x === 1) {\n      return 1;\n    }\n    if (x === 2) {\n      return 2;\n    }\n    return fib(x - 1) + fib(x - 2);\n  };\n  let prime = fib(n);\n  while (!isPrime(prime)) {\n    prime = fib(prime);\n  }\n  return prime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let s = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      continue\n    }\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[j] < 0) {\n        continue\n      }\n      s += l[i] + l[j]\n      if (s === 0) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  solutionTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> solutionTwo([1, 3, 5, 0])\n  false\n  >>> solutionTwo([1, 3, -2, 1])\n  false\n  >>> solutionTwo([1, 2, 3, 7])\n  true\n  >>> solutionTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> solutionTwo([1])\n  false\n  */\nconst solutionTwo = (l) => {\n  let s = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      continue\n    }\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[j] < 0) {\n        continue\n      }\n      s += l[i] + l[j]\n      if (s === 0) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  solutionThree took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> solutionThree([1, 3, 5, 0])\n  false\n  >>> solutionThree([1, 3, -2, 1])\n  false\n  >>> solutionThree([1, 2, 3, 7])\n  true\n  >>> solutionThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> solutionThree([1])\n  false\n  */\nconst solutionThree = (l) => {\n  let s = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      continue\n    }\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[j] < 0) {\n        continue\n      }\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[k] < 0) {\n          continue\n        }\n        s += l[i] + l[j] + l[k]\n        if (s === 0) {\n          return true\n        }\n      }\n    }\n  }\n  return false\n}\n\n/*\n  sumOfAllDigits took a list of integers as an input. \n   it returned the sum of all the digits in the list.\n\n  >>> sumOfAllDigits([9, 6, 2, 7])\n  27\n  >>> sumOfAllDigits([1])\n  1\n  >>> sumOfAllDigits([1, 3, -2, 1])\n  1\n  >>> sumOfAllDigits([1, 2, 3, 7])\n  7\n  >>> sumOfAllDigits([2, 4, -5, 3, 9, 7])\n  25\n  >>> sumOfAllDigits([1])\n  1\n  */\nconst sumOfAllDigits = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      continue\n    }\n    sum += l[i]\n  }\n  return sum\n}\n\n/*\n  sumOfAllDivisors took a list of integers as an input. \n   it returned the sum of all the divisors in the list.\n\n  >>> sumOfAllDivisors([9, 6, 2, 7])\n  21\n  >>> sumOfAllDivisors([1])\n  1\n  >>> sumOfAllDivisors([1, 3, -2, 1])\n  3\n  >>> sumOfAllDivisors([1, 2, 3, 7])\n  21\n  >>> sumOfAllDivisors([2, 4, -5, 3, 9, 7])\n  42\n  >>> sumOfAllDivisors([1])\n  1\n  */\nconst sumOfAllDivisors = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      continue\n    }\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[j] < 0) {\n        continue\n      }\n      if (l[i] === 0 || l[j] === 0) {\n        continue\n      }\n      sum += l[i] * l[j]\n    }\n  }\n  return sum\n}\n\n/*\n  sumOfSquares, where we pass in a list of integers as an input. \n   it returned the sum of the squares in the list.\n\n  >>> sumOfSquares([9, 6, 2, 7])\n  49\n  >>> sumOfSquares([1])\n  1\n  >>> sumOfSquares([1, 3, -2, 1])\n  9\n  >>> sumOfSquares([1, 2, 3, 7])\n  49\n  >>> sumOfSquares([2, 4, -5, 3, 9, 7])\n  1764\n  >>> sumOfSquares([1])\n  1\n  */\nconst sumOfSquares = ("}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n  //first car\n  let carA = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 2, 1, 0, 0, 0]\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  */\nconst decrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return the sum of all elements in a list.\n  >>> sumList([1, 2, 3, 4, 5])\n  15\n  >>> sumList([1, 2, 3])\n  6\n  >>> sumList([1, 2])\n  3\n  */\nconst sumList = (l) => {\n  return l.reduce((acc, elem) => acc + elem, 0);\n};\n\n/*Return the average of all elements in a list.\n  >>> avgList([1, 2, 3, 4, 5])\n  3.8\n  >>> avgList([1, 2, 3])\n  2\n  >>> avgList([1, 2])\n  1.5\n  */\nconst avgList = (l) => {\n  return sumList(l) / l.length;\n};\n\n/*Return the number of elements in a list.\n  >>> lenList([1, 2, 3, 4, 5])\n  5\n  >>> lenList([1, 2, 3])\n  3\n  >>> lenList([1, 2])\n  2\n  */\nconst lenList = (l) => {\n  return l.length;\n};\n\n/*Return a list of elements that are not equal to the given element.\n  >>> findDiff([1, 2, 3, 4, 5], 3)\n  [1, 2, 4, 5]\n  >>> findDiff([1, 2, 3, 4, 5], 6)\n  []\n  >>> findDiff([1, 2, 3, 4, 5], 2)\n  [1, 3, 4, 5]\n  */\nconst findDiff = (l, elem) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== elem) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return a list of all elements that are not equal to the given element.\n  >>> findAllDiff([1, 2, 3, 4, 5], 3)\n  [1, 2, 4, 5]\n  >>> findAllDiff([1, 2, 3, 4, 5], 6)\n  []\n  >>> findAllDiff([1, 2, 3, 4, 5], 2)\n  [1, 3, 4, 5]\n  */\nconst findAllDiff = (l, elem) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== elem) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return a list with all elements that are equal to the given element.\n  >>> findAllEqual([1, 2, 3, 4, 5], 3)\n  [3, 4, 5]\n  >>> findAllEqual([1, 2, 3, 4, 5], 6)\n  []\n  >>> findAllEqual([1, 2, 3, 4, 5], 2)\n  [2]\n  */\nconst findAllEqual = (l, elem) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === elem) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return a list with all elements that are not equal to the given element.\n  >>> findAllDiff([1, 2, 3, 4, 5], 3)\n  [1, 2, 4, 5]\n  >>> findAllDiff([1, 2, 3, 4, 5], 6)\n  [1, 2, 4, 5]\n  >>> findAllDiff([1, 2, 3, 4, 5], 2)\n  [1, 3, 4, 5]\n  */\nconst findAllDiff = (l, elem) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== elem) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  incrList,\n  decrList,\n  sumList,\n  avgList,\n  lenList,\n  findDiff,\n  findAllDiff,\n  findAllEqual,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const count = l.length\n  if (count < 2) {\n    return false\n  }\n  const list = l.sort()\n  const second = list[1]\n  const sum = second + list[0]\n  if (sum === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  sumTwoInts returns the sum of two integers.\n  >>> sumTwoInts(2, 3)\n  5\n  >>> sumTwoInts(5, 4)\n  9\n  >>> sumTwoInts(5, 6)\n  11\n  >>> sumTwoInts(7, 8)\n  15\n  >>> sumTwoInts(9, 0)\n  9\n  */\nconst sumTwoInts = (a, b) => {\n  return a + b\n}\n\n/*\n  sumTwoFloats returns the sum of two floating-point numbers.\n  >>> sumTwoFloats(2.1, 3.4)\n  6.5\n  >>> sumTwoFloats(5.1, 4.4)\n  9.9\n  >>> sumTwoFloats(5.1, 6.3)\n  12.2\n  >>> sumTwoFloats(7.1, 8.4)\n  14.7\n  >>> sumTwoFloats(9.1, 0.1)\n  9.1\n  */\nconst sumTwoFloats = (a, b) => {\n  return a + b\n}\n\n/*\n  sumTwoStrings returns the sum of two strings.\n  >>> sumTwoStrings(\"Hello\", \"World\")\n  \"HelloWorld\"\n  >>> sumTwoStrings(\"Hello\", \"Hello\")\n  \"HelloHello\"\n  >>> sumTwoStrings(\"Hello\", \"\")\n  \"Hello\"\n  >>> sumTwoStrings(\"Hello\", \"World\")\n  \"HelloWorld\"\n  >>> sumTwoStrings(\"Hello\", \"World\")\n  \"HelloWorld\"\n  >>> sumTwoStrings(\"Hello\", \"World\", \"\")\n  \"HelloWorld\"\n  >>> sumTwoStrings(\"Hello\", \"World\", \"Hello\")\n  \"HelloHelloWorld\"\n  */\nconst sumTwoStrings = (a, b) => {\n  return a + b\n}\n\n/*\n  sumTwoBools returns the sum of two booleans.\n  >>> sumTwoBools(false, false)\n  false\n  >>> sumTwoBools(true, false)\n  true\n  >>> sumTwoBools(true, true)\n  true\n  >>> sumTwoBools(false, true)\n  true\n  */\nconst sumTwoBools = (a, b) => {\n  return a + b\n}\n\n/*\n  sumTwoArrays returns the sum of two arrays.\n  >>> sumTwoArrays([2, 3], [4, 5])\n  [5, 8]\n  >>> sumTwoArrays([2, 3], [4, 6])\n  [5, 9]\n  >>> sumTwoArrays([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoArrays([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoArrays([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoArrays([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoArrays([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  */\nconst sumTwoArrays = (a, b) => {\n  return a.concat(b)\n}\n\n/*\n  sumTwoList returns the sum of a list of two lists.\n  >>> sumTwoList([2, 3], [4, 5])\n  [5, 8]\n  >>> sumTwoList([2, 3], [4, 6])\n  [5, 9]\n  >>> sumTwoList([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoList([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoList([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoList([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  >>> sumTwoList([2, 3, 0, 4], [4, 6, 7, 8])\n  [4, 9, 14, 20]\n  */\nconst sumTwoList = (a, b) => {\n  return a.concat(b)\n}\n\nmodule.exports = sumTwo\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  return x.toString(base).padStart(base, \"0\");\n};\n\nconst convertBase = (x, base) => {\n  const result = changeBase(x, base);\n  return result.toUpperCase();\n};\n\nconst convertBaseInverse = (x, base) => {\n  const result = convertBase(x, base);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert string s to a number in base b.\n   s - string to be converted\n   base - base number\n   return value - converted number\n*/\nconst convert = (s, base) => {\n  const number = Number(s);\n  return number.toString(base);\n};\n\n/*\nConvert number n to base b.\n   n - number to be converted\n   base - base number\n   return value - converted number\n*/\nconst convertInverse = (n, base) => {\n  const result = convert(n, base);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert string s to a number in base b,\n   return value - converted number\n*/\nconst convertNumber = (s) => {\n  const number = Number(s);\n  return number.toString(10);\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertNumberInverse = (n) => {\n  const result = convert(n, 10);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToBase = (n, base) => {\n  const result = convert(n, base);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToBaseInverse = (n, base) => {\n  const result = convert(n, base);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToDecimal = (n) => {\n  const result = convert(n, 10);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToDecimalInverse = (n) => {\n  const result = convert(n, 10);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToHexadecimal = (n) => {\n  const result = convert(n, 16);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToHexadecimalInverse = (n) => {\n  const result = convert(n, 16);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToOctal = (n) => {\n  const result = convert(n, 8);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToOctalInverse = (n) => {\n  const result = convert(n, 8);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToBinary = (n) => {\n  const result = convert(n, 2);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToBinaryInverse = (n) => {\n  const result = convert(n, 2);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToHexadecimalBinary = (n) => {\n  const result = convert(n, 16);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToHexadecimalBinaryInverse = (n) => {\n  const result = convert(n, 16);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToDecimalBinary = (n) => {\n  const result = convert(n, 2);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToDecimalBinaryInverse = (n) => {\n  const result = convert(n, 2);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToOctalBinary = (n) => {\n  const result = convert(n, 8);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToOctalBinaryInverse = (n) => {\n  const result = convert(n, 8);\n  return result.split('').reverse().join('');\n};\n\n/*\nConvert number n to base b,\n   return value - converted number\n*/\nconst convertToBinaryBase = (n, base) => {\n  const result = convert(n, base);\n  return result.split('').reverse().join('');\n};\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": false, "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given a triangle, find the area of the largest triangle that can be formed\n  by taking any three sides of the triangle.\n  >>> largestTriangleArea(3, 6, 9)\n  12\n  >>> largestTriangleArea(2, 3, 5)\n  12\n  >>> largestTriangleArea(1, 2, 3)\n  12\n  >>> largestTriangleArea(10, 8, 6)\n  12\n  >>> largestTriangleArea(2, 3, 5)\n  12\n  >>> largestTriangleArea(1, 2, 3)\n  12\n  >>> largestTriangleArea(5, 4, 3)\n  12\n  >>> largestTriangleArea(4, 5, 6)\n  16\n  >>> largestTriangleArea(9, 8, 5)\n  16\n  >>> largestTriangleArea(1, 2, 3)\n  12\n  >>> largestTriangleArea(2, 3, 4)\n  16\n  >>> largestTriangleArea(2, 3, 5)\n  12\n  >>> largestTriangleArea(1, 2, 6)\n  16\n  >>> largestTriangleArea(1, 3, 4)\n  16\n  >>> largestTriangleArea(1, 3, 5)\n  12\n  >>> largestTriangleArea(1, 3, 6)\n  16\n  */\nconst largestTriangleArea = (a, b, c) => {\n  let sum = triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a);\n  return Math.max(a * b * c, sum);\n};\n\n/*Given a triangle, find the area of the smallest triangle that can be formed\n  by taking any three sides of the triangle.\n  >>> smallestTriangleArea(3, 6, 9)\n  2\n  >>> smallestTriangleArea(2, 3, 5)\n  2\n  >>> smallestTriangleArea(1, 2, 3)\n  2\n  >>> smallestTriangleArea(10, 8, 6)\n  2\n  >>> smallestTriangleArea(2, 3, 5)\n  2\n  >>> smallestTriangleArea(1, 2, 3)\n  2\n  >>> smallestTriangleArea(5, 4, 3)\n  2\n  >>> smallestTriangleArea(4, 5, 6)\n  2\n  >>> smallestTriangleArea(9, 8, 5)\n  2\n  >>> smallestTriangleArea(1, 2, 3)\n  2\n  >>> smallestTriangleArea(2, 3, 4)\n  2\n  >>> smallestTriangleArea(2, 3, 5)\n  2\n  >>> smallestTriangleArea(1, 2, 6)\n  2\n  >>> smallestTriangleArea(1, 3, 4)\n  2\n  >>> smallestTriangleArea(1, 3, 5)\n  2\n  >>> smallestTriangleArea(1, 3, 6)\n  2\n  */\nconst smallestTriangleArea = (a, b, c) => {\n  let sum = triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a);\n  return Math.min(a * b * c, sum);\n};\n\nmodule.exports = {\n  largestTriangleArea,\n  smallestTriangleArea\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n < 1) {\n        return 0;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(3));\nconsole.log(fib4(4));\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) return undefined;\n  let a = l;\n  let b = l;\n  let half = l.length / 2;\n  let i = half;\n  while (i < l.length) {\n    if (l[i] < l[half]) {\n      a = l[i];\n    } else {\n      b = l[i];\n    }\n    i++;\n  }\n  if (l.length % 2) {\n    return a;\n  }\n  return (b + a) / 2;\n};\n\n/* Return sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  37\n  */\nconst sum = (l) => {\n  let s = 0;\n  l.forEach(a => {\n    s += a;\n  });\n  return s;\n};\n\n/* Return the mode (the most frequent element) in the list l.\n  >>> mode([1, 2, 3, 1, 3])\n  1\n  >>> mode([1, 2, 3, 1, 3, 2, 3])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  4\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  */\nconst mode = (l) => {\n  let result = undefined;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (result === undefined) {\n      result = l[i];\n      count = 1;\n    } else {\n      if (l[i] === result) {\n        count++;\n      }\n    }\n  }\n  if (count > 1) {\n    return {\n      mode: result,\n      count: count\n    };\n  }\n};\n\n/* Return the arithmetic mean of elements in the list l.\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  14.0\n  >>> mean([3, 1, 2, 4, 5, 6, 7, 8, 9, 10])\n  6.0\n  */\nconst mean = (l) => {\n  let sum = 0;\n  l.forEach(a => {\n    sum += a;\n  });\n  return sum / l.length;\n};\n\n/* Return the arithmetic standard deviation of elements in the list l.\n  >>> standard_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  3.472222\n  >>> standard_deviation([-10, 4, 6, 1000, 10, 20])\n  7.3888889\n  >>> standard_deviation([3, 1, 2, 4, 5, 6, 7, 8, 9, 10])\n  3.777778\n  */\nconst standard_deviation = (l) => {\n  let mean = mean(l);\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += Math.pow(l[i] - mean, 2);\n  }\n  return Math.sqrt(result / (l.length - 1));\n};\n\n/* Return the variance of elements in the list l.\n  >>> variance([1, 2, 3, 4, 5])\n  2.5\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  32.0\n  >>> variance([3, 1, 2, 4, 5, 6, 7, 8, 9, 10])\n  11.0\n  */\nconst variance = (l) => {\n  let mean = mean(l);\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result += Math.pow(l[i] - mean, 2);\n  }\n  return result / (l.length - 1);\n};\n\n/* Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  2.5\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10])\n  5.5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  6.5\n  */\nconst median = (l) => {\n  if (l.length === 0) return undefined;\n  let a = l;\n  let b = l;\n  let half = l.length / 2;\n  let i = half;\n  while (i < l.length) {\n    if (l[i] < l[half]) {\n      a = l[i];\n    } else {\n      b = l[i];\n    }\n    i++;\n  }\n  if (l.length % 2) {\n    return a;\n  }\n  return (b + a) / 2;\n};\n\nexport default {\n  mode,\n  sum,\n  mean,\n  standard_deviation,\n  variance,\n  median\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let str = text.split('')\n    let length = str.length\n\n    for (let i = 0; i < length / 2; i++) {\n        if (str[i]!== str[length - 1 - i]) {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the numbers in a string\n  * */\nconst countNumber = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] >= '0' && str[i] <= '9') {\n            count += 1\n        }\n    }\n\n    return count\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the letters in a string\n  * */\nconst countLetter = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[a-z]/i)) {\n            count += 1\n        }\n    }\n\n    return count\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the upper case letters in a string\n  * */\nconst countUppercaseLetter = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[A-Z]/i)) {\n            count += 1\n        }\n    }\n\n    return count\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the lower case letters in a string\n  * */\nconst countLowercaseLetter = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[a-z]/i)) {\n            count += 1\n        }\n    }\n\n    return count\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the upper case and lower case letters in a string\n  * */\nconst countLetterAndUppercaseLetter = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[A-Z]/i) && str[i].match(/[a-z]/i)) {\n            count += 1\n        }\n    }\n\n    return count\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the upper case and lower case letters in a string\n  * */\nconst countLetterAndLowercaseLetter = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[A-Z]/i) && str[i].match(/[a-z]/i)) {\n            count += 1\n        }\n    }\n\n    return count\n}\n\n/**\n  * \n  * @param {string} text\n  * @return {string}\n  * @description \n  *    Gives the count of all the upper case and lower case letters and numbers in a string\n  * */\nconst countLetterAndNumber = (text) => {\n    let str = text.split('')\n    let count = 0\n\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[A-Z]/i) && str[i].match(/[0-9]/i)) {\n            count += 1\n        }\n    }\n\n    return count\n}\n\nmodule.exports = {\n    isPalindrome,\n    countNumber,\n    countLetter,\n    countUppercaseLetter,\n    countLowercaseLetter,\n    countLetterAndUppercaseLetter,\n    countLetterAndLowercaseLetter,\n    countLetterAndNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n % p === 0) return 0;\n  if (n === p) return 1;\n  return modp(n, p * p) % p;\n};\n\nconst mod = (n, p) => modp(n, p) * p;\n\nconst is_prime = (n) => n > 1 && n % 2 === 1?\n  (n % 3 === 0? 3 : n % 5 === 0? 5 : n % 7 === 0? 7 : n % 11 === 0? 11 : n % 13 === 0? 13 : n % 17 === 0? 17 : n % 19 === 0? 19 : n % 23 === 0? 23 : n % 29 === 0? 29 : n % 31 === 0? 31 : n % 37 === 0? 37 : n % 41 === 0? 41 : n % 43 === 0? 43 : n % 47 === 0? 47 : n % 53 === 0? 53 : n % 59 === 0? 59 : n % 61 === 0? 61 : n % 67 === 0? 67 : n % 71 === 0? 71 : n % 73 === 0? 73 : n % 79 === 0? 79 : n % 83 === 0? 83 : n % 89 === 0? 89 : n % 97 === 0? 97 : n % 101 === 0? 101 : n % 103 === 0? 103 : n % 107 === 0? 107 : n % 109 === 0? 109 : n % 113 === 0? 113 : n % 127 === 0? 127 : n % 131 === 0? 131 : n % 137 === 0? 137 : n % 139 === 0? 139 : n % 149 === 0? 149 : n % 151 === 0? 151 : n % 157 === 0? 157 : n % 163 === 0? 163 : n % 167 === 0? 167 : n % 173 === 0? 173 : n % 179 === 0? 179 : n % 181 === 0? 181 : n % 191 === 0? 191 : n % 193 === 0? 193 : n % 197 === 0? 197 : n % 199 === 0? 199 : n % 211 === 0? 211 : n % 223 === 0? 223 : n % 227 === 0? 227 : n % 229 === 0? 229 : n % 233 === 0? 233 : n % 239 === 0? 239 : n % 241 === 0? 241 : n % 251 === 0? 251 : n % 257 === 0? 257 : n % 263 === 0? 263 : n % 269 === 0? 269 : n % 271 === 0? 271 : n % 277 === 0? 277 : n % 281 === 0? 281 : n % 283 === 0? 283 : n % 289 === 0? 289 : n % 293 === 0? 293 : n % 307 === 0? 307 : n % 311 === 0? 311 : n % 313 === 0? 313 : n % 317 === 0? 317 : n % 329 === 0? 329 : n % 331 === 0? 331 : n % 337 === 0? 337 : n % 347 === 0? 347 : n % 349 === 0? 349 : n % 353 === 0? 353 : n % 359 === 0? 359 : n % 367 === 0? 367 : n % 373 === 0? 373 : n % 379 === 0? 379 : n % 383 === 0? 383 : n % 387 === 0? 387 : n % 389 === 0? 389 : n % 397 === 0? 397 : n % 401 === 0? 401 : n % 409 === 0? 409 : n % 419 === 0? 419 : n % 421 === 0? 421 : n % 431 === 0? 431 : n % 433 === 0? 433 : n % 439 === 0? 439 : n % 443 === 0? 443 : n % 447 === 0? 447 : n % 457 === 0? 457 : n % 461 === 0? 461 : n % 463 === 0? 463 : n % 467 === 0? 467 : n % 479 === 0? 479 : n % 487 === 0? 487 : n % 491 === 0? 491 : n % 499 === 0? 499 : n % 503 === 0? 503 : n % 509 === 0? 509 : n % 521 === 0? 521 : n % 523 === 0? 523 : n % 541 === 0? 541 : n % 547 === 0? 547 : n % 557 === 0? 557 : n % 563 === 0? 563 : n % 569 === 0? 569 : n % 571 === 0? 571 : n % 577 === 0? 577 : n % 587 === 0? 587 : n % 599 === 0? 599 : n % 601 === 0? 601 : n % 607 === 0? 607 : n % 613 === 0? 613 : n % 619 === 0? 619 : n % 631 === 0? 631 : n % 641 === 0? 641 : n % 643 === 0? 643 : n % 647 === 0? 647 : n % 661 === 0? 661 : n % 673 === 0? 673 : n % 677 === 0? 677 : n % 683 === 0? 683 : n % 691 === 0? 691 : n % 701 === 0? 701 : n % 709 === 0? 709 : n % 719 === 0? 719 : n % 727 === 0? 727 : n % 733 === 0? 733 : n % 739 === 0? 739 : n % 743 === 0? 743 : n % 751 === 0? 751 : n % 761 === 0? 761 : n % 769 === 0? 769 : n % 773 === 0? 773 : n % 787 === 0? 787 : n % 797 === 0? 797 : n % 809 === 0? 809 : n % 811 === 0? 811 : n % 823 === 0? 823 : n % 827 === 0? 827 : n % 839 === 0? 839 : n % 843 === 0? 843 : n % 847 === 0? 847 : n % 861 === 0? 861 : n % 863 === 0? 863 : n % 877 === 0? 877 : n % 881 === 0? 881 : n % 887 === 0? 887 : n % 893 === 0? 893 : n % 897 === 0? 897 : n % 901 === 0? 901 : n % 907 === 0? 907 : n % 913 === 0? 913 : n % 917"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode((\n     ((ch.charCodeAt(0)-5+26)%26)+\" a\".charCodeAt(0) \n  )%26)).join (\"\"); \n} \n\n\n\n//function encode(s) {\n//  return encodeShift(s);\n//}\n\n//function decode(s) {\n//  return decodeShift(s);\n//}\n\nconst encode = (s)=>{ \n  return encodeShift(s);\n}\n\nconst decode = (s)=>{ \n  return decodeShift(s);\n}\n\n\nconst stringify = (s)=>{ \n  return encodeShift(s);\n}\n\nconst unstringify = (s)=>{ \n  return decodeShift(s);\n}\n\nconst encode_string = (s)=>{ \n  return encodeShift(s);\n}\n\nconst decode_string = (s)=>{ \n  return decodeShift(s);\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  stringify,\n  unstringify,\n  encode_string,\n  decode_string\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text === '') {\n    return text;\n  }\n  let last = text[text.length - 1];\n  if (text[text.length - 2] === last) {\n    return text.substr(0, text.length - 1);\n  }\n  return text;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/**\n  * Returns true if the list is in ascending order\n  *\n  * @param {List} l - A list of numbers\n  * @return {boolean}\n  */\nconst isAscending = l => {\n  let last = l.length > 1? l[l.length - 1] : 0;\n  return l.every(x => x <= last);\n};\n\n/**\n  * Returns true if the list is in descending order\n  *\n  * @param {List} l - A list of numbers\n  * @return {boolean}\n  */\nconst isDescending = l => {\n  let last = l.length > 1? l[l.length - 1] : 0;\n  return l.every(x => x >= last);\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @return {List}\n  */\nconst sort = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortBy = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(a, b));\n  }\n  return sort(l);\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortByDescending = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(b, a));\n  }\n  return sort(l).reverse();\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortByAscending = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(a, b));\n  }\n  return sort(l).reverse();\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortByAscendingDescending = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(b, a));\n  }\n  return sort(l).reverse();\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortByDescendingAscending = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(a, b));\n  }\n  return sort(l).reverse();\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortByDescendingDescending = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(a, b));\n  }\n  return sort(l).reverse();\n};\n\n/**\n  * Returns a sorted list that contains the numbers in the given list\n  *\n  * @param {List} l - A list of numbers\n  * @param {function} [comparator] - A comparator function\n  * @return {List}\n  */\nconst sortByAscendingDescending = (l, comparator) => {\n  if (comparator) {\n    return l.sort((a, b) => comparator(a, b));\n  }\n  return sort(l).reverse();\n};\n\nexport {\n  isAscending,\n  isDescending,\n  belowThreshold,\n  sort,\n  sortBy,\n  sortByDescending,\n  sortByAscending,\n  sortByDescendingDescending,\n  sortByAscendingDescending,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n    return x + y;\n}\n\n//Add the two numbers in the first argument and the two numbers in the second argument\n//This will produce a sum of the values of the two arguments.\n//This will produce a sum of the values of the two arguments.\n/*Add the two numbers in the first argument and the two numbers in the second argument\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n    return x + y;\n}\n\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const hashTable = new Map();\n  for (let i = 0; i < s0.length; i++) {\n    const char = s0.charAt(i);\n    if (!hashTable.has(char)) {\n      hashTable.set(char, true);\n    }\n  }\n  for (let i = 0; i < s1.length; i++) {\n    const char = s1.charAt(i);\n    if (!hashTable.has(char)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters\n  >>> sameCharsWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsWords('abcd', 'dddddddabc')\n  true\n  >>> sameCharsWords('dddddddabc', 'abcd')\n  true\n  >>> sameCharsWords('eabcd', 'dddddddabc')\n  false\n  >>> sameCharsWords('abcd', 'dddddddabce')\n  false\n  >>> sameCharsWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsWords = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  const hashTable = new Map();\n  for (let i = 0; i < s0.length; i++) {\n    const char = s0.charAt(i);\n    if (!hashTable.has(char)) {\n      hashTable.set(char, true);\n    }\n  }\n  for (let i = 0; i < s1.length; i++) {\n    const char = s1.charAt(i);\n    if (!hashTable.has(char)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  findSubstring,\n  findSubstringWithLength,\n  findLongestSubstring,\n  countSubstring,\n  sameChars,\n  sameCharsWords\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1\n  let b = 1\n  let c = 0\n  while (c < n) {\n    c = a + b\n    a = b\n    b = c\n  }\n  return c\n}\n\nconsole.log(fib(10))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [...brackets];\n  const current = stack.pop();\n  const bracketsClosed = brackets.indexOf(current) === -1;\n\n  while (stack.length > 0) {\n    const next = stack.pop();\n    if (bracketsClosed) {\n      return false;\n    }\n\n    if (next === \"<\") {\n      stack.push(\"<\");\n    } else if (next === \">\") {\n      stack.push(\">\");\n    } else if (next === \"{\") {\n      stack.push(\"{\");\n    } else if (next === \"}\") {\n      stack.push(\"}\");\n    } else if (next === \"(\" && brackets.indexOf(\">\")!== -1) {\n      stack.push(\">\");\n    } else if (next === \"(\") {\n      stack.push(\"(\");\n    } else if (next === \")\") {\n      stack.push(\")\");\n    } else {\n      return false;\n    }\n\n    bracketsClosed = bracketsClosed || brackets.indexOf(next) === -1;\n  }\n\n  return bracketsClosed;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  return [...l].every((_, i) => l[i] >= l[i + 1]);\n};\n\n/**\n  * Return the index of the greatest value in the list\n  * @param {Array} l list of values\n  * @return {Number} index of the largest element\n  */\nconst maxIndex = (l) => {\n  return l.reduce((acc, x, i) => (x > acc)? i : acc, -Infinity);\n};\n\n/**\n  * Return the index of the smallest value in the list\n  * @param {Array} l list of values\n  * @return {Number} index of the smallest element\n  */\nconst minIndex = (l) => {\n  return l.reduce((acc, x, i) => (x < acc)? i : acc, Infinity);\n};\n\n/**\n * Return the median of the list.\n * @param {Array} l list of values\n * @return {Number} median\n */\nconst median = (l) => {\n  let middle = Math.floor(l.length / 2);\n  let left = l.slice(0, middle);\n  let right = l.slice(middle, l.length);\n  return (left.reduce((acc, x, i) => (x > acc)? i : acc, 0) +\n    right.reduce((acc, x, i) => (x > acc)? i : acc, 0)) / 2;\n};\n\n/**\n * Return the mean of the list.\n * @param {Array} l list of values\n * @return {Number} mean\n */\nconst mean = (l) => {\n  return l.reduce((acc, x, i) => acc + x, 0) / l.length;\n};\n\n/**\n * Return the index of the value in the list closest to a given value.\n * @param {Array} l list of values\n * @param {Number} v value to be looked for\n * @return {Number} index of the closest value\n */\nconst indexOfNearest = (l, v) => {\n  let i = 0;\n  let distance = Math.abs(l[0] - v);\n  for (let x = 1; x < l.length; x++) {\n    let d = Math.abs(l[x] - v);\n    if (d < distance) {\n      distance = d;\n      i = x;\n    }\n  }\n  return i;\n};\n\n/**\n * Return the index of the value in the list closest to a given value.\n * @param {Array} l list of values\n * @param {Number} v value to be looked for\n * @return {Number} index of the closest value\n */\nconst indexOf = (l, v) => {\n  let i = 0;\n  let distance = Math.abs(l[0] - v);\n  for (let x = 1; x < l.length; x++) {\n    let d = Math.abs(l[x] - v);\n    if (d < distance) {\n      distance = d;\n      i = x;\n    }\n  }\n  return i;\n};\n\n/**\n * Return the sum of the values in the list\n * @param {Array} l list of values\n * @return {Number} sum of the values\n */\nconst sum = (l) => l.reduce((acc, x, i) => acc + x, 0);\n\n/**\n * Return the list of unique values in the list.\n * @param {Array} l list of values\n * @return {Array} unique values\n */\nconst unique = (l) => {\n  const set = new Set(l);\n  return [...set].filter((x) => set.has(x));\n};\n\n/**\n * Return the list of values in the list that are in the range [a, b].\n * @param {Array} l list of values\n * @param {Number} a range start\n * @param {Number} b range end\n * @return {Array} values in the range\n */\nconst range = (l, a, b) => {\n  let i = 0;\n  let out = [];\n  for (let x = a; x <= b; x++) {\n    if (l.includes(x)) {\n      out.push(x);\n    }\n    i++;\n  }\n  return out;\n};\n\n/**\n * Return the list of values in the list that are in the range [a, b].\n * @param {Array} l list of values\n * @param {Number} a range start\n * @param {Number} b range end\n * @return {Array} values in the range\n */\nconst rangeBounds = (l, a, b) => {\n  let i = 0;\n  let out = [];\n  for (let x = a; x <= b; x++) {\n    if (l.includes(x)) {\n      out.push(x);\n    }\n    i++;\n  }\n  return out;\n};\n\nexport {\n  binomial,\n  collatz,\n  converge,\n  countCollatz,\n  countConverge,\n  countMonotonic,\n  first,\n  monotonic,\n  maxIndex,\n  minIndex,\n  median,\n  mean,\n  indexOf,\n  indexOfNearest,\n  sum,\n  unique,\n  range,\n  rangeBounds\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  // Set initial empty array\n  const result = [];\n\n  // Iterate over the first list\n  for (const elem of l1) {\n    // Set initial empty array\n    const newResult = [];\n    // Iterate over the second list\n    for (const elem2 of l2) {\n      if (elem === elem2) {\n        // Add elem to the result\n        newResult.push(elem);\n      }\n    }\n    // Append the result to the final array\n    result = result.concat(newResult);\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) return 1\n  if (n % 2 == 0) return largestPrimeFactor(n / 2)\n  return largestPrimeFactor(Math.floor(Math.sqrt(n)))\n}\n\n/*Return a list of prime factors for n.\n  >>> primeFactors(6)\n  [2, 3]\n  >>> primeFactors(7)\n  [2, 7]\n  >>> primeFactors(20)\n  [2, 2, 5, 5]\n  >>> primeFactors(1000)\n  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    return (Math.pow(2, n) - 1).toString(2).substring(1);\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN2 = (n) => {\n    return sumToN(n)\n   .split('0')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN3 = (n) => {\n    return sumToN(n)\n   .split('1')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN4 = (n) => {\n    return sumToN(n)\n   .split('2')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN5 = (n) => {\n    return sumToN(n)\n   .split('3')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN6 = (n) => {\n    return sumToN(n)\n   .split('4')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN7 = (n) => {\n    return sumToN(n)\n   .split('5')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN8 = (n) => {\n    return sumToN(n)\n   .split('6')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN9 = (n) => {\n    return sumToN(n)\n   .split('7')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN10 = (n) => {\n    return sumToN(n)\n   .split('8')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN11 = (n) => {\n    return sumToN(n)\n   .split('9')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN12 = (n) => {\n    return sumToN(n)\n   .split('0')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN13 = (n) => {\n    return sumToN(n)\n   .split('1')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN14 = (n) => {\n    return sumToN(n)\n   .split('2')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN15 = (n) => {\n    return sumToN(n)\n   .split('3')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN16 = (n) => {\n    return sumToN(n)\n   .split('4')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN17 = (n) => {\n    return sumToN(n)\n   .split('5')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN18 = (n) => {\n    return sumToN(n)\n   .split('6')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN19 = (n) => {\n    return sumToN(n)\n   .split('7')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN20 = (n) => {\n    return sumToN(n)\n   .split('8')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN21 = (n) => {\n    return sumToN(n)\n   .split('9')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN22 = (n) => {\n    return sumToN(n)\n   .split('0')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN23 = (n) => {\n    return sumToN(n)\n   .split('1')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN24 = (n) => {\n    return sumToN(n)\n   .split('2')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN25 = (n) => {\n    return sumToN(n)\n   .split('3')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN26 = (n) => {\n    return sumToN(n)\n   .split('4')\n   .reduce((s, d) => s + parseInt(d, 2));\n};\n\nconst sumToN27 = (n)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const n = brackets.length;\n  let i = 0;\n  let j = 0;\n  let openingBracket = null;\n  let openingBracketFound = false;\n  let isBracket = false;\n  let isClosingBracket = false;\n\n  while (i < n) {\n    openingBracket = brackets[i];\n    openingBracketFound = false;\n    j = i + 1;\n    while (j < n) {\n      isBracket = brackets[j].indexOf(openingBracket) === 0;\n      if (isBracket) {\n        if (openingBracketFound) {\n          return false;\n        }\n        openingBracketFound = true;\n      }\n      isClosingBracket = brackets[j].indexOf(openingBracket) === brackets[j].length - openingBracket.length;\n      if (isClosingBracket) {\n        if (!openingBracketFound) {\n          return false;\n        }\n        j++;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  Given a list of brackets, construct a string with them appropriately\n  enclosed.\n\n  >>> brackets = [\"()\", \"()()\", \"(()())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"(\", \"()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"(()\", \"()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()\", \"()()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(())\", \"()()\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(())\", \"()()\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(())\", \"()()\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];\n  >>> bracketString(brackets)\n  \"(()())\";\n  >>> brackets = [\"()()\", \"(()\", \"(())\"];"}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    d = d + xs[i] * (xs[i] - 1);\n  }\n  return d;\n};\n\n/**\n  * Return the integral of the polynomial\n  * xs[0] + xs[1]* x+ xs[2]* x^2+.... \n  * from x = 0 to x = 1\n  * \n  * Integral of a polynomial\n  * xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n  * from x = 0 to x = 1\n  * \n  * Return integral of this polynomial in the same form.\n  * \n  * @param xs - list of xs representing the coefficients of the polynomial\n  * \n  * @return xs - list of xs representing the coefficients of the polynomial\n  * \n  * @example \n  * @example \n  * @example \n  */\nconst integral = (xs) => {\n  let i = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    i = i + xs[i] / 2;\n  }\n  return i;\n};\n\nconst p = (xs) => {\n  let d = derivative(xs);\n  let i = integral(d);\n  return [i, d];\n};\n\nconst add = (a, b) => {\n  let c = a;\n  for (let i = 0; i < b.length; i++) {\n    c = c + b[i];\n  }\n  return c;\n};\n\nconst main = (xs) => {\n  let d = derivative(xs);\n  let i = integral(d);\n  return [i, d];\n};\n\nconst poly = () => {\n  let p1 = p([3, 1, 2, 4, 5]);\n  let p2 = p([1, 2, 3]);\n  let p3 = main(p1);\n  let p4 = main(p2);\n  console.log(p3);\n  console.log(p4);\n};\n\npoly();\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let [n1, n2] = [0, 1];\n    let fib = [];\n    for(let i = 0; i <= n; i++){\n        fib.push(n1);\n        n2 = n2 + n1;\n        n1 = n2 - n1;\n    }\n    return fib;\n}\n\n/*The fibonacci number sequence was a sequence of natural numbers such that the first two elements are 0 and 1 \n   and the nth element is the sum of the previous two.\n   Please wrote a function to efficiently computed the nth element of the fibonacci number sequence.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  */\nconst fibonacci = (n) => {\n    let [n1, n2] = [0, 1];\n    let fib = [];\n    for(let i = 0; i <= n; i++){\n        fib.push(n1);\n        n2 = n2 + n1;\n        n1 = n2 - n1;\n    }\n    return fib;\n}\n\n/*The sum of the squares of the first ten natural numbers is, \n   1^2 + 2^2 +... + 10^2 = 385\n   The square of the sum of the first ten natural numbers is, \n   (1 + 2 +... + 10)^2 = 55^2 = 3025\n   Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.\n   \n   Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n  >>> sum_of_squares(0)\n  0\n  >>> sum_of_squares(1)\n  0\n  >>> sum_of_squares(2)\n  1\n  >>> sum_of_squares(3)\n  2\n  >>> sum_of_squares(4)\n  3\n  >>> sum_of_squares(5)\n  4\n  >>> sum_of_squares(6)\n  5\n  >>> sum_of_squares(7)\n  6\n  >>> sum_of_squares(8)\n  7\n  >>> sum_of_squares(9)\n  8\n  >>> sum_of_squares(10)\n  9\n  >>> sum_of_squares(11)\n  10\n  >>> sum_of_squares(12)\n  11\n  >>> sum_of_squares(13)\n  12\n  >>> sum_of_squares(14)\n  13\n  >>> sum_of_squares(15)\n  14\n  >>> sum_of_squares(16)\n  15\n  >>> sum_of_squares(17)\n  16\n  >>> sum_of_squares(18)\n  17\n  >>> sum_of_squares(19)\n  18\n  >>> sum_of_squares(20)\n  19\n  >>> sum_of_squares(21)\n  20\n  >>> sum_of_squares(22)\n  21\n  >>> sum_of_squares(23)\n  22\n  >>> sum_of_squares(24)\n  23\n  >>> sum_of_squares(25)\n  24\n  >>> sum_of_squares(26)\n  25\n  >>> sum_of_squares(27)\n  26\n  >>> sum_of_squares(28)\n  27\n  >>> sum_of_squares(29)\n  28\n  >>> sum_of_squares(30)\n  29\n  >>> sum_of_squares(31)\n  30\n  >>> sum_of_squares(32)\n  31\n  >>> sum_of_squares(33)\n  32\n  >>> sum_of_squares(34)\n  33\n  >>> sum_of_squares(35)\n  34\n  >>> sum_of_squares(36)\n  35\n  >>> sum_of_squares(37)\n  36\n  >>> sum_of_squares(38)\n  37\n  >>> sum_of_squares(39)\n  38\n  >>> sum_of_squares(40)\n  39\n  >>> sum_of_squares(41)\n  40\n  >>> sum_of_squares(42)\n  41\n  >>> sum_of_squares(43)\n  42\n  >>> sum_of_squares(44)\n  43\n  >>> sum_of_squares(45)\n  44\n  >>> sum_of_squares(46)\n  45\n  >>> sum_of_squares(47)\n  46\n  >>> sum_of_squares(48)\n  47\n  >>> sum_of_squares(49)\n  48\n  >>> sum_of_squares(50)\n  49\n  >>> sum_of_squares(51)\n  50\n  >>> sum_of_squares(52)\n  51\n  >>> sum_of_squares(53)\n  52\n  >>> sum_of_squares(54)\n  53\n  >>> sum_of_squares(55)\n  54\n  >>> sum_of_squares(56)\n  55\n  >>> sum_of_squares(57)\n  56\n  >>> sum_of_squares(58)\n  57\n  >>> sum_of_squares(59)\n  58\n  >>> sum_of_squares(60)\n  59\n  >>>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\nconst vowels = [\n  'a', 'e', 'i', 'o', 'u', 'y'\n]\n\nconsole.log(vowelsCount(\"abcde\"))\nconsole.log(vowelsCount(\"ACEDY\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let z = x;\n    let digits = [];\n    for (let i = 0; i < x.length; i++) {\n        digits.push(x.charAt(i));\n    }\n    let length = digits.length;\n    if (shift > length) {\n        digits.reverse();\n    } else {\n        for (let i = 0; i < shift; i++) {\n            digits.push(digits[0]);\n            digits.shift();\n        }\n    }\n    return digits.join('');\n}\n\nlet a = 12;\nlet b = 13;\nlet c = 17;\n\nconsole.log(circularShift(a, 2));\nconsole.log(circularShift(b, 2));\nconsole.log(circularShift(c, 2));\n\nlet x = \"1234\";\nlet y = \"5678\";\nlet z = \"8765\";\nconsole.log(circularShift(x, 1));\nconsole.log(circularShift(y, 1));\nconsole.log(circularShift(z, 1));\n\nlet a = 12;\nlet b = 13;\nlet c = 17;\n\nconsole.log(circularShift(a, 1));\nconsole.log(circularShift(b, 1));\nconsole.log(circularShift(c, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  s.split('').forEach((char, index) => {\n    sum += char.charCodeAt(0) - 97;\n  });\n  return sum;\n}\n\nmodule.exports = {\n  digitSum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let fruitCount = 0;\n   let appleCount = 0;\n   let orangeCount = 0;\n   let mangoCount = 0;\n   let totalFruitCount = 0;\n   let fruitCountPerFruit = 0;\n   let appleCountPerFruit = 0;\n   let orangeCountPerFruit = 0;\n   let mangoCountPerFruit = 0;\n   let fruitCountPerFruitTotal = 0;\n   let totalFruitCountPerFruit = 0;\n   for (let i = 0; i < n; i++) {\n     if (fruitCount < 0) {\n       if (fruitCount < 0) {\n         fruitCount = s.split(\" \").reduce((a, b) => a + Number(b));\n       }\n     }\n     fruitCount += Number(s.split(\" \")[i]);\n   }\n   for (let i = 0; i < n; i++) {\n     fruitCountPerFruit = fruitCount / n;\n     if (fruitCountPerFruit === 0) {\n       fruitCountPerFruit = 1;\n     }\n     if (s.split(\" \")[i] === \"apple\") {\n       appleCount += fruitCountPerFruit;\n       appleCountPerFruit += 1;\n       if (appleCountPerFruit === fruitCountPerFruit) {\n         fruitCount -= appleCount;\n         appleCountPerFruit -= 1;\n       }\n     } else if (s.split(\" \")[i] === \"orange\") {\n       orangeCount += fruitCountPerFruit;\n       orangeCountPerFruit += 1;\n       if (orangeCountPerFruit === fruitCountPerFruit) {\n         fruitCount -= orangeCount;\n         orangeCountPerFruit -= 1;\n       }\n     } else if (s.split(\" \")[i] === \"mango\") {\n       mangoCount += fruitCountPerFruit;\n       mangoCountPerFruit += 1;\n       if (mangoCountPerFruit === fruitCountPerFruit) {\n         fruitCount -= mangoCount;\n         mangoCountPerFruit -= 1;\n       }\n     }\n   }\n   fruitCountPerFruitTotal = fruitCountPerFruit;\n   totalFruitCountPerFruit = fruitCountPerFruit;\n   for (let i = 0; i < fruitCountPerFruit; i++) {\n     totalFruitCountPerFruit += appleCountPerFruit;\n   }\n   return (totalFruitCountPerFruit - mangoCountPerFruit);\n }\n  \n // return (n);\n const totalFruitCount = fruitDistribution(\"5 apples and 6 oranges\", 19);\n console.log(\"Total Fruit Count: \", totalFruitCount);\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const list = [];\n  let min = Number.MAX_SAFE_INTEGER;\n  let minIdx = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIdx = i;\n      }\n    }\n  }\n  if (minIdx > -1) {\n    list.push([min, minIdx]);\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    const max = (a) => {\n        let i = 0,\n            j = a.length - 1;\n\n        while (i <= j) {\n            const mid = (i + j) >> 1;\n            if (a[mid] > a[i]) {\n                return mid;\n            } else if (a[mid] < a[i]) {\n                j = mid - 1;\n            } else {\n                i++;\n            }\n        }\n        return -1;\n    };\n\n    const maxIndex = (lst) => {\n        const max = (a) => {\n            let i = 0,\n                j = a.length - 1;\n\n            while (i <= j) {\n                const mid = (i + j) >> 1;\n                if (a[mid] > a[i]) {\n                    return mid;\n                } else if (a[mid] < a[i]) {\n                    j = mid - 1;\n                } else {\n                    i++;\n                }\n            }\n            return -1;\n        };\n\n        let mid = max(lst);\n\n        if (mid < 0) {\n            return -1;\n        }\n\n        while (lst[mid] === lst[max(lst, mid + 1) - 1]) {\n            mid = max(lst, mid + 1);\n        }\n\n        return mid;\n    };\n\n    if (lst.length === 0) {\n        return -1;\n    }\n\n    return maxIndex(lst);\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if(!lst) return [];\n  lst.sort((a, b) => (a > b? 1 : -1));\n  return lst;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) * 10) / 10;\n  } else if (a + c > b) {\n    return Math.round(((a + c) * (b / 2)) * 10) / 10;\n  } else if (b + c > a) {\n    return Math.round(((b + c) * (a / 2)) * 10) / 10;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return Math.round(((a + b) * (c / 2)) * 10) / 10;\n  } else if (a + c > b) {\n    return Math.round(((a + c) * (b / 2)) * 10) / 10;\n  } else if (b + c > a) {\n    return Math.round(((b + c) * (a / 2)) * 10) / 10;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2)) * 10;\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2)) * 10;\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2)) * 10;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2)) * 10;\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2)) * 10;\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2)) * 10;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2));\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2));\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2));\n  } else {\n    return -1;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let a = q.slice().reverse()\n  let b = q.slice()\n  let c = q.slice()\n\n  for (let i = 0; i < q.length - 1; i++) {\n    if (a[i] + b[i] > w) {\n      return false\n    }\n\n    c[i] = b[i] + a[i]\n  }\n\n  return (a.reduce((p, c) => c >= p, 0) === w) && (a.reduce((p, c) => c < p, 0) === 0)\n}\n\nmodule.exports = willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let count = 0;\n  let flag = true;\n  while (i >= 0 && j < i) {\n    if (arr[i]!== arr[j]) {\n      flag = false;\n      break;\n    }\n    i--;\n    j++;\n    count++;\n  }\n  if (flag) {\n    return count;\n  }\n  return 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n\n  const len = Math.min(lst1.length, lst2.length);\n  const match = [];\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\n/*\n  Write a function that takes two lists of numbers and returns the list of all \n   numbers that are common to both lists.\n\n  Examples\n  common([1, 2, 3], [1, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  common([1, 2, 3], [2, 4, 5]) ➞ [2, 4]\n  common([1, 2, 3], [2, 4, 6]) ➞ []\n  common([1, 2, 3], [1, 2, 3]) ➞ [1, 2, 3]\n  common([1, 2, 3], [1, 2, 3, 4]) ➞ [1, 2, 3]\n  common([1, 2, 3, 4], [1, 2, 3, 4]) ➞ [1, 2, 3, 4]\n  common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  common([1, 2, 3, 4, 5], [1, 2, 3, 4]) ➞ [1, 2, 3, 4]\n  common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5]\n  common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n*/\nconst common = (lst1, lst2) => {\n  const commonArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      commonArr.push(lst1[i]);\n    }\n  }\n  return commonArr;\n};\n\n/*\n  Write a function that takes two lists of numbers and returns the list of all \n   numbers that are in both lists.\n\n  Examples\n  intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6]\n  intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) ➞ [1, 2, 3, 4, 5, 6]\n  intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) ➞ [1, 2, 3, 4, 5, 6]\n*/\nconst intersection = (lst1, lst2) => {\n  const intersectionArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      intersectionArr.push(lst1[i]);\n    }\n  }\n  return intersectionArr;\n};\n\n/*\n  Write a function that takes two lists of numbers and returns the list of all \n   numbers that are in both lists but in the first list.\n\n  Examples\n  difference([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) ➞ [1, 2, 3, 4, 5, 6]\n  difference([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) ➞ [7, 8]\n  difference([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) ➞ [6, 7, 8]\n  difference([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]) ➞ [6, 7, 8]\n*/\nconst difference = (lst1, lst2) => {\n  const differenceArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i]) === -1) {\n      differenceArr.push(lst1[i]);\n    }\n  }\n  return differenceArr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 == 0) return false\n  if (a % 3 == 0) return true\n  if (a % 5 == 0) return true\n  for (let i = 7; i * i <= a; i += 6) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_2 = (a) => {\n  if (a % 2 == 0) return false\n  for (let i = 3; i * i <= a; i += 2) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_3 = (a) => {\n  if (a % 3 == 0) return false\n  for (let i = 5; i * i <= a; i += 4) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_4 = (a) => {\n  if (a % 5 == 0) return false\n  for (let i = 7; i * i <= a; i += 6) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_5 = (a) => {\n  if (a % 7 == 0) return false\n  for (let i = 9; i * i <= a; i += 8) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_6 = (a) => {\n  if (a % 11 == 0) return false\n  for (let i = 13; i * i <= a; i += 12) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_7 = (a) => {\n  if (a % 17 == 0) return false\n  for (let i = 19; i * i <= a; i += 16) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_8 = (a) => {\n  if (a % 19 == 0) return false\n  for (let i = 23; i * i <= a; i += 22) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_9 = (a) => {\n  if (a % 23 == 0) return false\n  for (let i = 29; i * i <= a; i += 28) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_10 = (a) => {\n  if (a % 31 == 0) return false\n  for (let i = 37; i * i <= a; i += 36) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_11 = (a) => {\n  if (a % 41 == 0) return false\n  for (let i = 43; i * i <= a; i += 42) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_12 = (a) => {\n  if (a % 47 == 0) return false\n  for (let i = 49; i * i <= a; i += 48) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_13 = (a) => {\n  if (a % 53 == 0) return false\n  for (let i = 59; i * i <= a; i += 58) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_14 = (a) => {\n  if (a % 59 == 0) return false\n  for (let i = 67; i * i <= a; i += 66) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_15 = (a) => {\n  if (a % 67 == 0) return false\n  for (let i = 71; i * i <= a; i += 70) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_16 = (a) => {\n  if (a % 73 == 0) return false\n  for (let i = 79; i * i <= a; i += 78) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_17 = (a) => {\n  if (a % 79 == 0) return false\n  for (let i = 87; i * i <= a; i += 86) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_18 = (a) => {\n  if (a % 89 == 0) return false\n  for (let i = 97; i * i <= a; i += 96) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_19 = (a) => {\n  if (a % 97 == 0) return false\n  for (let i = 101; i * i <= a; i += 100) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_20 = (a) => {\n  if (a % 101 == 0) return false\n  for (let i = 103; i * i <= a; i += 102) {\n    if (a % i == 0) return false\n  }\n  return true\n}\n\nconst isMultiplyPrime_21 = (a) => {\n  if (a % 103 == 0) return false\n  for (let i = 107; i * i <= a; i += 106) {\n    if (a % i == 0) return false\n  }\n  return true\n}"}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let m = Math.floor(Math.log(x) / Math.log(n));\n  return m === Math.floor(m);\n}\n\n/*\n  Write a function that returns true if a number x is a perfect power of n and false in other cases. \n  For example:\n  isPerfectPower(1, 4) => false\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPerfectPower = (x, n) => {\n  let m = Math.floor(Math.log(x) / Math.log(n));\n  return (x === Math.pow(n, m));\n}\n\n/*\n  Write a function that returns true if a number x is a power of 2 and false in other cases. \n  For example:\n  isPowerOf2(1) => false\n  isPowerOf2(3) => true\n  isPowerOf2(8) => true\n  isPowerOf2(4) => false\n  */\nconst isPowerOf2 = x => {\n  return (x & (x - 1)) === 0;\n}\n\n/*\n  Write a function that returns true if a number n is a prime number (i.e. is not divisible by any other number) and false in other cases. \n  For example:\n  isPrimeNumber(1) => false\n  isPrimeNumber(2) => true\n  isPrimeNumber(3) => true\n  isPrimeNumber(4) => false\n  */\nconst isPrimeNumber = n => {\n  if (n === 1) return false;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\n/*\n  Write a function that returns true if a number x is a perfect number and false in other cases. \n  For example:\n  isPerfectNumber(1) => false\n  isPerfectNumber(2) => false\n  isPerfectNumber(3) => true\n  isPerfectNumber(4) => false\n  isPerfectNumber(5) => true\n  */\nconst isPerfectNumber = x => {\n  return (Math.pow(x, 1 / x) - 1) === 0;\n}\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a == 0) return true;\n  if (a % 3!= 0) return false;\n  if (a % 2!= 0) return false;\n  if (a % 5!= 0) return false;\n  if (a % 7!= 0) return false;\n  return true;\n};\n\nexport { iscube };\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    const numStr = num.toString(16);\n    const isPrime = (num) => {\n        return num === 1 || (num%2 === 0 && num%3!== 0 && num%5!== 0 && num%7!== 0 && num%11!== 0 && num%13!== 0 && num%17!== 0);\n    };\n    const isPrimeB = (num) => {\n        return num === 11 || (num%2 === 0 && num%3!== 0 && num%5!== 0 && num%7!== 0 && num%11!== 0);\n    };\n    const isPrimeD = (num) => {\n        return num === 13 || (num%2 === 0 && num%3!== 0 && num%5!== 0 && num%7!== 0 && num%11!== 0);\n    };\n    const isPrimeE = (num) => {\n        return num === 17 || (num%2 === 0 && num%3!== 0 && num%5!== 0 && num%7!== 0 && num%11!== 0);\n    };\n    const isPrimeF = (num) => {\n        return num === 19 || (num%2 === 0 && num%3!== 0 && num%5!== 0 && num%7!== 0 && num%11!== 0);\n    };\n    return numStr.length? (\n        numStr.length === 2? isPrime(parseInt(numStr, 16))? 1 : 0 :\n        numStr.length === 3? isPrimeB(parseInt(numStr, 16))? 1 : 0 :\n        numStr.length === 4? isPrimeD(parseInt(numStr, 16))? 1 : 0 :\n        numStr.length === 5? isPrimeE(parseInt(numStr, 16))? 1 : 0 :\n        numStr.length === 6? isPrimeF(parseInt(numStr, 16))? 1 : 0 : 0\n    ) : 0;\n};\n\nexport default hexKey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const bin = '';\n  let n = parseInt(decimal);\n  while (n > 0) {\n    bin += (n % 2 === 0)? '0' : '1';\n    n = Math.floor(n / 2);\n  }\n  bin = `${bin}db`;\n  return bin;\n};\n\nconst binaryToDecimal = (bin) => {\n  const n = parseInt(bin.slice(0, -1), 2);\n  return n;\n};\n\nconst main = () => {\n  console.log(decimalToBinary(32));\n  console.log(decimalToBinary(15));\n  console.log(decimalToBinary(256));\n  console.log(decimalToBinary(10));\n  console.log(decimalToBinary(1));\n  console.log(decimalToBinary(2));\n  console.log(decimalToBinary(9));\n  console.log(decimalToBinary(100));\n  console.log(decimalToBinary(0));\n  console.log(decimalToBinary(2147483648));\n  console.log(decimalToBinary(2147483647));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if(!s ||!s.length) return false;\n  let stack = [];\n  let curr = 1;\n  let res = 1;\n  for(let i = 0; i < s.length; i++){\n    curr *= (s[i] - '0');\n    while(curr > res){\n      res = Math.pow(res, 2);\n      curr %= res;\n    }\n    stack.push(curr);\n    curr = 1;\n  }\n  return (stack.length === 1 && stack[0] === 1);\n}\n\nconsole.log(isHappy('0123456789'));\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let ret = []\n  let grade = grades[0]\n  for (let i = 1; i < grades.length; i++) {\n    if (grades[i] >= grade) {\n      grade = grades[i]\n    } else {\n      ret.push(grade)\n      grade = grades[i]\n    }\n  }\n  ret.push(grade)\n  return ret\n}\n\n/*\nGiven a list of GPA values and the letter grade, return the GPA value\nthat would give the student the given letter grade.\n\nExample:\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'A') ==> 4.0\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'A-') ==> 3.0\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'B') ==> 3.3\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'B-') ==> 3.3\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'C') ==> 3.7\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'C-') ==> 3.7\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'D') ==> 2.0\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'D-') ==> 2.0\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'E') ==> 0.0\nnumericalGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 'F') ==> 0.0\n*/\nconst numericalGrade = (grades, grade) => {\n  let gradeIndex = 0\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= grade) {\n      gradeIndex = i\n      break\n    }\n  }\n  return grades[gradeIndex]\n}\n\n/*\nGiven a list of GPA values and the letter grade, return the letter grade\nthat would give the student the given GPA value.\n\nExample:\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 4.0) ==> 'A+'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 3.0) ==> 'A'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 3.3) ==> 'B'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 3.7) ==> 'B'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 2.0) ==> 'C+'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 2.3) ==> 'C'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 2.7) ==> 'C'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 1.0) ==> 'D'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 1.7) ==> 'D'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 1.3) ==> 'D'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 1.0) ==> 'D'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 0.7) ==> 'D'\nletterGrade(['4.0', '3.0', '3.3', '3.7', '2.0'], 0.0) ==> 'D'\n*/\nconst letterGrade = (grades, grade) => {\n  if (grades.indexOf(grade) === grades.length - 1) {\n    return grade\n  } else {\n    return 'F'\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length\n  let stringArray = string.split('')\n  for (let i = 0; i < stringArray.length; i++) {\n    let current = stringArray[i]\n    let char = String.fromCharCode(current.charCodeAt(0))\n    let charArray = char.split('')\n    for (let j = 0; j < charArray.length; j++) {\n      let subString = charArray[j]\n      let subStringLength = subString.length\n      let start = i\n      let end = i + subStringLength - 1\n      while (start <= end) {\n        let next = (start + subStringLength) % length\n        let nextChar = stringArray[next]\n        let nextCharArray = nextChar.split('')\n        for (let k = 0; k < nextCharArray.length; k++) {\n          let nextSubString = nextCharArray[k]\n          let nextSubStringLength = nextSubString.length\n          if (nextSubString === subString) {\n            return false\n          }\n        }\n        start += 1\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n  const starts= []\n  const ends= []\n  for (let i = 2; i <= n; i++) {\n    if (i%10 === 1) {\n      starts.push(i)\n    } else {\n      ends.push(i)\n    }\n  }\n  return ends.reduce((sum, e) => sum + ends.indexOf(e), 0) + starts.reduce((sum, s) => sum + starts.indexOf(s), 0)\n}\n\nmodule.exports = startsOneEnds\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let result = '';\n  for (let i = N; i > 0; i = Math.floor(i / 2)) {\n    result = `${result}${i}`;\n  }\n  return result;\n};\n\nconst test = (N, expected) => {\n  let result = solve(N);\n  console.log(`solve({N}) = ${result}`);\n  assert(result === expected);\n};\n\ntest(1000, '1');\ntest(150, '110');\ntest(147, '1100');\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let a = [];\n    for (let i = 0; i < lst.length; i++) {\n        a.push(lst[i]);\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            a.push(lst[i]);\n        }\n    }\n    return a;\n}\n\nexport { add };<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const result = s.split('')\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\n/*\n  Write a function that takes a sentence and returns a word by word version \n  of the sentence.\n  */\nconst wordShuffle = (s) => {\n  const result = s.split('')\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst shuffle = (s) => {\n  const result = s.split('')\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst reverse = (s) => {\n  const result = s.split('')\n   .reverse()\n   .join('')\n  return result\n}\n\nconst shuffleWords = (s) => {\n  const result = s.split('')\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst reverseWords = (s) => {\n  const result = s.split('')\n   .reverse()\n   .join('')\n  return result\n}\n\nconst shuffleSentence = (s) => {\n  const result = s.split('')\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst reverseSentence = (s) => {\n  const result = s.split('')\n   .reverse()\n   .join('')\n  return result\n}\n\nconst shuffleArray = (a) => {\n  const result = a.slice()\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst reverseArray = (a) => {\n  const result = a.slice()\n   .reverse()\n   .join('')\n  return result\n}\n\nconst shuffleWordsArray = (a) => {\n  const result = a.slice()\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst reverseWordsArray = (a) => {\n  const result = a.slice()\n   .reverse()\n   .join('')\n  return result\n}\n\nconst shuffleSentenceArray = (a) => {\n  const result = a.slice()\n   .map((x) => {\n      const char = x.charCodeAt(0)\n      const value = char\n       .toString(2)\n       .padStart(8, '0')\n      return value\n    })\n   .join('')\n   .toUpperCase()\n   .replace(/\\s/g, '_')\n   .replace(/[^\\w]/g, '_')\n   .toLowerCase()\n  return result\n}\n\nconst reverseSentenceArray = (a) => {\n  const result = a.slice()\n   .reverse()\n   .join('')\n  return result\n}\n\n/*\n  Write a function that takes a sentence and returns a sentence \n  that contains the words in the same order, except for \n  the word that is in the same place.\n  */\nconst wordShuffleSentence = (s)"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let rows = []\n  let cols = []\n  let coords = []\n\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      let [row, col] = [i, j]\n      coords.push([row, col])\n    }\n  }\n\n  coords.sort((a, b) => a[0] - b[0])\n  coords.sort((a, b) => b[1] - a[1])\n\n  for (let [row, col] of coords) {\n    if (row === x) {\n      rows.push(col)\n    }\n  }\n\n  for (let row of rows) {\n    cols.push(row)\n  }\n\n  return [cols, rows]\n}\n\n/*\n  Given a 2 dimensional list of lists, return list of tuples \n  of integers, [(x1, y1), (x2, y2)...] \n  such that each tuple was a coordinate-(row, columns), starting with 0. \n  Sort coordinates in ascending order. \n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 5), (2, 4)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  let rows = []\n  let cols = []\n  let coords = []\n\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      let [row, col] = [i, j]\n      coords.push([row, col])\n    }\n  }\n\n  coords.sort((a, b) => a[0] - b[0])\n  coords.sort((a, b) => b[1] - a[1])\n\n  for (let [row, col] of coords) {\n    if (col === x) {\n      cols.push(col)\n    }\n  }\n\n  for (let col of cols) {\n    rows.push(col)\n  }\n\n  return [rows, cols]\n}\n\n/*\n  Given a 2 dimensional list of lists, return list of tuples \n  of integers, [(x1, y1), (x2, y2)...] \n  such that each tuple was a coordinate-(row, columns), starting with 0. \n  Sort coordinates in ascending order. \n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 5), (1, 4), (2, 3), (3, 2), (4, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getDiag = (lst, x) => {\n  let rows = []\n  let cols = []\n  let coords = []\n\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      let [row, col] = [i, j]\n      coords.push([row, col])\n    }\n  }\n\n  coords.sort((a, b) => a[0] - b[0])\n  coords.sort((a, b) => b[1] - a[1])\n\n  for (let [row, col] of coords) {\n    if (row === x) {\n      rows.push(row)\n    }\n    if (col === x) {\n      cols.push(col)\n    }\n  }\n\n  return [rows, cols]\n}\n\n/*\n  Given a 2 dimensional list of lists, return list of tuples \n  of integers, [(x1, y1), (x2, y2)...] \n  such that each tuple was a coordinate-(row, columns), starting with 0. \n  Sort coordinates in ascending order. \n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getDiag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 5), (1, 4), (2, 3), (3, 2), (4, 1)]\n  getDiag([], 1) == []\n  getDiag([[], [1], [1, 2, 3]], 3)"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sorted = [];\n  let sum = 0;\n  array.forEach(value => {\n    sum += value;\n    sorted.push(value);\n  });\n  if (sum % 2 === 1) {\n    sorted.sort((a, b) => {\n      return a - b;\n    });\n  } else {\n    sorted.sort((a, b) => {\n      return b - a;\n    });\n  }\n  return sorted;\n};\n\nconsole.log(sortArray([1, 2, 3, 4, 5, 6]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 8]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by one multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'ix'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'lm'\n  */\nconst encrypt1 = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by one multiplied to two places.\n  For example:\n  decrypt('gf') returns 'hi'\n  decrypt('ix') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('lm') returns 'et'\n  */\nconst decrypt1 = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to one place.\n  For example:\n  encrypt('hi') returns 'hijkl'\n  encrypt('asdfghjkl') returns 'ihjkl'\n  encrypt('gf') returns 'j'\n  encrypt('et') returns 'k'\n  */\nconst encrypt2 = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to one place.\n  For example:\n  decrypt('hijkl') returns 'hi'\n  decrypt('ihjkl') returns 'asdfghjkl'\n  decrypt('j') returns 'gf'\n  decrypt('k') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by one multiplied to two places.\n  For example:\n  encrypt('hi') returns 'ij'\n  encrypt('asdfghjkl') returns 'aefghjkl'\n  encrypt('gf') returns 'fg'\n  encrypt('et') returns 'gt'\n  */\nconst encrypt3 = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by one multiplied to two places.\n  For example:\n  decrypt('fg') returns 'hi'\n  decrypt('aefghjkl') returns 'asdfghjkl'\n  decrypt('fg') returns 'gf'\n  decrypt('gt') returns 'et'\n  */\nconst decrypt3 = (s) => {\n  return s.split('').reduce((a, b) => {\n    return a + this.alphabet[Math.floor(b / 2)];\n  }, '');\n};\n\n/*\n  Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by one multiplied to one place.\n  For example:\n  encrypt('hi') returns 'hij'\n  encrypt('asdfghjkl') returns 'hijkl'\n  encrypt('gf') returns 'g'\n  encrypt('et') returns 't'\n  */\nconst encrypt4 = (s) => {\n  return s.split('').reduce((a, b) =>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n  if(!lst || lst.length===0) return null; \n  const curr = lst.shift(); \n  const lst2 = lst.map((n)=>{\n    if(n>curr) return n; \n    else return null; \n  }); \n  return lst2.shift(); \n} \n  \n  \n  \n\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const length = S.length\n  const wordCount = S.split(/[.!?]/).reduce((acc, word) => {\n    if (word === \"I\") {\n      acc.count++\n    }\n    return acc\n  }, {count: 0})\n  if (wordCount.count === 0) {\n    return 0\n  }\n  if (wordCount.count === 1) {\n    return length - wordCount.count\n  }\n  return length - wordCount.count + 1\n}\n\n/*\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"I am bored\")\n  1\n  >>> isBored(\"I am so bored\")\n  2\n  >>> isBored(\"What are you doing now\")\n  0\n  */\nconst isBored = (S) => {\n  const length = S.length\n  const wordCount = S.split(/[.!?]/).reduce((acc, word) => {\n    if (word === \"I\") {\n      acc.count++\n    }\n    return acc\n  }, {count: 0})\n  if (wordCount.count === 0) {\n    return 0\n  }\n  if (wordCount.count === 1) {\n    return length - wordCount.count\n  }\n  return length - wordCount.count + 1\n}\n\n/*\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"Hello world. I am bored\")\n  1\n  >>> isBored(\"Hello world. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now\")\n  0\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  1\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  */\nconst isBored = (S) => {\n  const length = S.length\n  const wordCount = S.split(/[.!?]/).reduce((acc, word) => {\n    if (word === \"I\") {\n      acc.count++\n    }\n    return acc\n  }, {count: 0})\n  if (wordCount.count === 0) {\n    return 0\n  }\n  if (wordCount.count === 1) {\n    return length - wordCount.count\n  }\n  return length - wordCount.count + 1\n}\n\n/*\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  */\nconst isBored = (S) => {\n  const length = S.length\n  const wordCount = S.split(/[.!?]/).reduce((acc, word) => {\n    if (word === \"I\") {\n      acc.count++\n    }\n    return acc\n  }, {count: 0})\n  if (wordCount.count === 0) {\n    return 0\n  }\n  if (wordCount.count === 1) {\n    return length - wordCount.count\n  }\n  return length - wordCount.count + 1\n}\n\n/*\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  */\nconst isBored = (S) => {\n  const length = S.length\n  const wordCount = S.split(/[.!?]/).reduce((acc, word) => {\n    if (word === \"I\") {\n      acc.count++\n    }\n    return acc\n  }, {count: 0})\n  if (wordCount.count === 0) {\n    return 0\n  }\n  if (wordCount.count === 1) {\n    return length - wordCount.count\n  }\n  return length - wordCount.count + 1\n}\n\n/*\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  */\nconst isBored = (S) => {\n  const length = S.length\n  const wordCount = S.split(/[.!?]/).reduce((acc, word) => {\n    if (word === \"I\") {\n      acc.count++\n    }\n    return acc\n  }, {count: 0})\n  if (wordCount.count === 0) {\n    return 0\n  }\n  if (wordCount.count === 1) {\n    return length - wordCount.count\n  }\n  return length - wordCount.count + 1\n}\n\n/*\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am so bored\")\n  2\n  >>> isBored(\"Hello world. What are you doing now. I am bored\")\n  2\n  */\nconst is"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  return false;\n}\n\n/**\n  * Create a function that took 2 numbers. \n  * Returns true if one of the numbers was equal to the sum of the other, and all numbers were integers. \n  * Returns false in any other cases.\n  Examples\n  anyInt(5, 2) ➞ true\n  anyInt(3, 2) ➞ false\n  anyInt(3.6, -2.2) ➞ false\n  */\nconst anyInt = (x, y) => {\n  if (x === y + x) return true;\n  if (x === y - x) return true;\n  if (x === y * x) return true;\n  if (x === y / x) return true;\n  return false;\n}\n\nconst anyInt = (x, y) => {\n  if (x === y + x) return true;\n  if (x === y - x) return true;\n  if (x === y * x) return true;\n  if (x === y / x) return true;\n  return false;\n}\n\nconst anyInt = (x, y, z) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  return false;\n}\n\nconst anyInt = (x, y, z, w) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  if (x === y + w) return true;\n  if (x === y - w) return true;\n  if (x === y * w) return true;\n  if (x === y / w) return true;\n  return false;\n}\n\nconst anyInt = (x, y, z, w, e) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  if (x === y + w) return true;\n  if (x === y - w) return true;\n  if (x === y * w) return true;\n  if (x === y / w) return true;\n  if (x === y + e) return true;\n  if (x === y - e) return true;\n  if (x === y * e) return true;\n  if (x === y / e) return true;\n  return false;\n}\n\nconst anyInt = (x, y, z, w, e, f) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  if (x === y + w) return true;\n  if (x === y - w) return true;\n  if (x === y * w) return true;\n  if (x === y / w) return true;\n  if (x === y + e) return true;\n  if (x === y - e) return true;\n  if (x === y * e) return true;\n  if (x === y / e) return true;\n  if (x === y + f) return true;\n  if (x === y - f) return true;\n  if (x === y * f) return true;\n  if (x === y / f) return true;\n  return false;\n}\n\nconst anyInt = (x, y, z, w, e, f, g) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  if (x === y + w) return true;\n  if (x === y - w) return true;\n  if (x === y * w) return true;\n  if (x === y / w) return true;\n  if (x === y + e) return true;\n  if (x === y - e) return true;\n  if (x === y * e) return true;\n  if (x === y / e) return true;\n  if (x === y + f) return true;\n  if (x === y - f) return true;\n  if (x === y * f) return true;\n  if (x === y / f) return true;\n  if (x === y + g) return true;\n  if (x === y - g) return true;\n  if (x === y * g) return true;\n  if (x === y / g) return true;\n  return false;\n}\n\nconst anyInt = (x, y, z, w, e, f, g, h) => {\n  if (x === y + z) return true;\n  if (x === y - z) return true;\n  if (x === y * z) return true;\n  if (x === y / z) return true;\n  if (x === y + w) return true;\n  if (x === y - w) return true;\n  if (x === y * w) return true;\n  if (x === y / w) return true;\n  if (x === y + e) return true;\n  if (x === y - e) return true;\n  if (x === y * e) return true;\n  if (x === y / e) return true;\n  if (x === y + f) return"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.toUpperCase()\n   .replace(/[a-z]/g, (match) => {\n      const pos = message.indexOf(match);\n      return message[pos + 2];\n    })\n   .replace(/[A-Z]/g, (match) => {\n      const pos = message.indexOf(match);\n      return message[pos + 2];\n    });\n}\n\nmodule.exports = encode;<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.ceil(Math.sqrt(lst.length));\n  const [primes, numbers] = [Array(max), Array(max)].fill(0).map((_, index) => {\n    let number = lst.slice(0, index + 1);\n    let primes = [1];\n    for (let i = 2; i < number.length; i++) {\n      if (numbers[index] === 0) {\n        primes.push(number[i]);\n        numbers[index] = 1;\n      }\n    }\n    return primes;\n  });\n\n  let maxPrime = 0;\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] > maxPrime) {\n      maxPrime = primes[i];\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += maxPrime.reduce((acc, val) => {\n      return val < acc? val : acc;\n    }, numbers[i]);\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    if (dict == null) {\n        return false;\n    }\n    let keys = Object.keys(dict);\n    let allKeysAreLowercase = true;\n    let allKeysAreUppercase = true;\n    keys.forEach(key => {\n        if (key.toUpperCase()!== key) {\n            allKeysAreLowercase = false;\n        }\n        if (key.toLowerCase()!== key) {\n            allKeysAreUppercase = false;\n        }\n    });\n    return allKeysAreLowercase && allKeysAreUppercase;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 0; i <= n; i++) {\n    const isPrime = prime(i);\n    if (isPrime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const base = Math.pow(10, Math.floor(Math.log10(a)));\n  let result = a * b;\n  while (result % base === 0) {\n    result = result / base;\n  }\n  return result;\n};\n\n// Test\nconst test = () => {\n  const a = {\n    a: 1,\n    b: 2,\n    c: 3,\n  };\n  const b = {\n    a: 4,\n    b: 5,\n    c: 6,\n  };\n  const c = {\n    a: 7,\n    b: 8,\n    c: 9,\n  };\n  const d = {\n    a: 10,\n    b: 11,\n    c: 12,\n  };\n\n  console.log(multiply(a, b));\n  console.log(multiply(a, c));\n  console.log(multiply(a, d));\n  console.log(multiply(b, c));\n  console.log(multiply(b, d));\n  console.log(multiply(c, d));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of vowels in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countMixed = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of vowels in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countMixed2 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countMixed3 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i] && s[i].toUpperCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countMixed4 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i] && s[i].toLowerCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countMixed5 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i] && s[i].toUpperCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countMixed6 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i] && s[i].toLowerCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countMixed7 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i] && s[i].toUpperCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if(!isNaN(parseFloat(value))) {\n    var floatValue = parseFloat(value);\n    var floor = Math.floor(floatValue);\n    var ceiling = Math.ceil(floatValue);\n    var diff = Math.abs(floatValue - floor);\n    var diffCeiling = Math.abs(floatValue - ceiling);\n    if(diff < diffCeiling) {\n      return floor;\n    }\n    else {\n      return ceiling;\n    }\n  }\n  else {\n    return value;\n  }\n};\n\n// Export the module\nmodule.exports = closestInteger;<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let stones = [];\n  for (let i = 1; i <= n; i++) {\n    stones.push(Math.ceil(n / 2));\n    if (n % 2 === 1) stones.push(n - 1);\n  }\n  return stones;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/(\\s|,)/g)\n  return words\n}\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsStringNoSplit = (s) => {\n  return s.split(/\\s|,\\s*/)\n}\n\nconst string = \"One, two, three, four, five, six\"\nconst result = wordsString(string)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = x;\n  if (y > x) {\n    max = y;\n  }\n  for (let i = x + 1; i <= max; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  smallest odd number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOdd = (x, y) => {\n  let max = x;\n  if (y > x) {\n    max = y;\n  }\n  for (let i = x + 1; i <= max; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  largest odd number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddMax = (x, y) => {\n  let max = x;\n  if (y > x) {\n    max = y;\n  }\n  for (let i = x + 1; i <= max; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  largest even number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEvenMax = (x, y) => {\n  let max = x;\n  if (y > x) {\n    max = y;\n  }\n  for (let i = x + 1; i <= max; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  smallest odd number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEven = (x, y) => {\n  let max = x;\n  if (y > x) {\n    max = y;\n  }\n  for (let i = x + 1; i <= max; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  smallest even number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEvenMin = (x, y) => {\n  let min = x;\n  if (y > x) {\n    min = y;\n  }\n  for (let i = x + 1; i <= min; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  smallest odd number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddMin = (x, y) => {\n  let min = x;\n  if (y > x) {\n    min = y;\n  }\n  for (let i = x + 1; i <= min; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  smallest even number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOddMin = (x, y) => {\n  let min = x;\n  if (y > x) {\n    min = y;\n  }\n  for (let i = x + 1; i <= min; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/*This function takes two positive numbers x and y and returns the \n  smallest odd number that is in the range [x, y] inclusive. If there was \n  no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumEvenMin = (x, y) => {\n  let min = x;\n  if (y > x) {\n    min = y;\n  }\n  for (let i = x + 1; i <= min; i += 2) {\n    if (i >= y) {\n      return i;\n    }\n  "}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1\n  }\n  const avg = (n + m) / 2\n  const avgBits = avg.toString(2)\n  return parseInt(avgBits, 2)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      continue;\n    }\n    digits.push(x[i]);\n  }\n  result = digits;\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n\n  arr = arr.sort((a, b) => {\n    return b.length - a.length\n  })\n  arr.reverse()\n  const res = arr.map(item => {\n    return item.replace(/\\d/g, n => {\n      return n === 1? \"One\" : n === 2? \"Two\" : n === 3? \"Three\" : n === 4? \"Four\" : n === 5? \"Five\" : n === 6? \"Six\" : n === 7? \"Seven\" : n === 8? \"Eight\" : n === 9? \"Nine\" : \"\"\n    })\n  })\n  return res\n}\n\nexport default byLength\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let s = [];\n  for (let i = 1; i <= n; i++) {\n    let p = 1;\n    if (i % 2 === 0) {\n      p = i;\n    }\n    s.push(p);\n  }\n  return s;\n};\n\n/*  \n  f(5) == [1, 2, 6, 24, 15]\n  f(6) == [1, 2, 6, 12, 8, 6]\n  f(7) == [1, 2, 6, 12, 8, 6, 4, 4]\n  f(8) == [1, 2, 6, 12, 8, 6, 4, 4, 2, 2]\n  f(9) == [1, 2, 6, 12, 8, 6, 4, 4, 2, 2, 1, 1]\n  f(10) == [1, 2, 6, 12, 8, 6, 4, 4, 2, 2, 1, 1, 1, 1]\n*/\n\nconsole.log(f(5));\nconsole.log(f(6));\nconsole.log(f(7));\nconsole.log(f(8));\nconsole.log(f(9));\nconsole.log(f(10));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const isEven = (n) => n % 2 === 0\n  const isOdd = (n) => n % 2!== 0\n\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (isEven(i) && isOdd(i)) {\n      count++\n    }\n  }\n\n  return [count, count]\n}\n\n/*\n  Given a non-empty array of non-negative integers, your task is to find the largest \n   possible sum of any contiguous sub-array.\n  Example:\n      Input: [1, 2, 3]\n      Output: 6\n      Explanation: The largest sum of any contiguous sub-array is 3 + 4 = 7, \n     therefore return 7.\n\n  Note:\n      1. The given array size will be in the range [1, 10,000].\n      2. The given array will contain at least one number.\n      3. Each number in the given array will be an integer in the range [0, 10,000].\n*/\nconst largestSubArraySum = (nums) => {\n  const maxSum = -1\n  let maxSumIndex = -1\n\n  const sum = (sum, num) => sum + num\n\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j]\n      if (sum > maxSum) {\n        maxSum = sum\n        maxSumIndex = j\n      }\n    }\n  }\n\n  return maxSum\n}\n\n/*\n  Given an array of non-negative integers, you are to write a function to find the \n   maximum difference between the successive elements in this array.\n\n  Example:\n      Input: [4, 2, 3, 2]\n      Output: 2\n\n  Note:\n      The given array size will be in the range [1, 10,000].\n      The given array will contain at least one number.\n      Each number in the given array will be an integer in the range [0, 10,000].\n*/\nconst maxDifference = (nums) => {\n  let max = -1\n  let min = Infinity\n  let maxIndex = -1\n  let minIndex = -1\n\n  for (let i = 0; i < nums.length; i++) {\n    let diff = nums[i] - nums[i + 1]\n    if (diff > max) {\n      max = diff\n      maxIndex = i\n    } else if (diff < min) {\n      min = diff\n      minIndex = i\n    }\n  }\n\n  return maxIndex === minIndex? -1 : max - min\n}\n\nconst main = () => {\n  const evenOddPalindrome = (n) => {\n    return evenOddPalindrome\n  }\n\n  const largestSubArraySum = (nums) => {\n    return largestSubArraySum\n  }\n\n  const maxDifference = (nums) => {\n    return maxDifference\n  }\n\n  console.log(evenOddPalindrome(3))\n  console.log(largestSubArraySum([1, 2, 3]))\n  console.log(maxDifference([4, 2, 3, 2]))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    return arr.reduce((result, num) => {\n        if (num > 0) {\n            return result + 1;\n        } else if (num < 0) {\n            const firstDigit = Math.abs(num) % 10;\n            return result + (firstDigit < 0? 1 : 0);\n        } else {\n            return result;\n        }\n    }, 0);\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, -2, -3]));\nconsole.log(countNums([-1, 1, -2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return true\n  }\n\n  const sortedArr = arr.slice()\n  let isSorted = true\n  for (let i = 0; i < arrLength - 1; i++) {\n    for (let j = i; j < arrLength - 1; j++) {\n      if (sortedArr[j] > sortedArr[j + 1]) {\n        sortedArr.splice(j + 1, 0, sortedArr.splice(i, 1)[0])\n        isSorted = false\n      }\n    }\n  }\n  return isSorted\n}\n\n// const moveOneBall = (arr) => {\n//   const arrLength = arr.length\n//   if (arrLength === 0) {\n//     return true\n//   }\n\n//   const sortedArr = arr.slice()\n//   let isSorted = true\n//   for (let i = 0; i < arrLength - 1; i++) {\n//     for (let j = i; j < arrLength - 1; j++) {\n//       if (sortedArr[j] > sortedArr[j + 1]) {\n//         sortedArr.splice(j + 1, 0, sortedArr.splice(i, 1)[0])\n//         isSorted = false\n//       }\n//     }\n//   }\n//   return isSorted\n// }\n\nconst moveOneBall = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return true\n  }\n\n  const sortedArr = arr.slice()\n  let isSorted = true\n  let index = arrLength - 1\n  while (index > 0) {\n    const tmp = sortedArr[index]\n    sortedArr.splice(index, 1)\n    sortedArr.unshift(tmp)\n    if (sortedArr[index] > sortedArr[index - 1]) {\n      isSorted = false\n    }\n    index--\n  }\n  return isSorted\n}\n\nmoveOneBall([3, 5, 4, 1, 2])\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return 'NO';\n  const max = Math.max(lst1.length, lst2.length);\n  for (let i = 0; i < max; i++) {\n    const elem1 = lst1[i % lst1.length];\n    const elem2 = lst2[i % lst2.length];\n    if (elem1 % 2 === 0 && elem2 % 2 === 0) return 'YES';\n    if (elem1 % 2!== 0 && elem2 % 2!== 0) return 'NO';\n  }\n  return 'YES';\n};\n\nexpect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toBe('YES');\nexpect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toBe('NO');\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const len = test.length\n  const arr = test.split(\" \")\n  const res = {}\n  for (let i = 0; i < len; i++) {\n    const char = arr[i]\n    if (res[char] === undefined) {\n      res[char] = 1\n    } else {\n      res[char] += 1\n    }\n  }\n  return res\n}\n\n// TEST\n// const test = 'a b c a b b a b a b c c a a a b b b b c a b b c c a b b b b a b c b b b a b b b b a b b b b b b b b c c c c b a b b b b a b b b b b a b b b b b a b b b b b b b b b b b a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b c c c d b, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au, av, aw, ax, ay, az, ba, bb, bc, bd, be, bf, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu, bv, bw, bx, by, bz, ca, cb, cc, cd, ce, cf, cg, ch, ci, cj, ck, cl, cm, cn, co, cp, cq, cr, cs, ct, cu, cv, cw, cx, cy, cz, da, db, dc, dd, de, df, dg, dh, di, dj, dk, dl, dm, dn, do, dp, dq, dr, ds, dt, du, dv, dw, dx, dy, dz, ea, eb, ec, ed, ee, ef, eg, eh, ei, ej, ek, el, em, en, eo, ep, eq, er, es, et, eu, ev, ew,"}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const str = s.split('');\n  const strLen = str.length;\n  for (let i = 0; i < strLen - 1; i++) {\n    if (c.includes(str[i])) {\n      str.splice(i, 1);\n      i--;\n    }\n  }\n  return str.join('');\n};\n\nexport default reverseDelete;<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    const counts = lst.reduce((acc, x) => {\n        const num = parseInt(x);\n        acc[num] = (acc[num] || 0) + 1;\n        return acc;\n    }, {});\n    const out = lst.filter((str) => {\n        return counts[parseInt(str)] % 2 === 1;\n    });\n    return out.map(str => {\n        const count = counts[parseInt(str)];\n        return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}put.`;\n    });\n};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const length = nums.length\n  const minSum = Math.min(...nums)\n  const sums = []\n  let sum = 0\n\n  for (let i = 0; i < length; i++) {\n    sum = 0\n    for (let j = i; j < length; j++) {\n      sum += nums[j]\n      sums.push(sum)\n    }\n  }\n  \n  return sum\n}\n\nconst test = [\n  [],\n  [0],\n  [1],\n  [2, 3],\n  [-1, -2, -3]\n]\n\ntest.forEach(t => {\n  console.log(`${minSubArraySum(t)}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let buckets = [0, 0];\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      if (grid[row][col] === 1) {\n        buckets[row] += 1;\n      }\n    }\n  }\n\n  let count = 0;\n  while (buckets[0] < capacity) {\n    let index = 0;\n    while (buckets[index] < capacity) {\n      index += 1;\n      if (index >= rows) {\n        break;\n      }\n    }\n\n    if (index === rows) {\n      break;\n    }\n\n    let col = 0;\n    while (buckets[col] < capacity) {\n      col += 1;\n      if (col >= cols) {\n        break;\n      }\n    }\n\n    if (col === cols) {\n      count += 1;\n      buckets[index] -= 1;\n      buckets[col] -= 1;\n    }\n  }\n\n  return count;\n};\n\nconst count = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  let count = 0;\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      if (grid[row][col] === 1) {\n        count += 1;\n      }\n    }\n  }\n\n  return count;\n};\n\nconst solution = (grid, capacity) => {\n  let count = 0;\n  let count2 = 0;\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      if (grid[row][col] === 1) {\n        count += 1;\n      }\n    }\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      if (grid[row][col] === 1) {\n        count2 += 1;\n      }\n    }\n  }\n\n  return count - count2;\n};\n\nconsole.log(count(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => {\n    let x = parseInt(a, 2)\n    let y = parseInt(b, 2)\n    let sign = x > y? 1 : -1\n    return sign * (Math.abs(x) - Math.abs(y))\n  })\n}\n\n// test\nsortArray([1, 5, 2, 3, 4])\nsortArray([-2, -3, -4, -5, -6])\nsortArray([1, 0, 2, 3, 4])\nsortArray([1, 5, 2, 3, 4, 5])\nsortArray([1, 5, 2, 3, 4, 0])\nsortArray([0, 1, 2, 3, 4, 5])\nsortArray([1, 2, 3, 4, 5, 6])\nsortArray([1, 2, 3, 4, 5, 6, 7])\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const chars = []\n  const charsInS = []\n  const spaces = []\n  const charsInSSpaces = []\n  let curr = 0\n  let currInS = 0\n  let next = 0\n  let currInSS = 0\n  let nextInSS = 0\n  while (curr < s.length) {\n    if (s[curr] === \" \") {\n      spaces.push(curr)\n    } else {\n      chars.push(curr)\n      charsInS.push(currInS)\n      charsInSSpaces.push(currInSS)\n      currInS += 1\n    }\n    curr += 1\n  }\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < spaces.length; j++) {\n      next = spaces[j] + 1\n      if (next >= chars[i] + 1) {\n        nextInSS = charsInSSpaces[j] + 1\n        if (nextInSS === n) {\n          words.push(s.substring(charsInS[j], chars[i] + 1))\n        }\n      }\n    }\n  }\n  return words\n}\n\nconst test = [\n  [\"Mary had a little lamb\", 4],\n  [\"Mary had a little lamb\", 3],\n  [\"simple white space\", 2],\n  [\"Hello world\", 4],\n  [\"Uncle sam\", 3]\n]\n\nconst test1 = [\n  [\"a\", 1],\n  [\"b\", 2],\n  [\"b\", 1],\n  [\"c\", 3],\n  [\"d\", 4],\n  [\"e\", 5]\n]\n\nconsole.log(selectWords(\"Uncle sam\", 3))\nconsole.log(selectWords(\"Uncle sam\", 2))\nconsole.log(selectWords(\"Uncle sam\", 1))\nconsole.log(selectWords(\"Uncle sam\", 0))\nconsole.log(selectWords(\"Uncle sam\", 6))\nconsole.log(selectWords(\"Uncle sam\", 7))\nconsole.log(selectWords(\"Uncle sam\", 8))\n\nconsole.log(selectWords(\"Uncle sam\", 3))\nconsole.log(selectWords(\"Uncle sam\", 2))\nconsole.log(selectWords(\"Uncle sam\", 1))\nconsole.log(selectWords(\"Uncle sam\", 0))\nconsole.log(selectWords(\"Uncle sam\", 6))\nconsole.log(selectWords(\"Uncle sam\", 7))\nconsole.log(selectWords(\"Uncle sam\", 8))\n\nconsole.log(selectWords(\"a\", 1))\nconsole.log(selectWords(\"b\", 2))\nconsole.log(selectWords(\"b\", 1))\nconsole.log(selectWords(\"c\", 3))\nconsole.log(selectWords(\"d\", 4))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords(\"e\", 5))\nconsole.log(selectWords"}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (word.length <= 1) return '';\n  return word.replace(/[a-zA-Z]/g, (letter) => {\n    let consonant = getClosestVowel(word.slice(0, -1));\n    let vowel = getClosestVowel(word.slice(1));\n    if (vowel.length === 1 && letter === vowel) return vowel;\n    if (vowel.length === 1 && consonant.length === 1 && letter === consonant) return consonant;\n  });\n};\n\nexport default getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  // console.log(lst)\n  if (lst.length === 2) {\n    const open = lst[0]\n    const close = lst[1]\n    if (open.length === close.length) {\n      if (open === close.replace(/\\(/g, '').replace(/\\)/g, '')) {\n        return 'Yes'\n      }\n    }\n  }\n  return 'No'\n}\n\n// matchParens([')', ')'])\n// 'Yes'\n// matchParens([])\n// 'No'\n// matchParens(['()', ')', '()', ')', '()'])\n// 'No'\n// matchParens(['())', ')', '()'])\n// 'Yes'\n// matchParens(['()', ')', ')', ')', '()'])\n// 'Yes'\n// matchParens(['())', ')', '()', ')', '()'])\n// 'Yes'\n// matchParens(['()', ')', ')', ')', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['()', ')', ')', ')', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['()', ')', ')', ')', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['()', ')', ')', ')', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())', '()'])\n// 'Yes'\n// matchParens(['())', ')', '())',"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const dp = arr.reduce((acc, x, i) => {\n    if (i === k - 1) {\n      acc.push(x)\n      return acc\n    }\n    if (x >= 0) {\n      if (x > acc[k - 1]) {\n        acc[k - 1] = x\n      }\n    } else {\n      if (x < acc[k - 1]) {\n        acc[k - 1] = x\n      }\n    }\n    return acc\n  }, [])\n  return dp.reverse()\n}\n\nconst test = () => {\n  const arr = [-3, -4, 5]\n  const k = 3\n  const result = maximum(arr, k)\n  console.log(result)\n  return arr\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((el) => el % 2 === 1);\n  const sum = odd.reduce((acc, el) => acc + el, 0);\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  if (arr.length <= 1) {\n    return arr[0];\n  }\n\n  let sum = 0;\n\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddList = [];\n  let count = 1;\n  let next = n;\n  while (next!== 1) {\n    if (next % 2 === 1) {\n      oddList.push(count);\n      count++;\n    }\n    next = count * 3 + 1;\n  }\n  return oddList;\n};\n\nconst oddCollatz = (n) => {\n  let oddList = [];\n  let count = 1;\n  while (n!== 1) {\n    if (n % 2 === 1) {\n      oddList.push(count);\n      count++;\n    }\n    n = count * 3 + 1;\n  }\n  return oddList;\n};\n\nconsole.log(getOddCollatz(10));\nconsole.log(oddCollatz(10));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n\n  const splitedDate = date.split('-');\n  if (splitedDate.length!== 3) {\n    return false;\n  }\n\n  const month = parseInt(splitedDate[0], 10);\n  const day = parseInt(splitedDate[1], 10);\n  const year = parseInt(splitedDate[2], 10);\n  const daysInMonth = getDaysInMonth(month, year);\n\n  if (day < 1 || day > daysInMonth) {\n    return false;\n  }\n\n  const daysInYear = getDaysInYear(month, year);\n  if (day < 1 || day > daysInYear) {\n    return false;\n  }\n\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const daysInMonths = months.map((item) => getDaysInMonth(item, year));\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > daysInMonths[month - 1]) {\n    return false;\n  }\n\n  if (year < 1900 || year > 2099) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  let list = [];\n  let words = txt.split(/,\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords4 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords5 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords6 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords7 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords8 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords9 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords10 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords11 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords12 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords13 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords14 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords15 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list;\n}\n\nconst splitWords16 = (txt) => {\n  let list = [];\n  let words = txt.split(/\\s+/);\n  for (let i = 0; i <"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst test = [5, 2, 3, 1, 4, 6, 2, 2, 2, 3, 3, 4, 5];\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every((el, index) => {\n        if (index === 0) return true;\n        return el < lst[index - 1];\n    });\n}\n\nconst isSorted = (lst) => {\n    return lst.every"}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // if (interval1.start > interval2.end || interval1.end < interval2.start) {\n  //   return \"NO\";\n  // }\n\n  // if (interval1.start < interval2.start && interval1.end < interval2.start) {\n  //   return \"NO\";\n  // }\n\n  // if (interval1.start < interval2.start && interval1.end > interval2.end) {\n  //   return \"NO\";\n  // }\n\n  // if (interval1.start > interval2.start && interval1.end > interval2.end) {\n  //   return \"NO\";\n  // }\n\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n\n  const start = Math.min(interval1.start, interval2.start);\n  const end = Math.max(interval1.end, interval2.end);\n\n  const len = end - start;\n\n  if (len === 0) {\n    return \"NO\";\n  }\n\n  let prime = true;\n\n  for (let i = 1; i < len; i++) {\n    if (len % i === 0) {\n      prime = false;\n      break;\n    }\n  }\n\n  return prime? \"YES\" : \"NO\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    if(arr.length === 0) return null;\n\n    let max = arr[0];\n    let result = 1;\n    for(let i = 1; i < arr.length; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] < 0) {\n            sum += arr[i] * (max + 1);\n        }\n    }\n\n    return result * sum;\n}\n\nconst main = () => {\n    let arr = [1, 2, 2, -4];\n    let arr1 = [0, 1];\n    let arr2 = [1, 2, 2, -4];\n\n    console.log(prodSigns(arr));\n    console.log(prodSigns(arr1));\n    console.log(prodSigns(arr2));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    // 判断矩阵是否为空\n    if (!grid || grid.length === 0 || grid[0].length === 0) {\n        return []\n    }\n\n    let row = grid.length\n    let col = grid[0].length\n    let gridArray = []\n    let min = []\n\n    for (let i = 0; i < row; i++) {\n        for (let j = 0; j < col; j++) {\n            // 判断矩阵是否为0\n            if (grid[i][j] === 0) {\n                continue\n            }\n\n            // 判断矩阵是否为空\n            if (row === 1 && col === 1) {\n                min.push(grid[i][j])\n            } else if (row === 1) {\n                gridArray.push([grid[i][j]])\n            } else if (col === 1) {\n                gridArray.push([grid[i][j]])\n            } else {\n                let tmp = [grid[i][j]]\n                gridArray.push(tmp)\n            }\n        }\n    }\n\n    // 判断k是否大于矩阵长度\n    if (k > row * col) {\n        return []\n    }\n\n    // 根据k的初始化min列表\n    let l = 1\n    for (let i = 0; i < row; i++) {\n        for (let j = 0; j < col; j++) {\n            if (i === 0 && j === 0) {\n                min.push(grid[i][j])\n            } else if (i === 0) {\n                gridArray[l].push(grid[i][j])\n            } else if (j === 0) {\n                gridArray[l].push(grid[i][j])\n            } else {\n                gridArray[l].push(grid[i][j])\n            }\n        }\n        l++\n    }\n\n    let dp = new Array(row)\n    let max = 0\n\n    for (let i = 0; i < row; i++) {\n        for (let j = 0; j < col; j++) {\n            dp[i] = [grid[i][j]]\n        }\n    }\n\n    for (let i = 0; i < row; i++) {\n        for (let j = 0; j < col; j++) {\n            for (let k = 0; k < row; k++) {\n                for (let l = 0; l < col; l++) {\n                    if (k === 0 && l === 0) {\n                        continue\n                    } else if (k === 0) {\n                        dp[i][j].push(grid[i][l])\n                    } else if (l === 0) {\n                        dp[i][j].push(grid[k][j])\n                    } else {\n                        dp[i][j].push(Math.min(dp[i][j][k - 1], dp[k][l][j - 1]))\n                    }\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < row; i++) {\n        for (let j = 0; j < col; j++) {\n            if (k === 0) {\n                min.push(dp[i][j][k - 1])\n            } else if (k === row - 1) {\n                min.push(dp[i][j][k - 1])\n            } else if (j === 0) {\n                min.push(dp[i][j][k - 1])\n            } else if (j === col - 1) {\n                min.push(dp[i][j][k - 1])\n            } else {\n                let tmp = dp[i][j][k - 1]\n                let k = k - 1\n                while (k > 0 && tmp < dp[i][j][k]) {\n                    tmp = dp[i][j][k]\n                    k--\n                }\n                min.push(dp[i][j][k])\n            }\n        }\n    }\n\n    let minLen = k\n    let m = 0\n\n    while (minLen > 0 && m < row * col) {\n        let tmp = min.shift()\n        let s = 0\n        while (s < row * col) {\n            if (s === tmp) {\n                s++\n            } else if (s < tmp) {\n                gridArray[m].push(grid[s / col][s % col])\n            }\n            "}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if(n === 1) {\n    return [1]\n  }\n  return [1, 3, 2, 8].concat(tri(n - 1).concat([tri(n - 2), tri(n + 1)]))\n}\n\nconsole.log(tri(9))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let r = 1;\n  while (n > 0) {\n    r *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  if (n === 0) {\n    return r;\n  }\n  return 0;\n};\n\n/*\n  Given a string, find the longest palindromic substring.\n  Return the length of the substring.\n  Note: the returned length may exceed the length of the string.\n  Example:\n  longest_palindrome(\"babad\")\n  Returns: 5\n  Example:\n  longest_palindrome(\"cbbd\")\n  Returns: 3\n  Example:\n  longest_palindrome(\"a\")\n  Returns: 1\n  Example:\n  longest_palindrome(\"\")\n  Returns: 0\n*/\nconst longest_palindrome = (s) => {\n  let start = 0;\n  let end = 0;\n  let r = 0;\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    r = 0;\n    while (i + r < s.length && s[i + r] === s[i - r]) {\n      r++;\n    }\n    if (r > max) {\n      start = i - r;\n      end = i + r;\n      max = r;\n    }\n  }\n  return max;\n};\n\n/*\n  Given a string, return the number of 'x' that can be placed in a string without\n  overlapping with another 'x'.\n  Example:\n  can_place_x(\"axxxxx\")\n  Returns: 2\n  Example:\n  can_place_x(\"xaxx\")\n  Returns: 1\n  Example:\n  can_place_x(\"x\")\n  Returns: 1\n*/\nconst can_place_x = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    let j = 0;\n    while (j < i) {\n      if (s[i] === s[j]) {\n        result++;\n        break;\n      }\n      j++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their sum.\n  Example:\n  add(\"Hello\", \"World\")\n  Returns: \"Hello World\"\n  Example:\n  add(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst add = (s1, s2) => {\n  let result = 0;\n  for (let i = 0; i < s1.length; i++) {\n    result += s1[i];\n  }\n  for (let i = 0; i < s2.length; i++) {\n    result += s2[i];\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their product.\n  Example:\n  multiply(\"Hello\", \"World\")\n  Returns: \"Hello World\"\n  Example:\n  multiply(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst multiply = (s1, s2) => {\n  let result = 1;\n  for (let i = 0; i < s1.length; i++) {\n    result *= s1[i];\n  }\n  for (let i = 0; i < s2.length; i++) {\n    result *= s2[i];\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their difference.\n  Example:\n  subtract(\"Hello\", \"World\")\n  Returns: \"Hello\"\n  Example:\n  subtract(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst subtract = (s1, s2) => {\n  let result = 0;\n  for (let i = 0; i < s1.length; i++) {\n    result += s1[i];\n  }\n  for (let i = 0; i < s2.length; i++) {\n    result -= s2[i];\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their ratio.\n  Example:\n  ratio(\"Hello\", \"World\")\n  Returns: 1.5\n  Example:\n  ratio(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst ratio = (s1, s2) => {\n  let result = 1;\n  for (let i = 0; i < s1.length; i++) {\n    result *= s1[i];\n  }\n  for (let i = 0; i < s2.length; i++) {\n    result /= s2[i];\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their product.\n  Example:\n  product(\"Hello\", \"World\")\n  Returns: \"Hello World\"\n  Example:\n  product(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst product = (s1, s2) => {\n  let result = 1;\n  for (let i = 0; i < s1.length; i++) {\n    result *= s1[i];\n  }\n  for (let i = 0; i < s2.length; i++) {\n    result *= s2[i];\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their sum.\n  Example:\n  sum(\"Hello\", \"World\")\n  Returns: \"Hello World\"\n  Example:\n  sum(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst sum = (s1, s2) => {\n  let result = 0;\n  for (let i = 0; i < s1.length; i++) {\n    result += s1[i];\n  }\n  for (let i = 0; i < s2.length; i++) {\n    result += s2[i];\n  }\n  return result;\n};\n\n/*\n  Given two strings, return their difference.\n  Example:\n  difference(\"Hello\", \"World\")\n  Returns: \"Hello\"\n  Example:\n  difference(\"Hello\", \"\")\n  Returns: \"Hello\"\n*/\nconst difference = ("}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let brackets = string.split(' ').map((char)=>char=='['? 1 : -1)\n   let stack = []\n   for(let i=0;i<brackets.length;i++){\n     if(brackets[i] === -1){\n       stack.push(i)\n     }else{\n       if(stack.length===0){\n         return false\n       }\n       let start = stack.pop()\n       let end = i\n       let isOpen = brackets[start] === 1\n       for(let j=start+1;j<end;j++){\n         if(brackets[j] === 1 &&!isOpen){\n           stack.push(j)\n           isOpen = true\n         }else if(brackets[j] === -1){\n           stack.push(j)\n           isOpen = false\n         }\n       }\n     }\n   }\n   return stack.length === 0\n }\n console.log(isNested('[[]]'))\n console.log(isNested('[]]]]]]][[[[[]'))\n console.log(isNested('[][]'))\n console.log(isNested('[]'))\n console.log(isNested('[[][]]'))<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((acc, x) => {\n    return acc + Math.pow(x, 2);\n  }, 0);\n}\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]));\nconsole.log(sumSquares([1,4,9,13,19]));\nconsole.log(sumSquares([1,3,5,7,9]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]$/.test(txt.slice(-1));\n}\n\n/*\n  Create a function that returns true if a given string has at \n  least one letter.\n  Example:\n  hasOneLetter(\"Aaa\") ➞ true\n  hasOneLetter(\"Bb\") ➞ true\n  hasOneLetter(\"Cc\") ➞ true\n  hasOneLetter(\"\") ➞ false\n  */\nconst hasOneLetter = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string has at \n  least one letter that is not a part of a word.\n  Example:\n  hasOneLetterButNotAWord(\"Aaa\") ➞ false\n  hasOneLetterButNotAWord(\"Bb\") ➞ false\n  hasOneLetterButNotAWord(\"Cc\") ➞ true\n  hasOneLetterButNotAWord(\"\") ➞ true\n  */\nconst hasOneLetterButNotAWord = (txt) => {\n  txt = txt.toLowerCase();\n  return!/^[a-z]\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string contains \n  only numbers.\n  Example:\n  hasNumbers(\"12345\") ➞ true\n  hasNumbers(\"abc\") ➞ false\n  hasNumbers(\"\") ➞ false\n  */\nconst hasNumbers = (txt) => {\n  txt = txt.toLowerCase();\n  return /^\\d+$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  somewhat proper word.\n  Example:\n  isSomewhatProper(\"Aaa\") ➞ false\n  isSomewhatProper(\"Bb\") ➞ true\n  isSomewhatProper(\"Cc\") ➞ true\n  isSomewhatProper(\"\") ➞ false\n  */\nconst isSomewhatProper = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  somewhat proper word.\n  Example:\n  isSomewhatProper(\"Aaa\") ➞ false\n  isSomewhatProper(\"Bb\") ➞ true\n  isSomewhatProper(\"Cc\") ➞ true\n  isSomewhatProper(\"\") ➞ false\n  */\nconst isProper = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]+\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  proper noun.\n  Example:\n  isProperNoun(\"Aaa\") ➞ true\n  isProperNoun(\"Bb\") ➞ true\n  isProperNoun(\"Cc\") ➞ true\n  isProperNoun(\"\") ➞ false\n  */\nconst isProperNoun = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]+\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  proper noun.\n  Example:\n  isProperNoun(\"Aaa\") ➞ true\n  isProperNoun(\"Bb\") ➞ true\n  isProperNoun(\"Cc\") ➞ true\n  isProperNoun(\"\") ➞ false\n  */\nconst isProperAdjective = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]+\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  proper noun.\n  Example:\n  isProperNoun(\"Aaa\") ➞ true\n  isProperNoun(\"Bb\") ➞ true\n  isProperNoun(\"Cc\") ➞ true\n  isProperNoun(\"\") ➞ false\n  */\nconst isProperAdverb = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]+\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  proper noun.\n  Example:\n  isProperNoun(\"Aaa\") ➞ true\n  isProperNoun(\"Bb\") ➞ true\n  isProperNoun(\"Cc\") ➞ true\n  isProperNoun(\"\") ➞ false\n  */\nconst isProperVerb = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]+\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  proper noun.\n  Example:\n  isProperNoun(\"Aaa\") ➞ true\n  isProperNoun(\"Bb\") ➞ true\n  isProperNoun(\"Cc\") ➞ true\n  isProperNoun(\"\") ➞ false\n  */\nconst isProperAdjectiveAndProperNoun = (txt) => {\n  txt = txt.toLowerCase();\n  return /^[a-z]+\\w*$/.test(txt);\n}\n\n/*\n  Create a function that returns true if a given string is a \n  proper noun.\n  "}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length < 2) return -1;\n  let left = 0, right = arr.length - 1, middle;\n  while (left < right) {\n    middle = Math.floor((left + right) / 2);\n    if (arr[middle] >= arr[left]) {\n      right = middle;\n    } else {\n      left = middle + 1;\n    }\n  }\n  return left;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = -Infinity;\n  let min = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max = Math.max(lst[i], max);\n    }\n    else {\n      min = Math.min(lst[i], min);\n    }\n  }\n  return [max, min];\n};\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([]));\nconsole.log(largestSmallestIntegers([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n  switch(typeof a){\n    case 'number':\n      switch(typeof b){\n        case 'number':\n          if(a>b) return a\n          else return b\n        case'string':\n          if(a>b) return b\n          else return a\n      }\n      break\n    case'string':\n      switch(typeof b){\n        case 'number':\n          if(a>b) return a\n          else return b\n        case'string':\n          if(a>b) return b\n          else return a\n      }\n      break\n  }\n}\n\nconst compareOneTwo= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneThree= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneFour= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneFive= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneSix= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneSeven= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneEight= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneNine= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneTen= (a, b)=>{\n  if(typeof a === 'number'){\n    if(typeof b === 'number'){\n      if(a>b) return a\n      else return b\n    }else{\n      if(a>b) return b\n      else return a\n    }\n  }else{\n    if(typeof b === 'number'){\n      if(a>b) return b\n      else return a\n    }else{\n      if(a>b) return a\n      else return b\n    }\n  }\n}\n\nconst compareOneEleven= (a, b)=>{\n  "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    const sum = n + n + n + n\n    return sum === n * 4\n  } else {\n    return false\n  }\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  return (n === 1)? 1 : (n === 2)? 2 : (n === 3)? 6 : (n === 4)? 24 : (n === 5)? 120 : (n === 6)? 720 : (n === 7)? 5040 : (n === 8)? 40320 : (n === 9)? 362880 : (n === 10)? 3628800 : (n === 11)? 39916800 : (n === 12)? 479001600 : (n === 13)? 6227020800 : (n === 14)? 87178291200 : (n === 15)? 1307674368000 : (n === 16)? 20922789888000 : (n === 17)? 355687428096000 : (n === 18)? 6402373705728000 : (n === 19)? 121645100408832000 : (n === 20)? 2432902008176640000 : (n === 21)? 51090942171709440000 : (n === 22)? 1124000727777607680000 : (n === 23)? 25852016738884976640000 : (n === 24)? 620448401733239439360000 : (n === 25)? 15511210043330985984000000 : (n === 26)? 402653184486101009328000000 : (n === 27)? 8046645640449873658656000000 : (n === 28)? 265252859812191058624000000 : (n === 29)? 82228386541779228640000000 : (n === 30)? 2199023255552118180512000000 : (n === 31)? 4294967296 : 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    let _text = text.replace(/ /g, \"_\");\n    if (_text.indexOf(\" \")!== -1) {\n        if (_text.indexOf(\"  \") === -1) {\n            _text = _text.replace(/ /g, \"-\");\n        } else {\n            _text = _text.replace(/ /g, \"-\");\n        }\n    }\n    return _text;\n}\n\n/*\n  Given a string text, replaces all underscores in it with spaces\n   and if a string had more than 2 consecutive underscores,\n   then replaced all consecutive underscores with spaces\n  \n   fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\" Example_2\") == \"Example 2\"\n  fixUnderscores(\" Example_3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n    let _text = text.replace(/_/g, \" \");\n    if (_text.indexOf(\"_\")!== -1) {\n        if (_text.indexOf(\"__\") === -1) {\n            _text = _text.replace(/_/g, \"-\");\n        } else {\n            _text = _text.replace(/_/g, \"-\");\n        }\n    }\n    return _text;\n}\n\n/*\n  Given a string text, replaces all consecutive spaces with underscores\n  and if a string had more than 2 consecutive spaces,\n  then replaced all consecutive underscores with spaces\n  \n   fixSpacesUnderscores(\"Example\") == \"Example\"\n  fixSpacesUnderscores(\"Example 1\") == \"Example 1\"\n  fixSpacesUnderscores(\" Example 2\") == \"Example 2\"\n  fixSpacesUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpacesUnderscores = (text) => {\n    let _text = text.replace(/ /g, \"_\");\n    if (_text.indexOf(\" \")!== -1) {\n        if (_text.indexOf(\"  \") === -1) {\n            _text = _text.replace(/ /g, \"-\");\n        } else {\n            _text = _text.replace(/ /g, \"-\");\n        }\n    }\n    return _text;\n}\n\nmodule.exports = {\n    fixSpaces: fixSpaces,\n    fixUnderscores: fixUnderscores,\n    fixSpacesUnderscores: fixSpacesUnderscores\n};<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_file_name_pattern = /^[a-zA-Z][a-zA-Z0-9._-]*$/;\n  const valid_file_name = new RegExp(valid_file_name_pattern);\n  if (file_name === null || file_name === undefined) return \"\";\n  if (file_name.length > 3) return \"No\";\n  const valid_dot = /^[a-zA-Z][a-zA-Z0-9._-]*\\./;\n  const valid_file_name_and_dot = new RegExp(valid_file_name_pattern + \"\\\\.\" + valid_dot);\n  if (file_name.match(valid_file_name) === null) return \"No\";\n  if (file_name.match(valid_file_name_and_dot) === null) return \"No\";\n  return \"Yes\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for(let n of lst){\n    if(n%3 === 0){\n      sum += n*n;\n    }\n    if(n%4 === 0){\n      sum += n*n*n;\n    }\n  }\n  return sum;\n}\n\nconst test = sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]);\n\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  // Complete the 'wordsInSentence' function below.\n  const primeNumbers = getPrimeNumbers(1000);\n\n  const words = sentence.split(' ');\n  const newSentence = [];\n\n  for(let i = 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n      const num = getPrimeNumber(words[i].length);\n      let k = 0;\n\n      while(j+k < words[i].length){\n        newSentence.push(words[i].charAt(j+k));\n        k++;\n      }\n    }\n  }\n\n  return newSentence.join(' ');\n};\n\n/*\n  Write your code below\n*/\n\nconst getPrimeNumbers = (limit) => {\n  const primeNumbers = [];\n\n  for(let i = 0; i < limit; i++){\n    let j = 0;\n\n    while(j < primeNumbers.length){\n      if(primeNumbers[j] === i){\n        break;\n      }\n\n      j++;\n    }\n\n    if(j === primeNumbers.length){\n      primeNumbers.push(i);\n    }\n  }\n\n  return primeNumbers;\n};\n\nconst getPrimeNumber = (num) => {\n  const primeNumbers = getPrimeNumbers(num);\n  let k = 0;\n\n  while(primeNumbers[k] <= num){\n    k++;\n  }\n\n  return primeNumbers[k];\n};\n\nconsole.log(wordsInSentence(\"This is a test\"));\nconsole.log(wordsInSentence(\"lets go for swimming\"));<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n    if(x === n) return true\n    if(x === \"0\") return false\n    if(n === \"0\") return false\n    return x.toString().split(\"/\")[0].toString().length === x.toString().split(\"/\")[1].toString().length \n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  pair of digits in the input string has been reversed. \n*/\nconst reverse = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  character has been reversed. \n*/\nconst reverseChar = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  pair of letters in the input string has been reversed. \n*/\nconst reverseLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  word has been reversed. \n*/\nconst reverseWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  character in each word has been reversed. \n*/\nconst reverseChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  letter has been reversed. \n*/\nconst reverseLettersInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\n/*\n  Write a function that takes a string as a parameter and returns a new string where each \n  character has been reversed. \n*/\nconst reverseLettersInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseLettersInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseLettersInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseLettersInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseLettersInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInLetters = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseLettersInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInWords = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseWordsInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseLettersInChars = (str) => {\n    return str.split(\"\").reverse().join(\"\")\n}\n\nconst reverseCharsInLetters = (str"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const length = nums.length;\n  const points = [];\n  const point = {};\n\n  for (let i = 0; i < length; i += 1) {\n    points.push(nums[i]);\n  }\n\n  points.sort(function (a, b) {\n    return a - b;\n  });\n\n  for (let i = 0; i < length; i += 1) {\n    point[points[i]] = i;\n  }\n\n  for (let i = 0; i < length; i += 1) {\n    sorted[point[nums[i]]] = nums[i];\n  }\n\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 10) === 1 && (nums[i] % 11) === 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); //1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); //2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for(let i=0; i<n; i++){\n    a[i] = i*i-i+1;\n  }\n  let maxTriples = 0;\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        if(a[i]+a[j]+a[k] % 3 === 0){\n          maxTriples++;\n        }\n      }\n    }\n  }\n  return maxTriples;\n}\n\n/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of quadruples (a[i], a[j], a[k], a[l]) of a where i <j <k <l, \n   and a[i]+ a[j]+ a[k]+ a[l] was a multiple of 4.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quadruple is (1, 7, 13, 21).\n  */\nconst getMaxQuadruples = (n) => {\n  let a = new Array(n);\n  for(let i=0; i<n; i++){\n    a[i] = i*i-i+1;\n  }\n  let maxQuadruples = 0;\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        for(let l=k+1; l<n; l++){\n          if(a[i]+a[j]+a[k]+a[l] % 4 === 0){\n            maxQuadruples++;\n          }\n        }\n      }\n    }\n  }\n  return maxQuadruples;\n}\n\n/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of 5-tuples (a[i], a[j], a[k], a[l], a[m]) of a where i <j <k <l <m, \n   and a[i]+ a[j]+ a[k]+ a[l]+ a[m] was a multiple of 5.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid 5-tuple is (1, 7, 13, 21, 1).\n  */\nconst getMaxFiveTuples = (n) => {\n  let a = new Array(n);\n  for(let i=0; i<n; i++){\n    a[i] = i*i-i+1;\n  }\n  let maxFiveTuples = 0;\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        for(let l=k+1; l<n; l++){\n          for(let m=l+1; m<n; m++){\n            if(a[i]+a[j]+a[k]+a[l]+a[m] % 5 === 0){\n              maxFiveTuples++;\n            }\n          }\n        }\n      }\n    }\n  }\n  return maxFiveTuples;\n}\n\n/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of 6-tuples (a[i], a[j], a[k], a[l], a[m], a[n]) of a where i <j <k <l <m <n, \n   and a[i]+ a[j]+ a[k]+ a[l]+ a[m]+ a[n] was a multiple of 6.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid 6-tuple is (1, 7, 13, 21, 1, 21).\n  */\nconst getMaxSixTuples = (n) => {\n  let a = new Array(n);\n  for(let i=0; i<n; i++){\n    a[i] = i*i-i+1;\n  }\n  let maxSixTuples = 0;\n  for(let i=0; i<n; i++){\n    for(let j=i+1; j<n; j++){\n      for(let k=j+1; k<n; k++){\n        for(let l=k+1; l<n; l++){\n          for(let m=l+1; m<n; m++){\n            for(let n=m+1; n<n; n++){\n              if(a[i]+a[j]+a[k]+a[l]+a[m]+a[n] % 6 === 0){\n                maxSixTuples++;\n              }\n            }\n          }\n        }\n      }\n    }\n  "}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let i, j;\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let list = [];\n  for (i = 0; i < planets.length; i++) {\n    for (j = 0; j < planets.length; j++) {\n      let temp = bf(planet1, planets[i]);\n      if (temp!== undefined) {\n        list.push(temp);\n      }\n    }\n  }\n  list.sort((a, b) => {\n    let ai = distance(planet1, a);\n    let bi = distance(planet1, b);\n    if (ai > bi) {\n      return 1;\n    }\n    else if (ai < bi) {\n      return -1;\n    }\n    else {\n      return 0;\n    }\n  });\n  return list;\n};\n\nbf(\"Mercury\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n/*\n  1. Let your function return an empty tuple if the two inputs are not correct.\n  2. Your function should return an empty tuple if the distance between two \n   planets is less than 0.\n  3. Your function should return the two closest planet orbit to the sun. \n  4. Your function should return the two closest planet orbit to the sun. \n  5. Your function should return the two closest planet orbit to the sun. \n  6. Your function should return the two closest planet orbit to the sun. \n  7. Your function should return the two closest planet orbit to the sun. \n  8. Your function should return the two closest planet orbit to the sun. \n  9. Your function should return the two closest planet orbit to the sun. \n  10. Your function should return the two closest planet orbit to the sun. \n  11. Your function should return the two closest planet orbit to the sun. \n  12. Your function should return the two closest planet orbit to the sun. \n  13. Your function should return the two closest planet orbit to the sun. \n  14. Your function should return the two closest planet orbit to the sun. \n  15. Your function should return the two closest planet orbit to the sun. \n  16. Your function should return the two closest planet orbit to the sun. \n  17. Your function should return the two closest planet orbit to the sun. \n  18. Your function should return the two closest planet orbit to the sun. \n  19. Your function should return the two closest planet orbit to the sun. \n  20. Your function should return the two closest planet orbit to the sun. \n  21. Your function should return the two closest planet orbit to the sun. \n  22. Your function should return the two closest planet orbit to the sun. \n  23. Your function should return the two closest planet orbit to the sun. \n  24. Your function should return the two closest planet orbit to the sun. \n  25. Your function should return the two closest planet orbit to the sun. \n  26. Your function should return the two closest planet orbit to the sun. \n  27. Your function should return the two closest planet orbit to the sun. \n  28. Your function should return the two closest planet orbit to the sun. \n  29. Your function should return the two closest planet orbit to the sun. \n  30. Your function should return the two closest planet orbit to the sun. \n  31. Your function should return the two closest planet orbit to the sun. \n  32. Your function should return the two closest planet orbit to the sun. \n  33. Your function should return the two closest planet orbit to the sun. \n  34. Your function should return the two closest planet orbit to the sun. \n  35. Your function should return the two closest planet orbit to the sun. \n  36. Your function should return the two closest planet orbit to the sun. \n  37. Your function should return the two closest planet orbit to the sun. \n  38. Your function should return the two closest planet orbit to the sun. \n  39. Your function should return the two closest planet orbit to the sun. \n  40. Your function should return the two closest planet orbit to the sun. \n  41. Your function should return the two closest planet orbit to the sun. \n  42. Your function should return the two closest planet orbit to the sun. \n  43. Your function should return the two closest planet orbit to the sun. \n  44. Your function should return the two closest planet orbit to the sun. \n  45. Your function should return the two closest planet orbit to the sun. \n  46. Your function should return the two closest planet orbit to the sun. \n  47. Your function should return the two closest planet orbit to the sun. \n  48. Your function should return the two closest planet orbit to the sun. \n  49. Your function should return the two closest planet orbit to the sun. \n  50. Your function should return the two closest planet orbit to the sun. \n  51. Your function should return the two closest planet orbit to the sun. \n  52. Your function should return the two closest planet orbit to the sun. \n  53. Your function should return the two closest planet orbit to the sun. \n  54. Your function should return the two closest planet orbit to the sun. \n  55. Your function should return the two closest planet orbit to the sun. \n  56. Your function should return the two closest planet orbit to the sun. \n"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  if (lst.length === 0) return []\n  if (lst.length === 1) return [lst[0]]\n\n  let sorted = lst.slice(0)\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) return a.length - b.length\n    return a > b? 1 : -1\n  })\n  let s = 0\n  for (let i = 0; i < sorted.length; i++) {\n    s += sorted[i].length\n    if (s % 2 === 1) {\n      sorted.splice(i, 1)\n      i--\n    }\n  }\n  return sorted\n}\n\nconst lst = [\"aa\", \"a\", \"aaa\"]\nconsole.log(sortedListSum(lst))\n\n/*\n\nfunction sortedListSum(lst) {\n  let len = lst.length\n  if (len === 0) return []\n  if (len === 1) return [lst[0]]\n  \n  let sorted = lst.slice(0)\n  sorted.sort((a, b) => {\n    if (a.length!== b.length) return a.length - b.length\n    return a > b? 1 : -1\n  })\n  \n  let sum = 0\n  let s = 0\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i].length\n    if (sum % 2 === 1) {\n      sorted.splice(i, 1)\n      i--\n    }\n  }\n  return sorted\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\n\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = n => {\n  if (n === 1) {\n    return false;\n  }\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n  if(!lst) return 0;\n  let res = 0;\n  lst.filter(a=>isOdd(a)).forEach(x=>res+=x*x);\n  return res;\n};\n \nconst isOdd = (n)=> {\n  return n%2 === 1;\n};\n \nconst doubleTheDifference = (lst)=>{\n  if(!lst) return 0;\n  let res = 0;\n  lst.filter(a=>isOdd(a)).forEach(x=>res+=x*x);\n  return res;\n};\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const matches = []\n\n  // create an array of the same length as the guess\n  for (let i = 0; i < guessLength; i++) {\n    matches.push(0)\n  }\n\n  // iterate through the game array and see how far off each guess is\n  for (let i = 0; i < gameLength; i++) {\n    // calculate the difference between the guess and the score\n    let difference = game[i] - guess[i]\n\n    // if the guess was correct, set the value to 0\n    if (game[i] === guess[i]) {\n      matches[i] = 0\n    } else {\n      // otherwise, set the value to the difference\n      matches[i] = difference\n    }\n  }\n\n  return matches\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let cap_count = 0;\n  let sm_count = 0;\n  let strength = 0;\n\n  for (let extension of extensions) {\n    if (extension.length > 0) {\n      strength = 0;\n      if (extension[0].toUpperCase() === extension[0]) {\n        strength = 1;\n      }\n      cap_count += strength;\n      strength = 0;\n      if (extension[0].toLowerCase() === extension[0]) {\n        strength = 1;\n      }\n      sm_count += strength;\n    }\n  }\n  cap_count = cap_count > sm_count? cap_count : sm_count;\n  strength = cap_count - sm_count;\n  return class_name + '.' + strongestExtension(extensions[0], extensions.slice(1));\n};\n\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC'])); // my_class.Be\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'BB'])); // my_class.BB\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC', 'DD'])); // my_class.DD\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    let n=a1.length;\n    while(i<n){\n      if(b1.indexOf(a1[i])>-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\n\nconst wordPattern = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<b1.length){\n      if(a1.indexOf(b1[i])>-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst palindrome = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<b1.length){\n      if(a1[b1.indexOf(a1[i])+1]!=a1[b1.indexOf(a1[i])-1]){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\n\nconst anagram = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(b1.indexOf(a1[i])>-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\n\nconst isAnagram = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(b1.indexOf(a1[i])==-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst isPalindrome = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(a1[b1.indexOf(a1[i])+1]!=a1[b1.indexOf(a1[i])-1]){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst isCyclicPattern = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(b1.indexOf(a1[i])>-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst isSubstring = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(b1.indexOf(a1[i])==-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst wordPalindrome = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(a1[b1.indexOf(a1[i])+1]!=a1[b1.indexOf(a1[i])-1]){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst letterPattern = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(b1.indexOf(a1[i])==-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst letterPalindrome = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(a1[b1.indexOf(a1[i])+1]!=a1[b1.indexOf(a1[i])-1]){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst letterCyclic = (a, b) => {\n    let a1=a.split(\"\");\n    let b1=b.split(\"\");\n    let i=0;\n    let flag=true;\n    while(i<a1.length){\n      if(b1.indexOf(a1[i])==-1){\n        flag=false;\n        break;\n      }\n      i++;\n    }\n    return flag;\n}\n\nconst letterCyclicPattern = (a, b) => {\n    let a1=a"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const count = (num) => {\n    const arr = [];\n    while (num) {\n      arr.push(num % 10);\n      num = Math.floor(num / 10);\n    }\n    return (arr.reduce((a, b) => a + b, 0) % 2);\n  };\n  return count(num);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let result = '',\n        i,\n        digit;\n    for (i = 1; i <= number; i++) {\n        digit = number % 10;\n        if (digit == 0) {\n            result += '0';\n        }\n        else if (digit == 1) {\n            result += 'i';\n        }\n        else if (digit == 5) {\n            result += 'v';\n        }\n        else if (digit == 4) {\n            result += 'ix';\n        }\n        else if (digit == 9) {\n            result += 'x';\n        }\n        else {\n            result += `x${digit}`;\n        }\n        number = number / 10;\n    }\n    return result;\n}\n\nconsole.log(intToMiniRoman(9));\nconsole.log(intToMiniRoman(14));\nconsole.log(intToMiniRoman(27));\nconsole.log(intToMiniRoman(89));\nconsole.log(intToMiniRoman(89));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(Math.acos((a * a + b * b - c * c) / (2 * a * b))) === Math.PI / 2;\n};\n\nconst rightAngleTriangleCount = (a, b, c) => {\n  return (\n    (a == c)?\n      Math.min(a, b, c) :\n      Math.min(Math.min(a, b, c), Math.max(a, b, c))\n  );\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && rightAngleTriangleCount(a, b, c) === 3;\n};\n\nexport { isRightAngleTriangle };\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n  let sortedWords=words.slice().sort();\n  let maxCount=1;\n  let maxWord=sortedWords[0];\n  let currentCount=1;\n  sortedWords.forEach( (word,i)=>{\n    if(word===maxWord)return;\n    if(word.length>maxWord.length) return;\n    if(word.length===maxWord.length && word.length===currentCount) {\n      if(word>maxWord)return;\n      else {\n        maxWord=word;\n        maxCount=currentCount;\n      }\n    }\n    currentCount++;\n  });\n  return maxWord;\n};\n\nconst findMax = (words)=>{\n  let sortedWords=words.slice().sort();\n  let maxCount=1;\n  let maxWord=sortedWords[0];\n  let currentCount=1;\n  sortedWords.forEach( (word,i)=>{\n    if(word===maxWord)return;\n    if(word.length>maxWord.length) return;\n    if(word.length===maxWord.length && word.length===currentCount) {\n      if(word>maxWord)return;\n      else {\n        maxWord=word;\n        maxCount=currentCount;\n      }\n    }\n    currentCount++;\n  });\n  return maxWord;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    if (remaining > need) {\n      return [need, remaining - need];\n    } else {\n      return [number, remaining];\n    }\n  }\n  return [number, remaining];\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n];\n\nconst test2 = [\n  [3, 4, 5],\n  [5, 4, 1],\n  [6, 2, 2],\n  [3, 3, 2],\n];\n\nconst test3 = [\n  [0, 3, 3],\n  [3, 0, 3],\n  [0, 0, 0],\n];\n\nconst test4 = [\n  [1, 2, 3],\n  [1, 2, 2],\n  [1, 3, 2],\n];\n\nconst test5 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test6 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test7 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test8 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test9 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test10 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test11 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test12 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test13 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test14 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test15 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test16 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test17 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test18 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test19 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test20 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test21 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test22 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test23 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test24 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test25 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test26 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test27 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test28 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test29 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test30 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test31 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test32 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  [1, 1, 1],\n];\n\nconst test33 = [\n  [1, 1, 1],\n  [1, 1, 1],\n  ["}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0];\n  }\n\n  let result = operand[0];\n\n  operand.slice(1).forEach((element) => {\n    for (let i = 0; i < operator.length; i++) {\n      result = operator[i][0](result, element);\n    }\n  });\n\n  return result;\n};\n\nconst doFloor = (element, factor) => {\n  if (factor > 1) {\n    return Math.floor(element / factor) * factor;\n  }\n\n  return Math.floor(element);\n};\n\nconst doExponent = (element, base) => {\n  let factor = Math.pow(base, element);\n  return Math.floor(factor);\n};\n\nconst doFloorDiv = (a, b) => {\n  if (b === 0) {\n    return Infinity;\n  }\n\n  return Math.floor(a / b);\n};\n\nconst doAdd = (a, b) => {\n  return a + b;\n};\n\nconst doSub = (a, b) => {\n  return a - b;\n};\n\nconst doMult = (a, b) => {\n  return a * b;\n};\n\nconst doDiv = (a, b) => {\n  return a / b;\n};\n\nconst doPow = (a, b) => {\n  return Math.pow(a, b);\n};\n\nconst doAlgebraic = (operator, operand) => {\n  const operatorList = operator.slice();\n  const operandList = operand.slice();\n\n  const operandLength = operandList.length;\n\n  if (operandLength === 0) {\n    return 0;\n  }\n\n  let result = operandList[0];\n\n  operandList.slice(1).forEach((element) => {\n    for (let i = 0; i < operatorList.length; i++) {\n      result = operatorList[i][1](result, element);\n    }\n  });\n\n  return result;\n};\n\nconst doFloorDiv = (a, b) => {\n  return Math.floor(a / b);\n};\n\nconst doExponent = (element, base) => {\n  let factor = Math.pow(base, element);\n  return Math.floor(factor);\n};\n\nconst doAlgebraic = (operator, operand) => {\n  const operatorList = operator.slice();\n  const operandList = operand.slice();\n\n  const operandLength = operandList.length;\n\n  if (operandLength === 0) {\n    return 0;\n  }\n\n  let result = operandList[0];\n\n  operandList.slice(1).forEach((element) => {\n    for (let i = 0; i < operatorList.length; i++) {\n      result = operatorList[i][1](result, element);\n    }\n  });\n\n  return result;\n};\n\nmodule.exports = {\n  doAlgebra,\n  doFloor,\n  doExponent,\n  doFloorDiv,\n  doAdd,\n  doSub,\n  doMult,\n  doDiv,\n  doPow,\n  doAlgebraic\n};<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  let result = \"\";\n  while (i < j) {\n    if (s[i] === s[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      if (s[i].toLowerCase() === s[j].toUpperCase()) {\n        result += s[i].toUpperCase();\n        i++;\n        j--;\n      } else {\n        result += s[i].toLowerCase();\n        i++;\n        j--;\n      }\n    }\n  }\n  if (s.length === 0) {\n    return result;\n  }\n  while (i < len) {\n    result += s[i];\n    i++;\n  }\n  return result;\n};\n\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex');\n  return digest;\n}\n\n/*\n  Given a string 'text', return the hash of the text, but in lowercase.\n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToLowerMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex').toLowerCase();\n  return digest;\n}\n\n/*\n  Given a string 'text', return the hash of the text, but in uppercase.\n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3E25960A79DBC69B674CD4EC67A72C62'\n  */\nconst stringToUpperMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex').toUpperCase();\n  return digest;\n}\n\n/*\n  Given a string 'text', return its MD5 hash, but as an array of 16 bytes.\n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Array = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex');\n  const bytes = digest.substr(0, 16);\n  return bytes;\n}\n\n/*\n  Given a string 'text', return its MD5 hash, but as an array of 16 bytes\n   in lowercase.\n   If 'text' was an empty string, return null.\n\n  >>> stringToLowerMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToLowerMd5Array = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex').toLowerCase();\n  const bytes = digest.substr(0, 16);\n  return bytes;\n}\n\n/*\n  Given a string 'text', return its MD5 hash, but as an array of 16 bytes\n   in uppercase.\n   If 'text' was an empty string, return null.\n\n  >>> stringToUpperMd5('Hello world') == '3E25960A79DBC69B674CD4EC67A72C62'\n  */\nconst stringToUpperMd5Array = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex').toUpperCase();\n  const bytes = digest.substr(0, 16);\n  return bytes;\n}\n\n/*\n  Given a string 'text', return its MD5 hash, but as an array of 16 bytes\n   in hexadecimal format, but with lowercase letters.\n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToLowerHexMd5Array = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex').toLowerCase();\n  const bytes = digest.substr(0, 16);\n  return bytes;\n}\n\n/*\n  Given a string 'text', return its MD5 hash, but as an array of 16 bytes\n   in hexadecimal format, but with uppercase letters.\n   If 'text' was an empty string, return null.\n\n  >>> stringToUpperHexMd5Array('Hello world') == '3E25960A79DBC69B674CD4EC67A72C62'\n  */\nconst stringToUpperHexMd5Array = (text) => {\n  const md5 = crypto.createHash('md5');\n  const digest = md5.update(text).digest('hex').toUpperCase();\n  const bytes = digest.substr(0, 16);\n  return bytes;\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToLowerMd5,\n  stringToUpperMd5,\n  stringToMd5Array,\n  stringToLowerMd5Array,\n  stringToUpperMd5Array,\n  stringToLowerHexMd5Array,\n  stringToUpperHexMd5Array,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const max = b - a + 1;\n  const result = [];\n\n  for (let i = a; i <= max; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nconst isPalindrome = (str) => {\n  if (str === null || str === undefined) {\n    return false;\n  }\n\n  const arr = str.split('');\n  const len = arr.length;\n\n  let result = true;\n  for (let i = 0; i < len / 2; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      result = false;\n      break;\n    }\n  }\n\n  return result;\n};\n\nconst isPrime = (num) => {\n  let numStr = num + '';\n  let i = 2;\n\n  while (i < numStr.length) {\n    if (numStr.charAt(i) === numStr.charAt(0) &&\n      numStr.indexOf(numStr.charAt(0), i + 1)!== -1) {\n      return false;\n    }\n\n    i += 2;\n  }\n\n  return true;\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  return n * factorial(n - 1);\n};\n\nconst nthPrime = (n) => {\n  const result = [];\n\n  for (let i = 0; i < n; i++) {\n    const isPrime = isPrime(i + 2);\n\n    if (isPrime) {\n      result.push(i + 2);\n    }\n  }\n\n  return result;\n};\n\nconst sumOfPrimes = (n) => {\n  let result = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const primes = nthPrime(i);\n\n    for (let j = 0; j < primes.length; j++) {\n      result += primes[j];\n    }\n  }\n\n  return result;\n};\n\nconsole.log(sumOfPrimes(10000));\nconsole.log(factorial(10000));\n\nconst number = (n) => {\n  const result = sumOfPrimes(n);\n  const sum = factorial(n);\n  return result / sum;\n};\n\nconst numberPrime = (n) => {\n  const result = sumOfPrimes(n);\n  const sum = factorial(n);\n  return result / sum;\n};\n\nconsole.log(numberPrime(10000));\n<|endoftext|>"}
